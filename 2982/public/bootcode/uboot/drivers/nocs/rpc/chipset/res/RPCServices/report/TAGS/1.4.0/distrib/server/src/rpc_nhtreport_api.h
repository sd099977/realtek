/* DO NOT EDIT THIS FILE!!!
 * This file was automatically generated by msgbuf compiler!
 *
 * This file contains the msgbuf structure definitions associated
 * to the package nhtreport.proto
 */

#ifndef _RPC_API_NHTREPORT_H_
#define _RPC_API_NHTREPORT_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*****************************************************************************
 * include files                                                             *
 ****************************************************************************/

#include "src/msgbuf_nhtreport.h"


/* RPC method: rpc_nhtreport_tn_report_error
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtreport_tn_report_error (
  TMsgBuf_rpcHandler                   xRpcHandler,
  const TNhtreport_ReportErrorInMsg  * pxInputMessage,
  TNhtreport_EmptyMsg               ** pxOutputMessage );


/* RPC method: rpc_nhtreport_tn_report_trace
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtreport_tn_report_trace (
  TMsgBuf_rpcHandler                   xRpcHandler,
  const TNhtreport_ReportTraceInMsg  * pxInputMessage,
  TNhtreport_EmptyMsg               ** pxOutputMessage );


/* RPC method: rpc_nhtreport_tn_report_info
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtreport_tn_report_info (
  TMsgBuf_rpcHandler                  xRpcHandler,
  const TNhtreport_ReportInfoInMsg  * pxInputMessage,
  TNhtreport_EmptyMsg              ** pxOutputMessage );


/* RPC method: rpc_nhtreport_hc_nht_setReportLevel
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtreport_hc_nht_setReportLevel (
  TMsgBuf_rpcHandler            xRpcHandler,
  const TNhtreport_SizeInMsg  * pxInputMessage,
  TNhtreport_EmptyMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtreport_tn_report_stdout
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtreport_tn_report_stdout (
  TMsgBuf_rpcHandler                  xRpcHandler,
  const TNhtreport_ReportTextInMsg  * pxInputMessage,
  TNhtreport_EmptyMsg              ** pxOutputMessage );


/* RPC method: rpc_nhtreport_tn_report_stderr
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtreport_tn_report_stderr (
  TMsgBuf_rpcHandler                  xRpcHandler,
  const TNhtreport_ReportTextInMsg  * pxInputMessage,
  TNhtreport_EmptyMsg              ** pxOutputMessage );


/* RPC method: rpc_nhtreport_tn_report_ftrace
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtreport_tn_report_ftrace (
  TMsgBuf_rpcHandler                    xRpcHandler,
  const TNhtreport_ReportFTraceInMsg  * pxInputMessage,
  TNhtreport_EmptyMsg                ** pxOutputMessage );


/* RPC method: rpc_nhtreport_hc_enable_ftrace
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtreport_hc_enable_ftrace (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtreport_EmptyMsg  * pxInputMessage,
  TNhtreport_EmptyMsg       ** pxOutputMessage );


/* RPC method: rpc_nhtreport_hc_disable_ftrace
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtreport_hc_disable_ftrace (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtreport_EmptyMsg  * pxInputMessage,
  TNhtreport_EmptyMsg       ** pxOutputMessage );


/* RPC method: rpc_nhtreport_hc_restore_ftrace
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtreport_hc_restore_ftrace (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtreport_EmptyMsg  * pxInputMessage,
  TNhtreport_EmptyMsg       ** pxOutputMessage );


/* RPC method: rpc_nhtreport_hc_getCmServerVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtreport_hc_getCmServerVersion (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtreport_EmptyMsg    * pxInputMessage,
  TNhtreport_ReportTextOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtreport_hc_getNhtServerComponentVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtreport_hc_getNhtServerComponentVersion (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtreport_EmptyMsg    * pxInputMessage,
  TNhtreport_ReportTextOutMsg ** pxOutputMessage );



#ifdef __cplusplus
}
#endif /* __cplusplus */


#endif /* _RPC_API_NHTREPORT_H_ */
