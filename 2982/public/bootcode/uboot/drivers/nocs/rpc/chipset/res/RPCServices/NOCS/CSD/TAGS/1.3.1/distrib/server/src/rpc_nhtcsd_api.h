/* DO NOT EDIT THIS FILE!!!
 * This file was automatically generated by msgbuf compiler!
 *
 * This file contains the msgbuf structure definitions associated
 * to the package nhtcsd.proto
 */

#ifndef _RPC_API_NHTCSD_H_
#define _RPC_API_NHTCSD_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*****************************************************************************
 * include files                                                             *
 ****************************************************************************/

#include "src/msgbuf_nhtcsd.h"


/* RPC method: rpc_nhtcsd_hc_nht_initializeResourceUsage
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_initializeResourceUsage (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtcsd_EmptyMsg   * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_terminateResourceUsage
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_terminateResourceUsage (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtcsd_EmptyMsg   * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getNhtCsdApiVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getNhtCsdApiVersion (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_VersionRevisionOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getCsdApiVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getCsdApiVersion (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_VersionRevisionOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getNhtCsdSoftwareVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getNhtCsdSoftwareVersion (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_StringOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getCsdSoftwareVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getCsdSoftwareVersion (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_StringOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getCsdStatusOffsetValue
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getCsdStatusOffsetValue (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_NumberOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getNocsCertificationVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getNocsCertificationVersion (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_VersionRevisionOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getChipManufacturer
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getChipManufacturer (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_StringOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getChipName
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getChipName (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_StringOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getChipRevision
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getChipRevision (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_StringOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getChipExtension
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getChipExtension (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_StringOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getProtectingKeyNumber
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getProtectingKeyNumber (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_NumberOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getNuid
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getNuid (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getNuid64
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getNuid64 (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getBootModeNumber
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getBootModeNumber (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_NumberOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getBootModeDescriptorSet
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getBootModeDescriptorSet (
  TMsgBuf_rpcHandler                    xRpcHandler,
  const TNhtcsd_BootModeDescSetInMsg  * pxInputMessage,
  TNhtcsd_BootModeDescSetOutMsg      ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getBootModeDescriptor
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getBootModeDescriptor (
  TMsgBuf_rpcHandler                 xRpcHandler,
  const TNhtcsd_BootModeDescInMsg  * pxInputMessage,
  TNhtcsd_BootModeDescOutMsg      ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_setBootMode
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_setBootMode (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_BootModeIdInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg       ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getBootMode
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getBootMode (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_BootModeIdOutMsg      ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_enableSCS
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_enableSCS (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtcsd_EmptyMsg   * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getSCSactivationFlag
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getSCSactivationFlag (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_ActivationFlagOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_deactivateKeyLadder
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_deactivateKeyLadder (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtcsd_EmptyMsg   * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getKeyLadderDeactivationFlag
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getKeyLadderDeactivationFlag (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_ActivationFlagOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_csdSetScsTotalAreaSize
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_csdSetScsTotalAreaSize (
  TMsgBuf_rpcHandler                         xRpcHandler,
  const TNhtcsd_ScsTotalAreaSizeOnlyInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg                 ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_csdGetScsTotalAreaSize
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_csdGetScsTotalAreaSize (
  TMsgBuf_rpcHandler                xRpcHandler,
  const TNhtcsd_OptOutput1InMsg   * pxInputMessage,
  TNhtcsd_ScsTotalAreaSizeOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getSCSExpectedPvBufferLen
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getSCSExpectedPvBufferLen (
  TMsgBuf_rpcHandler                xRpcHandler,
  const TNhtcsd_GetScsPvLenInMsg  * pxInputMessage,
  TNhtcsd_SizeOutMsg             ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_csdSetSCSPv
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_csdSetSCSPv (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtcsd_SetScsPvInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg     ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_csdGetSCSPv
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_csdGetSCSPv (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtcsd_GetScsPvInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg         ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_setStbCaSn
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_setStbCaSn (
  TMsgBuf_rpcHandler          xRpcHandler,
  const TNhtcsd_BytesInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getStbCaSn
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getStbCaSn (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_setMarketSegmentId
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_setMarketSegmentId (
  TMsgBuf_rpcHandler          xRpcHandler,
  const TNhtcsd_BytesInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getMarketSegmentId
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getMarketSegmentId (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_setRamUnscrambledStorageSize
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_setRamUnscrambledStorageSize (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtcsd_VarBytesInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg     ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_getRamUnscrambledStorageSizeBufferLen
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_getRamUnscrambledStorageSizeBufferLen (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_SizeOutMsg            ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getRamUnscrambleStorageSize
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getRamUnscrambleStorageSize (
  TMsgBuf_rpcHandler            xRpcHandler,
  const TNhtcsd_GetSizeInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getNuidCheckNumber
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getNuidCheckNumber (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getCSDCDCheckNumber
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getCSDCDCheckNumber (
  TMsgBuf_rpcHandler                     xRpcHandler,
  const TNhtcsd_CheckNumberBytesInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg                 ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getSTBCASNCheckNumber
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getSTBCASNCheckNumber (
  TMsgBuf_rpcHandler                     xRpcHandler,
  const TNhtcsd_CheckNumberBytesInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg                 ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getDataIntegrityCheckNumber
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getDataIntegrityCheckNumber (
  TMsgBuf_rpcHandler                     xRpcHandler,
  const TNhtcsd_CheckNumberBytesInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg                 ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_enableRamScrambling
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_enableRamScrambling (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtcsd_EmptyMsg   * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getScramblingActivationFlag
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getScramblingActivationFlag (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_ActivationFlagOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_enableFlashProtection
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_enableFlashProtection (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtcsd_EmptyMsg   * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getFlashProtectionActivationFlag
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getFlashProtectionActivationFlag (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_ActivationFlagOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_selectDebugInterfaceProtectionLevel
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_selectDebugInterfaceProtectionLevel (
  TMsgBuf_rpcHandler                               xRpcHandler,
  const TNhtcsd_CsdDebugInterfaceAccesModeInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg                       ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getDebugInterfaceProtectionLevel
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getDebugInterfaceProtectionLevel (
  TMsgBuf_rpcHandler                          xRpcHandler,
  const TNhtcsd_OptOutput1InMsg             * pxInputMessage,
  TNhtcsd_CsdDebugInterfaceAccesModeOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_allocateDriverBuffer
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_allocateDriverBuffer (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_SizeInMsg        * pxInputMessage,
  TNhtcsd_CsdBufferHandleOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_deallocateDriverBuffer
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_deallocateDriverBuffer (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtcsd_HandleInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_openR2RSessionHandle
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_openR2RSessionHandle (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_CsdHandleOutMsg       ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_closeR2RSessionHandle
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_closeR2RSessionHandle (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtcsd_HandleInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_encryptDataWithClearTextHostKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_encryptDataWithClearTextHostKey (
  TMsgBuf_rpcHandler                                  xRpcHandler,
  const TNhtcsd_R2rCipherWithClearHostTextKeyInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg                              ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_decryptDataWithClearTextHostKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_decryptDataWithClearTextHostKey (
  TMsgBuf_rpcHandler                                  xRpcHandler,
  const TNhtcsd_R2rCipherWithClearHostTextKeyInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg                              ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_encryptDataWithSecretContentKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_encryptDataWithSecretContentKey (
  TMsgBuf_rpcHandler                                  xRpcHandler,
  const TNhtcsd_R2rCipherWithSecretContentKeyInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg                              ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_decryptDataWithSecretContentKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_decryptDataWithSecretContentKey (
  TMsgBuf_rpcHandler                                  xRpcHandler,
  const TNhtcsd_R2rCipherWithSecretContentKeyInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg                              ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_doMonteCarloTest
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_doMonteCarloTest (
  TMsgBuf_rpcHandler                        xRpcHandler,
  const TNhtcsd_R2rMonteCarloParamsInMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg                    ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_getDvrKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_getDvrKey (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtcsd_OptOutput1InMsg  * pxInputMessage,
  TNhtcsd_BytesOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_tn_ecmCallBack
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtcsd_tn_ecmCallBack (
  TMsgBuf_rpcHandler                xRpcHandler,
  const TNhtcsd_EcmCallBackInMsg  * pxInputMessage,
  TNhtcsd_EmptyMsg               ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_openDscTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_openDscTestRun (
  TMsgBuf_rpcHandler                    xRpcHandler,
  const TNhtcsd_DscTestRunParamInMsg  * pxInputMessage,
  TNhtcsd_CsdHandleOutMsg            ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_closeDscTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_closeDscTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtcsd_HandleInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_startDscTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_startDscTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtcsd_HandleInMsg  * pxInputMessage,
  TNhtcsd_TestStatusOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_waitOnDscTestRunCompletion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_waitOnDscTestRunCompletion (
  TMsgBuf_rpcHandler                            xRpcHandler,
  const TNhtcsd_TestRunWaitOnCompletionInMsg  * pxInputMessage,
  TNhtcsd_TestStatusOutMsg                   ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_stopDscTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_stopDscTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtcsd_HandleInMsg  * pxInputMessage,
  TNhtcsd_TestStatusOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_setClearTextDscHostKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_setClearTextDscHostKey (
  TMsgBuf_rpcHandler                        xRpcHandler,
  const TNhtcsd_DscClearTextHostKeyInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg                ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_setProtectedDscContentKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_setProtectedDscContentKey (
  TMsgBuf_rpcHandler                           xRpcHandler,
  const TNhtcsd_DscProtectedContentKeyInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg                   ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_openScrTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_openScrTestRun (
  TMsgBuf_rpcHandler                    xRpcHandler,
  const TNhtcsd_ScrTestRunParamInMsg  * pxInputMessage,
  TNhtcsd_CsdHandleOutMsg            ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_closeScrTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_closeScrTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtcsd_HandleInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_startScrTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_startScrTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtcsd_HandleInMsg  * pxInputMessage,
  TNhtcsd_TestStatusOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_waitOnScrTestRunCompletion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_waitOnScrTestRunCompletion (
  TMsgBuf_rpcHandler                            xRpcHandler,
  const TNhtcsd_TestRunWaitOnCompletionInMsg  * pxInputMessage,
  TNhtcsd_TestStatusOutMsg                   ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_nht_stopScrTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_nht_stopScrTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtcsd_HandleInMsg  * pxInputMessage,
  TNhtcsd_TestStatusOutMsg  ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_setClearTextScrEncryptionKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_setClearTextScrEncryptionKey (
  TMsgBuf_rpcHandler                        xRpcHandler,
  const TNhtcsd_ScrClearTextHostKeyInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg                ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_setClearTextScrDecryptionKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_setClearTextScrDecryptionKey (
  TMsgBuf_rpcHandler                        xRpcHandler,
  const TNhtcsd_ScrClearTextHostKeyInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg                ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_setProtectedScrEncryptionKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_setProtectedScrEncryptionKey (
  TMsgBuf_rpcHandler                           xRpcHandler,
  const TNhtcsd_ScrProtectedContentKeyInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg                   ** pxOutputMessage );


/* RPC method: rpc_nhtcsd_hc_setProtectedScrDecryptionKey
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtcsd_hc_setProtectedScrDecryptionKey (
  TMsgBuf_rpcHandler                           xRpcHandler,
  const TNhtcsd_ScrProtectedContentKeyInMsg  * pxInputMessage,
  TNhtcsd_CsdStatusOutMsg                   ** pxOutputMessage );



#ifdef __cplusplus
}
#endif /* __cplusplus */


#endif /* _RPC_API_NHTCSD_H_ */
