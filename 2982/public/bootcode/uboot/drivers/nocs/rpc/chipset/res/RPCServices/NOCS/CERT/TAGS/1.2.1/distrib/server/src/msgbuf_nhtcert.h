/* DO NOT EDIT THIS FILE!!!
 * This file was automatically generated by msgbuf compiler!
 *
 * This file contains the msgbuf structure definitions associated
 * to the package nhtcert.proto
 */

#ifndef _MSGBUF_NHTCERT_H_
#define _MSGBUF_NHTCERT_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*****************************************************************************
 * include files                                                             *
 ****************************************************************************/

#include "inc/xsd-c.h"

/*****************************************************************************
 * msgbuf message type definition                                            *
 ****************************************************************************/

typedef struct SNhtcert_EmptyMsg               TNhtcert_EmptyMsg;
typedef struct SNhtcert_CertStatusOutMsg       TNhtcert_CertStatusOutMsg;
typedef struct SNhtcert_HandleOutMsg           TNhtcert_HandleOutMsg;
typedef struct SNhtcert_CertCommandInMsg       TNhtcert_CertCommandInMsg;
typedef struct SNhtcert_CertCommandOutMsg      TNhtcert_CertCommandOutMsg;
typedef struct SNhtcert_CertTableHandleOutMsg  TNhtcert_CertTableHandleOutMsg;
typedef struct SNhtcert_CertLockInMsg          TNhtcert_CertLockInMsg;
typedef struct SNhtcert_CertUnlockInMsg        TNhtcert_CertUnlockInMsg;
typedef struct SNhtcert_CertExchangeInMsg      TNhtcert_CertExchangeInMsg;
typedef struct SNhtcert_CertExchangeOutMsg     TNhtcert_CertExchangeOutMsg;
typedef struct SNhtcert_CertGetSingleInfoInMsg TNhtcert_CertGetSingleInfoInMsg;
typedef struct SNhtcert_CertGetVersionOutMsg   TNhtcert_CertGetVersionOutMsg;
typedef struct SNhtcert_CertGetStringOutMsg    TNhtcert_CertGetStringOutMsg;


/*****************************************************************************
 * msgbuf enum type definition                                               *
 ****************************************************************************/

typedef enum ENhtcert_CertStatus
{
  NHTCERT_CERT_STATUS_NOERROR   = 0,
  NHTCERT_CERT_STATUS_BADHANDLE = 1,
  NHTCERT_CERT_STATUS_BADEMI    = 2,
  NHTCERT_CERT_STATUS_BADUSAGE  = 3,
  NHTCERT_CERT_STATUS_TIMEOUT   = 4,
  NHTCERT_CERT_STATUS_ERROR     = 5
} TNhtcert_CertStatus;

typedef enum ENhtcert_TimeoutType
{
  NHTCERT_TIMEOUT_TYPE_TIMEOUTDEFAULT = 0,
  NHTCERT_TIMEOUT_TYPE_TIMEOUTOTP     = 1
} TNhtcert_TimeoutType;


/*****************************************************************************
 * msgbuf message structure definition                                       *
 ****************************************************************************/

struct SNhtcert_EmptyMsg
{
  TMsgBuf_desc    _pDesc;
};

struct SNhtcert_CertStatusOutMsg
{
  TMsgBuf_desc           _pDesc;
  TNhtcert_CertStatus    retStatus;
};

struct SNhtcert_HandleOutMsg
{
  TMsgBuf_desc           _pDesc;
  TNhtcert_CertStatus    retStatus;
  TMsgBuf_bool           has_handle;
  int64_t                handle;
};

struct SNhtcert_CertCommandInMsg
{
  TMsgBuf_desc     _pDesc;
  TMsgBuf_bytes    inputData;
  TMsgBuf_bytes    opcodes;
  int32_t          timeoutType;
};

struct SNhtcert_CertCommandOutMsg
{
  TMsgBuf_desc     _pDesc;
  TMsgBuf_bytes    outputData;
  TMsgBuf_bytes    status;
};

struct SNhtcert_CertTableHandleOutMsg
{
  TMsgBuf_desc    _pDesc;
  TMsgBuf_bool    has_handle;
  int64_t         handle;
  uint32_t        apiVersion;
};

struct SNhtcert_CertLockInMsg
{
  TMsgBuf_desc    _pDesc;
  TMsgBuf_bool    has_output;
};

struct SNhtcert_CertUnlockInMsg
{
  TMsgBuf_desc    _pDesc;
  TMsgBuf_bool    has_resHandle;
  int64_t         resHandle;
};

struct SNhtcert_CertExchangeInMsg
{
  TMsgBuf_desc                 _pDesc;
  TMsgBuf_bool                 has_resHandle;
  int64_t                      resHandle;
  size_t                       n_certCommands;
  TNhtcert_CertCommandInMsg ** certCommands;
  TMsgBuf_bool                 hasProcessedCmdSize;
};

struct SNhtcert_CertExchangeOutMsg
{
  TMsgBuf_desc                  _pDesc;
  TNhtcert_CertStatus           retStatus;
  uint32_t                      processedCmds;
  size_t                        n_certCommands;
  TNhtcert_CertCommandOutMsg ** certCommands;
};

struct SNhtcert_CertGetSingleInfoInMsg
{
  TMsgBuf_desc    _pDesc;
  TMsgBuf_bool    has_output;
};

struct SNhtcert_CertGetVersionOutMsg
{
  TMsgBuf_desc           _pDesc;
  TNhtcert_CertStatus    retStatus;
  uint32_t               version;
};

struct SNhtcert_CertGetStringOutMsg
{
  TMsgBuf_desc           _pDesc;
  TNhtcert_CertStatus    retStatus;
  TMsgBuf_bytes          name;
};


/*****************************************************************************
 * msgbuf Message initialization  function                                   *
 ****************************************************************************/

void init_Nhtcert_EmptyMsg               ( TNhtcert_EmptyMsg               * pInstance );
void init_Nhtcert_CertStatusOutMsg       ( TNhtcert_CertStatusOutMsg       * pInstance );
void init_Nhtcert_HandleOutMsg           ( TNhtcert_HandleOutMsg           * pInstance );
void init_Nhtcert_CertCommandInMsg       ( TNhtcert_CertCommandInMsg       * pInstance );
void init_Nhtcert_CertCommandOutMsg      ( TNhtcert_CertCommandOutMsg      * pInstance );
void init_Nhtcert_CertTableHandleOutMsg  ( TNhtcert_CertTableHandleOutMsg  * pInstance );
void init_Nhtcert_CertLockInMsg          ( TNhtcert_CertLockInMsg          * pInstance );
void init_Nhtcert_CertUnlockInMsg        ( TNhtcert_CertUnlockInMsg        * pInstance );
void init_Nhtcert_CertExchangeInMsg      ( TNhtcert_CertExchangeInMsg      * pInstance );
void init_Nhtcert_CertExchangeOutMsg     ( TNhtcert_CertExchangeOutMsg     * pInstance );
void init_Nhtcert_CertGetSingleInfoInMsg ( TNhtcert_CertGetSingleInfoInMsg * pInstance );
void init_Nhtcert_CertGetVersionOutMsg   ( TNhtcert_CertGetVersionOutMsg   * pInstance );
void init_Nhtcert_CertGetStringOutMsg    ( TNhtcert_CertGetStringOutMsg    * pInstance );

/*****************************************************************************
 * msgbuf Message allocation function prototypes                             *
 ****************************************************************************/

TNhtcert_EmptyMsg               * pAlloc_Nhtcert_EmptyMsg               (void);
TNhtcert_CertStatusOutMsg       * pAlloc_Nhtcert_CertStatusOutMsg       (void);
TNhtcert_HandleOutMsg           * pAlloc_Nhtcert_HandleOutMsg           (void);
TNhtcert_CertCommandInMsg       * pAlloc_Nhtcert_CertCommandInMsg       (void);
TNhtcert_CertCommandOutMsg      * pAlloc_Nhtcert_CertCommandOutMsg      (void);
TNhtcert_CertTableHandleOutMsg  * pAlloc_Nhtcert_CertTableHandleOutMsg  (void);
TNhtcert_CertLockInMsg          * pAlloc_Nhtcert_CertLockInMsg          (void);
TNhtcert_CertUnlockInMsg        * pAlloc_Nhtcert_CertUnlockInMsg        (void);
TNhtcert_CertExchangeInMsg      * pAlloc_Nhtcert_CertExchangeInMsg      (void);
TNhtcert_CertExchangeOutMsg     * pAlloc_Nhtcert_CertExchangeOutMsg     (void);
TNhtcert_CertGetSingleInfoInMsg * pAlloc_Nhtcert_CertGetSingleInfoInMsg (void);
TNhtcert_CertGetVersionOutMsg   * pAlloc_Nhtcert_CertGetVersionOutMsg   (void);
TNhtcert_CertGetStringOutMsg    * pAlloc_Nhtcert_CertGetStringOutMsg    (void);

/*****************************************************************************
 * msgbuf Message deallocation function prototypes                           *
 ****************************************************************************/

void dealloc_Nhtcert_EmptyMsg               (TNhtcert_EmptyMsg               * pxInstance);
void dealloc_Nhtcert_CertStatusOutMsg       (TNhtcert_CertStatusOutMsg       * pxInstance);
void dealloc_Nhtcert_HandleOutMsg           (TNhtcert_HandleOutMsg           * pxInstance);
void dealloc_Nhtcert_CertCommandInMsg       (TNhtcert_CertCommandInMsg       * pxInstance);
void dealloc_Nhtcert_CertCommandOutMsg      (TNhtcert_CertCommandOutMsg      * pxInstance);
void dealloc_Nhtcert_CertTableHandleOutMsg  (TNhtcert_CertTableHandleOutMsg  * pxInstance);
void dealloc_Nhtcert_CertLockInMsg          (TNhtcert_CertLockInMsg          * pxInstance);
void dealloc_Nhtcert_CertUnlockInMsg        (TNhtcert_CertUnlockInMsg        * pxInstance);
void dealloc_Nhtcert_CertExchangeInMsg      (TNhtcert_CertExchangeInMsg      * pxInstance);
void dealloc_Nhtcert_CertExchangeOutMsg     (TNhtcert_CertExchangeOutMsg     * pxInstance);
void dealloc_Nhtcert_CertGetSingleInfoInMsg (TNhtcert_CertGetSingleInfoInMsg * pxInstance);
void dealloc_Nhtcert_CertGetVersionOutMsg   (TNhtcert_CertGetVersionOutMsg   * pxInstance);
void dealloc_Nhtcert_CertGetStringOutMsg    (TNhtcert_CertGetStringOutMsg    * pxInstance);

/*****************************************************************************
 * msgbuf enum test function prototype                                       *
 ****************************************************************************/

int isValid_Nhtcert_CertStatus  (TNhtcert_CertStatus  xValue);
int isValid_Nhtcert_TimeoutType (TNhtcert_TimeoutType xValue);

#ifdef __cplusplus
}
#endif /* __cplusplus */


#endif /* _MSGBUF_NHTCERT_H_ */
