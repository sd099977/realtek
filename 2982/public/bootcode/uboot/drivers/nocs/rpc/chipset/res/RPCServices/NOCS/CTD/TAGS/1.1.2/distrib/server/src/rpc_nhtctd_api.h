/* DO NOT EDIT THIS FILE!!!
 * This file was automatically generated by msgbuf compiler!
 *
 * This file contains the msgbuf structure definitions associated
 * to the package nhtctd.proto
 */

#ifndef _RPC_API_NHTCTD_H_
#define _RPC_API_NHTCTD_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/*****************************************************************************
 * include files                                                             *
 ****************************************************************************/

#include "src/msgbuf_nhtctd.h"


/* RPC method: rpc_nhtctd_hc_nht_initializeResourceUsage
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_initializeResourceUsage (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtctd_EmptyMsg   * pxInputMessage,
  TNhtctd_CtdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_terminateResourceUsage
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_terminateResourceUsage (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtctd_EmptyMsg   * pxInputMessage,
  TNhtctd_CtdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getNhtCtdSoftwareVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getNhtCtdSoftwareVersion (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_OptOutput1InMsg  * pxInputMessage,
  TNhtctd_StringOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getNhtCtdApiVersion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getNhtCtdApiVersion (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_OptOutput1InMsg  * pxInputMessage,
  TNhtctd_IntValueOutMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hn_nht_ChipReset
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtctd_hn_nht_ChipReset (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtctd_IntValueInMsg  * pxInputMessage,
  TNhtctd_EmptyMsg            ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hn_nht_chipSuspend2Ram
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtctd_hn_nht_chipSuspend2Ram (
  TMsgBuf_rpcHandler        xRpcHandler,
  const TNhtctd_EmptyMsg  * pxInputMessage,
  TNhtctd_EmptyMsg       ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nth_enableRamScrambling
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nth_enableRamScrambling (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtctd_EmptyMsg   * pxInputMessage,
  TNhtctd_CtdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nth_disableRamScrambling
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nth_disableRamScrambling (
  TMsgBuf_rpcHandler         xRpcHandler,
  const TNhtctd_EmptyMsg   * pxInputMessage,
  TNhtctd_CtdStatusOutMsg ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_isRamScramblingEnabled
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_isRamScramblingEnabled (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_OptOutput1InMsg  * pxInputMessage,
  TNhtctd_BooleanOutMsg         ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getFlashMemorySize
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getFlashMemorySize (
  TMsgBuf_rpcHandler                 xRpcHandler,
  const TNhtctd_GetFlashSizeInMsg  * pxInputMessage,
  TNhtctd_MemorySizeOutMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_flashRead
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_flashRead (
  TMsgBuf_rpcHandler              xRpcHandler,
  const TNhtctd_FlashReadInMsg  * pxInputMessage,
  TNhtctd_BytesOutMsg          ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_flashWrite
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_flashWrite (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_FlashWriteInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg       ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getRamMemorySize
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getRamMemorySize (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_GetRamSizeInMsg  * pxInputMessage,
  TNhtctd_MemorySizeOutMsg      ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_ramRead
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_ramRead (
  TMsgBuf_rpcHandler            xRpcHandler,
  const TNhtctd_RamReadInMsg  * pxInputMessage,
  TNhtctd_BytesOutMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_ramWrite
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_ramWrite (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtctd_RamWriteInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg     ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getSpecificPvDescriptorNumber
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getSpecificPvDescriptorNumber (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_OptOutput1InMsg  * pxInputMessage,
  TNhtctd_IntValueOutMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getSpecificPvDescriptorSet
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getSpecificPvDescriptorSet (
  TMsgBuf_rpcHandler                       xRpcHandler,
  const TNhtctd_GetPvDescriptorSetInMsg  * pxInputMessage,
  TNhtctd_GetPvDescriptorSetOutMsg      ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getPvStatus
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getPvStatus (
  TMsgBuf_rpcHandler                xRpcHandler,
  const TNhtctd_GetPvStatusInMsg  * pxInputMessage,
  TNhtctd_IntValueOutMsg         ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_setDebugInterfaceMode
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_setDebugInterfaceMode (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtctd_IntValueInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg     ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getDebugInterfaceMode
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getDebugInterfaceMode (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_OptOutput1InMsg  * pxInputMessage,
  TNhtctd_IntValueOutMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_setBootMode
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_setBootMode (
  TMsgBuf_rpcHandler             xRpcHandler,
  const TNhtctd_IntValueInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg     ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getBootMode
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getBootMode (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_OptOutput1InMsg  * pxInputMessage,
  TNhtctd_IntValueOutMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getPvBufferSize
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getPvBufferSize (
  TMsgBuf_rpcHandler                  xRpcHandler,
  const TNhtctd_GetBufferSizeInMsg  * pxInputMessage,
  TNhtctd_IntValueOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_setPvValue
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_setPvValue (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_SetPvValueInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg       ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getPvValue
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getPvValue (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_GetPvValueInMsg  * pxInputMessage,
  TNhtctd_BytesOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getOtpBufferSize
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getOtpBufferSize (
  TMsgBuf_rpcHandler                  xRpcHandler,
  const TNhtctd_GetBufferSizeInMsg  * pxInputMessage,
  TNhtctd_IntValueOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getOtpValueMask
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getOtpValueMask (
  TMsgBuf_rpcHandler                    xRpcHandler,
  const TNhtctd_GetOtpValueMaskInMsg  * pxInputMessage,
  TNhtctd_BytesOutMsg                ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_setOtpValue
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_setOtpValue (
  TMsgBuf_rpcHandler                xRpcHandler,
  const TNhtctd_SetOtpValueInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg        ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_getOtpValue
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_getOtpValue (
  TMsgBuf_rpcHandler               xRpcHandler,
  const TNhtctd_GetPvValueInMsg  * pxInputMessage,
  TNhtctd_BytesOutMsg           ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_openR2rEncryptSession
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_openR2rEncryptSession (
  TMsgBuf_rpcHandler              xRpcHandler,
  const TNhtctd_GetHandleInMsg  * pxInputMessage,
  TNhtctd_HandleOutMsg         ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_openR2rDecryptSession
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_openR2rDecryptSession (
  TMsgBuf_rpcHandler              xRpcHandler,
  const TNhtctd_GetHandleInMsg  * pxInputMessage,
  TNhtctd_HandleOutMsg         ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_closeR2rSession
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_closeR2rSession (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtctd_HandleInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_setR2RProtectedKeys
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_setR2RProtectedKeys (
  TMsgBuf_rpcHandler                        xRpcHandler,
  const TNhtctd_R2rSetProtectedKeysInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg                ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_r2rSessionCipher
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_r2rSessionCipher (
  TMsgBuf_rpcHandler                        xRpcHandler,
  const TNhtctd_R2rSessionCipheringInMsg  * pxInputMessage,
  TNhtctd_BytesOutMsg                    ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_openDscTestRunSession
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_openDscTestRunSession (
  TMsgBuf_rpcHandler                   xRpcHandler,
  const TNhtctd_OpenDscSessionInMsg  * pxInputMessage,
  TNhtctd_HandleOutMsg              ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_closeDscTestRunSession
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_closeDscTestRunSession (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtctd_HandleInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_startDscTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_startDscTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtctd_HandleInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_waitOnDscTestRunCompletion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_waitOnDscTestRunCompletion (
  TMsgBuf_rpcHandler                               xRpcHandler,
  const TNhtctd_WaitOnCsdSessionCompletionInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg                       ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_stopDcrTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_stopDcrTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtctd_HandleInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_setDcrProtectedKeys
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_setDcrProtectedKeys (
  TMsgBuf_rpcHandler                        xRpcHandler,
  const TNhtctd_SetDscProtectedKeysInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg                ** pxOutputMessage );


/* RPC method: rpc_nhtctd_tn_ecmCallBack
 *
 * This method stands as an asynchronous notification function.
 * Caller of this function immediately returns without waiting
 * the completion of its remote execution.
 *
 * PS: param 'pxOutputMessage' is always assumed to be NULL.
 */
TRpc_status rpc_nhtctd_tn_ecmCallBack (
  TMsgBuf_rpcHandler                xRpcHandler,
  const TNhtctd_EcmCallBackInMsg  * pxInputMessage,
  TNhtctd_EmptyMsg               ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_openScrTestRunSession
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_openScrTestRunSession (
  TMsgBuf_rpcHandler                   xRpcHandler,
  const TNhtctd_OpenScrSessionInMsg  * pxInputMessage,
  TNhtctd_HandleOutMsg              ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_closeScrTestRunSession
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_closeScrTestRunSession (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtctd_HandleInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_startScrTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_startScrTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtctd_HandleInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_waitOnScrTestRunCompletion
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_waitOnScrTestRunCompletion (
  TMsgBuf_rpcHandler                               xRpcHandler,
  const TNhtctd_WaitOnCsdSessionCompletionInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg                       ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_stopScrTestRun
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_stopScrTestRun (
  TMsgBuf_rpcHandler           xRpcHandler,
  const TNhtctd_HandleInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg   ** pxOutputMessage );


/* RPC method: rpc_nhtctd_hc_nht_setScrProtectedKeys
 *
 * This method stands as a synchronous function call.
 * Caller of this function only returns after completion of
 * its remote execution.
 */
TRpc_status rpc_nhtctd_hc_nht_setScrProtectedKeys (
  TMsgBuf_rpcHandler                        xRpcHandler,
  const TNhtctd_SetScrProtectedKeysInMsg  * pxInputMessage,
  TNhtctd_CtdStatusOutMsg                ** pxOutputMessage );



#ifdef __cplusplus
}
#endif /* __cplusplus */


#endif /* _RPC_API_NHTCTD_H_ */
