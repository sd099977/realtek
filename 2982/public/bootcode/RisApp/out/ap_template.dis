
/home/alexkh/nfs/kernel/sirius/bootcode/RisApp/out/ap_template.elf:     file format elf32-littlemips


Disassembly of section .text_loader:

a0020000 <loader_asm_code0>:
loader_asm_code0:
   .globl RESET_EntryPoint
RESET_EntryPoint:

	# clear uninitialised data section
	la	t0, __bss_start
a0020000:	3c08a002 	lui	t0,0xa002
a0020004:	25085bd0 	addiu	t0,t0,23504
	la	t1, __bss_end
a0020008:	3c09a003 	lui	t1,0xa003
a002000c:	25299c4c 	addiu	t1,t1,-25524
1:
	sw	zero, 0(t0)
a0020010:	ad000000 	sw	zero,0(t0)
	bne	t0, t1, 1b
a0020014:	1509fffe 	bne	t0,t1,a0020010 <loader_asm_code0+0x10>
	addiu	t0, t0, 0x4
a0020018:	25080004 	addiu	t0,t0,4

/* save return registers */
   sw    ra, _return_ra
a002001c:	3c01a003 	lui	at,0xa003
a0020020:	ac3f9be8 	sw	ra,-25624(at)
   sw    s0, _return_s0
a0020024:	3c01a003 	lui	at,0xa003
a0020028:	ac309bec 	sw	s0,-25620(at)
   sw    s1, _return_s1
a002002c:	3c01a003 	lui	at,0xa003
a0020030:	ac319bf0 	sw	s1,-25616(at)
   sw    s2, _return_s2
a0020034:	3c01a003 	lui	at,0xa003
a0020038:	ac329bf4 	sw	s2,-25612(at)
   sw    s3, _return_s3
a002003c:	3c01a003 	lui	at,0xa003
a0020040:	ac339bf8 	sw	s3,-25608(at)
   sw    s4, _return_s4
a0020044:	3c01a003 	lui	at,0xa003
a0020048:	ac349bfc 	sw	s4,-25604(at)
   sw    s5, _return_s5
a002004c:	3c01a003 	lui	at,0xa003
a0020050:	ac359c00 	sw	s5,-25600(at)
   sw    s6, _return_s6
a0020054:	3c01a003 	lui	at,0xa003
a0020058:	ac369c04 	sw	s6,-25596(at)
   sw    s7, _return_s7
a002005c:	3c01a003 	lui	at,0xa003
a0020060:	ac379c08 	sw	s7,-25592(at)
   sw    s8, _return_s8
a0020064:	3c01a003 	lui	at,0xa003
a0020068:	ac3e9c0c 	sw	s8,-25588(at)

/* initialize the global pointer register     */
/* __gp = linker supplied global data pointer */
   .extern __gp
   la    gp,__gp
a002006c:	3c1ca002 	lui	gp,0xa002
a0020070:	279c51f0 	addiu	gp,gp,20976
/* __heap_start_addr = end address of program, assigned by Linker  */
   .extern __heap_start_addr
   .extern __Size_Of_SDRAM
   .extern __Start_Of_SDRAM

   la    t1, __heap_start_addr
a0020074:	3c09a003 	lui	t1,0xa003
a0020078:	25299c50 	addiu	t1,t1,-25520
   add   t1, 16 - 1
a002007c:	2129000f 	addi	t1,t1,15
   srl   t1, 4
a0020080:	00094902 	srl	t1,t1,0x4
   sll   t1, 4
a0020084:	00094900 	sll	t1,t1,0x4
   sw    t1, _app_heap_start
a0020088:	3c01a003 	lui	at,0xa003
a002008c:	ac299bd8 	sw	t1,-25640(at)
   la    t0, __Size_Of_SDRAM
a0020090:	3c080001 	lui	t0,0x1
a0020094:	2508a800 	addiu	t0,t0,-22528
   subu  t0, 1
a0020098:	2508ffff 	addiu	t0,t0,-1
   la    t1, __Start_Of_SDRAM
a002009c:	3c09a002 	lui	t1,0xa002
a00200a0:	25290000 	addiu	t1,t1,0
   add   t0, t0, t1
a00200a4:	01094020 	add	t0,t0,t1
   sw    t0, _app_heap_end
a00200a8:	3c01a003 	lui	at,0xa003
a00200ac:	ac289bdc 	sw	t0,-25636(at)

/* initialize stack for application */
   la    sp, _app_stack + APP_STACK_SIZE
a00200b0:	3c1da002 	lui	sp,0xa002
a00200b4:	27bd7bd8 	addiu	sp,sp,31704

/* jump to application */
   la    t0, APP_START_ADDR
a00200b8:	3c08a002 	lui	t0,0xa002
a00200bc:	25080150 	addiu	t0,t0,336
   jalr  t0
a00200c0:	0100f809 	jalr	t0
   nop
a00200c4:	00000000 	nop

/* return from application */
   la    t0, _return_ra
a00200c8:	3c08a003 	lui	t0,0xa003
a00200cc:	25089be8 	addiu	t0,t0,-25624
   lw    ra, 0(t0)
a00200d0:	8d1f0000 	lw	ra,0(t0)
   la    t0, _return_s0
a00200d4:	3c08a003 	lui	t0,0xa003
a00200d8:	25089bec 	addiu	t0,t0,-25620
   lw    s0, 0(t0)
a00200dc:	8d100000 	lw	s0,0(t0)
   la    t0, _return_s1
a00200e0:	3c08a003 	lui	t0,0xa003
a00200e4:	25089bf0 	addiu	t0,t0,-25616
   lw    s1, 0(t0)
a00200e8:	8d110000 	lw	s1,0(t0)
   la    t0, _return_s2
a00200ec:	3c08a003 	lui	t0,0xa003
a00200f0:	25089bf4 	addiu	t0,t0,-25612
   lw    s2, 0(t0)
a00200f4:	8d120000 	lw	s2,0(t0)
   la    t0, _return_s3
a00200f8:	3c08a003 	lui	t0,0xa003
a00200fc:	25089bf8 	addiu	t0,t0,-25608
   lw    s3, 0(t0)
a0020100:	8d130000 	lw	s3,0(t0)
   la    t0, _return_s4
a0020104:	3c08a003 	lui	t0,0xa003
a0020108:	25089bfc 	addiu	t0,t0,-25604
   lw    s4, 0(t0)
a002010c:	8d140000 	lw	s4,0(t0)
   la    t0, _return_s5
a0020110:	3c08a003 	lui	t0,0xa003
a0020114:	25089c00 	addiu	t0,t0,-25600
   lw    s5, 0(t0)
a0020118:	8d150000 	lw	s5,0(t0)
   la    t0, _return_s6
a002011c:	3c08a003 	lui	t0,0xa003
a0020120:	25089c04 	addiu	t0,t0,-25596
   lw    s6, 0(t0)
a0020124:	8d160000 	lw	s6,0(t0)
   la    t0, _return_s7
a0020128:	3c08a003 	lui	t0,0xa003
a002012c:	25089c08 	addiu	t0,t0,-25592
   lw    s7, 0(t0)
a0020130:	8d170000 	lw	s7,0(t0)
   la    t0, _return_s8
a0020134:	3c08a003 	lui	t0,0xa003
a0020138:	25089c0c 	addiu	t0,t0,-25588
   lw    s8, 0(t0)
a002013c:	8d1e0000 	lw	s8,0(t0)
   jr    ra
a0020140:	03e00008 	jr	ra
   nop   
a0020144:	00000000 	nop

Disassembly of section .text:

a0020150 <app_main>:
#define MIS_TCWCR		(MIS_REG_BASE + 0x6f0)

extern void testapp(void);
#define RTK_AUX_CODE_ENV "--- RTK AUX_Code Environment ---"
int app_main(int argc, char **argv)
{
a0020150:	27bdffe0 	addiu	sp,sp,-32
a0020154:	afbf001c 	sw	ra,28(sp)
a0020158:	afb10018 	sw	s1,24(sp)
a002015c:	afb00014 	sw	s0,20(sp)
	int ret, i;
	sed_printf0("\n%s_001\n",RTK_AUX_CODE_ENV);
a0020160:	3c10a002 	lui	s0,0xa002
a0020164:	3c04a002 	lui	a0,0xa002
a0020168:	260551fc 	addiu	a1,s0,20988
a002016c:	0c008b6c 	jal	a0022db0 <printf>
a0020170:	248451f0 	addiu	a0,a0,20976
	sed_printf1("\n%s_002\n",RTK_AUX_CODE_ENV);
a0020174:	3c04a002 	lui	a0,0xa002
a0020178:	260551fc 	addiu	a1,s0,20988
a002017c:	0c008b5c 	jal	a0022d70 <printf1>
a0020180:	24845220 	addiu	a0,a0,21024
	/* disable hw watchdog first */
	REG32(MIS_TCWCR) = 0xa5;
a0020184:	3c02b801 	lui	v0,0xb801
a0020188:	240300a5 	li	v1,165
a002018c:	3442b6f0 	ori	v0,v0,0xb6f0
	//sed_ddr_init();

	/* Read CLK setting from persistent memory and apply */
	//sed_init_config();

	sed_printf0("\n%s1\n",RTK_AUX_CODE_ENV);
a0020190:	3c04a002 	lui	a0,0xa002
{
	int ret, i;
	sed_printf0("\n%s_001\n",RTK_AUX_CODE_ENV);
	sed_printf1("\n%s_002\n",RTK_AUX_CODE_ENV);
	/* disable hw watchdog first */
	REG32(MIS_TCWCR) = 0xa5;
a0020194:	ac430000 	sw	v1,0(v0)
	//sed_ddr_init();

	/* Read CLK setting from persistent memory and apply */
	//sed_init_config();

	sed_printf0("\n%s1\n",RTK_AUX_CODE_ENV);
a0020198:	260551fc 	addiu	a1,s0,20988
a002019c:	0c008b6c 	jal	a0022db0 <printf>
a00201a0:	2484522c 	addiu	a0,a0,21036
	sed_printf1("\n%s2\n",RTK_AUX_CODE_ENV);
a00201a4:	3c04a002 	lui	a0,0xa002

	/* Step 0: chipset reset post process */
	//sed_cmd_chip_rst_post();
	sed_printf0("%s(%d)\n",__func__,__LINE__);
a00201a8:	3c11a002 	lui	s1,0xa002

	/* Read CLK setting from persistent memory and apply */
	//sed_init_config();

	sed_printf0("\n%s1\n",RTK_AUX_CODE_ENV);
	sed_printf1("\n%s2\n",RTK_AUX_CODE_ENV);
a00201ac:	260551fc 	addiu	a1,s0,20988
a00201b0:	24845234 	addiu	a0,a0,21044
a00201b4:	0c008b5c 	jal	a0022d70 <printf1>
a00201b8:	3c10a002 	lui	s0,0xa002

	/* Step 0: chipset reset post process */
	//sed_cmd_chip_rst_post();
	sed_printf0("%s(%d)\n",__func__,__LINE__);
a00201bc:	262455f4 	addiu	a0,s1,22004
a00201c0:	2605523c 	addiu	a1,s0,21052
a00201c4:	0c008b6c 	jal	a0022db0 <printf>
a00201c8:	240600e7 	li	a2,231
	//sed_printf("--- SED post done ---\n");

	/* HW init */
	//sed_rng_init();
	sed_printf0("%s(%d)\n",__func__,__LINE__);
a00201cc:	262455f4 	addiu	a0,s1,22004
a00201d0:	2605523c 	addiu	a1,s0,21052
a00201d4:	0c008b6c 	jal	a0022db0 <printf>
a00201d8:	240600ec 	li	a2,236

	sed_gpio_init();
a00201dc:	0c008ff2 	jal	a0023fc8 <sed_gpio_init>
a00201e0:	00000000 	nop
	sed_printf0("%s(%d)\n",__func__,__LINE__);
a00201e4:	262455f4 	addiu	a0,s1,22004
a00201e8:	2605523c 	addiu	a1,s0,21052
a00201ec:	0c008b6c 	jal	a0022db0 <printf>
a00201f0:	240600ef 	li	a2,239
	testapp();
a00201f4:	0c008dc4 	jal	a0023710 <testapp>
a00201f8:	00000000 	nop
		sed_response_transfer(obuf, ret);
	}
#endif	//?#ifndef SKIP_SED_FUNC
	return -1;

}
a00201fc:	8fbf001c 	lw	ra,28(sp)
a0020200:	8fb10018 	lw	s1,24(sp)
a0020204:	8fb00014 	lw	s0,20(sp)
a0020208:	2402ffff 	li	v0,-1
a002020c:	03e00008 	jr	ra
a0020210:	27bd0020 	addiu	sp,sp,32

a0020214 <rsa_memcpy>:
{
	unsigned int  i;
	unsigned char * des = out;
	unsigned char * soc = in;

	for(i=0;i<count;i++)
a0020214:	10c00009 	beqz	a2,a002023c <rsa_memcpy+0x28>
a0020218:	00801021 	move	v0,a0
a002021c:	00001821 	move	v1,zero
		des[i] = soc[i];
a0020220:	00a32021 	addu	a0,a1,v1
a0020224:	90880000 	lbu	t0,0(a0)
a0020228:	00433821 	addu	a3,v0,v1
{
	unsigned int  i;
	unsigned char * des = out;
	unsigned char * soc = in;

	for(i=0;i<count;i++)
a002022c:	24630001 	addiu	v1,v1,1
a0020230:	0066202b 	sltu	a0,v1,a2
a0020234:	1480fffa 	bnez	a0,a0020220 <rsa_memcpy+0xc>
a0020238:	a0e80000 	sb	t0,0(a3)
		des[i] = soc[i];

	return out;
}
a002023c:	03e00008 	jr	ra
a0020240:	00000000 	nop

a0020244 <Cmp>:
 */
int Cmp(BI *A, BI *B)
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
a0020244:	8c820004 	lw	v0,4(a0)
a0020248:	8ca30004 	lw	v1,4(a1)
a002024c:	00000000 	nop
a0020250:	0062302a 	slt	a2,v1,v0
a0020254:	10c00003 	beqz	a2,a0020264 <Cmp+0x20>
a0020258:	0043182a 	slt	v1,v0,v1
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a002025c:	03e00008 	jr	ra
a0020260:	24020001 	li	v0,1
int Cmp(BI *A, BI *B)
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
a0020264:	14600020 	bnez	v1,a00202e8 <Cmp+0xa4>
a0020268:	2443ffff 	addiu	v1,v0,-1
	for(i=A->m_nLength-1;i>=0;i--)
a002026c:	0460001c 	bltz	v1,a00202e0 <Cmp+0x9c>
a0020270:	24460001 	addiu	a2,v0,1
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a0020274:	00063080 	sll	a2,a2,0x2
a0020278:	00a63821 	addu	a3,a1,a2
a002027c:	00863021 	addu	a2,a0,a2
a0020280:	8cc60000 	lw	a2,0(a2)
a0020284:	8ce70000 	lw	a3,0(a3)
a0020288:	00000000 	nop
a002028c:	00e6402b 	sltu	t0,a3,a2
a0020290:	1500fff2 	bnez	t0,a002025c <Cmp+0x18>
a0020294:	00c7302b 	sltu	a2,a2,a3
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a0020298:	14c00013 	bnez	a2,a00202e8 <Cmp+0xa4>
a002029c:	00000000 	nop

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a00202a0:	00021080 	sll	v0,v0,0x2
a00202a4:	00a22821 	addu	a1,a1,v0
a00202a8:	080080b5 	j	a00202d4 <Cmp+0x90>
a00202ac:	00822021 	addu	a0,a0,v0
a00202b0:	8c860000 	lw	a2,0(a0)
a00202b4:	8ca20000 	lw	v0,0(a1)
a00202b8:	2484fffc 	addiu	a0,a0,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a00202bc:	00c2382b 	sltu	a3,a2,v0

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a00202c0:	0046102b 	sltu	v0,v0,a2
a00202c4:	1440ffe5 	bnez	v0,a002025c <Cmp+0x18>
a00202c8:	24a5fffc 	addiu	a1,a1,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a00202cc:	14e00006 	bnez	a3,a00202e8 <Cmp+0xa4>
a00202d0:	00000000 	nop
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a00202d4:	2463ffff 	addiu	v1,v1,-1
a00202d8:	0461fff5 	bgez	v1,a00202b0 <Cmp+0x6c>
a00202dc:	00000000 	nop
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
	}
	return 0;
}
a00202e0:	03e00008 	jr	ra
a00202e4:	00001021 	move	v0,zero
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a00202e8:	03e00008 	jr	ra
a00202ec:	2402ffff 	li	v0,-1

a00202f0 <isZero>:
	return 0;
}

int isZero(BI *A)
{
	if ((A->m_nLength == 1) && (A->m_ulValue[0] == 0))
a00202f0:	8c830004 	lw	v1,4(a0)
a00202f4:	24020001 	li	v0,1
a00202f8:	10620003 	beq	v1,v0,a0020308 <isZero+0x18>
a00202fc:	00000000 	nop
a0020300:	03e00008 	jr	ra
a0020304:	00001021 	move	v0,zero
a0020308:	8c820008 	lw	v0,8(a0)
		return 1;
	else
		return 0;
}
a002030c:	03e00008 	jr	ra
a0020310:	2c420001 	sltiu	v0,v0,1

a0020314 <Sub_p>:
{
	int i;
	BI *p;
	unsigned long long num;

	if((A->m_nSign*b)>=0)
a0020314:	8c830000 	lw	v1,0(a0)
a0020318:	00000000 	nop
a002031c:	00a30018 	mult	a1,v1
a0020320:	00003012 	mflo	a2
a0020324:	04c0002d 	bltz	a2,a00203dc <Sub_p+0xc8>
a0020328:	00801021 	move	v0,a0
	{
		//p = move(A);
		p = A;
		if(p->m_ulValue[0]>=(unsigned int)b)
a002032c:	8c860008 	lw	a2,8(a0)
a0020330:	00000000 	nop
a0020334:	00c5202b 	sltu	a0,a2,a1
a0020338:	10800020 	beqz	a0,a00203bc <Sub_p+0xa8>
a002033c:	24070001 	li	a3,1
		{
			p->m_ulValue[0] -= b;
			return p;
		}
		// A < b and A has only one block
		if(p->m_nLength==1)
a0020340:	8c440004 	lw	a0,4(v0)
a0020344:	00000000 	nop
a0020348:	1087001f 	beq	a0,a3,a00203c8 <Sub_p+0xb4>
a002034c:	00000000 	nop
		}
		// A < b
		num = ((unsigned long long)0x1 << 32) + p->m_ulValue[0];
		p->m_ulValue[0] = (unsigned int)(num-b);
		i = 1;
		while(p->m_ulValue[i]==0)
a0020350:	8c44000c 	lw	a0,12(v0)
			p->m_nSign = 1 - p->m_nSign;
			return p;
		}
		// A < b
		num = ((unsigned long long)0x1 << 32) + p->m_ulValue[0];
		p->m_ulValue[0] = (unsigned int)(num-b);
a0020354:	00c52823 	subu	a1,a2,a1
		i = 1;
		while(p->m_ulValue[i]==0)
a0020358:	14800023 	bnez	a0,a00203e8 <Sub_p+0xd4>
a002035c:	ac450008 	sw	a1,8(v0)
a0020360:	00401821 	move	v1,v0
a0020364:	24050001 	li	a1,1
		{
			p->m_ulValue[i]=0xffffffff;
a0020368:	2406ffff 	li	a2,-1
		}
		// A < b
		num = ((unsigned long long)0x1 << 32) + p->m_ulValue[0];
		p->m_ulValue[0] = (unsigned int)(num-b);
		i = 1;
		while(p->m_ulValue[i]==0)
a002036c:	8c640010 	lw	a0,16(v1)
		{
			p->m_ulValue[i]=0xffffffff;
a0020370:	ac66000c 	sw	a2,12(v1)
			i++;
a0020374:	24a50001 	addiu	a1,a1,1
		}
		// A < b
		num = ((unsigned long long)0x1 << 32) + p->m_ulValue[0];
		p->m_ulValue[0] = (unsigned int)(num-b);
		i = 1;
		while(p->m_ulValue[i]==0)
a0020378:	1080fffc 	beqz	a0,a002036c <Sub_p+0x58>
a002037c:	24630004 	addiu	v1,v1,4
		{
			p->m_ulValue[i]=0xffffffff;
			i++;
		}

		if(p->m_ulValue[i]==1)
a0020380:	24030001 	li	v1,1
a0020384:	14830006 	bne	a0,v1,a00203a0 <Sub_p+0x8c>
a0020388:	24a30002 	addiu	v1,a1,2
			p->m_nLength--;
a002038c:	8c430004 	lw	v1,4(v0)
a0020390:	00000000 	nop
a0020394:	2463ffff 	addiu	v1,v1,-1
a0020398:	ac430004 	sw	v1,4(v0)

		p->m_ulValue[i]--;
a002039c:	24a30002 	addiu	v1,a1,2
a00203a0:	00031880 	sll	v1,v1,0x2
a00203a4:	00431821 	addu	v1,v0,v1
a00203a8:	8c640000 	lw	a0,0(v1)
a00203ac:	00000000 	nop
a00203b0:	2484ffff 	addiu	a0,a0,-1
		return p;
a00203b4:	03e00008 	jr	ra
a00203b8:	ac640000 	sw	a0,0(v1)
	{
		//p = move(A);
		p = A;
		if(p->m_ulValue[0]>=(unsigned int)b)
		{
			p->m_ulValue[0] -= b;
a00203bc:	00c52823 	subu	a1,a2,a1
			return p;
a00203c0:	03e00008 	jr	ra
a00203c4:	ac450008 	sw	a1,8(v0)
		}
		// A < b and A has only one block
		if(p->m_nLength==1)
		{
			p->m_ulValue[0] =b - p->m_ulValue[0];
a00203c8:	00a62823 	subu	a1,a1,a2
			p->m_nSign = 1 - p->m_nSign;
a00203cc:	00831823 	subu	v1,a0,v1
			return p;
		}
		// A < b and A has only one block
		if(p->m_nLength==1)
		{
			p->m_ulValue[0] =b - p->m_ulValue[0];
a00203d0:	ac450008 	sw	a1,8(v0)
			p->m_nSign = 1 - p->m_nSign;
			return p;
a00203d4:	03e00008 	jr	ra
a00203d8:	ac430000 	sw	v1,0(v0)

		p->m_ulValue[i]--;
		return p;
	}
	else
		return Add_p(A, -b);
a00203dc:	00052823 	negu	a1,a1
a00203e0:	080080fc 	j	a00203f0 <Add_p>
a00203e4:	00000000 	nop
		}
		// A < b
		num = ((unsigned long long)0x1 << 32) + p->m_ulValue[0];
		p->m_ulValue[0] = (unsigned int)(num-b);
		i = 1;
		while(p->m_ulValue[i]==0)
a00203e8:	080080e0 	j	a0020380 <Sub_p+0x6c>
a00203ec:	24050001 	li	a1,1

a00203f0 <Add_p>:
{
	int i;
	BI *p;
	unsigned long long sum;

	if((A->m_nSign*b)>=0)
a00203f0:	8c820000 	lw	v0,0(a0)
a00203f4:	00000000 	nop
a00203f8:	00a20018 	mult	a1,v0
a00203fc:	00001012 	mflo	v0
a0020400:	04400006 	bltz	v0,a002041c <Add_p+0x2c>
a0020404:	00801821 	move	v1,a0
	{
		//p = move(A);
		p = A;
		sum=b+p->m_ulValue[0];
		p->m_ulValue[0]=(unsigned int)sum;
a0020408:	8c840008 	lw	a0,8(a0)
		}
		return p;
	}
	else
		return Sub_p(A, -b);
}
a002040c:	00601021 	move	v0,v1
	if((A->m_nSign*b)>=0)
	{
		//p = move(A);
		p = A;
		sum=b+p->m_ulValue[0];
		p->m_ulValue[0]=(unsigned int)sum;
a0020410:	00852821 	addu	a1,a0,a1
		}
		return p;
	}
	else
		return Sub_p(A, -b);
}
a0020414:	03e00008 	jr	ra
a0020418:	ac650008 	sw	a1,8(v1)
				p->m_nLength=i+1;
		}
		return p;
	}
	else
		return Sub_p(A, -b);
a002041c:	00052823 	negu	a1,a1
a0020420:	080080c5 	j	a0020314 <Sub_p>
a0020424:	00000000 	nop

a0020428 <Mul_p>:
	unsigned long long mul;

	//p = move(A);
	p = A;
	carry = 0;
	for(i=0;i<p->m_nLength;i++)
a0020428:	8c830004 	lw	v1,4(a0)
a002042c:	00000000 	nop
a0020430:	1860001c 	blez	v1,a00204a4 <Mul_p+0x7c>
a0020434:	00801021 	move	v0,a0
a0020438:	00055fc3 	sra	t3,a1,0x1f
a002043c:	00004021 	move	t0,zero
a0020440:	00004821 	move	t1,zero
	{
		mul = p->m_ulValue[i];
		mul = mul * b + carry;
a0020444:	8c8c0008 	lw	t4,8(a0)
	unsigned long long mul;

	//p = move(A);
	p = A;
	carry = 0;
	for(i=0;i<p->m_nLength;i++)
a0020448:	25290001 	addiu	t1,t1,1
a002044c:	0123502a 	slt	t2,t1,v1
	{
		mul = p->m_ulValue[i];
		mul = mul * b + carry;
a0020450:	00ac0019 	multu	a1,t4
a0020454:	00003012 	mflo	a2
a0020458:	01063021 	addu	a2,t0,a2
a002045c:	00c8402b 	sltu	t0,a2,t0
a0020460:	00003810 	mfhi	a3
		p->m_ulValue[i] = (unsigned int)mul;
a0020464:	ac860008 	sw	a2,8(a0)
	unsigned long long mul;

	//p = move(A);
	p = A;
	carry = 0;
	for(i=0;i<p->m_nLength;i++)
a0020468:	24840004 	addiu	a0,a0,4
	{
		mul = p->m_ulValue[i];
		mul = mul * b + carry;
a002046c:	016c0018 	mult	t3,t4
a0020470:	00006012 	mflo	t4
a0020474:	01876021 	addu	t4,t4,a3
	unsigned long long mul;

	//p = move(A);
	p = A;
	carry = 0;
	for(i=0;i<p->m_nLength;i++)
a0020478:	1540fff2 	bnez	t2,a0020444 <Mul_p+0x1c>
a002047c:	010c4021 	addu	t0,t0,t4
		mul = mul * b + carry;
		p->m_ulValue[i] = (unsigned int)mul;
		carry = (unsigned int)((mul-p->m_ulValue[i])>>32);
	}

	if(carry&&(p->m_nLength<BI_MAXLEN))
a0020480:	11000008 	beqz	t0,a00204a4 <Mul_p+0x7c>
a0020484:	28640081 	slti	a0,v1,129
a0020488:	10800006 	beqz	a0,a00204a4 <Mul_p+0x7c>
a002048c:	24640002 	addiu	a0,v1,2
	{
		p->m_nLength++;
		p->m_ulValue[p->m_nLength-1] = carry;
a0020490:	00042080 	sll	a0,a0,0x2
a0020494:	00442021 	addu	a0,v0,a0
		carry = (unsigned int)((mul-p->m_ulValue[i])>>32);
	}

	if(carry&&(p->m_nLength<BI_MAXLEN))
	{
		p->m_nLength++;
a0020498:	24630001 	addiu	v1,v1,1
a002049c:	ac430004 	sw	v1,4(v0)
		p->m_ulValue[p->m_nLength-1] = carry;
a00204a0:	ac880000 	sw	t0,0(a0)
	}

	if(b<0)
a00204a4:	04a00003 	bltz	a1,a00204b4 <Mul_p+0x8c>
a00204a8:	24040001 	li	a0,1
		p->m_nSign = 1 - p->m_nSign;

	return p;
}
a00204ac:	03e00008 	jr	ra
a00204b0:	00000000 	nop
		p->m_nLength++;
		p->m_ulValue[p->m_nLength-1] = carry;
	}

	if(b<0)
		p->m_nSign = 1 - p->m_nSign;
a00204b4:	8c430000 	lw	v1,0(v0)
a00204b8:	00000000 	nop
a00204bc:	00831823 	subu	v1,a0,v1

	return p;
}
a00204c0:	03e00008 	jr	ra
a00204c4:	ac430000 	sw	v1,0(v0)

a00204c8 <Div_p>:
	p->m_nSign = ((A->m_nSign+B->m_nSign==1) ? 0 : 1);
	return p;
}

BI __attribute__ ((nomips16)) * Div_p(BI *A, int b)
{
a00204c8:	27bdfff8 	addiu	sp,sp,-8
a00204cc:	afb00004 	sw	s0,4(sp)
	BI *p;
	unsigned long long div, mul;

	//p = move(A);
	p = A;
	if(p->m_nLength==1)
a00204d0:	8c830004 	lw	v1,4(a0)
	p->m_nSign = ((A->m_nSign+B->m_nSign==1) ? 0 : 1);
	return p;
}

BI __attribute__ ((nomips16)) * Div_p(BI *A, int b)
{
a00204d4:	00801021 	move	v0,a0
	BI *p;
	unsigned long long div, mul;

	//p = move(A);
	p = A;
	if(p->m_nLength==1)
a00204d8:	24040001 	li	a0,1
a00204dc:	10640067 	beq	v1,a0,a002067c <Div_p+0x1b4>
a00204e0:	2464ffff 	addiu	a0,v1,-1
		p->m_ulValue[0] = p-> m_ulValue[0] / b;
		return p;
	}

	carry = 0;
	for(i=p->m_nLength-1;i>=0;i--)
a00204e4:	04800053 	bltz	a0,a0020634 <Div_p+0x16c>
a00204e8:	00005021 	move	t2,zero
a00204ec:	24640001 	addiu	a0,v1,1
a00204f0:	00042080 	sll	a0,a0,0x2
a00204f4:	00442021 	addu	a0,v0,a0

	p->m_nSign = ((A->m_nSign+B->m_nSign==1) ? 0 : 1);
	return p;
}

BI __attribute__ ((nomips16)) * Div_p(BI *A, int b)
a00204f8:	08008171 	j	a00205c4 <Div_p+0xfc>
a00204fc:	00007021 	move	t6,zero
	carry = 0;
	for(i=p->m_nLength-1;i>=0;i--)
	{
		div = carry;
		div = (div<<32) + p->m_ulValue[i];
		p->m_ulValue[i] = (unsigned int) do_div(div, b);
a0020500:	01c5001b 	divu	zero,t6,a1
a0020504:	00007810 	mfhi	t7
a0020508:	01006821 	move	t5,t0
a002050c:	01e04821 	move	t1,t7
		mul = (do_div(div, b)) * b;
a0020510:	00003021 	move	a2,zero
	carry = 0;
	for(i=p->m_nLength-1;i>=0;i--)
	{
		div = carry;
		div = (div<<32) + p->m_ulValue[i];
		p->m_ulValue[i] = (unsigned int) do_div(div, b);
a0020514:	00005821 	move	t3,zero
a0020518:	0000c021 	move	t8,zero
a002051c:	10000006 	b	a0020538 <Div_p+0x70>
a0020520:	24190021 	li	t9,33
a0020524:	00090840 	sll	at,t1,0x1
a0020528:	0009c7c2 	srl	t8,t1,0x1f
a002052c:	00304825 	or	t1,at,s0
a0020530:	000d6840 	sll	t5,t5,0x1
a0020534:	000b5840 	sll	t3,t3,0x1
a0020538:	17000002 	bnez	t8,a0020544 <Div_p+0x7c>
a002053c:	0125802b 	sltu	s0,t1,a1
a0020540:	16000003 	bnez	s0,a0020550 <Div_p+0x88>
a0020544:	2739ffff 	addiu	t9,t9,-1
a0020548:	01254823 	subu	t1,t1,a1
a002054c:	256b0001 	addiu	t3,t3,1
a0020550:	1720fff4 	bnez	t9,a0020524 <Div_p+0x5c>
a0020554:	000d87c2 	srl	s0,t5,0x1f
		mul = (do_div(div, b)) * b;
a0020558:	01e04821 	move	t1,t7
	carry = 0;
	for(i=p->m_nLength-1;i>=0;i--)
	{
		div = carry;
		div = (div<<32) + p->m_ulValue[i];
		p->m_ulValue[i] = (unsigned int) do_div(div, b);
a002055c:	ac8b0000 	sw	t3,0(a0)
		mul = (do_div(div, b)) * b;
a0020560:	254a0001 	addiu	t2,t2,1
a0020564:	01006821 	move	t5,t0
a0020568:	2484fffc 	addiu	a0,a0,-4
a002056c:	00005821 	move	t3,zero
a0020570:	00007021 	move	t6,zero
a0020574:	10000006 	b	a0020590 <Div_p+0xc8>
a0020578:	240f0021 	li	t7,33
a002057c:	00090840 	sll	at,t1,0x1
a0020580:	000977c2 	srl	t6,t1,0x1f
a0020584:	00384825 	or	t1,at,t8
a0020588:	000d6840 	sll	t5,t5,0x1
a002058c:	000b5840 	sll	t3,t3,0x1
a0020590:	15c00002 	bnez	t6,a002059c <Div_p+0xd4>
a0020594:	0125c02b 	sltu	t8,t1,a1
a0020598:	17000003 	bnez	t8,a00205a8 <Div_p+0xe0>
a002059c:	25efffff 	addiu	t7,t7,-1
a00205a0:	01254823 	subu	t1,t1,a1
a00205a4:	256b0001 	addiu	t3,t3,1
a00205a8:	15e0fff4 	bnez	t7,a002057c <Div_p+0xb4>
a00205ac:	000dc7c2 	srl	t8,t5,0x1f
		p->m_ulValue[0] = p-> m_ulValue[0] / b;
		return p;
	}

	carry = 0;
	for(i=p->m_nLength-1;i>=0;i--)
a00205b0:	1143001d 	beq	t2,v1,a0020628 <Div_p+0x160>
a00205b4:	01665825 	or	t3,t3,a2
	{
		div = carry;
		div = (div<<32) + p->m_ulValue[i];
		p->m_ulValue[i] = (unsigned int) do_div(div, b);
		mul = (do_div(div, b)) * b;
		carry = (unsigned int)(div - mul);
a00205b8:	01650019 	multu	t3,a1
a00205bc:	00007012 	mflo	t6
a00205c0:	010e7023 	subu	t6,t0,t6

	carry = 0;
	for(i=p->m_nLength-1;i>=0;i--)
	{
		div = carry;
		div = (div<<32) + p->m_ulValue[i];
a00205c4:	8c880000 	lw	t0,0(a0)
		p->m_ulValue[i] = (unsigned int) do_div(div, b);
a00205c8:	15c0ffcd 	bnez	t6,a0020500 <Div_p+0x38>
a00205cc:	01c04821 	move	t1,t6
a00205d0:	01005821 	move	t3,t0
a00205d4:	00003021 	move	a2,zero
a00205d8:	00006821 	move	t5,zero
a00205dc:	00007021 	move	t6,zero
a00205e0:	10000006 	b	a00205fc <Div_p+0x134>
a00205e4:	240f0021 	li	t7,33
a00205e8:	00090840 	sll	at,t1,0x1
a00205ec:	000977c2 	srl	t6,t1,0x1f
a00205f0:	00384825 	or	t1,at,t8
a00205f4:	000b5840 	sll	t3,t3,0x1
a00205f8:	000d6840 	sll	t5,t5,0x1
a00205fc:	15c00002 	bnez	t6,a0020608 <Div_p+0x140>
a0020600:	0125c02b 	sltu	t8,t1,a1
a0020604:	17000003 	bnez	t8,a0020614 <Div_p+0x14c>
a0020608:	25efffff 	addiu	t7,t7,-1
a002060c:	01254823 	subu	t1,t1,a1
a0020610:	25ad0001 	addiu	t5,t5,1
a0020614:	15e0fff4 	bnez	t7,a00205e8 <Div_p+0x120>
a0020618:	000bc7c2 	srl	t8,t3,0x1f
a002061c:	00004821 	move	t1,zero
a0020620:	08008158 	j	a0020560 <Div_p+0x98>
a0020624:	ac8d0000 	sw	t5,0(a0)
		mul = (do_div(div, b)) * b;
		carry = (unsigned int)(div - mul);
a0020628:	8c440004 	lw	a0,4(v0)
a002062c:	00000000 	nop
a0020630:	2484ffff 	addiu	a0,a0,-1
	}

	if(p->m_ulValue[p->m_nLength-1] == 0)
a0020634:	24830002 	addiu	v1,a0,2
a0020638:	00031880 	sll	v1,v1,0x2
a002063c:	00431821 	addu	v1,v0,v1
a0020640:	8c630000 	lw	v1,0(v1)
a0020644:	00000000 	nop
a0020648:	1060000a 	beqz	v1,a0020674 <Div_p+0x1ac>
a002064c:	00000000 	nop
		p->m_nLength--;
	if(b < 0)
a0020650:	04a10005 	bgez	a1,a0020668 <Div_p+0x1a0>
a0020654:	24040001 	li	a0,1
		p->m_nSign = 1 - p->m_nSign;
a0020658:	8c430000 	lw	v1,0(v0)
a002065c:	00000000 	nop
a0020660:	00831823 	subu	v1,a0,v1
a0020664:	ac430000 	sw	v1,0(v0)
	return p;
}
a0020668:	8fb00004 	lw	s0,4(sp)
a002066c:	03e00008 	jr	ra
a0020670:	27bd0008 	addiu	sp,sp,8
		mul = (do_div(div, b)) * b;
		carry = (unsigned int)(div - mul);
	}

	if(p->m_ulValue[p->m_nLength-1] == 0)
		p->m_nLength--;
a0020674:	08008194 	j	a0020650 <Div_p+0x188>
a0020678:	ac440004 	sw	a0,4(v0)

	//p = move(A);
	p = A;
	if(p->m_nLength==1)
	{
		p->m_ulValue[0] = p-> m_ulValue[0] / b;
a002067c:	8c430008 	lw	v1,8(v0)
	if(p->m_ulValue[p->m_nLength-1] == 0)
		p->m_nLength--;
	if(b < 0)
		p->m_nSign = 1 - p->m_nSign;
	return p;
}
a0020680:	00000000 	nop

	//p = move(A);
	p = A;
	if(p->m_nLength==1)
	{
		p->m_ulValue[0] = p-> m_ulValue[0] / b;
a0020684:	0065001b 	divu	zero,v1,a1
a0020688:	14a00002 	bnez	a1,a0020694 <Div_p+0x1cc>
a002068c:	00000000 	nop
a0020690:	0007000d 	break	0x7
a0020694:	00002812 	mflo	a1
a0020698:	ac450008 	sw	a1,8(v0)
	if(p->m_ulValue[p->m_nLength-1] == 0)
		p->m_nLength--;
	if(b < 0)
		p->m_nSign = 1 - p->m_nSign;
	return p;
}
a002069c:	8fb00004 	lw	s0,4(sp)
a00206a0:	03e00008 	jr	ra
a00206a4:	27bd0008 	addiu	sp,sp,8

a00206a8 <Mod_p>:
	int i;
	unsigned int carry;
	unsigned long long div;
	unsigned long long temp;

	if(A->m_nLength==1)
a00206a8:	8c830004 	lw	v1,4(a0)
a00206ac:	24020001 	li	v0,1
a00206b0:	1062002f 	beq	v1,v0,a0020770 <Mod_p+0xc8>
a00206b4:	00000000 	nop
		return(A->m_ulValue[0]%b);

	carry = 0;
	for(i=A->m_nLength-1;i>=0;i--)
a00206b8:	2462ffff 	addiu	v0,v1,-1
a00206bc:	04400034 	bltz	v0,a0020790 <Mod_p+0xe8>
a00206c0:	00000000 	nop
a00206c4:	24620001 	addiu	v0,v1,1
a00206c8:	00021080 	sll	v0,v0,0x2
a00206cc:	00822021 	addu	a0,a0,v0
	}

	return p;
}

unsigned int __attribute__ ((nomips16)) Mod_p(BI *A, int b)
a00206d0:	00004021 	move	t0,zero
a00206d4:	080081d2 	j	a0020748 <Mod_p+0xa0>
a00206d8:	00001021 	move	v0,zero

	carry = 0;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		div = carry * ((unsigned long long)0x1 << 32) + A->m_ulValue[i];
		temp = do_div(div, b);
a00206dc:	00003021 	move	a2,zero
a00206e0:	00005021 	move	t2,zero
a00206e4:	01205821 	move	t3,t1
a00206e8:	00001021 	move	v0,zero
a00206ec:	00006021 	move	t4,zero
a00206f0:	10000006 	b	a002070c <Mod_p+0x64>
a00206f4:	240d0021 	li	t5,33
a00206f8:	000a0840 	sll	at,t2,0x1
a00206fc:	000a67c2 	srl	t4,t2,0x1f
a0020700:	002e5025 	or	t2,at,t6
a0020704:	000b5840 	sll	t3,t3,0x1
a0020708:	00021040 	sll	v0,v0,0x1
a002070c:	15800002 	bnez	t4,a0020718 <Mod_p+0x70>
a0020710:	0145702b 	sltu	t6,t2,a1
a0020714:	15c00003 	bnez	t6,a0020724 <Mod_p+0x7c>
a0020718:	25adffff 	addiu	t5,t5,-1
a002071c:	01455023 	subu	t2,t2,a1
a0020720:	24420001 	addiu	v0,v0,1
a0020724:	15a0fff4 	bnez	t5,a00206f8 <Mod_p+0x50>
a0020728:	000b77c2 	srl	t6,t3,0x1f
		carry = (unsigned int)(div - (temp * b));
a002072c:	00461025 	or	v0,v0,a2
a0020730:	00a20018 	mult	a1,v0
a0020734:	25080001 	addiu	t0,t0,1
a0020738:	2484fffc 	addiu	a0,a0,-4
a002073c:	00001012 	mflo	v0

	if(A->m_nLength==1)
		return(A->m_ulValue[0]%b);

	carry = 0;
	for(i=A->m_nLength-1;i>=0;i--)
a0020740:	11030009 	beq	t0,v1,a0020768 <Mod_p+0xc0>
a0020744:	01221023 	subu	v0,t1,v0
	{
		div = carry * ((unsigned long long)0x1 << 32) + A->m_ulValue[i];
a0020748:	8c890000 	lw	t1,0(a0)
		temp = do_div(div, b);
a002074c:	1040ffe3 	beqz	v0,a00206dc <Mod_p+0x34>
a0020750:	00000000 	nop
a0020754:	0045001b 	divu	zero,v0,a1
a0020758:	00005810 	mfhi	t3
a002075c:	00003021 	move	a2,zero
a0020760:	080081b9 	j	a00206e4 <Mod_p+0x3c>
a0020764:	01605021 	move	t2,t3
		carry = (unsigned int)(div - (temp * b));
	}
	return carry;
}
a0020768:	03e00008 	jr	ra
a002076c:	00000000 	nop
	unsigned int carry;
	unsigned long long div;
	unsigned long long temp;

	if(A->m_nLength==1)
		return(A->m_ulValue[0]%b);
a0020770:	8c820008 	lw	v0,8(a0)
a0020774:	00000000 	nop
a0020778:	0045001b 	divu	zero,v0,a1
a002077c:	14a00002 	bnez	a1,a0020788 <Mod_p+0xe0>
a0020780:	00000000 	nop
a0020784:	0007000d 	break	0x7
a0020788:	03e00008 	jr	ra
a002078c:	00001010 	mfhi	v0

	carry = 0;
	for(i=A->m_nLength-1;i>=0;i--)
a0020790:	03e00008 	jr	ra
a0020794:	00001021 	move	v0,zero

a0020798 <OutPutToAddr>:
	return str;
}
#endif

void OutPutToAddr(BI *A, unsigned char *addr, char reverse)
{
a0020798:	00063600 	sll	a2,a2,0x18
a002079c:	00063603 	sra	a2,a2,0x18
	int i;

	if (reverse) {
a00207a0:	14c00012 	bnez	a2,a00207ec <OutPutToAddr+0x54>
a00207a4:	00000000 	nop
			*addr = (A->m_ulValue[i] >> 0) & 0xff;
			addr++;
		}
	}
	else {
		for (i = 0; i < A->m_nLength; i++, addr+=4)
a00207a8:	8c820004 	lw	v0,4(a0)
a00207ac:	00000000 	nop
a00207b0:	18400028 	blez	v0,a0020854 <OutPutToAddr+0xbc>
a00207b4:	00000000 	nop
void OutPutToAddr(BI *A, unsigned char *addr, char reverse)
{
	int i;

	if (reverse) {
		for (i = A->m_nLength - 1; i >= 0; i--) {
a00207b8:	00801821 	move	v1,a0
a00207bc:	00001021 	move	v0,zero
			addr++;
		}
	}
	else {
		for (i = 0; i < A->m_nLength; i++, addr+=4)
			*(unsigned int *)addr = A->m_ulValue[i];
a00207c0:	8c660008 	lw	a2,8(v1)
			*addr = (A->m_ulValue[i] >> 0) & 0xff;
			addr++;
		}
	}
	else {
		for (i = 0; i < A->m_nLength; i++, addr+=4)
a00207c4:	24420001 	addiu	v0,v0,1
a00207c8:	24630004 	addiu	v1,v1,4
			*(unsigned int *)addr = A->m_ulValue[i];
a00207cc:	aca60000 	sw	a2,0(a1)
			*addr = (A->m_ulValue[i] >> 0) & 0xff;
			addr++;
		}
	}
	else {
		for (i = 0; i < A->m_nLength; i++, addr+=4)
a00207d0:	8c860004 	lw	a2,4(a0)
a00207d4:	00000000 	nop
a00207d8:	0046302a 	slt	a2,v0,a2
a00207dc:	14c0fff8 	bnez	a2,a00207c0 <OutPutToAddr+0x28>
a00207e0:	24a50004 	addiu	a1,a1,4
a00207e4:	03e00008 	jr	ra
a00207e8:	00000000 	nop
void OutPutToAddr(BI *A, unsigned char *addr, char reverse)
{
	int i;

	if (reverse) {
		for (i = A->m_nLength - 1; i >= 0; i--) {
a00207ec:	8c860004 	lw	a2,4(a0)
a00207f0:	00000000 	nop
a00207f4:	24c2ffff 	addiu	v0,a2,-1
a00207f8:	04400016 	bltz	v0,a0020854 <OutPutToAddr+0xbc>
a00207fc:	00000000 	nop
a0020800:	24c20001 	addiu	v0,a2,1
a0020804:	00021080 	sll	v0,v0,0x2
a0020808:	00822021 	addu	a0,a0,v0

	return str;
}
#endif

void OutPutToAddr(BI *A, unsigned char *addr, char reverse)
a002080c:	00001021 	move	v0,zero
{
	int i;

	if (reverse) {
		for (i = A->m_nLength - 1; i >= 0; i--) {
			*addr = (A->m_ulValue[i] >> 24) & 0xff;
a0020810:	90830003 	lbu	v1,3(a0)

	return str;
}
#endif

void OutPutToAddr(BI *A, unsigned char *addr, char reverse)
a0020814:	24420001 	addiu	v0,v0,1
{
	int i;

	if (reverse) {
		for (i = A->m_nLength - 1; i >= 0; i--) {
			*addr = (A->m_ulValue[i] >> 24) & 0xff;
a0020818:	a0a30000 	sb	v1,0(a1)
			addr++;
			*addr = (A->m_ulValue[i] >> 16) & 0xff;
a002081c:	94830002 	lhu	v1,2(a0)
a0020820:	00000000 	nop
a0020824:	a0a30001 	sb	v1,1(a1)
			addr++;
			*addr = (A->m_ulValue[i] >> 8) & 0xff;
a0020828:	8c830000 	lw	v1,0(a0)
a002082c:	00000000 	nop
a0020830:	00031a02 	srl	v1,v1,0x8
a0020834:	a0a30002 	sb	v1,2(a1)
			addr++;
			*addr = (A->m_ulValue[i] >> 0) & 0xff;
a0020838:	8c830000 	lw	v1,0(a0)

	return str;
}
#endif

void OutPutToAddr(BI *A, unsigned char *addr, char reverse)
a002083c:	2484fffc 	addiu	a0,a0,-4
			addr++;
			*addr = (A->m_ulValue[i] >> 16) & 0xff;
			addr++;
			*addr = (A->m_ulValue[i] >> 8) & 0xff;
			addr++;
			*addr = (A->m_ulValue[i] >> 0) & 0xff;
a0020840:	a0a30003 	sb	v1,3(a1)
void OutPutToAddr(BI *A, unsigned char *addr, char reverse)
{
	int i;

	if (reverse) {
		for (i = A->m_nLength - 1; i >= 0; i--) {
a0020844:	1446fff2 	bne	v0,a2,a0020810 <OutPutToAddr+0x78>
a0020848:	24a50004 	addiu	a1,a1,4
a002084c:	03e00008 	jr	ra
a0020850:	00000000 	nop
a0020854:	03e00008 	jr	ra
a0020858:	00000000 	nop

a002085c <BI_setbit>:
	/******************
	 * Add for HW RSA *
	 ******************/ //Sean
	void BI_setbit (BI *bi, int n)
	{
		if (bi == NULL)
a002085c:	1080000a 	beqz	a0,a0020888 <BI_setbit+0x2c>
a0020860:	00000000 	nop
			return;

		//bi->m_nSign = 0;
		bi->m_nLength = (n >> 5) + 1;
a0020864:	00051143 	sra	v0,a1,0x5

		bi->m_ulValue[bi->m_nLength - 1] = 1 << ( n & 0x1F );
a0020868:	24430002 	addiu	v1,v0,2
a002086c:	00031880 	sll	v1,v1,0x2
a0020870:	24060001 	li	a2,1
a0020874:	00831821 	addu	v1,a0,v1
a0020878:	00a62804 	sllv	a1,a2,a1
	{
		if (bi == NULL)
			return;

		//bi->m_nSign = 0;
		bi->m_nLength = (n >> 5) + 1;
a002087c:	24420001 	addiu	v0,v0,1
a0020880:	ac820004 	sw	v0,4(a0)

		bi->m_ulValue[bi->m_nLength - 1] = 1 << ( n & 0x1F );
a0020884:	ac650000 	sw	a1,0(v1)
a0020888:	03e00008 	jr	ra
a002088c:	00000000 	nop

a0020890 <BI_chkmsbbit>:
	int BI_chkmsbbit (BI *bi)
	{
		UINT32 check_bit;
		int i, j;

		if (bi == NULL)
a0020890:	1080001e 	beqz	a0,a002090c <BI_chkmsbbit+0x7c>
a0020894:	00000000 	nop
			return -1;

		for ( i = bi->m_nLength - 1; i >= 0; i-- )
a0020898:	8c820004 	lw	v0,4(a0)
a002089c:	00000000 	nop
a00208a0:	2448ffff 	addiu	t0,v0,-1
a00208a4:	05000017 	bltz	t0,a0020904 <BI_chkmsbbit+0x74>
a00208a8:	00000000 	nop
a00208ac:	24420001 	addiu	v0,v0,1
a00208b0:	00021080 	sll	v0,v0,0x2
a00208b4:	00822021 	addu	a0,a0,v0
		{
			check_bit = 0x80000000;

			for ( j = 0; j < 32; j++ )
a00208b8:	24070020 	li	a3,32
		int i, j;

		if (bi == NULL)
			return -1;

		for ( i = bi->m_nLength - 1; i >= 0; i-- )
a00208bc:	8c860000 	lw	a2,0(a0)
a00208c0:	00002821 	move	a1,zero
a00208c4:	08008235 	j	a00208d4 <BI_chkmsbbit+0x44>
a00208c8:	3c038000 	lui	v1,0x8000
		{
			check_bit = 0x80000000;

			for ( j = 0; j < 32; j++ )
a00208cc:	10a7000a 	beq	a1,a3,a00208f8 <BI_chkmsbbit+0x68>
a00208d0:	00031842 	srl	v1,v1,0x1
			{
				if ( ( bi->m_ulValue[i] & check_bit ) == check_bit )
a00208d4:	00661024 	and	v0,v1,a2
a00208d8:	1443fffc 	bne	v0,v1,a00208cc <BI_chkmsbbit+0x3c>
a00208dc:	24a50001 	addiu	a1,a1,1
a00208e0:	24a5ffff 	addiu	a1,a1,-1
				{
					return ( ( ( i + 1 ) << 5 ) - ( j + 1 ) );
a00208e4:	25020001 	addiu	v0,t0,1
a00208e8:	00021140 	sll	v0,v0,0x5
a00208ec:	00052827 	nor	a1,zero,a1
a00208f0:	03e00008 	jr	ra
a00208f4:	00451021 	addu	v0,v0,a1
		int i, j;

		if (bi == NULL)
			return -1;

		for ( i = bi->m_nLength - 1; i >= 0; i-- )
a00208f8:	2508ffff 	addiu	t0,t0,-1
a00208fc:	0501ffef 	bgez	t0,a00208bc <BI_chkmsbbit+0x2c>
a0020900:	2484fffc 	addiu	a0,a0,-4
				check_bit >>= 1;
			}
		}

		return 0;
	}
a0020904:	03e00008 	jr	ra
a0020908:	00001021 	move	v0,zero
	int BI_chkmsbbit (BI *bi)
	{
		UINT32 check_bit;
		int i, j;

		if (bi == NULL)
a002090c:	03e00008 	jr	ra
a0020910:	2402ffff 	li	v0,-1

a0020914 <BI_is_bit_set>:
		return 0;
	}

	int BI_is_bit_set (BI *bi, int n)
	{
		if (bi == NULL)
a0020914:	1080000b 	beqz	a0,a0020944 <BI_is_bit_set+0x30>
a0020918:	00000000 	nop
a002091c:	00051143 	sra	v0,a1,0x5
a0020920:	24420002 	addiu	v0,v0,2
a0020924:	00021080 	sll	v0,v0,0x2
a0020928:	00822021 	addu	a0,a0,v0
a002092c:	8c830000 	lw	v1,0(a0)
a0020930:	24020001 	li	v0,1
a0020934:	00a21004 	sllv	v0,v0,a1
a0020938:	00431024 	and	v0,v0,v1

		if ( ( bi->m_ulValue[n >> 5] ) & ( 1 << (n & 0x1F) ) )
			return 1;
		else
			return 0;
	}
a002093c:	03e00008 	jr	ra
a0020940:	0002102b 	sltu	v0,zero,v0
		return 0;
	}

	int BI_is_bit_set (BI *bi, int n)
	{
		if (bi == NULL)
a0020944:	03e00008 	jr	ra
a0020948:	2402ffff 	li	v0,-1

a002094c <Sub>:
	else
		return Sub_p(A, -b);
}

BI *Sub(BI *A, BI *B)
{
a002094c:	27bdffe0 	addiu	sp,sp,-32
a0020950:	afbf001c 	sw	ra,28(sp)
	int i, cmp, len, carry;
	BI *p;
	unsigned long long num;
	unsigned int *s,*d;

	if(A->m_nSign == B->m_nSign)
a0020954:	8c870000 	lw	a3,0(a0)
a0020958:	8ca60000 	lw	a2,0(a1)
	else
		return Sub_p(A, -b);
}

BI *Sub(BI *A, BI *B)
{
a002095c:	00801021 	move	v0,a0
	int i, cmp, len, carry;
	BI *p;
	unsigned long long num;
	unsigned int *s,*d;

	if(A->m_nSign == B->m_nSign)
a0020960:	10e60007 	beq	a3,a2,a0020980 <Sub+0x34>
a0020964:	00a01821 	move	v1,a1
		return p;
	}
	else {
		//p = move(B);
		p = B;
		p->m_nSign = 1 - p->m_nSign;
a0020968:	24020001 	li	v0,1
a002096c:	00463023 	subu	a2,v0,a2
a0020970:	aca60000 	sw	a2,0(a1)
		return Add(A, p);
	}

	return p;
}
a0020974:	8fbf001c 	lw	ra,28(sp)
	}
	else {
		//p = move(B);
		p = B;
		p->m_nSign = 1 - p->m_nSign;
		return Add(A, p);
a0020978:	080082bc 	j	a0020af0 <Add>
a002097c:	27bd0020 	addiu	sp,sp,32
 */
int Cmp(BI *A, BI *B)
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
a0020980:	8c8c0004 	lw	t4,4(a0)
a0020984:	8ca40004 	lw	a0,4(a1)
a0020988:	00000000 	nop
a002098c:	008c282a 	slt	a1,a0,t4
a0020990:	14a00028 	bnez	a1,a0020a34 <Sub+0xe8>
a0020994:	0184282a 	slt	a1,t4,a0
	if(A->m_nLength < B->m_nLength)return -1;
a0020998:	14a00050 	bnez	a1,a0020adc <Sub+0x190>
a002099c:	24050001 	li	a1,1
	for(i=A->m_nLength-1;i>=0;i--)
a00209a0:	2585ffff 	addiu	a1,t4,-1
a00209a4:	04a0001b 	bltz	a1,a0020a14 <Sub+0xc8>
a00209a8:	25860001 	addiu	a2,t4,1
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a00209ac:	00063080 	sll	a2,a2,0x2
a00209b0:	00664021 	addu	t0,v1,a2
a00209b4:	00463021 	addu	a2,v0,a2
a00209b8:	8cc60000 	lw	a2,0(a2)
a00209bc:	8d080000 	lw	t0,0(t0)
a00209c0:	00000000 	nop
a00209c4:	0106482b 	sltu	t1,t0,a2
a00209c8:	1520001a 	bnez	t1,a0020a34 <Sub+0xe8>
a00209cc:	00c8302b 	sltu	a2,a2,t0
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a00209d0:	14c00041 	bnez	a2,a0020ad8 <Sub+0x18c>
a00209d4:	000c3080 	sll	a2,t4,0x2

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a00209d8:	00664021 	addu	t0,v1,a2
a00209dc:	08008282 	j	a0020a08 <Sub+0xbc>
a00209e0:	00463021 	addu	a2,v0,a2
a00209e4:	8cca0000 	lw	t2,0(a2)
a00209e8:	8d090000 	lw	t1,0(t0)
a00209ec:	24c6fffc 	addiu	a2,a2,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a00209f0:	0149582b 	sltu	t3,t2,t1

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a00209f4:	012a482b 	sltu	t1,t1,t2
a00209f8:	1520000e 	bnez	t1,a0020a34 <Sub+0xe8>
a00209fc:	2508fffc 	addiu	t0,t0,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a0020a00:	15600035 	bnez	t3,a0020ad8 <Sub+0x18c>
a0020a04:	00000000 	nop
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a0020a08:	24a5ffff 	addiu	a1,a1,-1
a0020a0c:	04a1fff5 	bgez	a1,a00209e4 <Sub+0x98>
a0020a10:	00000000 	nop
		p = A;
		cmp = Cmp(p, B);
		if(cmp == 0)
		{
			//p = move_p(0);
			memset(p, 0, sizeof(BI));	// reset BI value
a0020a14:	00402021 	move	a0,v0
a0020a18:	00002821 	move	a1,zero
a0020a1c:	2406020c 	li	a2,524
a0020a20:	0c008661 	jal	a0021984 <set_memory>
a0020a24:	afa20010 	sw	v0,16(sp)
			return p;
a0020a28:	8fa20010 	lw	v0,16(sp)
a0020a2c:	080082b2 	j	a0020ac8 <Sub+0x17c>
a0020a30:	00000000 	nop
		}

		if(cmp > 0)	// p > B
		{
			s = p->m_ulValue;
			d = B->m_ulValue;
a0020a34:	24630008 	addiu	v1,v1,8
a0020a38:	01802021 	move	a0,t4
			return p;
		}

		if(cmp > 0)	// p > B
		{
			s = p->m_ulValue;
a0020a3c:	24490008 	addiu	t1,v0,8
			len = B->m_nLength;
			p->m_nSign = 1 - p->m_nSign;
		}

		carry = 0;
		for(i=0;i<len;i++)
a0020a40:	18800018 	blez	a0,a0020aa4 <Sub+0x158>
a0020a44:	00003021 	move	a2,zero
a0020a48:	00404021 	move	t0,v0
a0020a4c:	0800829b 	j	a0020a6c <Sub+0x120>
a0020a50:	00003821 	move	a3,zero
a0020a54:	24e70001 	addiu	a3,a3,1
		{
			if((s[i]-carry) >= d[i])
			{
				p->m_ulValue[i] = s[i] - carry - d[i];
a0020a58:	ad0b0008 	sw	t3,8(t0)
			len = B->m_nLength;
			p->m_nSign = 1 - p->m_nSign;
		}

		carry = 0;
		for(i=0;i<len;i++)
a0020a5c:	25290004 	addiu	t1,t1,4
a0020a60:	24630004 	addiu	v1,v1,4
a0020a64:	10e4000f 	beq	a3,a0,a0020aa4 <Sub+0x158>
a0020a68:	25080004 	addiu	t0,t0,4
		{
			if((s[i]-carry) >= d[i])
a0020a6c:	8d2a0000 	lw	t2,0(t1)
a0020a70:	8c650000 	lw	a1,0(v1)
a0020a74:	01463023 	subu	a2,t2,a2
			{
				p->m_ulValue[i] = s[i] - carry - d[i];
a0020a78:	00c55823 	subu	t3,a2,a1
		}

		carry = 0;
		for(i=0;i<len;i++)
		{
			if((s[i]-carry) >= d[i])
a0020a7c:	00c5282b 	sltu	a1,a2,a1
a0020a80:	10a0fff4 	beqz	a1,a0020a54 <Sub+0x108>
a0020a84:	00003021 	move	a2,zero
			len = B->m_nLength;
			p->m_nSign = 1 - p->m_nSign;
		}

		carry = 0;
		for(i=0;i<len;i++)
a0020a88:	24e70001 	addiu	a3,a3,1
				carry = 0;
			}
			else	// borrow from upper digit
			{
				num = ((unsigned long long)0x1 << 32) + s[i];
				p->m_ulValue[i] = (unsigned int)(num - carry - d[i]);
a0020a8c:	ad0b0008 	sw	t3,8(t0)
a0020a90:	24060001 	li	a2,1
			len = B->m_nLength;
			p->m_nSign = 1 - p->m_nSign;
		}

		carry = 0;
		for(i=0;i<len;i++)
a0020a94:	25290004 	addiu	t1,t1,4
a0020a98:	24630004 	addiu	v1,v1,4
a0020a9c:	14e4fff3 	bne	a3,a0,a0020a6c <Sub+0x120>
a0020aa0:	25080004 	addiu	t0,t0,4
a0020aa4:	24830001 	addiu	v1,a0,1
a0020aa8:	00031880 	sll	v1,v1,0x2
a0020aac:	00431821 	addu	v1,v0,v1
				p->m_ulValue[i] = (unsigned int)(num - carry - d[i]);
				carry = 1;
			}
		}

		while(p->m_ulValue[len-1] == 0)
a0020ab0:	8c650000 	lw	a1,0(v1)
a0020ab4:	00803021 	move	a2,a0
a0020ab8:	2463fffc 	addiu	v1,v1,-4
a0020abc:	10a0fffc 	beqz	a1,a0020ab0 <Sub+0x164>
a0020ac0:	2484ffff 	addiu	a0,a0,-1
			len--;

		p->m_nLength = len;
a0020ac4:	ac460004 	sw	a2,4(v0)
		p->m_nSign = 1 - p->m_nSign;
		return Add(A, p);
	}

	return p;
}
a0020ac8:	8fbf001c 	lw	ra,28(sp)
a0020acc:	00000000 	nop
a0020ad0:	03e00008 	jr	ra
a0020ad4:	27bd0020 	addiu	sp,sp,32
		if(cmp < 0)	// p < B
		{
			s = B->m_ulValue;
			d = p->m_ulValue;
			len = B->m_nLength;
			p->m_nSign = 1 - p->m_nSign;
a0020ad8:	24050001 	li	a1,1
a0020adc:	00a73823 	subu	a3,a1,a3
			d = B->m_ulValue;
			len = p->m_nLength;
		}
		if(cmp < 0)	// p < B
		{
			s = B->m_ulValue;
a0020ae0:	24690008 	addiu	t1,v1,8
			d = p->m_ulValue;
			len = B->m_nLength;
			p->m_nSign = 1 - p->m_nSign;
a0020ae4:	ac470000 	sw	a3,0(v0)
			len = p->m_nLength;
		}
		if(cmp < 0)	// p < B
		{
			s = B->m_ulValue;
			d = p->m_ulValue;
a0020ae8:	08008290 	j	a0020a40 <Sub+0xf4>
a0020aec:	24430008 	addiu	v1,v0,8

a0020af0 <Add>:
	int i;
	unsigned int carry;
	unsigned long long sum;
	BI *p;

	if(A->m_nSign == B->m_nSign)
a0020af0:	8ca60000 	lw	a2,0(a1)
a0020af4:	8c870000 	lw	a3,0(a0)
	else
		return 0;
}

BI *Add(BI *A, BI *B)
{
a0020af8:	00801021 	move	v0,a0
	int i;
	unsigned int carry;
	unsigned long long sum;
	BI *p;

	if(A->m_nSign == B->m_nSign)
a0020afc:	10e60006 	beq	a3,a2,a0020b18 <Add+0x28>
a0020b00:	00a01821 	move	v1,a1
		return p;
	}
	else{
		//p = move(B);
		p = B;
		p->m_nSign = 1 - p->m_nSign;
a0020b04:	24020001 	li	v0,1
a0020b08:	00463023 	subu	a2,v0,a2
a0020b0c:	aca60000 	sw	a2,0(a1)
		return Sub(A, p);
a0020b10:	08008253 	j	a002094c <Sub>
a0020b14:	00000000 	nop
	{
		//p = move(A);
		p = A;
		carry = 0;
		sum = 0;
		if(p->m_nLength < B->m_nLength)
a0020b18:	8c840004 	lw	a0,4(a0)
a0020b1c:	8caa0004 	lw	t2,4(a1)
a0020b20:	00000000 	nop
a0020b24:	008a282a 	slt	a1,a0,t2
a0020b28:	14a00023 	bnez	a1,a0020bb8 <Add+0xc8>
a0020b2c:	00000000 	nop
a0020b30:	00805021 	move	t2,a0
			p->m_nLength = B->m_nLength;

		for(i=0;i<p->m_nLength;i++)
a0020b34:	19400015 	blez	t2,a0020b8c <Add+0x9c>
a0020b38:	00003821 	move	a3,zero
a0020b3c:	8c4a0004 	lw	t2,4(v0)
a0020b40:	00402021 	move	a0,v0
a0020b44:	00003021 	move	a2,zero
		{
			sum = B->m_ulValue[i];
			sum = sum + p->m_ulValue[i] + carry;
a0020b48:	8c880008 	lw	t0,8(a0)
a0020b4c:	8c650008 	lw	a1,8(v1)
		carry = 0;
		sum = 0;
		if(p->m_nLength < B->m_nLength)
			p->m_nLength = B->m_nLength;

		for(i=0;i<p->m_nLength;i++)
a0020b50:	24c60001 	addiu	a2,a2,1
a0020b54:	00ca482a 	slt	t1,a2,t2
		{
			sum = B->m_ulValue[i];
			sum = sum + p->m_ulValue[i] + carry;
a0020b58:	01052821 	addu	a1,t0,a1
a0020b5c:	00a73821 	addu	a3,a1,a3
a0020b60:	00a8402b 	sltu	t0,a1,t0
a0020b64:	00e5282b 	sltu	a1,a3,a1
a0020b68:	00a82821 	addu	a1,a1,t0
			p->m_ulValue[i] = (unsigned int)sum;
a0020b6c:	ac870008 	sw	a3,8(a0)
		carry = 0;
		sum = 0;
		if(p->m_nLength < B->m_nLength)
			p->m_nLength = B->m_nLength;

		for(i=0;i<p->m_nLength;i++)
a0020b70:	24630004 	addiu	v1,v1,4
		{
			sum = B->m_ulValue[i];
			sum = sum + p->m_ulValue[i] + carry;
			p->m_ulValue[i] = (unsigned int)sum;
			carry = (sum > 0xffffffff ? 1 : 0);
a0020b74:	0005382b 	sltu	a3,zero,a1
		carry = 0;
		sum = 0;
		if(p->m_nLength < B->m_nLength)
			p->m_nLength = B->m_nLength;

		for(i=0;i<p->m_nLength;i++)
a0020b78:	1520fff3 	bnez	t1,a0020b48 <Add+0x58>
a0020b7c:	24840004 	addiu	a0,a0,4
			sum = B->m_ulValue[i];
			sum = sum + p->m_ulValue[i] + carry;
			p->m_ulValue[i] = (unsigned int)sum;
			carry = (sum > 0xffffffff ? 1 : 0);
		}
		if(p->m_nLength < BI_MAXLEN)
a0020b80:	29430081 	slti	v1,t2,129
a0020b84:	1060000a 	beqz	v1,a0020bb0 <Add+0xc0>
a0020b88:	00000000 	nop
		{
			p->m_ulValue[p->m_nLength] = carry;
a0020b8c:	25430002 	addiu	v1,t2,2
a0020b90:	00031880 	sll	v1,v1,0x2
a0020b94:	00431821 	addu	v1,v0,v1
a0020b98:	ac670000 	sw	a3,0(v1)
			p->m_nLength += carry;
a0020b9c:	8c430004 	lw	v1,4(v0)
a0020ba0:	00000000 	nop
a0020ba4:	00673821 	addu	a3,v1,a3
a0020ba8:	03e00008 	jr	ra
a0020bac:	ac470004 	sw	a3,4(v0)
		//p = move(B);
		p = B;
		p->m_nSign = 1 - p->m_nSign;
		return Sub(A, p);
	}
}
a0020bb0:	03e00008 	jr	ra
a0020bb4:	00000000 	nop
		//p = move(A);
		p = A;
		carry = 0;
		sum = 0;
		if(p->m_nLength < B->m_nLength)
			p->m_nLength = B->m_nLength;
a0020bb8:	080082cd 	j	a0020b34 <Add+0x44>
a0020bbc:	ac4a0004 	sw	t2,4(v0)

a0020bc0 <init>:

	return out;
}

BI *init()
{
a0020bc0:	27bdffe0 	addiu	sp,sp,-32
a0020bc4:	afbf001c 	sw	ra,28(sp)
	BI *p;
	//int i;

	p = (BI *)my_malloc(sizeof(BI));
a0020bc8:	0c008622 	jal	a0021888 <my_malloc>
a0020bcc:	2404020c 	li	a0,524
	if (p == NULL) {
a0020bd0:	10400009 	beqz	v0,a0020bf8 <init+0x38>
a0020bd4:	00402021 	move	a0,v0
		return NULL;
	}

	memset(p, 0, sizeof(BI));
a0020bd8:	00002821 	move	a1,zero
a0020bdc:	2406020c 	li	a2,524
a0020be0:	0c008661 	jal	a0021984 <set_memory>
a0020be4:	afa20010 	sw	v0,16(sp)
	p->m_nSign=1;
	p->m_nLength=1;
a0020be8:	8fa20010 	lw	v0,16(sp)
	if (p == NULL) {
		return NULL;
	}

	memset(p, 0, sizeof(BI));
	p->m_nSign=1;
a0020bec:	24030001 	li	v1,1
	p->m_nLength=1;
a0020bf0:	ac430004 	sw	v1,4(v0)
	if (p == NULL) {
		return NULL;
	}

	memset(p, 0, sizeof(BI));
	p->m_nSign=1;
a0020bf4:	ac430000 	sw	v1,0(v0)
	p->m_nLength=1;
	//for(i=0;i<BI_MAXLEN;i++)p->m_ulValue[i]=0;
	return p;
}
a0020bf8:	8fbf001c 	lw	ra,28(sp)
a0020bfc:	00000000 	nop
a0020c00:	03e00008 	jr	ra
a0020c04:	27bd0020 	addiu	sp,sp,32

a0020c08 <InPutFromAddr>:
	return p;
}
#endif

BI *InPutFromAddr(unsigned char *addr, int len)
{
a0020c08:	27bdffe0 	addiu	sp,sp,-32
a0020c0c:	afbf001c 	sw	ra,28(sp)
	int i, space, count;
	BI *p;

	p = init();
a0020c10:	afa40010 	sw	a0,16(sp)
a0020c14:	0c0082f0 	jal	a0020bc0 <init>
a0020c18:	afa50014 	sw	a1,20(sp)
	if (p == NULL)
a0020c1c:	8fa40010 	lw	a0,16(sp)
a0020c20:	8fa50014 	lw	a1,20(sp)
a0020c24:	14400005 	bnez	v0,a0020c3c <InPutFromAddr+0x34>
a0020c28:	00054082 	srl	t0,a1,0x2
		//addr++;
		i++;
	}

	return p;
}
a0020c2c:	8fbf001c 	lw	ra,28(sp)
a0020c30:	00000000 	nop
a0020c34:	03e00008 	jr	ra
a0020c38:	27bd0020 	addiu	sp,sp,32
		return NULL;

	count = len / sizeof(unsigned int);
	space = len % sizeof(unsigned int);
	if (space)
		count++;
a0020c3c:	25030001 	addiu	v1,t0,1
	p = init();
	if (p == NULL)
		return NULL;

	count = len / sizeof(unsigned int);
	space = len % sizeof(unsigned int);
a0020c40:	30a50003 	andi	a1,a1,0x3
	if (space)
		count++;
a0020c44:	0065400b 	movn	t0,v1,a1

	if (count > BI_MAXLEN)
a0020c48:	29030082 	slti	v1,t0,130
a0020c4c:	1060001c 	beqz	v1,a0020cc0 <InPutFromAddr+0xb8>
a0020c50:	00000000 	nop
		addr++;
		i--;
	}
*/
	i = 0;
	if (space) {
a0020c54:	14a00011 	bnez	a1,a0020c9c <InPutFromAddr+0x94>
a0020c58:	ac480004 	sw	t0,4(v0)
		p->m_ulValue[i] = (*(unsigned int *)addr) >> (sizeof(unsigned int) - space) * 8;
		addr += space;
		i--;
	}

	while (i < count) {
a0020c5c:	1900fff3 	blez	t0,a0020c2c <InPutFromAddr+0x24>
a0020c60:	00001821 	move	v1,zero
a0020c64:	24650002 	addiu	a1,v1,2
a0020c68:	00052880 	sll	a1,a1,0x2
a0020c6c:	00452821 	addu	a1,v0,a1
		p->m_ulValue[i] = *(unsigned int *)addr;
a0020c70:	8c870000 	lw	a3,0(a0)
		//addr++;
		//p->m_ulValue[i] |= *addr << 8;
		//addr++;
		//p->m_ulValue[i] |= *addr;
		//addr++;
		i++;
a0020c74:	24630001 	addiu	v1,v1,1
		p->m_ulValue[i] = (*(unsigned int *)addr) >> (sizeof(unsigned int) - space) * 8;
		addr += space;
		i--;
	}

	while (i < count) {
a0020c78:	0068302a 	slt	a2,v1,t0
		p->m_ulValue[i] = *(unsigned int *)addr;
a0020c7c:	aca70000 	sw	a3,0(a1)
		addr += 4;
a0020c80:	24840004 	addiu	a0,a0,4
		p->m_ulValue[i] = (*(unsigned int *)addr) >> (sizeof(unsigned int) - space) * 8;
		addr += space;
		i--;
	}

	while (i < count) {
a0020c84:	14c0fffa 	bnez	a2,a0020c70 <InPutFromAddr+0x68>
a0020c88:	24a50004 	addiu	a1,a1,4
		//addr++;
		i++;
	}

	return p;
}
a0020c8c:	8fbf001c 	lw	ra,28(sp)
a0020c90:	00000000 	nop
a0020c94:	03e00008 	jr	ra
a0020c98:	27bd0020 	addiu	sp,sp,32
	}
*/
	i = 0;
	if (space) {
		// highest element may be not full
		p->m_ulValue[i] = (*(unsigned int *)addr) >> (sizeof(unsigned int) - space) * 8;
a0020c9c:	8c860000 	lw	a2,0(a0)
a0020ca0:	24030004 	li	v1,4
a0020ca4:	00651823 	subu	v1,v1,a1
a0020ca8:	000318c0 	sll	v1,v1,0x3
a0020cac:	00661806 	srlv	v1,a2,v1
a0020cb0:	ac430008 	sw	v1,8(v0)
		addr += space;
a0020cb4:	00852021 	addu	a0,a0,a1
a0020cb8:	08008319 	j	a0020c64 <InPutFromAddr+0x5c>
a0020cbc:	2403ffff 	li	v1,-1
		//addr++;
		i++;
	}

	return p;
}
a0020cc0:	8fbf001c 	lw	ra,28(sp)
	count = len / sizeof(unsigned int);
	space = len % sizeof(unsigned int);
	if (space)
		count++;

	if (count > BI_MAXLEN)
a0020cc4:	00001021 	move	v0,zero
		//addr++;
		i++;
	}

	return p;
}
a0020cc8:	03e00008 	jr	ra
a0020ccc:	27bd0020 	addiu	sp,sp,32

a0020cd0 <InPutFromStr>:
	return x;
}

#if 1 // (not use it in Sirius)
BI *InPutFromStr(char *str, const unsigned int system)
{
a0020cd0:	27bdffc8 	addiu	sp,sp,-56
a0020cd4:	afbf0034 	sw	ra,52(sp)
a0020cd8:	afb70030 	sw	s7,48(sp)
a0020cdc:	afb6002c 	sw	s6,44(sp)
a0020ce0:	afb50028 	sw	s5,40(sp)
a0020ce4:	afb40024 	sw	s4,36(sp)
a0020ce8:	afb30020 	sw	s3,32(sp)
a0020cec:	afb2001c 	sw	s2,28(sp)
a0020cf0:	afb10018 	sw	s1,24(sp)
a0020cf4:	afb00014 	sw	s0,20(sp)
a0020cf8:	00809021 	move	s2,a0
	int i, c, len;
	BI *p;

	c = 0;
	p = init();
a0020cfc:	0c0082f0 	jal	a0020bc0 <init>
a0020d00:	00a08821 	move	s1,a1
	if (p == NULL)
a0020d04:	10400022 	beqz	v0,a0020d90 <InPutFromStr+0xc0>
a0020d08:	0040b821 	move	s7,v0
		return NULL;

	len = rsa_strlen(str);
a0020d0c:	0c008653 	jal	a002194c <rsa_strlen>
a0020d10:	02402021 	move	a0,s2
	for (i=0; i<len; i++) {
a0020d14:	1840001e 	blez	v0,a0020d90 <InPutFromStr+0xc0>
a0020d18:	0040a021 	move	s4,v0
a0020d1c:	00009821 	move	s3,zero
a0020d20:	00008021 	move	s0,zero
		p = Mul_p(p, system);

		if (system == DEC)
a0020d24:	2415000a 	li	s5,10
			c = str[i] - 48;
		else if (system == HEX) {
a0020d28:	08008356 	j	a0020d58 <InPutFromStr+0x88>
a0020d2c:	24160010 	li	s6,16
a0020d30:	12360023 	beq	s1,s6,a0020dc0 <InPutFromStr+0xf0>
a0020d34:	00000000 	nop
			else if (str[i] >= 65)		// 'A' ~ 'F'
				c = (str[i] - 65) + 10;
			else				// '0' ~ '9'
				c = str[i] - 48;
		}
		p = Add_p(p, c);
a0020d38:	00402021 	move	a0,v0
a0020d3c:	0c0080fc 	jal	a00203f0 <Add_p>
a0020d40:	02602821 	move	a1,s3
	p = init();
	if (p == NULL)
		return NULL;

	len = rsa_strlen(str);
	for (i=0; i<len; i++) {
a0020d44:	26100001 	addiu	s0,s0,1
			else if (str[i] >= 65)		// 'A' ~ 'F'
				c = (str[i] - 65) + 10;
			else				// '0' ~ '9'
				c = str[i] - 48;
		}
		p = Add_p(p, c);
a0020d48:	0040b821 	move	s7,v0
	p = init();
	if (p == NULL)
		return NULL;

	len = rsa_strlen(str);
	for (i=0; i<len; i++) {
a0020d4c:	0214102a 	slt	v0,s0,s4
a0020d50:	1040000f 	beqz	v0,a0020d90 <InPutFromStr+0xc0>
a0020d54:	26520001 	addiu	s2,s2,1
		p = Mul_p(p, system);
a0020d58:	02e02021 	move	a0,s7
a0020d5c:	0c00810a 	jal	a0020428 <Mul_p>
a0020d60:	02202821 	move	a1,s1

		if (system == DEC)
a0020d64:	1635fff2 	bne	s1,s5,a0020d30 <InPutFromStr+0x60>
a0020d68:	00402021 	move	a0,v0
			c = str[i] - 48;
a0020d6c:	82530000 	lb	s3,0(s2)
	p = init();
	if (p == NULL)
		return NULL;

	len = rsa_strlen(str);
	for (i=0; i<len; i++) {
a0020d70:	26100001 	addiu	s0,s0,1
		p = Mul_p(p, system);

		if (system == DEC)
			c = str[i] - 48;
a0020d74:	2673ffd0 	addiu	s3,s3,-48
			else if (str[i] >= 65)		// 'A' ~ 'F'
				c = (str[i] - 65) + 10;
			else				// '0' ~ '9'
				c = str[i] - 48;
		}
		p = Add_p(p, c);
a0020d78:	0c0080fc 	jal	a00203f0 <Add_p>
a0020d7c:	02602821 	move	a1,s3
a0020d80:	0040b821 	move	s7,v0
	p = init();
	if (p == NULL)
		return NULL;

	len = rsa_strlen(str);
	for (i=0; i<len; i++) {
a0020d84:	0214102a 	slt	v0,s0,s4
a0020d88:	1440fff3 	bnez	v0,a0020d58 <InPutFromStr+0x88>
a0020d8c:	26520001 	addiu	s2,s2,1
		}
		p = Add_p(p, c);
	}

	return p;
}
a0020d90:	02e01021 	move	v0,s7
a0020d94:	8fbf0034 	lw	ra,52(sp)
a0020d98:	8fb70030 	lw	s7,48(sp)
a0020d9c:	8fb6002c 	lw	s6,44(sp)
a0020da0:	8fb50028 	lw	s5,40(sp)
a0020da4:	8fb40024 	lw	s4,36(sp)
a0020da8:	8fb30020 	lw	s3,32(sp)
a0020dac:	8fb2001c 	lw	s2,28(sp)
a0020db0:	8fb10018 	lw	s1,24(sp)
a0020db4:	8fb00014 	lw	s0,20(sp)
a0020db8:	03e00008 	jr	ra
a0020dbc:	27bd0038 	addiu	sp,sp,56
		p = Mul_p(p, system);

		if (system == DEC)
			c = str[i] - 48;
		else if (system == HEX) {
			if (str[i] >= 97)		// 'a' ~ 'f'
a0020dc0:	82530000 	lb	s3,0(s2)
a0020dc4:	00000000 	nop
a0020dc8:	2a630061 	slti	v1,s3,97
a0020dcc:	14600003 	bnez	v1,a0020ddc <InPutFromStr+0x10c>
a0020dd0:	2a640041 	slti	a0,s3,65
				c = (str[i] - 97) + 10;
a0020dd4:	0800834e 	j	a0020d38 <InPutFromStr+0x68>
a0020dd8:	2673ffa9 	addiu	s3,s3,-87
			else if (str[i] >= 65)		// 'A' ~ 'F'
a0020ddc:	14800003 	bnez	a0,a0020dec <InPutFromStr+0x11c>
a0020de0:	00000000 	nop
				c = (str[i] - 65) + 10;
a0020de4:	0800834e 	j	a0020d38 <InPutFromStr+0x68>
a0020de8:	2673ffc9 	addiu	s3,s3,-55
			else				// '0' ~ '9'
				c = str[i] - 48;
a0020dec:	0800834e 	j	a0020d38 <InPutFromStr+0x68>
a0020df0:	2673ffd0 	addiu	s3,s3,-48

a0020df4 <Mul>:
	else
		return Add_p(A, -b);
}

BI *Mul(BI *A, BI *B)
{
a0020df4:	27bdffc8 	addiu	sp,sp,-56
a0020df8:	afbf0034 	sw	ra,52(sp)
a0020dfc:	afb50030 	sw	s5,48(sp)
a0020e00:	afb4002c 	sw	s4,44(sp)
a0020e04:	afb30028 	sw	s3,40(sp)
a0020e08:	afb20024 	sw	s2,36(sp)
a0020e0c:	afb10020 	sw	s1,32(sp)
a0020e10:	afb0001c 	sw	s0,28(sp)
a0020e14:	00a0a021 	move	s4,a1
	int i, j, k;
	BI *p, *q;
	unsigned long long mul;
	unsigned int carry;

	p = init();
a0020e18:	0c0082f0 	jal	a0020bc0 <init>
a0020e1c:	00808821 	move	s1,a0
	q = init();
a0020e20:	0c0082f0 	jal	a0020bc0 <init>
a0020e24:	afa20010 	sw	v0,16(sp)
a0020e28:	00409821 	move	s3,v0

	for(i=0;i<B->m_nLength;i++)
a0020e2c:	8e820004 	lw	v0,4(s4)
a0020e30:	8fa40010 	lw	a0,16(sp)
a0020e34:	1840004b 	blez	v0,a0020f64 <Mul+0x170>
a0020e38:	00000000 	nop
a0020e3c:	02809021 	move	s2,s4
a0020e40:	00008021 	move	s0,zero
		{
			q->m_nLength++;
			q->m_ulValue[q->m_nLength-1] = carry;
		}

		if(q->m_nLength < BI_MAXLEN - i)
a0020e44:	24150081 	li	s5,129
	p = init();
	q = init();

	for(i=0;i<B->m_nLength;i++)
	{
		q->m_nLength = A->m_nLength;
a0020e48:	8e2b0004 	lw	t3,4(s1)
a0020e4c:	00000000 	nop
a0020e50:	ae6b0004 	sw	t3,4(s3)
		carry = 0;
		for(j=0;j<A->m_nLength;j++)
a0020e54:	8e220004 	lw	v0,4(s1)
a0020e58:	00000000 	nop
a0020e5c:	1840001c 	blez	v0,a0020ed0 <Mul+0xdc>
a0020e60:	00001021 	move	v0,zero
a0020e64:	02203021 	move	a2,s1
a0020e68:	02602821 	move	a1,s3
a0020e6c:	00001821 	move	v1,zero
		{
			mul = A->m_ulValue[j];
			mul = mul * B->m_ulValue[i] + carry;
a0020e70:	8cc70008 	lw	a3,8(a2)
a0020e74:	8e480008 	lw	t0,8(s2)

	for(i=0;i<B->m_nLength;i++)
	{
		q->m_nLength = A->m_nLength;
		carry = 0;
		for(j=0;j<A->m_nLength;j++)
a0020e78:	24630001 	addiu	v1,v1,1
a0020e7c:	24c60004 	addiu	a2,a2,4
		{
			mul = A->m_ulValue[j];
			mul = mul * B->m_ulValue[i] + carry;
a0020e80:	01070019 	multu	t0,a3
a0020e84:	00004012 	mflo	t0
a0020e88:	00483821 	addu	a3,v0,t0
			q->m_ulValue[j] = (unsigned int)mul;
a0020e8c:	aca70008 	sw	a3,8(a1)

	for(i=0;i<B->m_nLength;i++)
	{
		q->m_nLength = A->m_nLength;
		carry = 0;
		for(j=0;j<A->m_nLength;j++)
a0020e90:	8e2a0004 	lw	t2,4(s1)
		{
			mul = A->m_ulValue[j];
			mul = mul * B->m_ulValue[i] + carry;
a0020e94:	00004810 	mfhi	t1
a0020e98:	00e2102b 	sltu	v0,a3,v0
			q->m_ulValue[j] = (unsigned int)mul;
			carry = (unsigned int)(mul>>32);
a0020e9c:	00491021 	addu	v0,v0,t1

	for(i=0;i<B->m_nLength;i++)
	{
		q->m_nLength = A->m_nLength;
		carry = 0;
		for(j=0;j<A->m_nLength;j++)
a0020ea0:	006a382a 	slt	a3,v1,t2
a0020ea4:	14e0fff2 	bnez	a3,a0020e70 <Mul+0x7c>
a0020ea8:	24a50004 	addiu	a1,a1,4
			mul = A->m_ulValue[j];
			mul = mul * B->m_ulValue[i] + carry;
			q->m_ulValue[j] = (unsigned int)mul;
			carry = (unsigned int)(mul>>32);
		}
		if(carry && (q->m_nLength<BI_MAXLEN))
a0020eac:	10400049 	beqz	v0,a0020fd4 <Mul+0x1e0>
a0020eb0:	29630081 	slti	v1,t3,129
a0020eb4:	10600047 	beqz	v1,a0020fd4 <Mul+0x1e0>
a0020eb8:	25630002 	addiu	v1,t3,2
		{
			q->m_nLength++;
			q->m_ulValue[q->m_nLength-1] = carry;
a0020ebc:	00031880 	sll	v1,v1,0x2
a0020ec0:	02631821 	addu	v1,s3,v1
			q->m_ulValue[j] = (unsigned int)mul;
			carry = (unsigned int)(mul>>32);
		}
		if(carry && (q->m_nLength<BI_MAXLEN))
		{
			q->m_nLength++;
a0020ec4:	256b0001 	addiu	t3,t3,1
a0020ec8:	ae6b0004 	sw	t3,4(s3)
			q->m_ulValue[q->m_nLength-1] = carry;
a0020ecc:	ac620000 	sw	v0,0(v1)
		}

		if(q->m_nLength < BI_MAXLEN - i)
a0020ed0:	02b01023 	subu	v0,s5,s0
a0020ed4:	0162102a 	slt	v0,t3,v0
a0020ed8:	1040001a 	beqz	v0,a0020f44 <Mul+0x150>
a0020edc:	01705821 	addu	t3,t3,s0
		{
			q->m_nLength += i;
			for(k=q->m_nLength-1;k>=i;k--)
a0020ee0:	2562ffff 	addiu	v0,t3,-1
a0020ee4:	0050182a 	slt	v1,v0,s0
a0020ee8:	1460000f 	bnez	v1,a0020f28 <Mul+0x134>
a0020eec:	ae6b0004 	sw	t3,4(s3)
a0020ef0:	01702823 	subu	a1,t3,s0
a0020ef4:	24a50001 	addiu	a1,a1,1
a0020ef8:	25630001 	addiu	v1,t3,1
a0020efc:	00052880 	sll	a1,a1,0x2
a0020f00:	00031880 	sll	v1,v1,0x2
a0020f04:	02652821 	addu	a1,s3,a1
a0020f08:	02631821 	addu	v1,s3,v1
				q->m_ulValue[k]=q->m_ulValue[k-i];
a0020f0c:	8ca70000 	lw	a3,0(a1)
		}

		if(q->m_nLength < BI_MAXLEN - i)
		{
			q->m_nLength += i;
			for(k=q->m_nLength-1;k>=i;k--)
a0020f10:	2442ffff 	addiu	v0,v0,-1
a0020f14:	0050302a 	slt	a2,v0,s0
				q->m_ulValue[k]=q->m_ulValue[k-i];
a0020f18:	ac670000 	sw	a3,0(v1)
		}

		if(q->m_nLength < BI_MAXLEN - i)
		{
			q->m_nLength += i;
			for(k=q->m_nLength-1;k>=i;k--)
a0020f1c:	24a5fffc 	addiu	a1,a1,-4
a0020f20:	10c0fffa 	beqz	a2,a0020f0c <Mul+0x118>
a0020f24:	2463fffc 	addiu	v1,v1,-4
				q->m_ulValue[k]=q->m_ulValue[k-i];
			for(k=0;k<i;k++)
a0020f28:	12000006 	beqz	s0,a0020f44 <Mul+0x150>
a0020f2c:	02601821 	move	v1,s3
a0020f30:	00001021 	move	v0,zero
a0020f34:	24420001 	addiu	v0,v0,1
				q->m_ulValue[k]=0;
a0020f38:	ac600008 	sw	zero,8(v1)
		if(q->m_nLength < BI_MAXLEN - i)
		{
			q->m_nLength += i;
			for(k=q->m_nLength-1;k>=i;k--)
				q->m_ulValue[k]=q->m_ulValue[k-i];
			for(k=0;k<i;k++)
a0020f3c:	1450fffd 	bne	v0,s0,a0020f34 <Mul+0x140>
a0020f40:	24630004 	addiu	v1,v1,4
				q->m_ulValue[k]=0;
		}
		p = Add(p, q);
a0020f44:	0c0082bc 	jal	a0020af0 <Add>
a0020f48:	02602821 	move	a1,s3
a0020f4c:	00402021 	move	a0,v0
	unsigned int carry;

	p = init();
	q = init();

	for(i=0;i<B->m_nLength;i++)
a0020f50:	8e820004 	lw	v0,4(s4)
a0020f54:	26100001 	addiu	s0,s0,1
a0020f58:	0202102a 	slt	v0,s0,v0
a0020f5c:	1440ffba 	bnez	v0,a0020e48 <Mul+0x54>
a0020f60:	26520004 	addiu	s2,s2,4
				q->m_ulValue[k]=0;
		}
		p = Add(p, q);
	}

	p->m_nSign = ((A->m_nSign + B->m_nSign == 1) ? 0 : 1);
a0020f64:	8e850000 	lw	a1,0(s4)
a0020f68:	8e230000 	lw	v1,0(s1)
a0020f6c:	00001021 	move	v0,zero
{
	unsigned int  i;
	unsigned char * des = out;
	unsigned char * soc = in;

	for(i=0;i<count;i++)
a0020f70:	2406020c 	li	a2,524
				q->m_ulValue[k]=0;
		}
		p = Add(p, q);
	}

	p->m_nSign = ((A->m_nSign + B->m_nSign == 1) ? 0 : 1);
a0020f74:	00a31821 	addu	v1,a1,v1
a0020f78:	38630001 	xori	v1,v1,0x1
a0020f7c:	0003182b 	sltu	v1,zero,v1
a0020f80:	ac830000 	sw	v1,0(a0)
	unsigned int  i;
	unsigned char * des = out;
	unsigned char * soc = in;

	for(i=0;i<count;i++)
		des[i] = soc[i];
a0020f84:	00821821 	addu	v1,a0,v0
a0020f88:	90650000 	lbu	a1,0(v1)
a0020f8c:	02221821 	addu	v1,s1,v0
{
	unsigned int  i;
	unsigned char * des = out;
	unsigned char * soc = in;

	for(i=0;i<count;i++)
a0020f90:	24420001 	addiu	v0,v0,1
a0020f94:	1446fffb 	bne	v0,a2,a0020f84 <Mul+0x190>
a0020f98:	a0650000 	sb	a1,0(v1)
*/
    //dennistuan add start 20130222
#ifdef FREE_MEMORY
    //memcpy( A, p, sizeof(BI));
    rsa_memcpy( A, p, sizeof(BI));
    my_free(sizeof(BI));   //free p
a0020f9c:	0c00863f 	jal	a00218fc <my_free>
a0020fa0:	2404020c 	li	a0,524
    my_free(sizeof(BI));   //free q
a0020fa4:	0c00863f 	jal	a00218fc <my_free>
a0020fa8:	2404020c 	li	a0,524
	return A;
#else
	return p;
#endif
     //dennistuan add end 20130222
}
a0020fac:	02201021 	move	v0,s1
a0020fb0:	8fbf0034 	lw	ra,52(sp)
a0020fb4:	8fb50030 	lw	s5,48(sp)
a0020fb8:	8fb4002c 	lw	s4,44(sp)
a0020fbc:	8fb30028 	lw	s3,40(sp)
a0020fc0:	8fb20024 	lw	s2,36(sp)
a0020fc4:	8fb10020 	lw	s1,32(sp)
a0020fc8:	8fb0001c 	lw	s0,28(sp)
a0020fcc:	03e00008 	jr	ra
a0020fd0:	27bd0038 	addiu	sp,sp,56
			mul = A->m_ulValue[j];
			mul = mul * B->m_ulValue[i] + carry;
			q->m_ulValue[j] = (unsigned int)mul;
			carry = (unsigned int)(mul>>32);
		}
		if(carry && (q->m_nLength<BI_MAXLEN))
a0020fd4:	8e6b0004 	lw	t3,4(s3)
		{
			q->m_nLength++;
			q->m_ulValue[q->m_nLength-1] = carry;
		}

		if(q->m_nLength < BI_MAXLEN - i)
a0020fd8:	080083b5 	j	a0020ed4 <Mul+0xe0>
a0020fdc:	02b01023 	subu	v0,s5,s0

a0020fe0 <move_p>:

	return p;
}
*/
BI *move_p(unsigned long long b)
{
a0020fe0:	27bdffe0 	addiu	sp,sp,-32
a0020fe4:	afbf001c 	sw	ra,28(sp)
	//int i;
	BI *p;

	p = init();
a0020fe8:	afa40010 	sw	a0,16(sp)
a0020fec:	0c0082f0 	jal	a0020bc0 <init>
a0020ff0:	afa50014 	sw	a1,20(sp)
	if (p == NULL)
a0020ff4:	8fa40010 	lw	a0,16(sp)
a0020ff8:	8fa50014 	lw	a1,20(sp)
a0020ffc:	10400005 	beqz	v0,a0021014 <move_p+0x34>
a0021000:	00000000 	nop
		return NULL;

	if(b > 0xffffffff)
a0021004:	14a00007 	bnez	a1,a0021024 <move_p+0x44>
a0021008:	24030001 	li	v1,1
		p->m_ulValue[1]=(unsigned int)(b>>32);
		p->m_ulValue[0]=(unsigned int)b;
	}
	else
	{
		p->m_nLength=1;
a002100c:	ac430004 	sw	v1,4(v0)
		p->m_ulValue[0]=(unsigned int)b;
a0021010:	ac440008 	sw	a0,8(v0)
	}

	//for(i=p->m_nLength;i<BI_MAXLEN;i++)
	//	p->m_ulValue[i]=0;
	return p;
}
a0021014:	8fbf001c 	lw	ra,28(sp)
a0021018:	00000000 	nop
a002101c:	03e00008 	jr	ra
a0021020:	27bd0020 	addiu	sp,sp,32
	if (p == NULL)
		return NULL;

	if(b > 0xffffffff)
	{
		p->m_nLength=2;
a0021024:	24030002 	li	v1,2
a0021028:	ac430004 	sw	v1,4(v0)
		p->m_ulValue[1]=(unsigned int)(b>>32);
a002102c:	ac45000c 	sw	a1,12(v0)
		p->m_ulValue[0]=(unsigned int)b;
a0021030:	ac440008 	sw	a0,8(v0)
	}

	//for(i=p->m_nLength;i<BI_MAXLEN;i++)
	//	p->m_ulValue[i]=0;
	return p;
}
a0021034:	8fbf001c 	lw	ra,28(sp)
a0021038:	00000000 	nop
a002103c:	03e00008 	jr	ra
a0021040:	27bd0020 	addiu	sp,sp,32

a0021044 <Mod>:
		p->m_nSign = 1 - p->m_nSign;
	return p;
}

BI __attribute__ ((nomips16)) * Mod(BI *A, BI *B)
{
a0021044:	27bdffd0 	addiu	sp,sp,-48
a0021048:	afbf002c 	sw	ra,44(sp)
a002104c:	afb50028 	sw	s5,40(sp)
a0021050:	afb40024 	sw	s4,36(sp)
a0021054:	afb30020 	sw	s3,32(sp)
a0021058:	afb2001c 	sw	s2,28(sp)
a002105c:	afb10018 	sw	s1,24(sp)
a0021060:	afb00014 	sw	s0,20(sp)
			len = p->m_nLength - B->m_nLength - 1;
			num = p->m_ulValue[p->m_nLength-1];
			//printf("len: %d, num: %lld\n", len, num);
			num = (num<<32) + p->m_ulValue[p->m_nLength-2];

			if(B->m_ulValue[B->m_nLength-1]==0xffffffff)
a0021064:	2413ffff 	li	s3,-1
		p->m_nSign = 1 - p->m_nSign;
	return p;
}

BI __attribute__ ((nomips16)) * Mod(BI *A, BI *B)
{
a0021068:	00a09021 	move	s2,a1
a002106c:	00808021 	move	s0,a0
 */
int Cmp(BI *A, BI *B)
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
a0021070:	8e090004 	lw	t1,4(s0)
a0021074:	8e510004 	lw	s1,4(s2)
a0021078:	00000000 	nop
a002107c:	0229502a 	slt	t2,s1,t1
a0021080:	1540000e 	bnez	t2,a00210bc <Mod+0x78>
a0021084:	25220001 	addiu	v0,t1,1
	if(A->m_nLength < B->m_nLength)return -1;
a0021088:	0131102a 	slt	v0,t1,s1
a002108c:	10400066 	beqz	v0,a0021228 <Mod+0x1e4>
a0021090:	252bffff 	addiu	t3,t1,-1
		//p = move_p(0);
		memset(p, 0, sizeof(BI));	// reset BI value
	}

	return p;
}
a0021094:	02001021 	move	v0,s0
a0021098:	8fbf002c 	lw	ra,44(sp)
a002109c:	8fb50028 	lw	s5,40(sp)
a00210a0:	8fb40024 	lw	s4,36(sp)
a00210a4:	8fb30020 	lw	s3,32(sp)
a00210a8:	8fb2001c 	lw	s2,28(sp)
a00210ac:	8fb10018 	lw	s1,24(sp)
a00210b0:	8fb00014 	lw	s0,20(sp)
a00210b4:	03e00008 	jr	ra
a00210b8:	27bd0030 	addiu	sp,sp,48
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a00210bc:	00021080 	sll	v0,v0,0x2
a00210c0:	02021021 	addu	v0,s0,v0
a00210c4:	8c440000 	lw	a0,0(v0)
a00210c8:	252bffff 	addiu	t3,t1,-1
	while(Cmp(p, B)>0)
	{
		//debug(p);
		//debug(B);
		// compare leading digit
		if(p->m_ulValue[p->m_nLength-1] > B->m_ulValue[B->m_nLength-1])
a00210cc:	26220001 	addiu	v0,s1,1
a00210d0:	00021080 	sll	v0,v0,0x2
a00210d4:	02421021 	addu	v0,s2,v0
a00210d8:	8c420000 	lw	v0,0(v0)
a00210dc:	00000000 	nop
a00210e0:	0044182b 	sltu	v1,v0,a0
a00210e4:	10600031 	beqz	v1,a00211ac <Mod+0x168>
a00210e8:	00002821 	move	a1,zero
		{
			len = p->m_nLength - B->m_nLength;
			div = p->m_ulValue[p->m_nLength-1] / (B->m_ulValue[B->m_nLength-1] + 1);
a00210ec:	24420001 	addiu	v0,v0,1
a00210f0:	0082001b 	divu	zero,a0,v0
a00210f4:	14400002 	bnez	v0,a0021100 <Mod+0xbc>
a00210f8:	00000000 	nop
a00210fc:	0007000d 	break	0x7
		//debug(p);
		//debug(B);
		// compare leading digit
		if(p->m_ulValue[p->m_nLength-1] > B->m_ulValue[B->m_nLength-1])
		{
			len = p->m_nLength - B->m_nLength;
a0021100:	01318823 	subu	s1,t1,s1
			div = p->m_ulValue[p->m_nLength-1] / (B->m_ulValue[B->m_nLength-1] + 1);
a0021104:	00002012 	mflo	a0
			p = Sub(p, B);
			//debug(p);
			break;
		}

		q = move_p(div);
a0021108:	0c0083f8 	jal	a0020fe0 <move_p>
a002110c:	00000000 	nop
		q = Mul(q, B);
a0021110:	00402021 	move	a0,v0
a0021114:	0c00837d 	jal	a0020df4 <Mul>
a0021118:	02402821 	move	a1,s2
		//printf("q:\n");
		q->m_nLength += len;
a002111c:	8c440004 	lw	a0,4(v0)
a0021120:	00000000 	nop
a0021124:	02242021 	addu	a0,s1,a0
		//debug(q);
		for(i=q->m_nLength-1;i>=len;i--) {
a0021128:	2483ffff 	addiu	v1,a0,-1
a002112c:	0071282a 	slt	a1,v1,s1
a0021130:	14a0000f 	bnez	a1,a0021170 <Mod+0x12c>
a0021134:	ac440004 	sw	a0,4(v0)
a0021138:	00912823 	subu	a1,a0,s1
a002113c:	24a50001 	addiu	a1,a1,1
a0021140:	24840001 	addiu	a0,a0,1
a0021144:	00052880 	sll	a1,a1,0x2
a0021148:	00042080 	sll	a0,a0,0x2
a002114c:	00452821 	addu	a1,v0,a1
a0021150:	00442021 	addu	a0,v0,a0
			q->m_ulValue[i]=q->m_ulValue[i-len];
a0021154:	8ca70000 	lw	a3,0(a1)
		q = move_p(div);
		q = Mul(q, B);
		//printf("q:\n");
		q->m_nLength += len;
		//debug(q);
		for(i=q->m_nLength-1;i>=len;i--) {
a0021158:	2463ffff 	addiu	v1,v1,-1
a002115c:	0071302a 	slt	a2,v1,s1
			q->m_ulValue[i]=q->m_ulValue[i-len];
a0021160:	ac870000 	sw	a3,0(a0)
		q = move_p(div);
		q = Mul(q, B);
		//printf("q:\n");
		q->m_nLength += len;
		//debug(q);
		for(i=q->m_nLength-1;i>=len;i--) {
a0021164:	24a5fffc 	addiu	a1,a1,-4
a0021168:	10c0fffa 	beqz	a2,a0021154 <Mod+0x110>
a002116c:	2484fffc 	addiu	a0,a0,-4
			q->m_ulValue[i]=q->m_ulValue[i-len];
			//printf("%x, %x\n", i, i-len);
		}
		for(i=0;i<len;i++)
a0021170:	1a200006 	blez	s1,a002118c <Mod+0x148>
a0021174:	00402021 	move	a0,v0
a0021178:	00001821 	move	v1,zero
a002117c:	24630001 	addiu	v1,v1,1
			q->m_ulValue[i]=0;
a0021180:	ac800008 	sw	zero,8(a0)
		//debug(q);
		for(i=q->m_nLength-1;i>=len;i--) {
			q->m_ulValue[i]=q->m_ulValue[i-len];
			//printf("%x, %x\n", i, i-len);
		}
		for(i=0;i<len;i++)
a0021184:	1471fffd 	bne	v1,s1,a002117c <Mod+0x138>
a0021188:	24840004 	addiu	a0,a0,4
			q->m_ulValue[i]=0;

		//printf("p:\n");
		p = Sub(p, q);
a002118c:	02002021 	move	a0,s0
a0021190:	0c008253 	jal	a002094c <Sub>
a0021194:	00402821 	move	a1,v0
		//debug(p);
        //dennistuan add start 20130222
#ifdef FREE_MEMORY
        my_free( sizeof(BI) );   //free q
a0021198:	2404020c 	li	a0,524
a002119c:	0c00863f 	jal	a00218fc <my_free>
a00211a0:	00408021 	move	s0,v0
a00211a4:	0800841c 	j	a0021070 <Mod+0x2c>
a00211a8:	00000000 	nop
		{
			len = p->m_nLength - B->m_nLength;
			div = p->m_ulValue[p->m_nLength-1] / (B->m_ulValue[B->m_nLength-1] + 1);
			//printf("len: %d, div: %lld\n", len, div);
		}
		else if(p->m_nLength > B->m_nLength)
a00211ac:	11400045 	beqz	t2,a00212c4 <Mod+0x280>
a00211b0:	00094880 	sll	t1,t1,0x2
		{
			len = p->m_nLength - B->m_nLength - 1;
			num = p->m_ulValue[p->m_nLength-1];
			//printf("len: %d, num: %lld\n", len, num);
			num = (num<<32) + p->m_ulValue[p->m_nLength-2];
a00211b4:	02094821 	addu	t1,s0,t1
a00211b8:	8d230000 	lw	v1,0(t1)

			if(B->m_ulValue[B->m_nLength-1]==0xffffffff)
a00211bc:	1053003f 	beq	v0,s3,a00212bc <Mod+0x278>
a00211c0:	01718823 	subu	s1,t3,s1
				div = (num>>32);
			else
				div = do_div(num, (B->m_ulValue[B->m_nLength-1] + 1));
a00211c4:	14800037 	bnez	a0,a00212a4 <Mod+0x260>
a00211c8:	24450001 	addiu	a1,v0,1
a00211cc:	0000a021 	move	s4,zero
a00211d0:	0000a821 	move	s5,zero
a00211d4:	00001021 	move	v0,zero
a00211d8:	00002021 	move	a0,zero
a00211dc:	00003021 	move	a2,zero
a00211e0:	10000006 	b	a00211fc <Mod+0x1b8>
a00211e4:	24070021 	li	a3,33
a00211e8:	00020840 	sll	at,v0,0x1
a00211ec:	000237c2 	srl	a2,v0,0x1f
a00211f0:	00281025 	or	v0,at,t0
a00211f4:	00031840 	sll	v1,v1,0x1
a00211f8:	00042040 	sll	a0,a0,0x1
a00211fc:	14c00002 	bnez	a2,a0021208 <Mod+0x1c4>
a0021200:	0045402b 	sltu	t0,v0,a1
a0021204:	15000003 	bnez	t0,a0021214 <Mod+0x1d0>
a0021208:	24e7ffff 	addiu	a3,a3,-1
a002120c:	00451023 	subu	v0,v0,a1
a0021210:	24840001 	addiu	a0,a0,1
a0021214:	14e0fff4 	bnez	a3,a00211e8 <Mod+0x1a4>
a0021218:	000347c2 	srl	t0,v1,0x1f
a002121c:	02a02821 	move	a1,s5
a0021220:	08008442 	j	a0021108 <Mod+0xc4>
a0021224:	00942025 	or	a0,a0,s4
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a0021228:	0560002c 	bltz	t3,a00212dc <Mod+0x298>
a002122c:	25220001 	addiu	v0,t1,1
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a0021230:	00021080 	sll	v0,v0,0x2
a0021234:	02421821 	addu	v1,s2,v0
a0021238:	02021021 	addu	v0,s0,v0
a002123c:	8c440000 	lw	a0,0(v0)
a0021240:	8c620000 	lw	v0,0(v1)
a0021244:	00000000 	nop
a0021248:	0044182b 	sltu	v1,v0,a0
a002124c:	1460ff9f 	bnez	v1,a00210cc <Mod+0x88>
a0021250:	0082102b 	sltu	v0,a0,v0
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a0021254:	14400021 	bnez	v0,a00212dc <Mod+0x298>
a0021258:	00091880 	sll	v1,t1,0x2

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a002125c:	02432821 	addu	a1,s2,v1
a0021260:	01601021 	move	v0,t3
a0021264:	080084a4 	j	a0021290 <Mod+0x24c>
a0021268:	02031821 	addu	v1,s0,v1
a002126c:	8c670000 	lw	a3,0(v1)
a0021270:	8ca60000 	lw	a2,0(a1)
a0021274:	2463fffc 	addiu	v1,v1,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a0021278:	00e6402b 	sltu	t0,a3,a2

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a002127c:	00c7302b 	sltu	a2,a2,a3
a0021280:	14c0ff92 	bnez	a2,a00210cc <Mod+0x88>
a0021284:	24a5fffc 	addiu	a1,a1,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a0021288:	15000014 	bnez	t0,a00212dc <Mod+0x298>
a002128c:	00000000 	nop
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a0021290:	2442ffff 	addiu	v0,v0,-1
a0021294:	0441fff5 	bgez	v0,a002126c <Mod+0x228>
a0021298:	00000000 	nop
a002129c:	080084b7 	j	a00212dc <Mod+0x298>
a00212a0:	00000000 	nop
			num = (num<<32) + p->m_ulValue[p->m_nLength-2];

			if(B->m_ulValue[B->m_nLength-1]==0xffffffff)
				div = (num>>32);
			else
				div = do_div(num, (B->m_ulValue[B->m_nLength-1] + 1));
a00212a4:	0085001b 	divu	zero,a0,a1
a00212a8:	00003810 	mfhi	a3
a00212ac:	0000a021 	move	s4,zero
a00212b0:	00e01021 	move	v0,a3
a00212b4:	08008476 	j	a00211d8 <Mod+0x194>
a00212b8:	0000a812 	mflo	s5
			num = p->m_ulValue[p->m_nLength-1];
			//printf("len: %d, num: %lld\n", len, num);
			num = (num<<32) + p->m_ulValue[p->m_nLength-2];

			if(B->m_ulValue[B->m_nLength-1]==0xffffffff)
				div = (num>>32);
a00212bc:	08008442 	j	a0021108 <Mod+0xc4>
a00212c0:	00002821 	move	a1,zero
				div = do_div(num, (B->m_ulValue[B->m_nLength-1] + 1));
		}
		else
		{
			//printf("here\n");
			p = Sub(p, B);
a00212c4:	02002021 	move	a0,s0
a00212c8:	0c008253 	jal	a002094c <Sub>
a00212cc:	02402821 	move	a1,s2
a00212d0:	8c490004 	lw	t1,4(v0)
a00212d4:	8e510004 	lw	s1,4(s2)
a00212d8:	00408021 	move	s0,v0
int Cmp(BI *A, BI *B)
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
a00212dc:	1629ff6d 	bne	s1,t1,a0021094 <Mod+0x50>
a00212e0:	2622ffff 	addiu	v0,s1,-1
	for(i=A->m_nLength-1;i>=0;i--)
a00212e4:	04400014 	bltz	v0,a0021338 <Mod+0x2f4>
a00212e8:	26230001 	addiu	v1,s1,1
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a00212ec:	00031880 	sll	v1,v1,0x2
a00212f0:	02432821 	addu	a1,s2,v1
a00212f4:	02031821 	addu	v1,s0,v1
a00212f8:	8c640000 	lw	a0,0(v1)
a00212fc:	8ca30000 	lw	v1,0(a1)
a0021300:	00000000 	nop
a0021304:	1483ff63 	bne	a0,v1,a0021094 <Mod+0x50>
a0021308:	00118880 	sll	s1,s1,0x2
a002130c:	02519021 	addu	s2,s2,s1
a0021310:	080084cb 	j	a002132c <Mod+0x2e8>
a0021314:	02118821 	addu	s1,s0,s1
a0021318:	8e240000 	lw	a0,0(s1)
a002131c:	8e430000 	lw	v1,0(s2)
a0021320:	2631fffc 	addiu	s1,s1,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a0021324:	1483ff5b 	bne	a0,v1,a0021094 <Mod+0x50>
a0021328:	2652fffc 	addiu	s2,s2,-4
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a002132c:	2442ffff 	addiu	v0,v0,-1
a0021330:	0441fff9 	bgez	v0,a0021318 <Mod+0x2d4>
a0021334:	00000000 	nop
        //dennistuan add end 20130222
	}

	if(Cmp(p, B)==0) {
		//p = move_p(0);
		memset(p, 0, sizeof(BI));	// reset BI value
a0021338:	02002021 	move	a0,s0
a002133c:	00002821 	move	a1,zero
a0021340:	0c008661 	jal	a0021984 <set_memory>
a0021344:	2406020c 	li	a2,524
	}

	return p;
}
a0021348:	08008426 	j	a0021098 <Mod+0x54>
a002134c:	02001021 	move	v0,s0

a0021350 <Div>:

	return p;
}

BI __attribute__ ((nomips16)) * Div(BI *A, BI *B)
{
a0021350:	27bdffc8 	addiu	sp,sp,-56
a0021354:	afbf0034 	sw	ra,52(sp)
a0021358:	afbe0030 	sw	s8,48(sp)
a002135c:	afb7002c 	sw	s7,44(sp)
a0021360:	afb60028 	sw	s6,40(sp)
a0021364:	afb50024 	sw	s5,36(sp)
a0021368:	afb40020 	sw	s4,32(sp)
a002136c:	afb3001c 	sw	s3,28(sp)
a0021370:	afb20018 	sw	s2,24(sp)
a0021374:	afb10014 	sw	s1,20(sp)
a0021378:	afb00010 	sw	s0,16(sp)
a002137c:	0080f021 	move	s8,a0
a0021380:	00a09821 	move	s3,a1
	int i, len;
	BI *p, *q, *r;
	unsigned int carry;
	unsigned long long num, div;

	p = init();
a0021384:	0c0082f0 	jal	a0020bc0 <init>
a0021388:	00809021 	move	s2,a0
		else if(q->m_nLength > B->m_nLength)
		{
			len = q->m_nLength - B->m_nLength - 1;
			num = q->m_ulValue[q->m_nLength-1];
			num = (num<<32) + q->m_ulValue[q->m_nLength-2];
			if(B->m_ulValue[B->m_nLength-1]==0xffffffff)
a002138c:	2415ffff 	li	s5,-1
	unsigned long long num, div;

	p = init();
	//q = move(A);
	q = A;
	r = init();
a0021390:	0c0082f0 	jal	a0020bc0 <init>
a0021394:	0040a021 	move	s4,v0
 */
int Cmp(BI *A, BI *B)
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
a0021398:	8e490004 	lw	t1,4(s2)
a002139c:	8e700004 	lw	s0,4(s3)
a00213a0:	00000000 	nop
a00213a4:	0209502a 	slt	t2,s0,t1
a00213a8:	15400017 	bnez	t2,a0021408 <Div+0xb8>
a00213ac:	25220001 	addiu	v0,t1,1
	if(A->m_nLength < B->m_nLength)return -1;
a00213b0:	0130102a 	slt	v0,t1,s0
a00213b4:	10400070 	beqz	v0,a0021578 <Div+0x228>
a00213b8:	252bffff 	addiu	t3,t1,-1
	}

	if(Cmp(q, B)==0)	// no remainder
		p = Add_p(p, 1);

	p->m_nSign = ((A->m_nSign+B->m_nSign==1) ? 0 : 1);
a00213bc:	8e640000 	lw	a0,0(s3)
a00213c0:	8fc30000 	lw	v1,0(s8)
	return p;
}
a00213c4:	02801021 	move	v0,s4
	}

	if(Cmp(q, B)==0)	// no remainder
		p = Add_p(p, 1);

	p->m_nSign = ((A->m_nSign+B->m_nSign==1) ? 0 : 1);
a00213c8:	00831821 	addu	v1,a0,v1
a00213cc:	38630001 	xori	v1,v1,0x1
a00213d0:	0003182b 	sltu	v1,zero,v1
a00213d4:	ae830000 	sw	v1,0(s4)
	return p;
}
a00213d8:	8fbf0034 	lw	ra,52(sp)
a00213dc:	8fbe0030 	lw	s8,48(sp)
a00213e0:	8fb7002c 	lw	s7,44(sp)
a00213e4:	8fb60028 	lw	s6,40(sp)
a00213e8:	8fb50024 	lw	s5,36(sp)
a00213ec:	8fb40020 	lw	s4,32(sp)
a00213f0:	8fb3001c 	lw	s3,28(sp)
a00213f4:	8fb20018 	lw	s2,24(sp)
a00213f8:	8fb10014 	lw	s1,20(sp)
a00213fc:	8fb00010 	lw	s0,16(sp)
a0021400:	03e00008 	jr	ra
a0021404:	27bd0038 	addiu	sp,sp,56
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a0021408:	00021080 	sll	v0,v0,0x2
a002140c:	02421021 	addu	v0,s2,v0
a0021410:	8c440000 	lw	a0,0(v0)
a0021414:	252bffff 	addiu	t3,t1,-1
	r = init();
	carry = 0;
	while(Cmp(q, B)>0)
	{
		// compare leading digit
		if(q->m_ulValue[q->m_nLength-1] > B->m_ulValue[B->m_nLength-1])
a0021418:	26020001 	addiu	v0,s0,1
a002141c:	00021080 	sll	v0,v0,0x2
a0021420:	02621021 	addu	v0,s3,v0
a0021424:	8c420000 	lw	v0,0(v0)
a0021428:	00000000 	nop
a002142c:	0044182b 	sltu	v1,v0,a0
a0021430:	10600032 	beqz	v1,a00214fc <Div+0x1ac>
a0021434:	00002821 	move	a1,zero
		{
			len = q->m_nLength - B->m_nLength;
			div = q->m_ulValue[q->m_nLength-1] / (B->m_ulValue[B->m_nLength-1] + 1);
a0021438:	24420001 	addiu	v0,v0,1
a002143c:	0082001b 	divu	zero,a0,v0
a0021440:	14400002 	bnez	v0,a002144c <Div+0xfc>
a0021444:	00000000 	nop
a0021448:	0007000d 	break	0x7
	while(Cmp(q, B)>0)
	{
		// compare leading digit
		if(q->m_ulValue[q->m_nLength-1] > B->m_ulValue[B->m_nLength-1])
		{
			len = q->m_nLength - B->m_nLength;
a002144c:	01308023 	subu	s0,t1,s0
			div = q->m_ulValue[q->m_nLength-1] / (B->m_ulValue[B->m_nLength-1] + 1);
a0021450:	00002012 	mflo	a0
		{
			p = Add_p(p, 1);
			break;
		}

		r = move_p(div);
a0021454:	0c0083f8 	jal	a0020fe0 <move_p>
a0021458:	00000000 	nop
		r->m_nLength += len;
a002145c:	8c430004 	lw	v1,4(v0)
		{
			p = Add_p(p, 1);
			break;
		}

		r = move_p(div);
a0021460:	00408821 	move	s1,v0
		r->m_nLength += len;
a0021464:	02031821 	addu	v1,s0,v1
		for(i=r->m_nLength-1;i>=len;i--)
a0021468:	2462ffff 	addiu	v0,v1,-1
a002146c:	0050202a 	slt	a0,v0,s0
a0021470:	1480000f 	bnez	a0,a00214b0 <Div+0x160>
a0021474:	ae230004 	sw	v1,4(s1)
a0021478:	00702023 	subu	a0,v1,s0
a002147c:	24840001 	addiu	a0,a0,1
a0021480:	24630001 	addiu	v1,v1,1
a0021484:	00042080 	sll	a0,a0,0x2
a0021488:	00031880 	sll	v1,v1,0x2
a002148c:	02242021 	addu	a0,s1,a0
a0021490:	02231821 	addu	v1,s1,v1
			r->m_ulValue[i] = r->m_ulValue[i-len];
a0021494:	8c860000 	lw	a2,0(a0)
			break;
		}

		r = move_p(div);
		r->m_nLength += len;
		for(i=r->m_nLength-1;i>=len;i--)
a0021498:	2442ffff 	addiu	v0,v0,-1
a002149c:	0050282a 	slt	a1,v0,s0
			r->m_ulValue[i] = r->m_ulValue[i-len];
a00214a0:	ac660000 	sw	a2,0(v1)
			break;
		}

		r = move_p(div);
		r->m_nLength += len;
		for(i=r->m_nLength-1;i>=len;i--)
a00214a4:	2484fffc 	addiu	a0,a0,-4
a00214a8:	10a0fffa 	beqz	a1,a0021494 <Div+0x144>
a00214ac:	2463fffc 	addiu	v1,v1,-4
			r->m_ulValue[i] = r->m_ulValue[i-len];
		for(i=0;i<len;i++)
a00214b0:	1a000006 	blez	s0,a00214cc <Div+0x17c>
a00214b4:	02201821 	move	v1,s1
a00214b8:	00001021 	move	v0,zero
a00214bc:	24420001 	addiu	v0,v0,1
			r->m_ulValue[i]=0;
a00214c0:	ac600008 	sw	zero,8(v1)

		r = move_p(div);
		r->m_nLength += len;
		for(i=r->m_nLength-1;i>=len;i--)
			r->m_ulValue[i] = r->m_ulValue[i-len];
		for(i=0;i<len;i++)
a00214c4:	1450fffd 	bne	v0,s0,a00214bc <Div+0x16c>
a00214c8:	24630004 	addiu	v1,v1,4
			r->m_ulValue[i]=0;

		p = Add(p, r);
a00214cc:	02802021 	move	a0,s4
a00214d0:	0c0082bc 	jal	a0020af0 <Add>
a00214d4:	02202821 	move	a1,s1
		r = Mul(r, B);
a00214d8:	02202021 	move	a0,s1
a00214dc:	02602821 	move	a1,s3
a00214e0:	0c00837d 	jal	a0020df4 <Mul>
a00214e4:	0040a021 	move	s4,v0
		q = Sub(q, r);
a00214e8:	00402821 	move	a1,v0
a00214ec:	0c008253 	jal	a002094c <Sub>
a00214f0:	02402021 	move	a0,s2
a00214f4:	080084e6 	j	a0021398 <Div+0x48>
a00214f8:	00409021 	move	s2,v0
		if(q->m_ulValue[q->m_nLength-1] > B->m_ulValue[B->m_nLength-1])
		{
			len = q->m_nLength - B->m_nLength;
			div = q->m_ulValue[q->m_nLength-1] / (B->m_ulValue[B->m_nLength-1] + 1);
		}
		else if(q->m_nLength > B->m_nLength)
a00214fc:	11400045 	beqz	t2,a0021614 <Div+0x2c4>
a0021500:	00094880 	sll	t1,t1,0x2
		{
			len = q->m_nLength - B->m_nLength - 1;
			num = q->m_ulValue[q->m_nLength-1];
			num = (num<<32) + q->m_ulValue[q->m_nLength-2];
a0021504:	02494821 	addu	t1,s2,t1
a0021508:	8d230000 	lw	v1,0(t1)
			if(B->m_ulValue[B->m_nLength-1]==0xffffffff)
a002150c:	1055003f 	beq	v0,s5,a002160c <Div+0x2bc>
a0021510:	01708023 	subu	s0,t3,s0
				div = (num>>32);
			else
				div = do_div(num, (B->m_ulValue[B->m_nLength-1] + 1));
a0021514:	14800037 	bnez	a0,a00215f4 <Div+0x2a4>
a0021518:	24450001 	addiu	a1,v0,1
a002151c:	0000b021 	move	s6,zero
a0021520:	0000b821 	move	s7,zero
a0021524:	00001021 	move	v0,zero
a0021528:	00002021 	move	a0,zero
a002152c:	00003021 	move	a2,zero
a0021530:	10000006 	b	a002154c <Div+0x1fc>
a0021534:	24070021 	li	a3,33
a0021538:	00020840 	sll	at,v0,0x1
a002153c:	000237c2 	srl	a2,v0,0x1f
a0021540:	00281025 	or	v0,at,t0
a0021544:	00031840 	sll	v1,v1,0x1
a0021548:	00042040 	sll	a0,a0,0x1
a002154c:	14c00002 	bnez	a2,a0021558 <Div+0x208>
a0021550:	0045402b 	sltu	t0,v0,a1
a0021554:	15000003 	bnez	t0,a0021564 <Div+0x214>
a0021558:	24e7ffff 	addiu	a3,a3,-1
a002155c:	00451023 	subu	v0,v0,a1
a0021560:	24840001 	addiu	a0,a0,1
a0021564:	14e0fff4 	bnez	a3,a0021538 <Div+0x1e8>
a0021568:	000347c2 	srl	t0,v1,0x1f
a002156c:	02e02821 	move	a1,s7
a0021570:	08008515 	j	a0021454 <Div+0x104>
a0021574:	00962025 	or	a0,a0,s6
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a0021578:	0560002c 	bltz	t3,a002162c <Div+0x2dc>
a002157c:	25220001 	addiu	v0,t1,1
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a0021580:	00021080 	sll	v0,v0,0x2
a0021584:	02621821 	addu	v1,s3,v0
a0021588:	02421021 	addu	v0,s2,v0
a002158c:	8c440000 	lw	a0,0(v0)
a0021590:	8c620000 	lw	v0,0(v1)
a0021594:	00000000 	nop
a0021598:	0044182b 	sltu	v1,v0,a0
a002159c:	1460ff9e 	bnez	v1,a0021418 <Div+0xc8>
a00215a0:	0082102b 	sltu	v0,a0,v0
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a00215a4:	14400021 	bnez	v0,a002162c <Div+0x2dc>
a00215a8:	00091880 	sll	v1,t1,0x2

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a00215ac:	02632821 	addu	a1,s3,v1
a00215b0:	01601021 	move	v0,t3
a00215b4:	08008578 	j	a00215e0 <Div+0x290>
a00215b8:	02431821 	addu	v1,s2,v1
a00215bc:	8c670000 	lw	a3,0(v1)
a00215c0:	8ca60000 	lw	a2,0(a1)
a00215c4:	2463fffc 	addiu	v1,v1,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a00215c8:	00e6402b 	sltu	t0,a3,a2

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a00215cc:	00c7302b 	sltu	a2,a2,a3
a00215d0:	14c0ff91 	bnez	a2,a0021418 <Div+0xc8>
a00215d4:	24a5fffc 	addiu	a1,a1,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a00215d8:	15000014 	bnez	t0,a002162c <Div+0x2dc>
a00215dc:	00000000 	nop
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a00215e0:	2442ffff 	addiu	v0,v0,-1
a00215e4:	0441fff5 	bgez	v0,a00215bc <Div+0x26c>
a00215e8:	00000000 	nop
a00215ec:	0800858b 	j	a002162c <Div+0x2dc>
a00215f0:	00000000 	nop
			num = q->m_ulValue[q->m_nLength-1];
			num = (num<<32) + q->m_ulValue[q->m_nLength-2];
			if(B->m_ulValue[B->m_nLength-1]==0xffffffff)
				div = (num>>32);
			else
				div = do_div(num, (B->m_ulValue[B->m_nLength-1] + 1));
a00215f4:	0085001b 	divu	zero,a0,a1
a00215f8:	00003810 	mfhi	a3
a00215fc:	0000b021 	move	s6,zero
a0021600:	00e01021 	move	v0,a3
a0021604:	0800854a 	j	a0021528 <Div+0x1d8>
a0021608:	0000b812 	mflo	s7
		{
			len = q->m_nLength - B->m_nLength - 1;
			num = q->m_ulValue[q->m_nLength-1];
			num = (num<<32) + q->m_ulValue[q->m_nLength-2];
			if(B->m_ulValue[B->m_nLength-1]==0xffffffff)
				div = (num>>32);
a002160c:	08008515 	j	a0021454 <Div+0x104>
a0021610:	00002821 	move	a1,zero
			else
				div = do_div(num, (B->m_ulValue[B->m_nLength-1] + 1));
		}
		else
		{
			p = Add_p(p, 1);
a0021614:	02802021 	move	a0,s4
a0021618:	0c0080fc 	jal	a00203f0 <Add_p>
a002161c:	24050001 	li	a1,1
a0021620:	8e490004 	lw	t1,4(s2)
a0021624:	8e700004 	lw	s0,4(s3)
a0021628:	0040a021 	move	s4,v0
int Cmp(BI *A, BI *B)
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
a002162c:	1609ff63 	bne	s0,t1,a00213bc <Div+0x6c>
a0021630:	2602ffff 	addiu	v0,s0,-1
	for(i=A->m_nLength-1;i>=0;i--)
a0021634:	04400014 	bltz	v0,a0021688 <Div+0x338>
a0021638:	26030001 	addiu	v1,s0,1
	{
		if(A->m_ulValue[i] > B->m_ulValue[i])return 1;
a002163c:	00031880 	sll	v1,v1,0x2
a0021640:	02632821 	addu	a1,s3,v1
a0021644:	02431821 	addu	v1,s2,v1
a0021648:	8c640000 	lw	a0,0(v1)
a002164c:	8ca30000 	lw	v1,0(a1)
a0021650:	00000000 	nop
a0021654:	1483ff59 	bne	a0,v1,a00213bc <Div+0x6c>
a0021658:	00108080 	sll	s0,s0,0x2
a002165c:	02509021 	addu	s2,s2,s0
a0021660:	0800859f 	j	a002167c <Div+0x32c>
a0021664:	02708021 	addu	s0,s3,s0
a0021668:	8e440000 	lw	a0,0(s2)
a002166c:	8e030000 	lw	v1,0(s0)
a0021670:	2652fffc 	addiu	s2,s2,-4
		if(A->m_ulValue[i] < B->m_ulValue[i])return -1;
a0021674:	1483ff51 	bne	a0,v1,a00213bc <Div+0x6c>
a0021678:	2610fffc 	addiu	s0,s0,-4
{
	int i;

	if(A->m_nLength > B->m_nLength)return 1;
	if(A->m_nLength < B->m_nLength)return -1;
	for(i=A->m_nLength-1;i>=0;i--)
a002167c:	2442ffff 	addiu	v0,v0,-1
a0021680:	0441fff9 	bgez	v0,a0021668 <Div+0x318>
a0021684:	00000000 	nop
		r = Mul(r, B);
		q = Sub(q, r);
	}

	if(Cmp(q, B)==0)	// no remainder
		p = Add_p(p, 1);
a0021688:	02802021 	move	a0,s4
a002168c:	0c0080fc 	jal	a00203f0 <Add_p>
a0021690:	24050001 	li	a1,1
a0021694:	080084ef 	j	a00213bc <Div+0x6c>
a0021698:	0040a021 	move	s4,v0

a002169c <move>:
	//for(i=0;i<BI_MAXLEN;i++)p->m_ulValue[i]=0;
	return p;
}

BI *move(BI *A)
{
a002169c:	27bdffe0 	addiu	sp,sp,-32
a00216a0:	afbf001c 	sw	ra,28(sp)
	//int i;
	BI *p;

	p = init();
a00216a4:	0c0082f0 	jal	a0020bc0 <init>
a00216a8:	afa40010 	sw	a0,16(sp)
	if (p == NULL)
a00216ac:	8fa40010 	lw	a0,16(sp)
a00216b0:	10400009 	beqz	v0,a00216d8 <move+0x3c>
a00216b4:	00000000 	nop
a00216b8:	00001821 	move	v1,zero
{
	unsigned int  i;
	unsigned char * des = out;
	unsigned char * soc = in;

	for(i=0;i<count;i++)
a00216bc:	2407020c 	li	a3,524
		des[i] = soc[i];
a00216c0:	00832821 	addu	a1,a0,v1
a00216c4:	90a60000 	lbu	a2,0(a1)
a00216c8:	00432821 	addu	a1,v0,v1
{
	unsigned int  i;
	unsigned char * des = out;
	unsigned char * soc = in;

	for(i=0;i<count;i++)
a00216cc:	24630001 	addiu	v1,v1,1
a00216d0:	1467fffb 	bne	v1,a3,a00216c0 <move+0x24>
a00216d4:	a0a60000 	sb	a2,0(a1)
	//memcpy(p, A, sizeof(BI));
	rsa_memcpy(p, A, sizeof(BI));
	//p->m_nLength=A->m_nLength;
	//for(i=0;i<BI_MAXLEN;i++)p->m_ulValue[i]=A->m_ulValue[i];
	return p;
}
a00216d8:	8fbf001c 	lw	ra,28(sp)
a00216dc:	00000000 	nop
a00216e0:	03e00008 	jr	ra
a00216e4:	27bd0020 	addiu	sp,sp,32

a00216e8 <Exp_Mod>:
	return carry;
}


BI *Exp_Mod(BI *base, BI *exp, BI *mod)
{
a00216e8:	27bdffd8 	addiu	sp,sp,-40
a00216ec:	afbf0024 	sw	ra,36(sp)
a00216f0:	afb40020 	sw	s4,32(sp)
a00216f4:	afb3001c 	sw	s3,28(sp)
a00216f8:	afb20018 	sw	s2,24(sp)
a00216fc:	afb10014 	sw	s1,20(sp)
a0021700:	afb00010 	sw	s0,16(sp)
a0021704:	00808821 	move	s1,a0
a0021708:	00a08021 	move	s0,a1
	BI *x, *y, *z;
	//printf("Mon:\n");
	x = move_p(1);
a002170c:	24040001 	li	a0,1
a0021710:	00002821 	move	a1,zero
a0021714:	0c0083f8 	jal	a0020fe0 <move_p>
a0021718:	00c0a021 	move	s4,a2
	y = move(base);
a002171c:	02202021 	move	a0,s1
a0021720:	0c0085a7 	jal	a002169c <move>
a0021724:	00409821 	move	s3,v0
	z = move(exp);
a0021728:	02002021 	move	a0,s0
a002172c:	0c0085a7 	jal	a002169c <move>
a0021730:	00408821 	move	s1,v0
a0021734:	00408021 	move	s0,v0

	while ((z->m_nLength != 1) || (z->m_ulValue[0])) {
a0021738:	24120001 	li	s2,1
a002173c:	8e020004 	lw	v0,4(s0)
		//printf("=> ");
		if (z->m_ulValue[0] & 1) {
			//printf("1, ");
			z = Sub_p(z, 1);
a0021740:	02002021 	move	a0,s0
	//printf("Mon:\n");
	x = move_p(1);
	y = move(base);
	z = move(exp);

	while ((z->m_nLength != 1) || (z->m_ulValue[0])) {
a0021744:	10520014 	beq	v0,s2,a0021798 <Exp_Mod+0xb0>
a0021748:	24050001 	li	a1,1
a002174c:	8e020008 	lw	v0,8(s0)
a0021750:	00000000 	nop
		//printf("=> ");
		if (z->m_ulValue[0] & 1) {
a0021754:	30420001 	andi	v0,v0,0x1
a0021758:	1040001c 	beqz	v0,a00217cc <Exp_Mod+0xe4>
a002175c:	00000000 	nop
			//printf("1, ");
			z = Sub_p(z, 1);
a0021760:	0c0080c5 	jal	a0020314 <Sub_p>
a0021764:	00000000 	nop
			//printf("3, ");
			x = Mul(x, y);
a0021768:	02602021 	move	a0,s3
a002176c:	02202821 	move	a1,s1
a0021770:	0c00837d 	jal	a0020df4 <Mul>
a0021774:	00408021 	move	s0,v0
			//printf("5\n");
			x = Mod(x, mod);
a0021778:	00402021 	move	a0,v0
a002177c:	0c008411 	jal	a0021044 <Mod>
a0021780:	02802821 	move	a1,s4
a0021784:	00409821 	move	s3,v0
	//printf("Mon:\n");
	x = move_p(1);
	y = move(base);
	z = move(exp);

	while ((z->m_nLength != 1) || (z->m_ulValue[0])) {
a0021788:	8e020004 	lw	v0,4(s0)
		//printf("=> ");
		if (z->m_ulValue[0] & 1) {
			//printf("1, ");
			z = Sub_p(z, 1);
a002178c:	02002021 	move	a0,s0
	//printf("Mon:\n");
	x = move_p(1);
	y = move(base);
	z = move(exp);

	while ((z->m_nLength != 1) || (z->m_ulValue[0])) {
a0021790:	1452ffee 	bne	v0,s2,a002174c <Exp_Mod+0x64>
a0021794:	24050001 	li	a1,1
a0021798:	8e020008 	lw	v0,8(s0)
a002179c:	00000000 	nop
a00217a0:	1440ffed 	bnez	v0,a0021758 <Exp_Mod+0x70>
a00217a4:	30420001 	andi	v0,v0,0x1
			y = Mod(y, mod);
		}
	}

	return x;
}
a00217a8:	02601021 	move	v0,s3
a00217ac:	8fbf0024 	lw	ra,36(sp)
a00217b0:	8fb40020 	lw	s4,32(sp)
a00217b4:	8fb3001c 	lw	s3,28(sp)
a00217b8:	8fb20018 	lw	s2,24(sp)
a00217bc:	8fb10014 	lw	s1,20(sp)
a00217c0:	8fb00010 	lw	s0,16(sp)
a00217c4:	03e00008 	jr	ra
a00217c8:	27bd0028 	addiu	sp,sp,40
			//printf("5\n");
			x = Mod(x, mod);
		}
		else {
			//printf("2, ");
			z = Div_p(z, 2);
a00217cc:	02002021 	move	a0,s0
a00217d0:	0c008132 	jal	a00204c8 <Div_p>
a00217d4:	24050002 	li	a1,2
			//printf("4, ");
			y = Mul(y, y);
a00217d8:	02202021 	move	a0,s1
a00217dc:	02202821 	move	a1,s1
a00217e0:	0c00837d 	jal	a0020df4 <Mul>
a00217e4:	00408021 	move	s0,v0
			//printf("6\n");
			y = Mod(y, mod);
a00217e8:	00402021 	move	a0,v0
a00217ec:	0c008411 	jal	a0021044 <Mod>
a00217f0:	02802821 	move	a1,s4
a00217f4:	080085cf 	j	a002173c <Exp_Mod+0x54>
a00217f8:	00408821 	move	s1,v0

a00217fc <copy_memory>:
 *  Function body
 ************************************************************************/
void copy_memory(void *dst, void *src, UINT32 size)
{
        UINT32 i;
        for (i=0; i<size; i++)
a00217fc:	10c0000a 	beqz	a2,a0021828 <copy_memory+0x2c>
a0021800:	00001021 	move	v0,zero
a0021804:	00a21821 	addu	v1,a1,v0
                REG8(((UINT32)dst) + i) = REG8(((UINT32)src) + i);
a0021808:	90680000 	lbu	t0,0(v1)
 *  Function body
 ************************************************************************/
void copy_memory(void *dst, void *src, UINT32 size)
{
        UINT32 i;
        for (i=0; i<size; i++)
a002180c:	00823821 	addu	a3,a0,v0
a0021810:	24420001 	addiu	v0,v0,1
                REG8(((UINT32)dst) + i) = REG8(((UINT32)src) + i);
a0021814:	310800ff 	andi	t0,t0,0xff
 *  Function body
 ************************************************************************/
void copy_memory(void *dst, void *src, UINT32 size)
{
        UINT32 i;
        for (i=0; i<size; i++)
a0021818:	0046182b 	sltu	v1,v0,a2
                REG8(((UINT32)dst) + i) = REG8(((UINT32)src) + i);
a002181c:	a0e80000 	sb	t0,0(a3)
 *  Function body
 ************************************************************************/
void copy_memory(void *dst, void *src, UINT32 size)
{
        UINT32 i;
        for (i=0; i<size; i++)
a0021820:	1460fff9 	bnez	v1,a0021808 <copy_memory+0xc>
a0021824:	00a21821 	addu	v1,a1,v0
a0021828:	03e00008 	jr	ra
a002182c:	00000000 	nop

a0021830 <compare_memory>:
        UINT32 i;
        char *p1, *p2;

        p1 = (char *)s1;
        p2 = (char *)s2;
        for (i = 0; i < size; i++)
a0021830:	10c00011 	beqz	a2,a0021878 <compare_memory+0x48>
a0021834:	00000000 	nop
        {
                if (p1[i] != p2[i])
a0021838:	80870000 	lb	a3,0(a0)
a002183c:	80a20000 	lb	v0,0(a1)
a0021840:	00000000 	nop
a0021844:	14e2000e 	bne	a3,v0,a0021880 <compare_memory+0x50>
a0021848:	00001821 	move	v1,zero
        UINT32 i;
        char *p1, *p2;

        p1 = (char *)s1;
        p2 = (char *)s2;
        for (i = 0; i < size; i++)
a002184c:	0800861a 	j	a0021868 <compare_memory+0x38>
a0021850:	24630001 	addiu	v1,v1,1
        {
                if (p1[i] != p2[i])
a0021854:	80e70000 	lb	a3,0(a3)
a0021858:	81020000 	lb	v0,0(t0)
a002185c:	00000000 	nop
a0021860:	14e20007 	bne	a3,v0,a0021880 <compare_memory+0x50>
a0021864:	24630001 	addiu	v1,v1,1
        UINT32 i;
        char *p1, *p2;

        p1 = (char *)s1;
        p2 = (char *)s2;
        for (i = 0; i < size; i++)
a0021868:	0066102b 	sltu	v0,v1,a2
        {
                if (p1[i] != p2[i])
a002186c:	00833821 	addu	a3,a0,v1
        UINT32 i;
        char *p1, *p2;

        p1 = (char *)s1;
        p2 = (char *)s2;
        for (i = 0; i < size; i++)
a0021870:	1440fff8 	bnez	v0,a0021854 <compare_memory+0x24>
a0021874:	00a34021 	addu	t0,a1,v1
                if (p1[i] != p2[i])
                        return (int)p1[i] - (int)p2[i];
        }

        return 0;
}
a0021878:	03e00008 	jr	ra
a002187c:	00001021 	move	v0,zero
        p1 = (char *)s1;
        p2 = (char *)s2;
        for (i = 0; i < size; i++)
        {
                if (p1[i] != p2[i])
                        return (int)p1[i] - (int)p2[i];
a0021880:	03e00008 	jr	ra
a0021884:	00e21023 	subu	v0,a3,v0

a0021888 <my_malloc>:
}

void *my_malloc(UINT32 NBYTES)
{
	void *p;
	if ((alloc_count + NBYTES) > MAX_ALLOC_SIZE) {	// exceed limit
a0021888:	3c05a002 	lui	a1,0xa002
a002188c:	8ca35bd0 	lw	v1,23504(a1)
a0021890:	3c020001 	lui	v0,0x1
a0021894:	34420001 	ori	v0,v0,0x1
a0021898:	00833021 	addu	a2,a0,v1
a002189c:	00c2102b 	sltu	v0,a2,v0
a00218a0:	10400010 	beqz	v0,a00218e4 <my_malloc+0x5c>
a00218a4:	00000000 	nop
		//print_val(NBYTES);
		return NULL;
	}

	if (alloc_count == 0)
a00218a8:	10600010 	beqz	v1,a00218ec <my_malloc+0x64>
a00218ac:	3c07a002 	lui	a3,0xa002
a00218b0:	8ce85bd4 	lw	t0,23508(a3)
a00218b4:	00000000 	nop
a00218b8:	01001021 	move	v0,t0
		alloc_current = MALLOC_BASE;

	p = (void *)(alloc_current);
	// always aligned to word boundary
	if (NBYTES & 0x3)
a00218bc:	30890003 	andi	t1,a0,0x3
a00218c0:	11200005 	beqz	t1,a00218d8 <my_malloc+0x50>
a00218c4:	00000000 	nop
		NBYTES = ((NBYTES >> 2) << 2) + 0x4;
a00218c8:	2406fffc 	li	a2,-4
a00218cc:	00862024 	and	a0,a0,a2
a00218d0:	24840004 	addiu	a0,a0,4
a00218d4:	00833021 	addu	a2,a0,v1

	alloc_current += NBYTES;
a00218d8:	00882021 	addu	a0,a0,t0
a00218dc:	ace45bd4 	sw	a0,23508(a3)
	alloc_count += NBYTES;
a00218e0:	aca65bd0 	sw	a2,23504(a1)
	//print_val((UINT32)p);
	return p;
}
a00218e4:	03e00008 	jr	ra
a00218e8:	00000000 	nop
		//print_val(NBYTES);
		return NULL;
	}

	if (alloc_count == 0)
		alloc_current = MALLOC_BASE;
a00218ec:	3c028062 	lui	v0,0x8062
a00218f0:	ace25bd4 	sw	v0,23508(a3)
a00218f4:	0800862f 	j	a00218bc <my_malloc+0x34>
a00218f8:	3c088062 	lui	t0,0x8062

a00218fc <my_free>:

//dennistuan add start 20130222
void my_free(UINT32 NBYTES)
{
	// always aligned to word boundary
	if (NBYTES & 0x3)
a00218fc:	30820003 	andi	v0,a0,0x3
a0021900:	10400003 	beqz	v0,a0021910 <my_free+0x14>
a0021904:	2402fffc 	li	v0,-4
		NBYTES = ((NBYTES >> 2) << 2) + 0x4;
a0021908:	00822024 	and	a0,a0,v0
a002190c:	24840004 	addiu	a0,a0,4

	alloc_count -= NBYTES;
a0021910:	3c03a002 	lui	v1,0xa002
	alloc_current -= NBYTES;
a0021914:	3c02a002 	lui	v0,0xa002
{
	// always aligned to word boundary
	if (NBYTES & 0x3)
		NBYTES = ((NBYTES >> 2) << 2) + 0x4;

	alloc_count -= NBYTES;
a0021918:	8c655bd0 	lw	a1,23504(v1)
	alloc_current -= NBYTES;
a002191c:	8c465bd4 	lw	a2,23508(v0)
{
	// always aligned to word boundary
	if (NBYTES & 0x3)
		NBYTES = ((NBYTES >> 2) << 2) + 0x4;

	alloc_count -= NBYTES;
a0021920:	00a42823 	subu	a1,a1,a0
	alloc_current -= NBYTES;
a0021924:	00c42023 	subu	a0,a2,a0
{
	// always aligned to word boundary
	if (NBYTES & 0x3)
		NBYTES = ((NBYTES >> 2) << 2) + 0x4;

	alloc_count -= NBYTES;
a0021928:	ac655bd0 	sw	a1,23504(v1)
	alloc_current -= NBYTES;
}
a002192c:	03e00008 	jr	ra
a0021930:	ac445bd4 	sw	a0,23508(v0)

a0021934 <my_freeAll>:

void my_freeAll(void)
{
	// reset all memory allocated by my_malloc()
	alloc_count = 0;
	alloc_current = MALLOC_BASE;
a0021934:	3c02a002 	lui	v0,0xa002
a0021938:	3c038062 	lui	v1,0x8062
a002193c:	ac435bd4 	sw	v1,23508(v0)
//dennistuan add end 20130222

void my_freeAll(void)
{
	// reset all memory allocated by my_malloc()
	alloc_count = 0;
a0021940:	3c02a002 	lui	v0,0xa002
	alloc_current = MALLOC_BASE;
}
a0021944:	03e00008 	jr	ra
a0021948:	ac405bd0 	sw	zero,23504(v0)

a002194c <rsa_strlen>:

//int strlen(const char *str)
int rsa_strlen(const char *str)
{
	int count = 0;
	while (*str++ != '\0')
a002194c:	80820000 	lb	v0,0(a0)
a0021950:	00000000 	nop
a0021954:	10400009 	beqz	v0,a002197c <rsa_strlen+0x30>
a0021958:	00000000 	nop
a002195c:	00001021 	move	v0,zero
		count++;
a0021960:	24420001 	addiu	v0,v0,1

//int strlen(const char *str)
int rsa_strlen(const char *str)
{
	int count = 0;
	while (*str++ != '\0')
a0021964:	00821821 	addu	v1,a0,v0
a0021968:	80630000 	lb	v1,0(v1)
a002196c:	00000000 	nop
a0021970:	1460fffc 	bnez	v1,a0021964 <rsa_strlen+0x18>
a0021974:	24420001 	addiu	v0,v0,1
a0021978:	2442ffff 	addiu	v0,v0,-1
		count++;

	return count;
}
a002197c:	03e00008 	jr	ra
a0021980:	00000000 	nop

a0021984 <set_memory>:
void set_memory(void *dst, UINT8 value, UINT32 size)
{
	UINT32 i;

	// write faster if both start address and size are word-aligned
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
a0021984:	30820003 	andi	v0,a0,0x3
a0021988:	1040000b 	beqz	v0,a00219b8 <set_memory+0x34>
a002198c:	30a500ff 	andi	a1,a1,0xff
		word = (word << 16) | word;
		for (i=0; i<size; i+=4)
			REG32(((UINT32)dst) + i) = word;
	}
	else {
		for (i=0; i<size; i++)
a0021990:	10c00007 	beqz	a2,a00219b0 <set_memory+0x2c>
a0021994:	00001021 	move	v0,zero
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
		// fill with word value
		UINT32 word = (value << 8) | value;

		word = (word << 16) | word;
		for (i=0; i<size; i+=4)
a0021998:	00823821 	addu	a3,a0,v0
			REG32(((UINT32)dst) + i) = word;
	}
	else {
		for (i=0; i<size; i++)
a002199c:	24420001 	addiu	v0,v0,1
a00219a0:	0046182b 	sltu	v1,v0,a2
			REG8(((UINT32)dst) + i) = value;
a00219a4:	a0e50000 	sb	a1,0(a3)
		word = (word << 16) | word;
		for (i=0; i<size; i+=4)
			REG32(((UINT32)dst) + i) = word;
	}
	else {
		for (i=0; i<size; i++)
a00219a8:	1460fffc 	bnez	v1,a002199c <set_memory+0x18>
a00219ac:	00823821 	addu	a3,a0,v0
a00219b0:	03e00008 	jr	ra
a00219b4:	00000000 	nop
void set_memory(void *dst, UINT8 value, UINT32 size)
{
	UINT32 i;

	// write faster if both start address and size are word-aligned
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
a00219b8:	30c20003 	andi	v0,a2,0x3
a00219bc:	1440fff6 	bnez	v0,a0021998 <set_memory+0x14>
a00219c0:	00001021 	move	v0,zero
		// fill with word value
		UINT32 word = (value << 8) | value;
a00219c4:	00051200 	sll	v0,a1,0x8
a00219c8:	00452825 	or	a1,v0,a1

		word = (word << 16) | word;
a00219cc:	00051400 	sll	v0,a1,0x10
		for (i=0; i<size; i+=4)
a00219d0:	10c0fff7 	beqz	a2,a00219b0 <set_memory+0x2c>
a00219d4:	00452825 	or	a1,v0,a1
a00219d8:	00001021 	move	v0,zero
a00219dc:	00823821 	addu	a3,a0,v0
a00219e0:	24420004 	addiu	v0,v0,4
a00219e4:	0046182b 	sltu	v1,v0,a2
			REG32(((UINT32)dst) + i) = word;
a00219e8:	ace50000 	sw	a1,0(a3)
	if ( (((UINT32)dst & 0x3) == 0) && ((size & 0x3) == 0) ) {
		// fill with word value
		UINT32 word = (value << 8) | value;

		word = (word << 16) | word;
		for (i=0; i<size; i+=4)
a00219ec:	1460fffc 	bnez	v1,a00219e0 <set_memory+0x5c>
a00219f0:	00823821 	addu	a3,a0,v0
a00219f4:	03e00008 	jr	ra
a00219f8:	00000000 	nop

a00219fc <skip_pkcs_v1_5_padding>:
/*
 * bypass PKCS#1 v1.5 block format
 */
#ifndef SKIP_skip_pkcs_v1_5_padding
unsigned int skip_pkcs_v1_5_padding(char *ptr)
{
a00219fc:	27bdfef0 	addiu	sp,sp,-272
a0021a00:	afbf010c 	sw	ra,268(sp)
a0021a04:	afb00108 	sw	s0,264(sp)
	unsigned int skipped;
	int i;
	const char algo_id[19] = {
		0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86,
		0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05,
		0x00, 0x04, 0x20};
a0021a08:	3c05a002 	lui	a1,0xa002
a0021a0c:	24a352cc 	addiu	v1,a1,21196
a0021a10:	90620012 	lbu	v0,18(v1)
a0021a14:	8caa52cc 	lw	t2,21196(a1)
a0021a18:	8c690004 	lw	t1,4(v1)
a0021a1c:	8c680008 	lw	t0,8(v1)
a0021a20:	8c67000c 	lw	a3,12(v1)
a0021a24:	94630010 	lhu	v1,16(v1)

	// construct padding header
	pkcs_padding[0] = 0;
	pkcs_padding[1] = 0x1;
	i = sizeof(pkcs_padding) - sizeof(algo_id);
	memset(pkcs_padding + 2, 0xff, i - 3);
a0021a28:	240500ff 	li	a1,255
	unsigned int skipped;
	int i;
	const char algo_id[19] = {
		0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86,
		0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05,
		0x00, 0x04, 0x20};
a0021a2c:	a3a20022 	sb	v0,34(sp)
/*
 * bypass PKCS#1 v1.5 block format
 */
#ifndef SKIP_skip_pkcs_v1_5_padding
unsigned int skip_pkcs_v1_5_padding(char *ptr)
{
a0021a30:	00808021 	move	s0,a0
		0x00, 0x04, 0x20};
	char pkcs_padding[0xe0];

	// construct padding header
	pkcs_padding[0] = 0;
	pkcs_padding[1] = 0x1;
a0021a34:	24020001 	li	v0,1
	i = sizeof(pkcs_padding) - sizeof(algo_id);
	memset(pkcs_padding + 2, 0xff, i - 3);
a0021a38:	27a40026 	addiu	a0,sp,38
a0021a3c:	240600ca 	li	a2,202
	unsigned int skipped;
	int i;
	const char algo_id[19] = {
		0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86,
		0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05,
		0x00, 0x04, 0x20};
a0021a40:	a7a30020 	sh	v1,32(sp)
	char pkcs_padding[0xe0];

	// construct padding header
	pkcs_padding[0] = 0;
	pkcs_padding[1] = 0x1;
a0021a44:	a3a20025 	sb	v0,37(sp)
	unsigned int skipped;
	int i;
	const char algo_id[19] = {
		0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86,
		0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05,
		0x00, 0x04, 0x20};
a0021a48:	afaa0010 	sw	t2,16(sp)
a0021a4c:	afa90014 	sw	t1,20(sp)
a0021a50:	afa80018 	sw	t0,24(sp)
a0021a54:	afa7001c 	sw	a3,28(sp)

	// construct padding header
	pkcs_padding[0] = 0;
	pkcs_padding[1] = 0x1;
	i = sizeof(pkcs_padding) - sizeof(algo_id);
	memset(pkcs_padding + 2, 0xff, i - 3);
a0021a58:	0c008661 	jal	a0021984 <set_memory>
a0021a5c:	a3a00024 	sb	zero,36(sp)
	pkcs_padding[i - 1] = 0;
a0021a60:	a3a000f0 	sb	zero,240(sp)
a0021a64:	27a300f1 	addiu	v1,sp,241
a0021a68:	27a20010 	addiu	v0,sp,16

/*
 * bypass PKCS#1 v1.5 block format
 */
#ifndef SKIP_skip_pkcs_v1_5_padding
unsigned int skip_pkcs_v1_5_padding(char *ptr)
a0021a6c:	27a50023 	addiu	a1,sp,35
 ************************************************************************/
void copy_memory(void *dst, void *src, UINT32 size)
{
        UINT32 i;
        for (i=0; i<size; i++)
                REG8(((UINT32)dst) + i) = REG8(((UINT32)src) + i);
a0021a70:	90440000 	lbu	a0,0(v0)
a0021a74:	24420001 	addiu	v0,v0,1
a0021a78:	308400ff 	andi	a0,a0,0xff
a0021a7c:	a0640000 	sb	a0,0(v1)
 *  Function body
 ************************************************************************/
void copy_memory(void *dst, void *src, UINT32 size)
{
        UINT32 i;
        for (i=0; i<size; i++)
a0021a80:	1445fffb 	bne	v0,a1,a0021a70 <skip_pkcs_v1_5_padding+0x74>
a0021a84:	24630001 	addiu	v1,v1,1
a0021a88:	00001021 	move	v0,zero
a0021a8c:	27a50024 	addiu	a1,sp,36
        UINT32 i;
        char *p1, *p2;

        p1 = (char *)s1;
        p2 = (char *)s2;
        for (i = 0; i < size; i++)
a0021a90:	080086a8 	j	a0021aa0 <skip_pkcs_v1_5_padding+0xa4>
a0021a94:	240600e0 	li	a2,224
a0021a98:	1046000d 	beq	v0,a2,a0021ad0 <skip_pkcs_v1_5_padding+0xd4>
a0021a9c:	00000000 	nop
        {
                if (p1[i] != p2[i])
a0021aa0:	00a22021 	addu	a0,a1,v0
a0021aa4:	02021821 	addu	v1,s0,v0
a0021aa8:	80840000 	lb	a0,0(a0)
a0021aac:	80630000 	lb	v1,0(v1)
a0021ab0:	00000000 	nop
a0021ab4:	1083fff8 	beq	a0,v1,a0021a98 <skip_pkcs_v1_5_padding+0x9c>
a0021ab8:	24420001 	addiu	v0,v0,1
		skipped = sizeof(pkcs_padding);
	else
		skipped = 0;

	return skipped;
}
a0021abc:	8fbf010c 	lw	ra,268(sp)
a0021ac0:	8fb00108 	lw	s0,264(sp)

        p1 = (char *)s1;
        p2 = (char *)s2;
        for (i = 0; i < size; i++)
        {
                if (p1[i] != p2[i])
a0021ac4:	00001021 	move	v0,zero
		skipped = sizeof(pkcs_padding);
	else
		skipped = 0;

	return skipped;
}
a0021ac8:	03e00008 	jr	ra
a0021acc:	27bd0110 	addiu	sp,sp,272
a0021ad0:	8fbf010c 	lw	ra,268(sp)
a0021ad4:	8fb00108 	lw	s0,264(sp)
        UINT32 i;
        char *p1, *p2;

        p1 = (char *)s1;
        p2 = (char *)s2;
        for (i = 0; i < size; i++)
a0021ad8:	240200e0 	li	v0,224
		skipped = sizeof(pkcs_padding);
	else
		skipped = 0;

	return skipped;
}
a0021adc:	03e00008 	jr	ra
a0021ae0:	27bd0110 	addiu	sp,sp,272

a0021ae4 <get_RSA_memory_pool>:
#endif //?#ifndef SKIP_skip_pkcs_v1_5_padding

void *get_RSA_memory_pool(void)
{
	return (void *)MALLOC_BASE;
}
a0021ae4:	03e00008 	jr	ra
a0021ae8:	3c028062 	lui	v0,0x8062

a0021aec <set_bit_p>:
//////////


/////////
BI *set_bit_p(unsigned int num)
{
a0021aec:	27bdffe0 	addiu	sp,sp,-32
a0021af0:	afbf001c 	sw	ra,28(sp)
	int i,j;
	BI *p;

	p = init();
a0021af4:	0c0082f0 	jal	a0020bc0 <init>
a0021af8:	afa40010 	sw	a0,16(sp)
	if (p == NULL)
a0021afc:	8fa40010 	lw	a0,16(sp)
a0021b00:	10400009 	beqz	v0,a0021b28 <set_bit_p+0x3c>
a0021b04:	00041942 	srl	v1,a0,0x5
		return NULL;

	i = num/32;
	j = num%32;

	p->m_ulValue[i]= (1<<j);
a0021b08:	24650002 	addiu	a1,v1,2
a0021b0c:	00052880 	sll	a1,a1,0x2
a0021b10:	24060001 	li	a2,1
a0021b14:	00862004 	sllv	a0,a2,a0
a0021b18:	00452821 	addu	a1,v0,a1

	p->m_nLength = i+1;
a0021b1c:	24630001 	addiu	v1,v1,1
		return NULL;

	i = num/32;
	j = num%32;

	p->m_ulValue[i]= (1<<j);
a0021b20:	aca40000 	sw	a0,0(a1)

	p->m_nLength = i+1;
a0021b24:	ac430004 	sw	v1,4(v0)

	return p;
}
a0021b28:	8fbf001c 	lw	ra,28(sp)
a0021b2c:	00000000 	nop
a0021b30:	03e00008 	jr	ra
a0021b34:	27bd0020 	addiu	sp,sp,32

a0021b38 <T.37>:
	REG32(REG_RSA_CTRL1) = (bsize >> 2) - 1;
}
//-----------------------------------------------------------------------------
static void hwsu_chk_mont_engine_ready (void)
{
	while (REG32(REG_RSA_CTRL) == 1);
a0021b38:	3c08b806 	lui	t0,0xb806
a0021b3c:	3508e400 	ori	t0,t0,0xe400
a0021b40:	24030001 	li	v1,1
a0021b44:	8d020000 	lw	v0,0(t0)
a0021b48:	00000000 	nop
a0021b4c:	1043fffd 	beq	v0,v1,a0021b44 <T.37+0xc>
a0021b50:	00000000 	nop
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021b54:	8ca20004 	lw	v0,4(a1)
a0021b58:	00000000 	nop
a0021b5c:	18400010 	blez	v0,a0021ba0 <T.37+0x68>
a0021b60:	00001021 	move	v0,zero
a0021b64:	3c08b806 	lui	t0,0xb806
a0021b68:	3508e000 	ori	t0,t0,0xe000
a0021b6c:	00a01821 	move	v1,a1
		REG32(reg + i) = bi->m_ulValue[i];
a0021b70:	8c690008 	lw	t1,8(v1)
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021b74:	24420001 	addiu	v0,v0,1
a0021b78:	24630004 	addiu	v1,v1,4
		REG32(reg + i) = bi->m_ulValue[i];
a0021b7c:	ad090000 	sw	t1,0(t0)
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021b80:	8ca90004 	lw	t1,4(a1)
a0021b84:	00000000 	nop
a0021b88:	0049482a 	slt	t1,v0,t1
a0021b8c:	1520fff8 	bnez	t1,a0021b70 <T.37+0x38>
a0021b90:	25080004 	addiu	t0,t0,4
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021b94:	28430040 	slti	v1,v0,64
a0021b98:	1060000a 	beqz	v1,a0021bc4 <T.37+0x8c>
a0021b9c:	00000000 	nop
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021ba0:	3c03b806 	lui	v1,0xb806
a0021ba4:	00022880 	sll	a1,v0,0x2
a0021ba8:	3463e000 	ori	v1,v1,0xe000
a0021bac:	00a31821 	addu	v1,a1,v1
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021bb0:	24420001 	addiu	v0,v0,1
a0021bb4:	28450040 	slti	a1,v0,64
		REG32(reg + i) = 0x0;
a0021bb8:	ac600000 	sw	zero,0(v1)

	for (i = 0; i < bi->m_nLength; i++)
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021bbc:	14a0fffc 	bnez	a1,a0021bb0 <T.37+0x78>
a0021bc0:	24630004 	addiu	v1,v1,4
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021bc4:	8cc20004 	lw	v0,4(a2)
a0021bc8:	00000000 	nop
a0021bcc:	18400060 	blez	v0,a0021d50 <T.37+0x218>
a0021bd0:	3c05b806 	lui	a1,0xb806
a0021bd4:	34a5e100 	ori	a1,a1,0xe100
a0021bd8:	00c01821 	move	v1,a2
a0021bdc:	00001021 	move	v0,zero
		REG32(reg + i) = bi->m_ulValue[i];
a0021be0:	8c680008 	lw	t0,8(v1)
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021be4:	24420001 	addiu	v0,v0,1
a0021be8:	24630004 	addiu	v1,v1,4
		REG32(reg + i) = bi->m_ulValue[i];
a0021bec:	aca80000 	sw	t0,0(a1)
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021bf0:	8cc80004 	lw	t0,4(a2)
a0021bf4:	00000000 	nop
a0021bf8:	0048402a 	slt	t0,v0,t0
a0021bfc:	1500fff8 	bnez	t0,a0021be0 <T.37+0xa8>
a0021c00:	24a50004 	addiu	a1,a1,4
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021c04:	28430040 	slti	v1,v0,64
a0021c08:	1060000a 	beqz	v1,a0021c34 <T.37+0xfc>
a0021c0c:	00000000 	nop
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021c10:	3c03b806 	lui	v1,0xb806
a0021c14:	00022880 	sll	a1,v0,0x2
a0021c18:	3463e100 	ori	v1,v1,0xe100
a0021c1c:	00a31821 	addu	v1,a1,v1
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021c20:	24420001 	addiu	v0,v0,1
a0021c24:	28450040 	slti	a1,v0,64
		REG32(reg + i) = 0x0;
a0021c28:	ac600000 	sw	zero,0(v1)

	for (i = 0; i < bi->m_nLength; i++)
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021c2c:	14a0fffc 	bnez	a1,a0021c20 <T.37+0xe8>
a0021c30:	24630004 	addiu	v1,v1,4
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021c34:	8ce20004 	lw	v0,4(a3)
a0021c38:	00000000 	nop
a0021c3c:	18400046 	blez	v0,a0021d58 <T.37+0x220>
a0021c40:	3c05b806 	lui	a1,0xb806
a0021c44:	34a5e200 	ori	a1,a1,0xe200
a0021c48:	00e01821 	move	v1,a3
a0021c4c:	00001021 	move	v0,zero
		REG32(reg + i) = bi->m_ulValue[i];
a0021c50:	8c660008 	lw	a2,8(v1)
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021c54:	24420001 	addiu	v0,v0,1
a0021c58:	24630004 	addiu	v1,v1,4
		REG32(reg + i) = bi->m_ulValue[i];
a0021c5c:	aca60000 	sw	a2,0(a1)
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021c60:	8ce60004 	lw	a2,4(a3)
a0021c64:	00000000 	nop
a0021c68:	0046302a 	slt	a2,v0,a2
a0021c6c:	14c0fff8 	bnez	a2,a0021c50 <T.37+0x118>
a0021c70:	24a50004 	addiu	a1,a1,4
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021c74:	28430040 	slti	v1,v0,64
a0021c78:	1060000a 	beqz	v1,a0021ca4 <T.37+0x16c>
a0021c7c:	00000000 	nop
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021c80:	3c03b806 	lui	v1,0xb806
a0021c84:	00022880 	sll	a1,v0,0x2
a0021c88:	3463e200 	ori	v1,v1,0xe200
a0021c8c:	00a31821 	addu	v1,a1,v1
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021c90:	24420001 	addiu	v0,v0,1
a0021c94:	28450040 	slti	a1,v0,64
		REG32(reg + i) = 0x0;
a0021c98:	ac600000 	sw	zero,0(v1)

	for (i = 0; i < bi->m_nLength; i++)
		REG32(reg + i) = bi->m_ulValue[i];

	/* Handle rest bytes (clear to 0) */
	for (; i <= max_idx; i++)
a0021c9c:	14a0fffc 	bnez	a1,a0021c90 <T.37+0x158>
a0021ca0:	24630004 	addiu	v1,v1,4
	return;
}
//-----------------------------------------------------------------------------
static void hwsu_set_bitnum (unsigned int bsize)
{
	REG32(REG_RSA_CTRL1) = (bsize >> 2) - 1;
a0021ca4:	3c02b806 	lui	v0,0xb806
	while (REG32(REG_RSA_CTRL) == 1);
}
//-----------------------------------------------------------------------------
static void hwsu_mont_engine_go (void)
{
	REG32(REG_RSA_CTRL) = 1;
a0021ca8:	3445e400 	ori	a1,v0,0xe400
	return;
}
//-----------------------------------------------------------------------------
static void hwsu_set_bitnum (unsigned int bsize)
{
	REG32(REG_RSA_CTRL1) = (bsize >> 2) - 1;
a0021cac:	2403003f 	li	v1,63
a0021cb0:	3442e410 	ori	v0,v0,0xe410
a0021cb4:	ac430000 	sw	v1,0(v0)
	while (REG32(REG_RSA_CTRL) == 1);
}
//-----------------------------------------------------------------------------
static void hwsu_mont_engine_go (void)
{
	REG32(REG_RSA_CTRL) = 1;
a0021cb8:	24020001 	li	v0,1
a0021cbc:	aca20000 	sw	v0,0(a1)
	REG32(REG_RSA_CTRL1) = (bsize >> 2) - 1;
}
//-----------------------------------------------------------------------------
static void hwsu_chk_mont_engine_ready (void)
{
	while (REG32(REG_RSA_CTRL) == 1);
a0021cc0:	24030001 	li	v1,1
a0021cc4:	8ca20000 	lw	v0,0(a1)
a0021cc8:	00000000 	nop
a0021ccc:	1043fffd 	beq	v0,v1,a0021cc4 <T.37+0x18c>
a0021cd0:	2402003f 	li	v0,63
a0021cd4:	3c03b806 	lui	v1,0xb806
a0021cd8:	0800873b 	j	a0021cec <T.37+0x1b4>
a0021cdc:	3463e3fc 	ori	v1,v1,0xe3fc
		max_idx = 12; //Max: 13 * 32 = 416 bit

	/* Skip MSB zero */
	i = max_idx;
	while (i && (REG32(reg + i) == 0)) {
		i--;
a0021ce0:	2442ffff 	addiu	v0,v0,-1
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	/* Skip MSB zero */
	i = max_idx;
	while (i && (REG32(reg + i) == 0)) {
a0021ce4:	10400017 	beqz	v0,a0021d44 <T.37+0x20c>
a0021ce8:	00000000 	nop
a0021cec:	8c650000 	lw	a1,0(v1)
a0021cf0:	00000000 	nop
a0021cf4:	10a0fffa 	beqz	a1,a0021ce0 <T.37+0x1a8>
a0021cf8:	2463fffc 	addiu	v1,v1,-4
		i--;
	}

	/* Fill BI */
	bi->m_nLength = i + 1;
a0021cfc:	24430001 	addiu	v1,v0,1
	j = 1;
	for (; i >= 0; i--) {
a0021d00:	0440000e 	bltz	v0,a0021d3c <T.37+0x204>
a0021d04:	ac830004 	sw	v1,4(a0)
	while (i && (REG32(reg + i) == 0)) {
		i--;
	}

	/* Fill BI */
	bi->m_nLength = i + 1;
a0021d08:	24630001 	addiu	v1,v1,1
a0021d0c:	00032880 	sll	a1,v1,0x2
a0021d10:	3c03b806 	lui	v1,0xb806
a0021d14:	00023080 	sll	a2,v0,0x2
a0021d18:	3463e300 	ori	v1,v1,0xe300
a0021d1c:	00c31821 	addu	v1,a2,v1
a0021d20:	00852021 	addu	a0,a0,a1
	j = 1;
	for (; i >= 0; i--) {
		bi->m_ulValue[bi->m_nLength - j] = REG32(reg + i);
a0021d24:	8c650000 	lw	a1,0(v1)
	}

	/* Fill BI */
	bi->m_nLength = i + 1;
	j = 1;
	for (; i >= 0; i--) {
a0021d28:	2442ffff 	addiu	v0,v0,-1
a0021d2c:	2463fffc 	addiu	v1,v1,-4
		bi->m_ulValue[bi->m_nLength - j] = REG32(reg + i);
a0021d30:	ac850000 	sw	a1,0(a0)
	}

	/* Fill BI */
	bi->m_nLength = i + 1;
	j = 1;
	for (; i >= 0; i--) {
a0021d34:	0441fffb 	bgez	v0,a0021d24 <T.37+0x1ec>
a0021d38:	2484fffc 	addiu	a0,a0,-4
a0021d3c:	03e00008 	jr	ra
a0021d40:	00000000 	nop
	while (i && (REG32(reg + i) == 0)) {
		i--;
	}

	/* Fill BI */
	bi->m_nLength = i + 1;
a0021d44:	24030001 	li	v1,1
a0021d48:	08008742 	j	a0021d08 <T.37+0x1d0>
a0021d4c:	ac830004 	sw	v1,4(a0)
	if (type == TYPE_HW_MONT)
		max_idx = 63; //Max: 64 * 32 = 2048 bit
	else
		max_idx = 12; //Max: 13 * 32 = 416 bit

	for (i = 0; i < bi->m_nLength; i++)
a0021d50:	08008704 	j	a0021c10 <T.37+0xd8>
a0021d54:	00001021 	move	v0,zero
a0021d58:	08008720 	j	a0021c80 <T.37+0x148>
a0021d5c:	00001021 	move	v0,zero

a0021d60 <do_RSA>:
//Use hardware RSA to speedup.
unsigned int do_RSA(unsigned char op,
					const unsigned int text_addr,
					const unsigned int rsa_key_addr,
					const unsigned int output_addr)
{
a0021d60:	27bdffc0 	addiu	sp,sp,-64
a0021d64:	afbf003c 	sw	ra,60(sp)
a0021d68:	afbe0038 	sw	s8,56(sp)
a0021d6c:	afb70034 	sw	s7,52(sp)
a0021d70:	afb60030 	sw	s6,48(sp)
a0021d74:	afb5002c 	sw	s5,44(sp)
a0021d78:	afb40028 	sw	s4,40(sp)
a0021d7c:	afb30024 	sw	s3,36(sp)
a0021d80:	afb20020 	sw	s2,32(sp)
a0021d84:	afb1001c 	sw	s1,28(sp)
a0021d88:	afb00018 	sw	s0,24(sp)
a0021d8c:	309100ff 	andi	s1,a0,0xff
	//RSA_HW
	ptr_txt = (unsigned char*)text_addr;
	ptr_pub = (unsigned char*)rsa_key_addr;
	ptr_r2  = ptr_pub+RSA_2048_KEY_LENGTH;

	if(op & RSA_HW){
a0021d90:	00111600 	sll	v0,s1,0x18

	int i;
	//RSA_HW
	ptr_txt = (unsigned char*)text_addr;
	ptr_pub = (unsigned char*)rsa_key_addr;
	ptr_r2  = ptr_pub+RSA_2048_KEY_LENGTH;
a0021d94:	24c30100 	addiu	v1,a2,256

	if(op & RSA_HW){
a0021d98:	00021603 	sra	v0,v0,0x18
//Use hardware RSA to speedup.
unsigned int do_RSA(unsigned char op,
					const unsigned int text_addr,
					const unsigned int rsa_key_addr,
					const unsigned int output_addr)
{
a0021d9c:	00c09021 	move	s2,a2
a0021da0:	00a0a821 	move	s5,a1
a0021da4:	00e0b021 	move	s6,a3
	//RSA_HW
	ptr_txt = (unsigned char*)text_addr;
	ptr_pub = (unsigned char*)rsa_key_addr;
	ptr_r2  = ptr_pub+RSA_2048_KEY_LENGTH;

	if(op & RSA_HW){
a0021da8:	044000fe 	bltz	v0,a00221a4 <do_RSA+0x444>
a0021dac:	afa30014 	sw	v1,20(sp)
a0021db0:	afa00010 	sw	zero,16(sp)
		op = op & ~RSA_HW;
	}

	//r2_enable = 0;

	if(op == RTK_ENC){
a0021db4:	24020001 	li	v0,1
a0021db8:	122200f6 	beq	s1,v0,a0022194 <do_RSA+0x434>
a0021dbc:	3c05a002 	lui	a1,0xa002
a0021dc0:	3c05a002 	lui	a1,0xa002
a0021dc4:	24a55248 	addiu	a1,a1,21064
		ptr_pri = ptr_r2+RSA_2048_KEY_LENGTH;
	}

#if 1

	sed_printf1("%srypt Data:",(op == RTK_ENC)? "Enc":"Dec");
a0021dc8:	3c04a002 	lui	a0,0xa002
a0021dcc:	0c008b5c 	jal	a0022d70 <printf1>
a0021dd0:	24845250 	addiu	a0,a0,21072
	for(i=0;i<RSA_SIGNATURE_LENGTH;i++){
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
a0021dd4:	3c02a002 	lui	v0,0xa002
		ptr_pri = ptr_r2+RSA_2048_KEY_LENGTH;
	}

#if 1

	sed_printf1("%srypt Data:",(op == RTK_ENC)? "Enc":"Dec");
a0021dd8:	00009821 	move	s3,zero
	for(i=0;i<RSA_SIGNATURE_LENGTH;i++){
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
a0021ddc:	24575260 	addiu	s7,v0,21088
	}

#if 1

	sed_printf1("%srypt Data:",(op == RTK_ENC)? "Enc":"Dec");
	for(i=0;i<RSA_SIGNATURE_LENGTH;i++){
a0021de0:	08008780 	j	a0021e00 <do_RSA+0xa0>
a0021de4:	241e0100 	li	s8,256
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
a0021de8:	90450000 	lbu	a1,0(v0)
	}

#if 1

	sed_printf1("%srypt Data:",(op == RTK_ENC)? "Enc":"Dec");
	for(i=0;i<RSA_SIGNATURE_LENGTH;i++){
a0021dec:	26730001 	addiu	s3,s3,1
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
a0021df0:	0c008b5c 	jal	a0022d70 <printf1>
a0021df4:	02e02021 	move	a0,s7
	}

#if 1

	sed_printf1("%srypt Data:",(op == RTK_ENC)? "Enc":"Dec");
	for(i=0;i<RSA_SIGNATURE_LENGTH;i++){
a0021df8:	127e000e 	beq	s3,s8,a0021e34 <do_RSA+0xd4>
a0021dfc:	00000000 	nop
		if((i%16)==0)
a0021e00:	3262000f 	andi	v0,s3,0xf
a0021e04:	1440fff8 	bnez	v0,a0021de8 <do_RSA+0x88>
a0021e08:	02b31021 	addu	v0,s5,s3
			sed_printf1("\n");
a0021e0c:	3c04a002 	lui	a0,0xa002
a0021e10:	0c008b5c 	jal	a0022d70 <printf1>
a0021e14:	248458bc 	addiu	a0,a0,22716
		sed_printf1("%02x ",ptr_txt[i]);
a0021e18:	02b31021 	addu	v0,s5,s3
a0021e1c:	90450000 	lbu	a1,0(v0)
	}

#if 1

	sed_printf1("%srypt Data:",(op == RTK_ENC)? "Enc":"Dec");
	for(i=0;i<RSA_SIGNATURE_LENGTH;i++){
a0021e20:	26730001 	addiu	s3,s3,1
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
a0021e24:	0c008b5c 	jal	a0022d70 <printf1>
a0021e28:	02e02021 	move	a0,s7
	}

#if 1

	sed_printf1("%srypt Data:",(op == RTK_ENC)? "Enc":"Dec");
	for(i=0;i<RSA_SIGNATURE_LENGTH;i++){
a0021e2c:	167efff5 	bne	s3,s8,a0021e04 <do_RSA+0xa4>
a0021e30:	3262000f 	andi	v0,s3,0xf
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
	}

	sed_printf1("\n\nPublic Key:");
a0021e34:	3c04a002 	lui	a0,0xa002
a0021e38:	0c008b5c 	jal	a0022d70 <printf1>
a0021e3c:	24845268 	addiu	a0,a0,21096
a0021e40:	00009821 	move	s3,zero
	for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a0021e44:	08008799 	j	a0021e64 <do_RSA+0x104>
a0021e48:	241e0100 	li	s8,256
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_pub[i]);
a0021e4c:	90450000 	lbu	a1,0(v0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
	}

	sed_printf1("\n\nPublic Key:");
	for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a0021e50:	26730001 	addiu	s3,s3,1
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_pub[i]);
a0021e54:	0c008b5c 	jal	a0022d70 <printf1>
a0021e58:	02e02021 	move	a0,s7
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
	}

	sed_printf1("\n\nPublic Key:");
	for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a0021e5c:	127e000f 	beq	s3,s8,a0021e9c <do_RSA+0x13c>
a0021e60:	3c03a002 	lui	v1,0xa002
		if((i%16)==0)
a0021e64:	3262000f 	andi	v0,s3,0xf
a0021e68:	1440fff8 	bnez	v0,a0021e4c <do_RSA+0xec>
a0021e6c:	02531021 	addu	v0,s2,s3
			sed_printf1("\n");
a0021e70:	3c04a002 	lui	a0,0xa002
a0021e74:	0c008b5c 	jal	a0022d70 <printf1>
a0021e78:	248458bc 	addiu	a0,a0,22716
		sed_printf1("%02x ",ptr_pub[i]);
a0021e7c:	02531021 	addu	v0,s2,s3
a0021e80:	90450000 	lbu	a1,0(v0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
	}

	sed_printf1("\n\nPublic Key:");
	for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a0021e84:	26730001 	addiu	s3,s3,1
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_pub[i]);
a0021e88:	0c008b5c 	jal	a0022d70 <printf1>
a0021e8c:	02e02021 	move	a0,s7
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_txt[i]);
	}

	sed_printf1("\n\nPublic Key:");
	for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a0021e90:	167efff5 	bne	s3,s8,a0021e68 <do_RSA+0x108>
a0021e94:	3262000f 	andi	v0,s3,0xf
		if((i%16)==0)
			sed_printf1("\n");
		sed_printf1("%02x ",ptr_pub[i]);
	}
	sed_printf1("\n\n");
a0021e98:	3c03a002 	lui	v1,0xa002
a0021e9c:	0c008b5c 	jal	a0022d70 <printf1>
a0021ea0:	24645278 	addiu	a0,v1,21112

	if(r2_enable){
a0021ea4:	8fa20010 	lw	v0,16(sp)
a0021ea8:	00000000 	nop
a0021eac:	14400078 	bnez	v0,a0022090 <do_RSA+0x330>
a0021eb0:	24020001 	li	v0,1
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_r2[i]);
		}
		sed_printf1("\n\n");
	}
	if(op == RTK_ENC){
a0021eb4:	12220095 	beq	s1,v0,a002210c <do_RSA+0x3ac>
a0021eb8:	3c04a002 	lui	a0,0xa002
		mod  = InPutFromStr("B9975438AF3F83EB3F74DBA10DB8B8C3DAD35F89AB81B7EC7A64A9A841054302F148B0B72A5E716511FD65C89374B09CA8C593D32EC53A8183944DBFDEF72263FA80CB0FA86D03D4DB14383925D2F0666EEEE2649D305A0EA8AF95BE629DD42548D88A99642F509C8A24E3112618C91B56CF0EE80CDE44D9486BE9A4675E00481579EC0A62C0FF8838C2CCFAAD9060F376ED8476894305D8FFEF1D469EF62B743DBA11FA5481C3828EC0883F12FF9440FCBFC6A418F463030C3D19711719B66E9F9B925AACF87A982710E6621F9473D801E5958F7C2C34C7304C7F481D77452BEC2A71C3D2FE52AC00DB5C17E32EE3DFBD4FA5DD8465BB720016E5DDEC39E4AF", HEX);
		r2   = InPutFromStr("A09CC11BC8E1D05D468FABF4FCB62AA861FC15A4FE49E53EA7568172625F79B40E04F1545BF52A1C940998AA5301FED02A4BC12FAEE58D920CFE5CF7A5F0ADC3C57E3D527C7F3FCEC95C7E427BD813656E04E5FECFEAA998A7BE51FB83F3995B767D2454C92FAA2D73734B474BF15B7526FD15104F606B5B102D6B7934C348882E810289C4EB492C1F31FC70E85FF7C94D5C466E3A999DFD453BAAE4FD1E166C7F6C194098F27D3E0451AA8CB035459633EA5369760EF1ED20338C20F45E62E66369460C6DA71B4BF9C4E67314DB080606F945F0DF092932FDF550E444ED184CC418DB5A12C6DCA28FE3B5BD1581BD19F235D9C61D02DBD2C8058D547DA7D897", HEX);
		//exponent public
		exp = move_p(65537);
		*/
		exp  = move_p(65537);
a0021ebc:	3c040001 	lui	a0,0x1
a0021ec0:	34840001 	ori	a0,a0,0x1
a0021ec4:	0c0083f8 	jal	a0020fe0 <move_p>
a0021ec8:	00002821 	move	a1,zero
a0021ecc:	00409821 	move	s3,v0
	}

	sig = InPutFromAddr((unsigned char *)ptr_txt, RSA_SIGNATURE_LENGTH);
a0021ed0:	02a02021 	move	a0,s5
a0021ed4:	0c008302 	jal	a0020c08 <InPutFromAddr>
a0021ed8:	24050100 	li	a1,256
a0021edc:	0040b821 	move	s7,v0

	if(r2_enable){
a0021ee0:	8fa20010 	lw	v0,16(sp)
a0021ee4:	00000000 	nop
a0021ee8:	1440005c 	bnez	v0,a002205c <do_RSA+0x2fc>
a0021eec:	02402021 	move	a0,s2
		r2  = InPutFromAddr((unsigned char *)ptr_r2,  RSA_2048_KEY_LENGTH);
		//r2   = InPutFromStr("A09CC11BC8E1D05D468FABF4FCB62AA861FC15A4FE49E53EA7568172625F79B40E04F1545BF52A1C940998AA5301FED02A4BC12FAEE58D920CFE5CF7A5F0ADC3C57E3D527C7F3FCEC95C7E427BD813656E04E5FECFEAA998A7BE51FB83F3995B767D2454C92FAA2D73734B474BF15B7526FD15104F606B5B102D6B7934C348882E810289C4EB492C1F31FC70E85FF7C94D5C466E3A999DFD453BAAE4FD1E166C7F6C194098F27D3E0451AA8CB035459633EA5369760EF1ED20338C20F45E62E66369460C6DA71B4BF9C4E67314DB080606F945F0DF092932FDF550E444ED184CC418DB5A12C6DCA28FE3B5BD1581BD19F235D9C61D02DBD2C8058D547DA7D897", HEX);
	}
	mod = InPutFromAddr((unsigned char *)ptr_pub, RSA_2048_KEY_LENGTH);
a0021ef0:	0c008302 	jal	a0020c08 <InPutFromAddr>
a0021ef4:	24050100 	li	a1,256
a0021ef8:	00409021 	move	s2,v0

	sed_printf1("Start to %srypt ...\n",(op == RTK_ENC)? "Enc":"Dec");
a0021efc:	24020001 	li	v0,1
a0021f00:	12220061 	beq	s1,v0,a0022088 <do_RSA+0x328>
a0021f04:	3c05a002 	lui	a1,0xa002
a0021f08:	3c05a002 	lui	a1,0xa002
a0021f0c:	24a55248 	addiu	a1,a1,21064
a0021f10:	3c04a002 	lui	a0,0xa002
a0021f14:	0c008b5c 	jal	a0022d70 <printf1>
a0021f18:	2484529c 	addiu	a0,a0,21148
	if(r2_enable){
a0021f1c:	8fa30010 	lw	v1,16(sp)
a0021f20:	00000000 	nop
a0021f24:	10600036 	beqz	v1,a0022000 <do_RSA+0x2a0>
a0021f28:	00000000 	nop
		sed_printf1("Hardware\n");
a0021f2c:	3c04a002 	lui	a0,0xa002
a0021f30:	0c008b5c 	jal	a0022d70 <printf1>
a0021f34:	248452b4 	addiu	a0,a0,21172
		res = move_p(1);
a0021f38:	24040001 	li	a0,1
a0021f3c:	0c0083f8 	jal	a0020fe0 <move_p>
a0021f40:	00002821 	move	a1,zero
		for ( i = BI_chkmsbbit (exp); i >= 0; i-- )
a0021f44:	02602021 	move	a0,s3
a0021f48:	0c008224 	jal	a0020890 <BI_chkmsbbit>
a0021f4c:	00408021 	move	s0,v0
a0021f50:	04400013 	bltz	v0,a0021fa0 <do_RSA+0x240>
a0021f54:	00408821 	move	s1,v0
	    {
	        hwsu_mul_mod ( res, r2, res, res, mod, RSA_SIGNATURE_LENGTH);

	        if ( BI_is_bit_set (exp, i) == 1 )
a0021f58:	24150001 	li	s5,1
}

//-----------------------------------------------------------------------------
static void hwsu_mul_mod (BI *resl, BI *r2, BI *x, BI *y, BI *m, UINT32 bsize)
{
	hwsu_mont (resl, x, y, m, bsize);
a0021f5c:	02002021 	move	a0,s0
a0021f60:	02002821 	move	a1,s0
a0021f64:	02003021 	move	a2,s0
a0021f68:	0c0086ce 	jal	a0021b38 <T.37>
a0021f6c:	02403821 	move	a3,s2
	hwsu_mont (resl, resl, r2, m, bsize);
a0021f70:	02002021 	move	a0,s0
a0021f74:	02002821 	move	a1,s0
a0021f78:	02803021 	move	a2,s4
a0021f7c:	0c0086ce 	jal	a0021b38 <T.37>
a0021f80:	02403821 	move	a3,s2
		res = move_p(1);
		for ( i = BI_chkmsbbit (exp); i >= 0; i-- )
	    {
	        hwsu_mul_mod ( res, r2, res, res, mod, RSA_SIGNATURE_LENGTH);

	        if ( BI_is_bit_set (exp, i) == 1 )
a0021f84:	02202821 	move	a1,s1
a0021f88:	0c008245 	jal	a0020914 <BI_is_bit_set>
a0021f8c:	02602021 	move	a0,s3
a0021f90:	10550024 	beq	v0,s5,a0022024 <do_RSA+0x2c4>
a0021f94:	2631ffff 	addiu	s1,s1,-1

	sed_printf1("Start to %srypt ...\n",(op == RTK_ENC)? "Enc":"Dec");
	if(r2_enable){
		sed_printf1("Hardware\n");
		res = move_p(1);
		for ( i = BI_chkmsbbit (exp); i >= 0; i-- )
a0021f98:	0621fff0 	bgez	s1,a0021f5c <do_RSA+0x1fc>
a0021f9c:	00000000 	nop
		sed_printf1("Software\n");

		res = Exp_Mod(sig, exp, mod);
	}

	OutPutToAddr(res, (unsigned char *)output_addr, 1);
a0021fa0:	02c02821 	move	a1,s6
a0021fa4:	02002021 	move	a0,s0
a0021fa8:	0c0081e6 	jal	a0020798 <OutPutToAddr>
a0021fac:	24060001 	li	a2,1
	t1 = output_addr;

	// bypass PKCS#1 v1.5 block format
#ifndef SKIP_skip_pkcs_v1_5_padding //skip skip_pkcs_v1_5_padding
	tmp = skip_pkcs_v1_5_padding((char *)output_addr);
a0021fb0:	0c00867f 	jal	a00219fc <skip_pkcs_v1_5_padding>
a0021fb4:	02c02021 	move	a0,s6
#endif
	my_freeAll();

	// RSA result address (without padding bytes)
	return t1;
}
a0021fb8:	00561021 	addu	v0,v0,s6
a0021fbc:	8fbf003c 	lw	ra,60(sp)
a0021fc0:	8fbe0038 	lw	s8,56(sp)
a0021fc4:	8fb70034 	lw	s7,52(sp)
a0021fc8:	8fb60030 	lw	s6,48(sp)
a0021fcc:	8fb5002c 	lw	s5,44(sp)
a0021fd0:	8fb40028 	lw	s4,40(sp)
a0021fd4:	8fb30024 	lw	s3,36(sp)
a0021fd8:	8fb20020 	lw	s2,32(sp)
a0021fdc:	8fb1001c 	lw	s1,28(sp)
a0021fe0:	8fb00018 	lw	s0,24(sp)

void my_freeAll(void)
{
	// reset all memory allocated by my_malloc()
	alloc_count = 0;
	alloc_current = MALLOC_BASE;
a0021fe4:	3c048062 	lui	a0,0x8062
a0021fe8:	3c03a002 	lui	v1,0xa002
a0021fec:	ac645bd4 	sw	a0,23508(v1)
//dennistuan add end 20130222

void my_freeAll(void)
{
	// reset all memory allocated by my_malloc()
	alloc_count = 0;
a0021ff0:	3c03a002 	lui	v1,0xa002
a0021ff4:	ac605bd0 	sw	zero,23504(v1)
#endif
	my_freeAll();

	// RSA result address (without padding bytes)
	return t1;
}
a0021ff8:	03e00008 	jr	ra
a0021ffc:	27bd0040 	addiu	sp,sp,64
				hwsu_mul_mod ( res, r2, res, sig, mod, RSA_SIGNATURE_LENGTH);
	        }
	    }

	}else{
		sed_printf1("Software\n");
a0022000:	3c04a002 	lui	a0,0xa002
a0022004:	0c008b5c 	jal	a0022d70 <printf1>
a0022008:	248452c0 	addiu	a0,a0,21184

		res = Exp_Mod(sig, exp, mod);
a002200c:	02e02021 	move	a0,s7
a0022010:	02602821 	move	a1,s3
a0022014:	0c0085ba 	jal	a00216e8 <Exp_Mod>
a0022018:	02403021 	move	a2,s2
a002201c:	080087e8 	j	a0021fa0 <do_RSA+0x240>
a0022020:	00408021 	move	s0,v0
}

//-----------------------------------------------------------------------------
static void hwsu_mul_mod (BI *resl, BI *r2, BI *x, BI *y, BI *m, UINT32 bsize)
{
	hwsu_mont (resl, x, y, m, bsize);
a0022024:	02002021 	move	a0,s0
a0022028:	02002821 	move	a1,s0
a002202c:	02e03021 	move	a2,s7
a0022030:	0c0086ce 	jal	a0021b38 <T.37>
a0022034:	02403821 	move	a3,s2
	hwsu_mont (resl, resl, r2, m, bsize);
a0022038:	02002021 	move	a0,s0
a002203c:	02002821 	move	a1,s0
a0022040:	02803021 	move	a2,s4
a0022044:	0c0086ce 	jal	a0021b38 <T.37>
a0022048:	02403821 	move	a3,s2

	sed_printf1("Start to %srypt ...\n",(op == RTK_ENC)? "Enc":"Dec");
	if(r2_enable){
		sed_printf1("Hardware\n");
		res = move_p(1);
		for ( i = BI_chkmsbbit (exp); i >= 0; i-- )
a002204c:	0621ffc3 	bgez	s1,a0021f5c <do_RSA+0x1fc>
a0022050:	02c02821 	move	a1,s6
		sed_printf1("Software\n");

		res = Exp_Mod(sig, exp, mod);
	}

	OutPutToAddr(res, (unsigned char *)output_addr, 1);
a0022054:	080087ea 	j	a0021fa8 <do_RSA+0x248>
a0022058:	02002021 	move	a0,s0
	}

	sig = InPutFromAddr((unsigned char *)ptr_txt, RSA_SIGNATURE_LENGTH);

	if(r2_enable){
		r2  = InPutFromAddr((unsigned char *)ptr_r2,  RSA_2048_KEY_LENGTH);
a002205c:	8fa40014 	lw	a0,20(sp)
a0022060:	0c008302 	jal	a0020c08 <InPutFromAddr>
a0022064:	24050100 	li	a1,256
		//r2   = InPutFromStr("A09CC11BC8E1D05D468FABF4FCB62AA861FC15A4FE49E53EA7568172625F79B40E04F1545BF52A1C940998AA5301FED02A4BC12FAEE58D920CFE5CF7A5F0ADC3C57E3D527C7F3FCEC95C7E427BD813656E04E5FECFEAA998A7BE51FB83F3995B767D2454C92FAA2D73734B474BF15B7526FD15104F606B5B102D6B7934C348882E810289C4EB492C1F31FC70E85FF7C94D5C466E3A999DFD453BAAE4FD1E166C7F6C194098F27D3E0451AA8CB035459633EA5369760EF1ED20338C20F45E62E66369460C6DA71B4BF9C4E67314DB080606F945F0DF092932FDF550E444ED184CC418DB5A12C6DCA28FE3B5BD1581BD19F235D9C61D02DBD2C8058D547DA7D897", HEX);
	}
	mod = InPutFromAddr((unsigned char *)ptr_pub, RSA_2048_KEY_LENGTH);
a0022068:	02402021 	move	a0,s2
a002206c:	24050100 	li	a1,256
a0022070:	0c008302 	jal	a0020c08 <InPutFromAddr>
a0022074:	0040a021 	move	s4,v0
a0022078:	00409021 	move	s2,v0

	sed_printf1("Start to %srypt ...\n",(op == RTK_ENC)? "Enc":"Dec");
a002207c:	24020001 	li	v0,1
a0022080:	1622ffa1 	bne	s1,v0,a0021f08 <do_RSA+0x1a8>
a0022084:	3c05a002 	lui	a1,0xa002
a0022088:	080087c4 	j	a0021f10 <do_RSA+0x1b0>
a002208c:	24a5524c 	addiu	a1,a1,21068
		sed_printf1("%02x ",ptr_pub[i]);
	}
	sed_printf1("\n\n");

	if(r2_enable){
		sed_printf1("\n\nPublic R2:");
a0022090:	3c04a002 	lui	a0,0xa002
a0022094:	0c008b5c 	jal	a0022d70 <printf1>
a0022098:	2484527c 	addiu	a0,a0,21116
a002209c:	00009821 	move	s3,zero
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a00220a0:	08008830 	j	a00220c0 <do_RSA+0x360>
a00220a4:	241e0100 	li	s8,256
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_r2[i]);
a00220a8:	90450100 	lbu	a1,256(v0)
	}
	sed_printf1("\n\n");

	if(r2_enable){
		sed_printf1("\n\nPublic R2:");
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a00220ac:	26730001 	addiu	s3,s3,1
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_r2[i]);
a00220b0:	0c008b5c 	jal	a0022d70 <printf1>
a00220b4:	02e02021 	move	a0,s7
	}
	sed_printf1("\n\n");

	if(r2_enable){
		sed_printf1("\n\nPublic R2:");
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a00220b8:	127e000f 	beq	s3,s8,a00220f8 <do_RSA+0x398>
a00220bc:	3c03a002 	lui	v1,0xa002
			if((i%16)==0)
a00220c0:	3262000f 	andi	v0,s3,0xf
a00220c4:	1440fff8 	bnez	v0,a00220a8 <do_RSA+0x348>
a00220c8:	02531021 	addu	v0,s2,s3
				sed_printf1("\n");
a00220cc:	3c04a002 	lui	a0,0xa002
a00220d0:	0c008b5c 	jal	a0022d70 <printf1>
a00220d4:	248458bc 	addiu	a0,a0,22716
			sed_printf1("%02x ",ptr_r2[i]);
a00220d8:	02531021 	addu	v0,s2,s3
a00220dc:	90450100 	lbu	a1,256(v0)
	}
	sed_printf1("\n\n");

	if(r2_enable){
		sed_printf1("\n\nPublic R2:");
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a00220e0:	26730001 	addiu	s3,s3,1
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_r2[i]);
a00220e4:	0c008b5c 	jal	a0022d70 <printf1>
a00220e8:	02e02021 	move	a0,s7
	}
	sed_printf1("\n\n");

	if(r2_enable){
		sed_printf1("\n\nPublic R2:");
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a00220ec:	167efff5 	bne	s3,s8,a00220c4 <do_RSA+0x364>
a00220f0:	3262000f 	andi	v0,s3,0xf
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_r2[i]);
		}
		sed_printf1("\n\n");
a00220f4:	3c03a002 	lui	v1,0xa002
a00220f8:	0c008b5c 	jal	a0022d70 <printf1>
a00220fc:	24645278 	addiu	a0,v1,21112
	}
	if(op == RTK_ENC){
a0022100:	24020001 	li	v0,1
a0022104:	1622ff6d 	bne	s1,v0,a0021ebc <do_RSA+0x15c>
a0022108:	3c04a002 	lui	a0,0xa002
		sed_printf1("Private Key:");
a002210c:	0c008b5c 	jal	a0022d70 <printf1>
a0022110:	2484528c 	addiu	a0,a0,21132
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_pri[i]);
a0022114:	3c02a002 	lui	v0,0xa002
a0022118:	245e5260 	addiu	s8,v0,21088
			sed_printf1("%02x ",ptr_r2[i]);
		}
		sed_printf1("\n\n");
	}
	if(op == RTK_ENC){
		sed_printf1("Private Key:");
a002211c:	00009821 	move	s3,zero
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a0022120:	08008850 	j	a0022140 <do_RSA+0x3e0>
a0022124:	24170100 	li	s7,256
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_pri[i]);
a0022128:	90450000 	lbu	a1,0(v0)
		}
		sed_printf1("\n\n");
	}
	if(op == RTK_ENC){
		sed_printf1("Private Key:");
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a002212c:	26730001 	addiu	s3,s3,1
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_pri[i]);
a0022130:	0c008b5c 	jal	a0022d70 <printf1>
a0022134:	03c02021 	move	a0,s8
		}
		sed_printf1("\n\n");
	}
	if(op == RTK_ENC){
		sed_printf1("Private Key:");
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a0022138:	1277000f 	beq	s3,s7,a0022178 <do_RSA+0x418>
a002213c:	3c03a002 	lui	v1,0xa002
			if((i%16)==0)
a0022140:	3262000f 	andi	v0,s3,0xf
a0022144:	1440fff8 	bnez	v0,a0022128 <do_RSA+0x3c8>
a0022148:	02131021 	addu	v0,s0,s3
				sed_printf1("\n");
a002214c:	3c04a002 	lui	a0,0xa002
a0022150:	0c008b5c 	jal	a0022d70 <printf1>
a0022154:	248458bc 	addiu	a0,a0,22716
			sed_printf1("%02x ",ptr_pri[i]);
a0022158:	02131021 	addu	v0,s0,s3
a002215c:	90450000 	lbu	a1,0(v0)
		}
		sed_printf1("\n\n");
	}
	if(op == RTK_ENC){
		sed_printf1("Private Key:");
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a0022160:	26730001 	addiu	s3,s3,1
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_pri[i]);
a0022164:	0c008b5c 	jal	a0022d70 <printf1>
a0022168:	03c02021 	move	a0,s8
		}
		sed_printf1("\n\n");
	}
	if(op == RTK_ENC){
		sed_printf1("Private Key:");
		for(i=0;i<RSA_2048_KEY_LENGTH;i++){
a002216c:	1677fff5 	bne	s3,s7,a0022144 <do_RSA+0x3e4>
a0022170:	3262000f 	andi	v0,s3,0xf
			if((i%16)==0)
				sed_printf1("\n");
			sed_printf1("%02x ",ptr_pri[i]);
		}
		sed_printf1("\n\n");
a0022174:	3c03a002 	lui	v1,0xa002
a0022178:	0c008b5c 	jal	a0022d70 <printf1>
a002217c:	24645278 	addiu	a0,v1,21112
		mod  = InPutFromStr("B9975438AF3F83EB3F74DBA10DB8B8C3DAD35F89AB81B7EC7A64A9A841054302F148B0B72A5E716511FD65C89374B09CA8C593D32EC53A8183944DBFDEF72263FA80CB0FA86D03D4DB14383925D2F0666EEEE2649D305A0EA8AF95BE629DD42548D88A99642F509C8A24E3112618C91B56CF0EE80CDE44D9486BE9A4675E00481579EC0A62C0FF8838C2CCFAAD9060F376ED8476894305D8FFEF1D469EF62B743DBA11FA5481C3828EC0883F12FF9440FCBFC6A418F463030C3D19711719B66E9F9B925AACF87A982710E6621F9473D801E5958F7C2C34C7304C7F481D77452BEC2A71C3D2FE52AC00DB5C17E32EE3DFBD4FA5DD8465BB720016E5DDEC39E4AF", HEX);
		r2   = InPutFromStr("A09CC11BC8E1D05D468FABF4FCB62AA861FC15A4FE49E53EA7568172625F79B40E04F1545BF52A1C940998AA5301FED02A4BC12FAEE58D920CFE5CF7A5F0ADC3C57E3D527C7F3FCEC95C7E427BD813656E04E5FECFEAA998A7BE51FB83F3995B767D2454C92FAA2D73734B474BF15B7526FD15104F606B5B102D6B7934C348882E810289C4EB492C1F31FC70E85FF7C94D5C466E3A999DFD453BAAE4FD1E166C7F6C194098F27D3E0451AA8CB035459633EA5369760EF1ED20338C20F45E62E66369460C6DA71B4BF9C4E67314DB080606F945F0DF092932FDF550E444ED184CC418DB5A12C6DCA28FE3B5BD1581BD19F235D9C61D02DBD2C8058D547DA7D897", HEX);
		//exponent private
		exp  = InPutFromStr("96829865E411F18D2E083A39B1A4160B980285DF633CAF0953F520F5F7CD299C504B702D0B6A4E31F655F75EA3DF257FD70B6CA7FEAD2A96703C2C95A75FEAFF03DFC14E707C007876373EA571FC50C3F1C13FCEF2FF8C7988E9E4D9E2A636AF0A15BAC94D4B65E79DCCEE6D30E536EB3A0A6FFF56B84743A38D088D30DB3603DDC91EDF9697F764DEB659B172D6907267FE62429891DFBA1C573347911C088F5D0C45A467816316120D893C88224F136EA9B98970D564C34C238D45DADF56F70DC7918DB9C350EDD9782E111D4E6174FD67A1487D91AE343653342BC02EBDD0FDB59A75DC425F8F0D0D1EECABE2C4F337CF6F3594B3FFA3C3057B79AF422149", HEX);
		*/
		exp  = InPutFromAddr(ptr_pri, RSA_2048_KEY_LENGTH);
a0022180:	02002021 	move	a0,s0
a0022184:	0c008302 	jal	a0020c08 <InPutFromAddr>
a0022188:	24050100 	li	a1,256
a002218c:	080087b4 	j	a0021ed0 <do_RSA+0x170>
a0022190:	00409821 	move	s3,v0
	}

	//r2_enable = 0;

	if(op == RTK_ENC){
		ptr_pri = ptr_r2+RSA_2048_KEY_LENGTH;
a0022194:	8fa30014 	lw	v1,20(sp)
a0022198:	24a5524c 	addiu	a1,a1,21068
a002219c:	08008772 	j	a0021dc8 <do_RSA+0x68>
a00221a0:	24700100 	addiu	s0,v1,256
	ptr_pub = (unsigned char*)rsa_key_addr;
	ptr_r2  = ptr_pub+RSA_2048_KEY_LENGTH;

	if(op & RSA_HW){
		r2_enable = 1;
		op = op & ~RSA_HW;
a00221a4:	24020001 	li	v0,1
a00221a8:	3231007f 	andi	s1,s1,0x7f
a00221ac:	0800876e 	j	a0021db8 <do_RSA+0x58>
a00221b0:	afa20010 	sw	v0,16(sp)

a00221b4 <_doprntx>:
int _doprntx(
	char 		*fmt0,
	va_list 	argp,
	void		(*putc)(),
	char		**pca)
{
a00221b4:	27bdff70 	addiu	sp,sp,-144
a00221b8:	afbf008c 	sw	ra,140(sp)
a00221bc:	afbe0088 	sw	s8,136(sp)
a00221c0:	afb70084 	sw	s7,132(sp)
a00221c4:	afb60080 	sw	s6,128(sp)
a00221c8:	afb5007c 	sw	s5,124(sp)
a00221cc:	afb40078 	sw	s4,120(sp)
a00221d0:	afb30074 	sw	s3,116(sp)
a00221d4:	afb20070 	sw	s2,112(sp)
a00221d8:	afb1006c 	sw	s1,108(sp)
a00221dc:	afb00068 	sw	s0,104(sp)
	int 	width;		/* width from format (%8d), or 0 	*/
	char	sign;		/* sign prefix (' ', '+', '-', or \0) 	*/
	char	*digs;		/* digits for [diouxX] conversion 	*/
	char 	buf[BUF];	/* space for %c, %[diouxX], %[eEfgG] 	*/

	fmt = (UINT8*)fmt0;
a00221e0:	3c16a002 	lui	s6,0xa002
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			t = buf + BUF;
a00221e4:	27a30030 	addiu	v1,sp,48
int _doprntx(
	char 		*fmt0,
	va_list 	argp,
	void		(*putc)(),
	char		**pca)
{
a00221e8:	00a01021 	move	v0,a1
a00221ec:	00c08021 	move	s0,a2
a00221f0:	00e09021 	move	s2,a3
	int 	width;		/* width from format (%8d), or 0 	*/
	char	sign;		/* sign prefix (' ', '+', '-', or \0) 	*/
	char	*digs;		/* digits for [diouxX] conversion 	*/
	char 	buf[BUF];	/* space for %c, %[diouxX], %[eEfgG] 	*/

	fmt = (UINT8*)fmt0;
a00221f4:	00808821 	move	s1,a0
a00221f8:	26d652e0 	addiu	s6,s6,21216
a00221fc:	0000b821 	move	s7,zero
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			t = buf + BUF;
a0022200:	afa30060 	sw	v1,96(sp)

	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
		for (; (ch = *fmt) && ch != '%';
a0022204:	92240000 	lbu	a0,0(s1)
a0022208:	00000000 	nop
a002220c:	1480000e 	bnez	a0,a0022248 <_doprntx+0x94>
a0022210:	24050025 	li	a1,37
			putc((char)*fmt, pca);
			cnt++;
		}
	}
	/* NOTREACHED */
}
a0022214:	02e01021 	move	v0,s7
a0022218:	8fbf008c 	lw	ra,140(sp)
a002221c:	8fbe0088 	lw	s8,136(sp)
a0022220:	8fb70084 	lw	s7,132(sp)
a0022224:	8fb60080 	lw	s6,128(sp)
a0022228:	8fb5007c 	lw	s5,124(sp)
a002222c:	8fb40078 	lw	s4,120(sp)
a0022230:	8fb30074 	lw	s3,116(sp)
a0022234:	8fb20070 	lw	s2,112(sp)
a0022238:	8fb1006c 	lw	s1,108(sp)
a002223c:	8fb00068 	lw	s0,104(sp)
a0022240:	03e00008 	jr	ra
a0022244:	27bd0090 	addiu	sp,sp,144

	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
		for (; (ch = *fmt) && ch != '%';
a0022248:	1085000a 	beq	a0,a1,a0022274 <_doprntx+0xc0>
a002224c:	2403000a 	li	v1,10
		     ++cnt, ++fmt)
		    if(ch!='\n')
a0022250:	108301ae 	beq	a0,v1,a002290c <_doprntx+0x758>
a0022254:	00000000 	nop
		      putc(ch, pca);
a0022258:	afa20058 	sw	v0,88(sp)
a002225c:	0200f809 	jalr	s0
a0022260:	02402821 	move	a1,s2
	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
		for (; (ch = *fmt) && ch != '%';
		     ++cnt, ++fmt)
a0022264:	26f70001 	addiu	s7,s7,1
a0022268:	8fa20058 	lw	v0,88(sp)
a002226c:	08008881 	j	a0022204 <_doprntx+0x50>
a0022270:	26310001 	addiu	s1,s1,1

	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
		for (; (ch = *fmt) && ch != '%';
a0022274:	92240001 	lbu	a0,1(s1)
a0022278:	26350001 	addiu	s5,s1,1
a002227c:	afa00034 	sw	zero,52(sp)
a0022280:	00009821 	move	s3,zero
a0022284:	241effff 	li	s8,-1
a0022288:	0000a021 	move	s4,zero
		case '+':
			sign = '+';
			goto rflag;
		case '.':
			if (*++fmt == '*')
				n = va_arg(argp, int);
a002228c:	2407ffff 	li	a3,-1

		flags = 0; dprec = 0; fpprec = 0; width = 0;
		prec = -1;
		sign = '\0';

rflag:		switch (*++fmt) {
a0022290:	2c830079 	sltiu	v1,a0,121
a0022294:	1460000a 	bnez	v1,a00222c0 <_doprntx+0x10c>
a0022298:	3c06a002 	lui	a2,0xa002
			cnt += width > realsz ? width : realsz;
			break;
		case '\0':	/* "%?" prints ?, unless ? is NULL */
			return (cnt);
		default:
			putc((char)*fmt, pca);
a002229c:	00042600 	sll	a0,a0,0x18
a00222a0:	afa20058 	sw	v0,88(sp)
a00222a4:	00042603 	sra	a0,a0,0x18
a00222a8:	0200f809 	jalr	s0
a00222ac:	02402821 	move	a1,s2
			cnt++;
a00222b0:	26f70001 	addiu	s7,s7,1
a00222b4:	8fa20058 	lw	v0,88(sp)
	char 	buf[BUF];	/* space for %c, %[diouxX], %[eEfgG] 	*/

	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
a00222b8:	08008881 	j	a0022204 <_doprntx+0x50>
a00222bc:	26b10001 	addiu	s1,s5,1

		flags = 0; dprec = 0; fpprec = 0; width = 0;
		prec = -1;
		sign = '\0';

rflag:		switch (*++fmt) {
a00222c0:	00041880 	sll	v1,a0,0x2
a00222c4:	24c65310 	addiu	a2,a2,21264
a00222c8:	00c31821 	addu	v1,a2,v1
a00222cc:	8c630000 	lw	v1,0(v1)
a00222d0:	00000000 	nop
a00222d4:	00600008 	jr	v1
a00222d8:	00000000 	nop
			goto pforw;
		case 'U':
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'u':
			ARG();
a00222dc:	3c16a002 	lui	s6,0xa002
a00222e0:	26d652fc 	addiu	s6,s6,21244
			goto nosign;
		case 'X':
			digs = "0123456789ABCDEF";
			/* FALLTHROUGH */
		case 'x':
			ARG();
a00222e4:	32830004 	andi	v1,s4,0x4
a00222e8:	106001a0 	beqz	v1,a002296c <_doprntx+0x7b8>
a00222ec:	00000000 	nop
a00222f0:	84430000 	lh	v1,0(v0)
a00222f4:	24420004 	addiu	v0,v0,4
a00222f8:	afa20050 	sw	v0,80(sp)
			base = 16;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _ulong != 0)
a00222fc:	32820008 	andi	v0,s4,0x8
a0022300:	10400088 	beqz	v0,a0022524 <_doprntx+0x370>
a0022304:	00000000 	nop
a0022308:	10600086 	beqz	v1,a0022524 <_doprntx+0x370>
a002230c:	00000000 	nop
				flags |= HEXPREFIX;
a0022310:	36940040 	ori	s4,s4,0x40
a0022314:	afa00034 	sw	zero,52(sp)
a0022318:	24020010 	li	v0,16
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
a002231c:	07c00002 	bltz	s8,a0022328 <_doprntx+0x174>
a0022320:	2404ffdf 	li	a0,-33
				flags &= ~ZEROPAD;
a0022324:	0284a024 	and	s4,s4,a0
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			t = buf + BUF;
			if (_ulong != 0 || prec != 0) {
a0022328:	14600118 	bnez	v1,a002278c <_doprntx+0x5d8>
a002232c:	27b10030 	addiu	s1,sp,48
a0022330:	17c00116 	bnez	s8,a002278c <_doprntx+0x5d8>
a0022334:	00000000 	nop
a0022338:	afa00030 	sw	zero,48(sp)
			/*
			 * compute actual size, so we know how much to pad
			 * fieldsz excludes decimal prec; realsz includes it
			 */
			fieldsz = size + fpprec;
			if (sign)
a002233c:	8fa60034 	lw	a2,52(sp)
a0022340:	00000000 	nop
a0022344:	10c00126 	beqz	a2,a00227e0 <_doprntx+0x62c>
a0022348:	00000000 	nop
				fieldsz++;
a002234c:	8fa20030 	lw	v0,48(sp)
a0022350:	afbe003c 	sw	s8,60(sp)
a0022354:	245effff 	addiu	s8,v0,-1
a0022358:	24420001 	addiu	v0,v0,1
a002235c:	afa20030 	sw	v0,48(sp)
			if (flags & HEXPREFIX)
				fieldsz += 2;
a0022360:	8fa40030 	lw	a0,48(sp)
			realsz = dprec > fieldsz ? dprec : fieldsz;
a0022364:	8fa5003c 	lw	a1,60(sp)
			 * fieldsz excludes decimal prec; realsz includes it
			 */
			fieldsz = size + fpprec;
			if (sign)
				fieldsz++;
			if (flags & HEXPREFIX)
a0022368:	32830040 	andi	v1,s4,0x40
				fieldsz += 2;
a002236c:	24820002 	addiu	v0,a0,2
			realsz = dprec > fieldsz ? dprec : fieldsz;
a0022370:	8fa8003c 	lw	t0,60(sp)
			 */
			fieldsz = size + fpprec;
			if (sign)
				fieldsz++;
			if (flags & HEXPREFIX)
				fieldsz += 2;
a0022374:	0043200b 	movn	a0,v0,v1
			realsz = dprec > fieldsz ? dprec : fieldsz;
a0022378:	0085282a 	slt	a1,a0,a1

			/* right-adjusting blank padding */
			if ((flags & (LADJUST|ZEROPAD)) == 0 && width)
a002237c:	32860030 	andi	a2,s4,0x30
			fieldsz = size + fpprec;
			if (sign)
				fieldsz++;
			if (flags & HEXPREFIX)
				fieldsz += 2;
			realsz = dprec > fieldsz ? dprec : fieldsz;
a0022380:	0085400a 	movz	t0,a0,a1
			 * fieldsz excludes decimal prec; realsz includes it
			 */
			fieldsz = size + fpprec;
			if (sign)
				fieldsz++;
			if (flags & HEXPREFIX)
a0022384:	afa30048 	sw	v1,72(sp)
				fieldsz += 2;
a0022388:	afa40030 	sw	a0,48(sp)
			realsz = dprec > fieldsz ? dprec : fieldsz;
a002238c:	afa5004c 	sw	a1,76(sp)

			/* right-adjusting blank padding */
			if ((flags & (LADJUST|ZEROPAD)) == 0 && width)
a0022390:	afa60044 	sw	a2,68(sp)
a0022394:	10c00116 	beqz	a2,a00227f0 <_doprntx+0x63c>
a0022398:	afa80038 	sw	t0,56(sp)
a002239c:	0113102a 	slt	v0,t0,s3
a00223a0:	afa20040 	sw	v0,64(sp)
				for (n = realsz; n < width; n++)
					putc(' ', pca);
			/* prefix */
			if (sign)
a00223a4:	8fa50034 	lw	a1,52(sp)
a00223a8:	00000000 	nop
a00223ac:	14a00118 	bnez	a1,a0022810 <_doprntx+0x65c>
a00223b0:	00a02021 	move	a0,a1
				putc(sign, pca);
			if (flags & HEXPREFIX) {
a00223b4:	8fa60048 	lw	a2,72(sp)
a00223b8:	00000000 	nop
a00223bc:	14c0011a 	bnez	a2,a0022828 <_doprntx+0x674>
a00223c0:	24040030 	li	a0,48
				putc('0', pca);
				putc((char)*fmt, pca);
			}
			/* right-adjusting zero padding */
			if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
a00223c4:	8fa80044 	lw	t0,68(sp)
a00223c8:	24020020 	li	v0,32
a00223cc:	1102011f 	beq	t0,v0,a002284c <_doprntx+0x698>
a00223d0:	00000000 	nop
				for (n = realsz; n < width; n++)
					putc('0', pca);
			/* leading zeroes from decimal precision */
			for (n = fieldsz; n < dprec; n++)
a00223d4:	8fa3004c 	lw	v1,76(sp)
a00223d8:	00000000 	nop
a00223dc:	10600013 	beqz	v1,a002242c <_doprntx+0x278>
a00223e0:	00000000 	nop
				putc('0', pca);
				putc((char)*fmt, pca);
			}
			/* right-adjusting zero padding */
			if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
				for (n = realsz; n < width; n++)
a00223e4:	8fa20030 	lw	v0,48(sp)
a00223e8:	afb10034 	sw	s1,52(sp)
a00223ec:	8fb1003c 	lw	s1,60(sp)
a00223f0:	afb30030 	sw	s3,48(sp)
a00223f4:	02409821 	move	s3,s2
a00223f8:	02009021 	move	s2,s0
a00223fc:	00408021 	move	s0,v0
					putc('0', pca);
			/* leading zeroes from decimal precision */
			for (n = fieldsz; n < dprec; n++)
a0022400:	26100001 	addiu	s0,s0,1
				putc('0', pca);
a0022404:	24040030 	li	a0,48
a0022408:	0240f809 	jalr	s2
a002240c:	02602821 	move	a1,s3
			/* right-adjusting zero padding */
			if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
				for (n = realsz; n < width; n++)
					putc('0', pca);
			/* leading zeroes from decimal precision */
			for (n = fieldsz; n < dprec; n++)
a0022410:	0211102a 	slt	v0,s0,s1
a0022414:	1440fffb 	bnez	v0,a0022404 <_doprntx+0x250>
a0022418:	26100001 	addiu	s0,s0,1
a002241c:	02408021 	move	s0,s2
a0022420:	8fb10034 	lw	s1,52(sp)
a0022424:	02609021 	move	s2,s3
a0022428:	8fb30030 	lw	s3,48(sp)
				putc('0', pca);

			/* the string or number proper */
			n=size;
			while (--n >= 0)
a002242c:	07c00007 	bltz	s8,a002244c <_doprntx+0x298>
a0022430:	00000000 	nop
			  putc(*t++, pca);
a0022434:	82240000 	lb	a0,0(s1)
a0022438:	02402821 	move	a1,s2
a002243c:	0200f809 	jalr	s0
a0022440:	27deffff 	addiu	s8,s8,-1
			for (n = fieldsz; n < dprec; n++)
				putc('0', pca);

			/* the string or number proper */
			n=size;
			while (--n >= 0)
a0022444:	07c1fffb 	bgez	s8,a0022434 <_doprntx+0x280>
a0022448:	26310001 	addiu	s1,s1,1
			  putc(*t++, pca);
			/* trailing f.p. zeroes */
			while (--fpprec >= 0)
				putc('0', pca);
			/* left-adjusting padding (always blank) */
			if (flags & LADJUST)
a002244c:	32940010 	andi	s4,s4,0x10
a0022450:	1280000f 	beqz	s4,a0022490 <_doprntx+0x2dc>
a0022454:	00000000 	nop
				for (n = realsz; n < width; n++)
a0022458:	8fa40040 	lw	a0,64(sp)
a002245c:	00000000 	nop
a0022460:	1080000b 	beqz	a0,a0022490 <_doprntx+0x2dc>
a0022464:	00000000 	nop
a0022468:	8fb10038 	lw	s1,56(sp)
a002246c:	00000000 	nop
a0022470:	26310001 	addiu	s1,s1,1
					putc(' ', pca);
a0022474:	24040020 	li	a0,32
a0022478:	0200f809 	jalr	s0
a002247c:	02402821 	move	a1,s2
			/* trailing f.p. zeroes */
			while (--fpprec >= 0)
				putc('0', pca);
			/* left-adjusting padding (always blank) */
			if (flags & LADJUST)
				for (n = realsz; n < width; n++)
a0022480:	0233102a 	slt	v0,s1,s3
a0022484:	1440fffb 	bnez	v0,a0022474 <_doprntx+0x2c0>
a0022488:	26310001 	addiu	s1,s1,1
a002248c:	2631ffff 	addiu	s1,s1,-1
					putc(' ', pca);
			/* finally, adjust cnt */
			cnt += width > realsz ? width : realsz;
a0022490:	8fa50040 	lw	a1,64(sp)
a0022494:	8fa60038 	lw	a2,56(sp)
a0022498:	8fa20050 	lw	v0,80(sp)
	char 	buf[BUF];	/* space for %c, %[diouxX], %[eEfgG] 	*/

	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
a002249c:	26b10001 	addiu	s1,s5,1
			/* left-adjusting padding (always blank) */
			if (flags & LADJUST)
				for (n = realsz; n < width; n++)
					putc(' ', pca);
			/* finally, adjust cnt */
			cnt += width > realsz ? width : realsz;
a00224a0:	00c5980a 	movz	s3,a2,a1
a00224a4:	08008881 	j	a0022204 <_doprntx+0x50>
a00224a8:	02f3b821 	addu	s7,s7,s3
			} else
				size = strlen(t);
			sign = '\0';
			goto pforw;
		case 'U':
			flags |= LONGINT;
a00224ac:	36940001 	ori	s4,s4,0x1
			/*FALLTHROUGH*/
		case 'u':
			ARG();
a00224b0:	32830004 	andi	v1,s4,0x4
a00224b4:	10600127 	beqz	v1,a0022954 <_doprntx+0x7a0>
a00224b8:	00000000 	nop
a00224bc:	84430000 	lh	v1,0(v0)
a00224c0:	24420004 	addiu	v0,v0,4
a00224c4:	afa20050 	sw	v0,80(sp)
a00224c8:	afa00034 	sw	zero,52(sp)
a00224cc:	080088c7 	j	a002231c <_doprntx+0x168>
a00224d0:	2402000a 	li	v0,10
			*(t = buf) = va_arg(argp, int);
			size = 1;
			sign = '\0';
			goto pforw;
		case 'D':
			flags |= LONGINT;
a00224d4:	36940001 	ori	s4,s4,0x1
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			ARG();
a00224d8:	32830004 	andi	v1,s4,0x4
a00224dc:	10600117 	beqz	v1,a002293c <_doprntx+0x788>
a00224e0:	00000000 	nop
a00224e4:	84430000 	lh	v1,0(v0)
a00224e8:	24420004 	addiu	v0,v0,4
			if ((long)_ulong < 0) {
a00224ec:	04600134 	bltz	v1,a00229c0 <_doprntx+0x80c>
a00224f0:	afa20050 	sw	v0,80(sp)
				_ulong = -_ulong;
a00224f4:	080088c7 	j	a002231c <_doprntx+0x168>
a00224f8:	2402000a 	li	v0,10
				*va_arg(argp, short *) = cnt;
			else
				*va_arg(argp, int *) = cnt;
			break;			
		case 'O':
			flags |= LONGINT;
a00224fc:	36940001 	ori	s4,s4,0x1
			/*FALLTHROUGH*/
		case 'o':
			ARG();
a0022500:	32830004 	andi	v1,s4,0x4
a0022504:	1060011d 	beqz	v1,a002297c <_doprntx+0x7c8>
a0022508:	00000000 	nop
a002250c:	84430000 	lh	v1,0(v0)
a0022510:	24420004 	addiu	v0,v0,4
a0022514:	afa20050 	sw	v0,80(sp)
a0022518:	afa00034 	sw	zero,52(sp)
a002251c:	080088c7 	j	a002231c <_doprntx+0x168>
a0022520:	24020008 	li	v0,8
		case 'x':
			ARG();
			base = 16;
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _ulong != 0)
				flags |= HEXPREFIX;
a0022524:	afa00034 	sw	zero,52(sp)
a0022528:	080088c7 	j	a002231c <_doprntx+0x168>
a002252c:	24020010 	li	v0,16
			 * ``A negative field width argument is taken as a
			 * - flag followed by a  positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			if ((width = va_arg(argp, int)) >= 0)
a0022530:	8c530000 	lw	s3,0(v0)
a0022534:	00000000 	nop
a0022538:	06610068 	bgez	s3,a00226dc <_doprntx+0x528>
a002253c:	24420004 	addiu	v0,v0,4
				goto rflag;
			width = -width;
a0022540:	00139823 	negu	s3,s3
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
a0022544:	92a40001 	lbu	a0,1(s5)
a0022548:	36940010 	ori	s4,s4,0x10
			goto rflag;
a002254c:	080088a4 	j	a0022290 <_doprntx+0xdc>
a0022550:	26b50001 	addiu	s5,s5,1
			goto rflag;
		case 'h':
			flags |= SHORTINT;
			goto rflag;
		case 'l':
			flags |= LONGINT;
a0022554:	92a40001 	lbu	a0,1(s5)
a0022558:	36940001 	ori	s4,s4,0x1
			goto rflag;
a002255c:	080088a4 	j	a0022290 <_doprntx+0xdc>
a0022560:	26b50001 	addiu	s5,s5,1
			goto rflag;
		case 'L':
			flags |= LONGDBL;
			goto rflag;
		case 'h':
			flags |= SHORTINT;
a0022564:	92a40001 	lbu	a0,1(s5)
a0022568:	36940004 	ori	s4,s4,0x4
			goto rflag;
a002256c:	080088a4 	j	a0022290 <_doprntx+0xdc>
a0022570:	26b50001 	addiu	s5,s5,1
			/* NOSTRICT */
			_ulong = (UINT32)va_arg(argp, void *);
			base = 16;
			goto nosign;
		case 's':
			if (!(t = va_arg(argp, char *)))
a0022574:	8c510000 	lw	s1,0(v0)
a0022578:	3c08a002 	lui	t0,0xa002
a002257c:	24420004 	addiu	v0,v0,4
a0022580:	250852f4 	addiu	t0,t0,21236
a0022584:	afa20050 	sw	v0,80(sp)
				t = "(null)";
			if (prec >= 0) {
a0022588:	07c0011e 	bltz	s8,a0022a04 <_doprntx+0x850>
a002258c:	0111880a 	movz	s1,t0,s1
				 * NUL in the first `prec' characters, and
				 * strlen() will go further.
				 */
				char *p;

				if ((p = memchr(t, 0, prec))) {
a0022590:	02202021 	move	a0,s1
a0022594:	00002821 	move	a1,zero
a0022598:	0c008a93 	jal	a0022a4c <memchr>
a002259c:	03c03021 	move	a2,s8
a00225a0:	10400005 	beqz	v0,a00225b8 <_doprntx+0x404>
a00225a4:	00000000 	nop
					size = p - t;
a00225a8:	00511023 	subu	v0,v0,s1
					if (size > prec)
a00225ac:	03c2182a 	slt	v1,s8,v0
a00225b0:	10600116 	beqz	v1,a0022a0c <_doprntx+0x858>
a00225b4:	00000000 	nop
			return (cnt);
		default:
			putc((char)*fmt, pca);
			cnt++;
		}
	}
a00225b8:	03c01021 	move	v0,s8
a00225bc:	080089c5 	j	a0022714 <_doprntx+0x560>
a00225c0:	27deffff 	addiu	s8,s8,-1
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_ulong = (UINT32)va_arg(argp, void *);
a00225c4:	8c430000 	lw	v1,0(v0)
a00225c8:	24420004 	addiu	v0,v0,4
a00225cc:	afa20050 	sw	v0,80(sp)
a00225d0:	afa00034 	sw	zero,52(sp)
			base = 16;
			goto nosign;
a00225d4:	080088c7 	j	a002231c <_doprntx+0x168>
a00225d8:	24020010 	li	v0,16
				sign = '-';
			}
			base = 10;
			goto number;
		case 'n':
			if (flags & LONGINT)
a00225dc:	32840001 	andi	a0,s4,0x1
a00225e0:	108000fc 	beqz	a0,a00229d4 <_doprntx+0x820>
a00225e4:	00401821 	move	v1,v0
				*va_arg(argp, long *) = cnt;
			else if (flags & SHORTINT)
				*va_arg(argp, short *) = cnt;
			else
				*va_arg(argp, int *) = cnt;
a00225e8:	8c630000 	lw	v1,0(v1)
a00225ec:	24420004 	addiu	v0,v0,4
	char 	buf[BUF];	/* space for %c, %[diouxX], %[eEfgG] 	*/

	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
a00225f0:	26b10001 	addiu	s1,s5,1
			if (flags & LONGINT)
				*va_arg(argp, long *) = cnt;
			else if (flags & SHORTINT)
				*va_arg(argp, short *) = cnt;
			else
				*va_arg(argp, int *) = cnt;
a00225f4:	08008881 	j	a0022204 <_doprntx+0x50>
a00225f8:	ac770000 	sw	s7,0(v1)

		flags = 0; dprec = 0; fpprec = 0; width = 0;
		prec = -1;
		sign = '\0';

rflag:		switch (*++fmt) {
a00225fc:	2408002b 	li	t0,43
a0022600:	92a40001 	lbu	a0,1(s5)
a0022604:	26b50001 	addiu	s5,s5,1
a0022608:	080088a4 	j	a0022290 <_doprntx+0xdc>
a002260c:	afa80034 	sw	t0,52(sp)
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
a0022610:	92a40001 	lbu	a0,1(s5)
a0022614:	36940020 	ori	s4,s4,0x20
			goto rflag;
a0022618:	080088a4 	j	a0022290 <_doprntx+0xdc>
a002261c:	26b50001 	addiu	s5,s5,1
			goto rflag;
		case '+':
			sign = '+';
			goto rflag;
		case '.':
			if (*++fmt == '*')
a0022620:	92a50001 	lbu	a1,1(s5)
a0022624:	2406002a 	li	a2,42
a0022628:	10a600fa 	beq	a1,a2,a0022a14 <_doprntx+0x860>
a002262c:	26a30001 	addiu	v1,s5,1
				n = va_arg(argp, int);
			else {
				n = 0;
				while (isascii(*fmt) && isdigit(*fmt))
a0022630:	00052600 	sll	a0,a1,0x18
a0022634:	00042603 	sra	a0,a0,0x18
a0022638:	04800102 	bltz	a0,a0022a44 <_doprntx+0x890>
a002263c:	3c08a002 	lui	t0,0xa002
a0022640:	25085ac8 	addiu	t0,t0,23240
a0022644:	01052021 	addu	a0,t0,a1
a0022648:	90840000 	lbu	a0,0(a0)
a002264c:	00000000 	nop
a0022650:	30840004 	andi	a0,a0,0x4
a0022654:	10800019 	beqz	a0,a00226bc <_doprntx+0x508>
a0022658:	0000f021 	move	s8,zero
		case '+':
			sign = '+';
			goto rflag;
		case '.':
			if (*++fmt == '*')
				n = va_arg(argp, int);
a002265c:	080089a2 	j	a0022688 <_doprntx+0x4d4>
a0022660:	00002021 	move	a0,zero
			else {
				n = 0;
				while (isascii(*fmt) && isdigit(*fmt))
a0022664:	3c08a002 	lui	t0,0xa002
a0022668:	25085ac8 	addiu	t0,t0,23240
a002266c:	00c02821 	move	a1,a2
a0022670:	01063021 	addu	a2,t0,a2
a0022674:	90c60000 	lbu	a2,0(a2)
a0022678:	00000000 	nop
a002267c:	30c60004 	andi	a2,a2,0x4
a0022680:	10c0000c 	beqz	a2,a00226b4 <_doprntx+0x500>
a0022684:	289e0000 	slti	s8,a0,0
					n = 10 * n + todigit(*fmt++);
a0022688:	24630001 	addiu	v1,v1,1
		case '.':
			if (*++fmt == '*')
				n = va_arg(argp, int);
			else {
				n = 0;
				while (isascii(*fmt) && isdigit(*fmt))
a002268c:	90660000 	lbu	a2,0(v1)
					n = 10 * n + todigit(*fmt++);
a0022690:	000440c0 	sll	t0,a0,0x3
a0022694:	00042040 	sll	a0,a0,0x1
a0022698:	00882021 	addu	a0,a0,t0
		case '.':
			if (*++fmt == '*')
				n = va_arg(argp, int);
			else {
				n = 0;
				while (isascii(*fmt) && isdigit(*fmt))
a002269c:	00064600 	sll	t0,a2,0x18
					n = 10 * n + todigit(*fmt++);
a00226a0:	24a5ffd0 	addiu	a1,a1,-48
		case '.':
			if (*++fmt == '*')
				n = va_arg(argp, int);
			else {
				n = 0;
				while (isascii(*fmt) && isdigit(*fmt))
a00226a4:	00084603 	sra	t0,t0,0x18
a00226a8:	0501ffee 	bgez	t0,a0022664 <_doprntx+0x4b0>
a00226ac:	00a42021 	addu	a0,a1,a0
a00226b0:	289e0000 	slti	s8,a0,0
a00226b4:	00fe200b 	movn	a0,a3,s8
a00226b8:	0080f021 	move	s8,a0
					n = 10 * n + todigit(*fmt++);
				--fmt;
a00226bc:	2463ffff 	addiu	v1,v1,-1
a00226c0:	90640001 	lbu	a0,1(v1)
			}
			prec = n < 0 ? -1 : n;
			goto rflag;
a00226c4:	080088a4 	j	a0022290 <_doprntx+0xdc>
a00226c8:	24750001 	addiu	s5,v1,1
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
a00226cc:	8fa30034 	lw	v1,52(sp)
a00226d0:	00000000 	nop
a00226d4:	106000c7 	beqz	v1,a00229f4 <_doprntx+0x840>
a00226d8:	24050020 	li	a1,32

	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
		for (; (ch = *fmt) && ch != '%';
a00226dc:	92a40001 	lbu	a0,1(s5)
a00226e0:	080088a4 	j	a0022290 <_doprntx+0xdc>
a00226e4:	26b50001 	addiu	s5,s5,1
			 */
			if (!sign)
				sign = ' ';
			goto rflag;
		case '#':
			flags |= ALT;
a00226e8:	92a40001 	lbu	a0,1(s5)
a00226ec:	36940008 	ori	s4,s4,0x8
			goto rflag;
a00226f0:	080088a4 	j	a0022290 <_doprntx+0xdc>
a00226f4:	26b50001 	addiu	s5,s5,1
			goto rflag;
		case 'l':
			flags |= LONGINT;
			goto rflag;
		case 'c':
			*(t = buf) = va_arg(argp, int);
a00226f8:	8c430000 	lw	v1,0(v0)
a00226fc:	24420004 	addiu	v0,v0,4
a0022700:	afa20050 	sw	v0,80(sp)
a0022704:	0000f021 	move	s8,zero
a0022708:	a3a30010 	sb	v1,16(sp)
a002270c:	24020001 	li	v0,1
a0022710:	27b10010 	addiu	s1,sp,16
			return (cnt);
		default:
			putc((char)*fmt, pca);
			cnt++;
		}
	}
a0022714:	afa20030 	sw	v0,48(sp)
a0022718:	afa00034 	sw	zero,52(sp)
a002271c:	080088d8 	j	a0022360 <_doprntx+0x1ac>
a0022720:	afa0003c 	sw	zero,60(sp)
			} while (isascii(*++fmt) && isdigit(*fmt));
			width = n;
			--fmt;
			goto rflag;
		case 'L':
			flags |= LONGDBL;
a0022724:	92a40001 	lbu	a0,1(s5)
a0022728:	36940002 	ori	s4,s4,0x2
			goto rflag;
a002272c:	080088a4 	j	a0022290 <_doprntx+0xdc>
a0022730:	26b50001 	addiu	s5,s5,1
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
			goto rflag;
a0022734:	00009821 	move	s3,zero
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + todigit(*fmt);
a0022738:	001318c0 	sll	v1,s3,0x3
a002273c:	00139840 	sll	s3,s3,0x1
a0022740:	02639821 	addu	s3,s3,v1
			} while (isascii(*++fmt) && isdigit(*fmt));
a0022744:	26b50001 	addiu	s5,s5,1
			goto rflag;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
			do {
				n = 10 * n + todigit(*fmt);
a0022748:	02649821 	addu	s3,s3,a0
			} while (isascii(*++fmt) && isdigit(*fmt));
a002274c:	92a40000 	lbu	a0,0(s5)
a0022750:	00000000 	nop
a0022754:	00041e00 	sll	v1,a0,0x18
a0022758:	00031e03 	sra	v1,v1,0x18
a002275c:	0460fecc 	bltz	v1,a0022290 <_doprntx+0xdc>
a0022760:	2673ffd0 	addiu	s3,s3,-48
a0022764:	3c05a002 	lui	a1,0xa002
a0022768:	24a55ac8 	addiu	a1,a1,23240
a002276c:	00851821 	addu	v1,a0,a1
a0022770:	90630000 	lbu	v1,0(v1)
a0022774:	00000000 	nop
a0022778:	30630004 	andi	v1,v1,0x4
a002277c:	1460ffee 	bnez	v1,a0022738 <_doprntx+0x584>
a0022780:	2c830079 	sltiu	v1,a0,121
a0022784:	080088a5 	j	a0022294 <_doprntx+0xe0>
a0022788:	00000000 	nop
			 *	-- ANSI X3J11
			 */
			t = buf + BUF;
			if (_ulong != 0 || prec != 0) {
				do {
					*--t = digs[_ulong % base];
a002278c:	0062001b 	divu	zero,v1,v0
a0022790:	14400002 	bnez	v0,a002279c <_doprntx+0x5e8>
a0022794:	00000000 	nop
a0022798:	0007000d 	break	0x7
a002279c:	2631ffff 	addiu	s1,s1,-1
a00227a0:	00002010 	mfhi	a0
a00227a4:	02c42021 	addu	a0,s6,a0
a00227a8:	80840000 	lb	a0,0(a0)
a00227ac:	00001812 	mflo	v1
					_ulong /= base;
				} while (_ulong);
a00227b0:	1460fff6 	bnez	v1,a002278c <_doprntx+0x5d8>
a00227b4:	a2240000 	sb	a0,0(s1)
				digs = "0123456789abcdef";
				if (flags & ALT && base == 8 && *t != '0')
a00227b8:	32830008 	andi	v1,s4,0x8
a00227bc:	14600037 	bnez	v1,a002289c <_doprntx+0x6e8>
a00227c0:	24030008 	li	v1,8
a00227c4:	8fa20060 	lw	v0,96(sp)
			/*
			 * compute actual size, so we know how much to pad
			 * fieldsz excludes decimal prec; realsz includes it
			 */
			fieldsz = size + fpprec;
			if (sign)
a00227c8:	8fa60034 	lw	a2,52(sp)
				do {
					*--t = digs[_ulong % base];
					_ulong /= base;
				} while (_ulong);
				digs = "0123456789abcdef";
				if (flags & ALT && base == 8 && *t != '0')
a00227cc:	3c16a002 	lui	s6,0xa002
a00227d0:	00511023 	subu	v0,v0,s1
a00227d4:	afa20030 	sw	v0,48(sp)
			/*
			 * compute actual size, so we know how much to pad
			 * fieldsz excludes decimal prec; realsz includes it
			 */
			fieldsz = size + fpprec;
			if (sign)
a00227d8:	14c0fedc 	bnez	a2,a002234c <_doprntx+0x198>
a00227dc:	26d652e0 	addiu	s6,s6,21216
a00227e0:	8fa80030 	lw	t0,48(sp)
a00227e4:	afbe003c 	sw	s8,60(sp)
a00227e8:	080088d8 	j	a0022360 <_doprntx+0x1ac>
a00227ec:	251effff 	addiu	s8,t0,-1
			if (flags & HEXPREFIX)
				fieldsz += 2;
			realsz = dprec > fieldsz ? dprec : fieldsz;

			/* right-adjusting blank padding */
			if ((flags & (LADJUST|ZEROPAD)) == 0 && width)
a00227f0:	16600031 	bnez	s3,a00228b8 <_doprntx+0x704>
a00227f4:	00000000 	nop
a00227f8:	8fa30038 	lw	v1,56(sp)
				for (n = realsz; n < width; n++)
					putc(' ', pca);
			/* prefix */
			if (sign)
a00227fc:	8fa50034 	lw	a1,52(sp)
a0022800:	28630000 	slti	v1,v1,0
a0022804:	10a0feeb 	beqz	a1,a00223b4 <_doprntx+0x200>
a0022808:	afa30040 	sw	v1,64(sp)
				putc(sign, pca);
a002280c:	00a02021 	move	a0,a1
a0022810:	0200f809 	jalr	s0
a0022814:	02402821 	move	a1,s2
			if (flags & HEXPREFIX) {
a0022818:	8fa60048 	lw	a2,72(sp)
a002281c:	00000000 	nop
a0022820:	10c0fee8 	beqz	a2,a00223c4 <_doprntx+0x210>
a0022824:	24040030 	li	a0,48
				putc('0', pca);
a0022828:	0200f809 	jalr	s0
a002282c:	02402821 	move	a1,s2
				putc((char)*fmt, pca);
a0022830:	82a40000 	lb	a0,0(s5)
a0022834:	0200f809 	jalr	s0
a0022838:	02402821 	move	a1,s2
			}
			/* right-adjusting zero padding */
			if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
a002283c:	8fa80044 	lw	t0,68(sp)
a0022840:	24020020 	li	v0,32
a0022844:	1502fee3 	bne	t0,v0,a00223d4 <_doprntx+0x220>
a0022848:	00000000 	nop
				for (n = realsz; n < width; n++)
a002284c:	8fa20040 	lw	v0,64(sp)
a0022850:	00000000 	nop
a0022854:	1040fedf 	beqz	v0,a00223d4 <_doprntx+0x220>
a0022858:	00000000 	nop
					putc('0', pca);
			/* leading zeroes from decimal precision */
			for (n = fieldsz; n < dprec; n++)
a002285c:	8fa20038 	lw	v0,56(sp)
a0022860:	afb10034 	sw	s1,52(sp)
a0022864:	02008821 	move	s1,s0
a0022868:	00408021 	move	s0,v0
				putc('0', pca);
				putc((char)*fmt, pca);
			}
			/* right-adjusting zero padding */
			if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
				for (n = realsz; n < width; n++)
a002286c:	26100001 	addiu	s0,s0,1
					putc('0', pca);
a0022870:	24040030 	li	a0,48
a0022874:	0220f809 	jalr	s1
a0022878:	02402821 	move	a1,s2
				putc('0', pca);
				putc((char)*fmt, pca);
			}
			/* right-adjusting zero padding */
			if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
				for (n = realsz; n < width; n++)
a002287c:	0213102a 	slt	v0,s0,s3
a0022880:	1440fffb 	bnez	v0,a0022870 <_doprntx+0x6bc>
a0022884:	26100001 	addiu	s0,s0,1
a0022888:	2610ffff 	addiu	s0,s0,-1
a002288c:	02208021 	move	s0,s1
a0022890:	8fb10034 	lw	s1,52(sp)
a0022894:	080088f5 	j	a00223d4 <_doprntx+0x220>
a0022898:	00000000 	nop
				do {
					*--t = digs[_ulong % base];
					_ulong /= base;
				} while (_ulong);
				digs = "0123456789abcdef";
				if (flags & ALT && base == 8 && *t != '0')
a002289c:	1043003d 	beq	v0,v1,a0022994 <_doprntx+0x7e0>
a00228a0:	3c16a002 	lui	s6,0xa002
a00228a4:	8fa30060 	lw	v1,96(sp)
a00228a8:	26d652e0 	addiu	s6,s6,21216
a00228ac:	00711823 	subu	v1,v1,s1
a00228b0:	080088cf 	j	a002233c <_doprntx+0x188>
a00228b4:	afa30030 	sw	v1,48(sp)
				fieldsz += 2;
			realsz = dprec > fieldsz ? dprec : fieldsz;

			/* right-adjusting blank padding */
			if ((flags & (LADJUST|ZEROPAD)) == 0 && width)
				for (n = realsz; n < width; n++)
a00228b8:	8fa40038 	lw	a0,56(sp)
a00228bc:	00000000 	nop
a00228c0:	0093202a 	slt	a0,a0,s3
a00228c4:	1080feb7 	beqz	a0,a00223a4 <_doprntx+0x1f0>
a00228c8:	afa40040 	sw	a0,64(sp)
a00228cc:	8fa20038 	lw	v0,56(sp)
a00228d0:	afb10054 	sw	s1,84(sp)
a00228d4:	02008821 	move	s1,s0
a00228d8:	00408021 	move	s0,v0
a00228dc:	26100001 	addiu	s0,s0,1
					putc(' ', pca);
a00228e0:	24040020 	li	a0,32
a00228e4:	0220f809 	jalr	s1
a00228e8:	02402821 	move	a1,s2
				fieldsz += 2;
			realsz = dprec > fieldsz ? dprec : fieldsz;

			/* right-adjusting blank padding */
			if ((flags & (LADJUST|ZEROPAD)) == 0 && width)
				for (n = realsz; n < width; n++)
a00228ec:	0213102a 	slt	v0,s0,s3
a00228f0:	1440fffb 	bnez	v0,a00228e0 <_doprntx+0x72c>
a00228f4:	26100001 	addiu	s0,s0,1
a00228f8:	2610ffff 	addiu	s0,s0,-1
a00228fc:	02208021 	move	s0,s1
a0022900:	8fb10054 	lw	s1,84(sp)
a0022904:	080088e9 	j	a00223a4 <_doprntx+0x1f0>
a0022908:	00000000 	nop
		for (; (ch = *fmt) && ch != '%';
		     ++cnt, ++fmt)
		    if(ch!='\n')
		      putc(ch, pca);
		    else
		    { putc(CR, pca); putc(LF, pca); ++cnt; };
a002290c:	afa20058 	sw	v0,88(sp)
a0022910:	2404000d 	li	a0,13
a0022914:	0200f809 	jalr	s0
a0022918:	02402821 	move	a1,s2
a002291c:	26f70001 	addiu	s7,s7,1
a0022920:	2404000a 	li	a0,10
a0022924:	0200f809 	jalr	s0
a0022928:	02402821 	move	a1,s2
	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
		for (; (ch = *fmt) && ch != '%';
		     ++cnt, ++fmt)
a002292c:	26f70001 	addiu	s7,s7,1
		    if(ch!='\n')
		      putc(ch, pca);
		    else
		    { putc(CR, pca); putc(LF, pca); ++cnt; };
a0022930:	8fa20058 	lw	v0,88(sp)
	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
		for (; (ch = *fmt) && ch != '%';
		     ++cnt, ++fmt)
a0022934:	08008881 	j	a0022204 <_doprntx+0x50>
a0022938:	26310001 	addiu	s1,s1,1
		case 'D':
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			ARG();
a002293c:	8c430000 	lw	v1,0(v0)
a0022940:	24420004 	addiu	v0,v0,4
			if ((long)_ulong < 0) {
a0022944:	0461feeb 	bgez	v1,a00224f4 <_doprntx+0x340>
a0022948:	afa20050 	sw	v0,80(sp)
				_ulong = -_ulong;
a002294c:	08008a71 	j	a00229c4 <_doprntx+0x810>
a0022950:	2406002d 	li	a2,45
			goto pforw;
		case 'U':
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'u':
			ARG();
a0022954:	8c430000 	lw	v1,0(v0)
a0022958:	24420004 	addiu	v0,v0,4
a002295c:	afa20050 	sw	v0,80(sp)
a0022960:	afa00034 	sw	zero,52(sp)
a0022964:	080088c7 	j	a002231c <_doprntx+0x168>
a0022968:	2402000a 	li	v0,10
			goto nosign;
		case 'X':
			digs = "0123456789ABCDEF";
			/* FALLTHROUGH */
		case 'x':
			ARG();
a002296c:	8c430000 	lw	v1,0(v0)
a0022970:	24420004 	addiu	v0,v0,4
a0022974:	080088bf 	j	a00222fc <_doprntx+0x148>
a0022978:	afa20050 	sw	v0,80(sp)
			break;			
		case 'O':
			flags |= LONGINT;
			/*FALLTHROUGH*/
		case 'o':
			ARG();
a002297c:	8c430000 	lw	v1,0(v0)
a0022980:	24420004 	addiu	v0,v0,4
a0022984:	afa20050 	sw	v0,80(sp)
a0022988:	afa00034 	sw	zero,52(sp)
a002298c:	080088c7 	j	a002231c <_doprntx+0x168>
a0022990:	24020008 	li	v0,8
				do {
					*--t = digs[_ulong % base];
					_ulong /= base;
				} while (_ulong);
				digs = "0123456789abcdef";
				if (flags & ALT && base == 8 && *t != '0')
a0022994:	24020030 	li	v0,48
a0022998:	10820024 	beq	a0,v0,a0022a2c <_doprntx+0x878>
a002299c:	00000000 	nop
					*--t = '0'; /* octal leading 0 */
a00229a0:	2631ffff 	addiu	s1,s1,-1
a00229a4:	a2220000 	sb	v0,0(s1)
a00229a8:	8fa50060 	lw	a1,96(sp)
a00229ac:	3c16a002 	lui	s6,0xa002
a00229b0:	26d652e0 	addiu	s6,s6,21216
a00229b4:	00b12823 	subu	a1,a1,s1
a00229b8:	080088cf 	j	a002233c <_doprntx+0x188>
a00229bc:	afa50030 	sw	a1,48(sp)
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			ARG();
			if ((long)_ulong < 0) {
				_ulong = -_ulong;
a00229c0:	2406002d 	li	a2,45
a00229c4:	00031823 	negu	v1,v1
a00229c8:	afa60034 	sw	a2,52(sp)
a00229cc:	080088c7 	j	a002231c <_doprntx+0x168>
a00229d0:	2402000a 	li	v0,10
			base = 10;
			goto number;
		case 'n':
			if (flags & LONGINT)
				*va_arg(argp, long *) = cnt;
			else if (flags & SHORTINT)
a00229d4:	32940004 	andi	s4,s4,0x4
a00229d8:	1280ff03 	beqz	s4,a00225e8 <_doprntx+0x434>
a00229dc:	00000000 	nop
				*va_arg(argp, short *) = cnt;
a00229e0:	8c430000 	lw	v1,0(v0)
	char 	buf[BUF];	/* space for %c, %[diouxX], %[eEfgG] 	*/

	fmt = (UINT8*)fmt0;
	digs = "0123456789abcdef";

	for (cnt = 0;; ++fmt) {
a00229e4:	26b10001 	addiu	s1,s5,1
			goto number;
		case 'n':
			if (flags & LONGINT)
				*va_arg(argp, long *) = cnt;
			else if (flags & SHORTINT)
				*va_arg(argp, short *) = cnt;
a00229e8:	24420004 	addiu	v0,v0,4
a00229ec:	08008881 	j	a0022204 <_doprntx+0x50>
a00229f0:	a4770000 	sh	s7,0(v1)
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
a00229f4:	92a40001 	lbu	a0,1(s5)
a00229f8:	26b50001 	addiu	s5,s5,1
a00229fc:	080088a4 	j	a0022290 <_doprntx+0xdc>
a0022a00:	afa50034 	sw	a1,52(sp)
					if (size > prec)
						size = prec;
				} else
					size = prec;
			} else
				size = strlen(t);
a0022a04:	0c00946d 	jal	a00251b4 <strlen>
a0022a08:	02202021 	move	a0,s1
a0022a0c:	080089c5 	j	a0022714 <_doprntx+0x560>
a0022a10:	245effff 	addiu	s8,v0,-1
		case '+':
			sign = '+';
			goto rflag;
		case '.':
			if (*++fmt == '*')
				n = va_arg(argp, int);
a0022a14:	8c440000 	lw	a0,0(v0)
a0022a18:	24420004 	addiu	v0,v0,4
a0022a1c:	289e0000 	slti	s8,a0,0
a0022a20:	00fe200b 	movn	a0,a3,s8
a0022a24:	080089b0 	j	a00226c0 <_doprntx+0x50c>
a0022a28:	0080f021 	move	s8,a0
				do {
					*--t = digs[_ulong % base];
					_ulong /= base;
				} while (_ulong);
				digs = "0123456789abcdef";
				if (flags & ALT && base == 8 && *t != '0')
a0022a2c:	8fa40060 	lw	a0,96(sp)
a0022a30:	3c16a002 	lui	s6,0xa002
a0022a34:	26d652e0 	addiu	s6,s6,21216
a0022a38:	00912023 	subu	a0,a0,s1
a0022a3c:	080088cf 	j	a002233c <_doprntx+0x188>
a0022a40:	afa40030 	sw	a0,48(sp)
		case '.':
			if (*++fmt == '*')
				n = va_arg(argp, int);
			else {
				n = 0;
				while (isascii(*fmt) && isdigit(*fmt))
a0022a44:	080089af 	j	a00226bc <_doprntx+0x508>
a0022a48:	0000f021 	move	s8,zero

a0022a4c <memchr>:
	const	void	*s,
		int	c,
		size_t	n)
{
	char *mys = (char *)s;
	while ((int)--n >= 0)
a0022a4c:	08008a96 	j	a0022a58 <memchr+0xc>
a0022a50:	24c6ffff 	addiu	a2,a2,-1
	    if (*mys++ == c) 
a0022a54:	24840001 	addiu	a0,a0,1
	const	void	*s,
		int	c,
		size_t	n)
{
	char *mys = (char *)s;
	while ((int)--n >= 0)
a0022a58:	04c00007 	bltz	a2,a0022a78 <memchr+0x2c>
a0022a5c:	00000000 	nop
	    if (*mys++ == c) 
a0022a60:	80820000 	lb	v0,0(a0)
a0022a64:	00000000 	nop
a0022a68:	1445fffa 	bne	v0,a1,a0022a54 <memchr+0x8>
a0022a6c:	24c6ffff 	addiu	a2,a2,-1
a0022a70:	03e00008 	jr	ra
a0022a74:	00801021 	move	v0,a0
		return (void *) --mys;
	return NULL;
}
a0022a78:	03e00008 	jr	ra
a0022a7c:	00001021 	move	v0,zero

a0022a80 <otp_udelay>:
void otp_udelay(unsigned int us)
{
    int i;
    while(us--)
        for (i=0; i<100; i++);
}
a0022a80:	03e00008 	jr	ra
a0022a84:	00000000 	nop

a0022a88 <_otp_get_bits>:
 * Parm :
 *
 * Retn :
 *-----------------------------------------------------------------------------*/
int _otp_get_bits(unsigned int* pval, unsigned char msb, unsigned char lsb)
{
a0022a88:	30a500ff 	andi	a1,a1,0xff
a0022a8c:	30c600ff 	andi	a2,a2,0xff
    if (msb < lsb || lsb > 31 || msb > 31)
a0022a90:	00a6102b 	sltu	v0,a1,a2
a0022a94:	10400003 	beqz	v0,a0022aa4 <_otp_get_bits+0x1c>
a0022a98:	00000000 	nop

    *pval >>= lsb;
    *pval &= BIT_MASK(msb - lsb + 1);

    return 0;
}
a0022a9c:	03e00008 	jr	ra
a0022aa0:	2402ffff 	li	v0,-1
 *
 * Retn :
 *-----------------------------------------------------------------------------*/
int _otp_get_bits(unsigned int* pval, unsigned char msb, unsigned char lsb)
{
    if (msb < lsb || lsb > 31 || msb > 31)
a0022aa4:	2cc20020 	sltiu	v0,a2,32
a0022aa8:	1040fffc 	beqz	v0,a0022a9c <_otp_get_bits+0x14>
a0022aac:	00000000 	nop
a0022ab0:	2ca20020 	sltiu	v0,a1,32
a0022ab4:	1040fff9 	beqz	v0,a0022a9c <_otp_get_bits+0x14>
a0022ab8:	00a62823 	subu	a1,a1,a2
        return -1;

    *pval >>= lsb;
    *pval &= BIT_MASK(msb - lsb + 1);
a0022abc:	8c830000 	lw	v1,0(a0)
a0022ac0:	00052827 	nor	a1,zero,a1
a0022ac4:	2402ffff 	li	v0,-1
a0022ac8:	00a21006 	srlv	v0,v0,a1
a0022acc:	00c33006 	srlv	a2,v1,a2
a0022ad0:	00463024 	and	a2,v0,a2
a0022ad4:	ac860000 	sw	a2,0(a0)

    return 0;
a0022ad8:	03e00008 	jr	ra
a0022adc:	00001021 	move	v0,zero

a0022ae0 <otp_read>:
 *-----------------------------------------------------------------------------*/
int otp_read(
    unsigned int           ofst,
    unsigned int*          pval
    )
{
a0022ae0:	27bdffe8 	addiu	sp,sp,-24
a0022ae4:	afbf0014 	sw	ra,20(sp)
    if (ofst & 0x3)
a0022ae8:	30830003 	andi	v1,a0,0x3
a0022aec:	1460000b 	bnez	v1,a0022b1c <otp_read+0x3c>
a0022af0:	00801021 	move	v0,a0
    {
        OTP_WARNING("read otp failed, ofst %08x is not 4 bytes alignments\n", ofst);
        return -1;
    }

    *pval = READ_REG32(OTP_DDR_MAP_BASE + ofst);
a0022af4:	3c03b801 	lui	v1,0xb801
a0022af8:	34637000 	ori	v1,v1,0x7000
a0022afc:	00831021 	addu	v0,a0,v1
a0022b00:	8c430000 	lw	v1,0(v0)
a0022b04:	00001021 	move	v0,zero
a0022b08:	aca30000 	sw	v1,0(a1)

    return 0;
}
a0022b0c:	8fbf0014 	lw	ra,20(sp)
a0022b10:	00000000 	nop
a0022b14:	03e00008 	jr	ra
a0022b18:	27bd0018 	addiu	sp,sp,24
    unsigned int*          pval
    )
{
    if (ofst & 0x3)
    {
        OTP_WARNING("read otp failed, ofst %08x is not 4 bytes alignments\n", ofst);
a0022b1c:	3c04a002 	lui	a0,0xa002
a0022b20:	248454f4 	addiu	a0,a0,21748
a0022b24:	0c008b6c 	jal	a0022db0 <printf>
a0022b28:	00402821 	move	a1,v0
        return -1;
a0022b2c:	08008ac3 	j	a0022b0c <otp_read+0x2c>
a0022b30:	2402ffff 	li	v0,-1

a0022b34 <otp_read_bits>:
    unsigned int           ofst,
    unsigned char           msb,
    unsigned char           lsb,
    unsigned int*          pval
    )
{
a0022b34:	27bdffd8 	addiu	sp,sp,-40
a0022b38:	afbf0024 	sw	ra,36(sp)
a0022b3c:	afb10020 	sw	s1,32(sp)
a0022b40:	afb0001c 	sw	s0,28(sp)
a0022b44:	30b000ff 	andi	s0,a1,0xff
    int ret = otp_read(ofst, pval);
a0022b48:	00e02821 	move	a1,a3
a0022b4c:	afa70010 	sw	a3,16(sp)
a0022b50:	0c008ab8 	jal	a0022ae0 <otp_read>
a0022b54:	30d100ff 	andi	s1,a2,0xff

    if (ret==0 && *pval != 0xdeaddead)  // do not mask bits if it is non readable
a0022b58:	8fa70010 	lw	a3,16(sp)
a0022b5c:	10400007 	beqz	v0,a0022b7c <otp_read_bits+0x48>
a0022b60:	3c04dead 	lui	a0,0xdead
{
    if (msb < lsb || lsb > 31 || msb > 31)
        return -1;

    *pval >>= lsb;
    *pval &= BIT_MASK(msb - lsb + 1);
a0022b64:	2402ffff 	li	v0,-1
        ret = _otp_get_bits(pval, msb, lsb);
   else
   	ret = -1;

    return ret;
}
a0022b68:	8fbf0024 	lw	ra,36(sp)
a0022b6c:	8fb10020 	lw	s1,32(sp)
a0022b70:	8fb0001c 	lw	s0,28(sp)
a0022b74:	03e00008 	jr	ra
a0022b78:	27bd0028 	addiu	sp,sp,40
    unsigned int*          pval
    )
{
    int ret = otp_read(ofst, pval);

    if (ret==0 && *pval != 0xdeaddead)  // do not mask bits if it is non readable
a0022b7c:	8ce30000 	lw	v1,0(a3)
a0022b80:	3484dead 	ori	a0,a0,0xdead
a0022b84:	1064fff7 	beq	v1,a0,a0022b64 <otp_read_bits+0x30>
a0022b88:	0211202b 	sltu	a0,s0,s1
 *
 * Retn :
 *-----------------------------------------------------------------------------*/
int _otp_get_bits(unsigned int* pval, unsigned char msb, unsigned char lsb)
{
    if (msb < lsb || lsb > 31 || msb > 31)
a0022b8c:	1480fff5 	bnez	a0,a0022b64 <otp_read_bits+0x30>
a0022b90:	2e240020 	sltiu	a0,s1,32
a0022b94:	1080fff3 	beqz	a0,a0022b64 <otp_read_bits+0x30>
a0022b98:	2e040020 	sltiu	a0,s0,32
a0022b9c:	1080fff1 	beqz	a0,a0022b64 <otp_read_bits+0x30>
a0022ba0:	02118023 	subu	s0,s0,s1
        return -1;

    *pval >>= lsb;
    *pval &= BIT_MASK(msb - lsb + 1);
a0022ba4:	00108027 	nor	s0,zero,s0
a0022ba8:	2404ffff 	li	a0,-1
a0022bac:	02042006 	srlv	a0,a0,s0
a0022bb0:	02231806 	srlv	v1,v1,s1
a0022bb4:	00831824 	and	v1,a0,v1
a0022bb8:	08008ada 	j	a0022b68 <otp_read_bits+0x34>
a0022bbc:	ace30000 	sw	v1,0(a3)

a0022bc0 <otp_write>:
 *-----------------------------------------------------------------------------*/
int otp_write(
    unsigned int           ofst,
    unsigned int           val
    )
{
a0022bc0:	27bdffd8 	addiu	sp,sp,-40
a0022bc4:	afbf0024 	sw	ra,36(sp)
a0022bc8:	afb10020 	sw	s1,32(sp)
a0022bcc:	afb0001c 	sw	s0,28(sp)
    unsigned int addr;
    int i;
//    int wait_count;
    int ret = 0;

    if (ofst & 0x3)
a0022bd0:	30820003 	andi	v0,a0,0x3
 *-----------------------------------------------------------------------------*/
int otp_write(
    unsigned int           ofst,
    unsigned int           val
    )
{
a0022bd4:	00808821 	move	s1,a0
    unsigned int addr;
    int i;
//    int wait_count;
    int ret = 0;

    if (ofst & 0x3)
a0022bd8:	1440004a 	bnez	v0,a0022d04 <otp_write+0x144>
a0022bdc:	00a08021 	move	s0,a1
    {
        OTP_WARNING("write OTP failed, ofst %x is not 4 bytes alignments\n", ofst);
        return -1;
    }

    if (ofst >= MAX_OTP_OFST)
a0022be0:	2c820380 	sltiu	v0,a0,896
a0022be4:	10400041 	beqz	v0,a0022cec <otp_write+0x12c>
a0022be8:	02202821 	move	a1,s1
        OTP_WARNING("write OTP failed, ofst %x >= MAX_OTP_OFST(%x)\n", ofst, MAX_OTP_OFST);
        return -1;
    }


    otp_read(ofst, &org);
a0022bec:	0c008ab8 	jal	a0022ae0 <otp_read>
a0022bf0:	27a50010 	addiu	a1,sp,16

    if (org==0xdeaddead)
a0022bf4:	8fa30010 	lw	v1,16(sp)
a0022bf8:	3c02dead 	lui	v0,0xdead
a0022bfc:	3442dead 	ori	v0,v0,0xdead
a0022c00:	10620035 	beq	v1,v0,a0022cd8 <otp_write+0x118>
a0022c04:	3c04a002 	lui	a0,0xa002
    {
        printf("otp[0x%x] is non readable, no re-program check\n", ofst);
        org = 0;
    }
	WRITE_REG32(OTP_STATUS,0);
a0022c08:	3c02b801 	lui	v0,0xb801
a0022c0c:	34467408 	ori	a2,v0,0x7408

	WRITE_REG32(OTP_CTRL1, SET_OTP_CTRL1_WRITE_EN1(1) |
a0022c10:	34437404 	ori	v1,v0,0x7404
a0022c14:	24040115 	li	a0,277
    if (org==0xdeaddead)
    {
        printf("otp[0x%x] is non readable, no re-program check\n", ofst);
        org = 0;
    }
	WRITE_REG32(OTP_STATUS,0);
a0022c18:	acc00000 	sw	zero,0(a2)

	WRITE_REG32(OTP_CTRL1, SET_OTP_CTRL1_WRITE_EN1(1) |
a0022c1c:	ac640000 	sw	a0,0(v1)
            continue;
        }

        OTP_DBG("program otp bit %d (%08lx, %08lx)\n", addr, val, (1<<i));

        if (org & (1<<i))
a0022c20:	8fab0010 	lw	t3,16(sp)
            continue;
        }

        OTP_DBG("start otp bit %d programing\n", addr);

        WRITE_REG32(OTP_CTRL,
a0022c24:	3c0d0094 	lui	t5,0x94

        }while((status & MASK_OTP_STATUS_OTP_DONE_REG_WR)==0);

		OTP_DBG("otp bit %d programing completed\n", addr);

        WRITE_REG32(OTP_STATUS, status & ~(MASK_OTP_STATUS_OTP_FAIL_REG_WR | MASK_OTP_STATUS_OTP_DONE_REG_WR));
a0022c28:	3c0ff7f7 	lui	t7,0xf7f7
        printf("otp[0x%x] is non readable, no re-program check\n", ofst);
        org = 0;
    }
	WRITE_REG32(OTP_STATUS,0);

	WRITE_REG32(OTP_CTRL1, SET_OTP_CTRL1_WRITE_EN1(1) |
a0022c2c:	001188c0 	sll	s1,s1,0x3
            continue;
        }

        OTP_DBG("start otp bit %d programing\n", addr);

        WRITE_REG32(OTP_CTRL,
a0022c30:	35ad2000 	ori	t5,t5,0x2000
a0022c34:	344c7400 	ori	t4,v0,0x7400

        }while((status & MASK_OTP_STATUS_OTP_DONE_REG_WR)==0);

		OTP_DBG("otp bit %d programing completed\n", addr);

        WRITE_REG32(OTP_STATUS, status & ~(MASK_OTP_STATUS_OTP_FAIL_REG_WR | MASK_OTP_STATUS_OTP_DONE_REG_WR));
a0022c38:	35efffff 	ori	t7,t7,0xffff
            continue;
        }

        OTP_DBG("program otp bit %d (%08lx, %08lx)\n", addr, val, (1<<i));

        if (org & (1<<i))
a0022c3c:	00001821 	move	v1,zero

    for (i = 0; i < 32; i++)
    {
        addr = (ofst <<3) + i;

        if ((val & (1<<i))==0) {
a0022c40:	24090001 	li	t1,1
        do
        {
            status = READ_REG32(OTP_STATUS);
            OTP_DBG("Status = %08lx\n", status);

        	if (status & MASK_OTP_STATUS_OTP_FAIL_REG_WR)
a0022c44:	3c080800 	lui	t0,0x800
			break;
        	}
#endif
        	//otp_udelay(1000);

        }while((status & MASK_OTP_STATUS_OTP_DONE_REG_WR)==0);
a0022c48:	3c070008 	lui	a3,0x8
					SET_OTP_CTRL_A(addr));

//        wait_count = 0;
        do
        {
            status = READ_REG32(OTP_STATUS);
a0022c4c:	00c07021 	move	t6,a2
	WRITE_REG32(OTP_CTRL1, SET_OTP_CTRL1_WRITE_EN1(1) |
	                       SET_OTP_CTRL1_EN_PROG_FUNC(OTP_PROG_MAGIC));

    OTP_DBG("val=%08lx\n", val);

    for (i = 0; i < 32; i++)
a0022c50:	240a0020 	li	t2,32
    {
        addr = (ofst <<3) + i;

        if ((val & (1<<i))==0) {
a0022c54:	00691004 	sllv	v0,t1,v1
a0022c58:	00502024 	and	a0,v0,s0
a0022c5c:	1080000e 	beqz	a0,a0022c98 <otp_write+0xd8>
a0022c60:	004b1024 	and	v0,v0,t3
            continue;
        }

        OTP_DBG("program otp bit %d (%08lx, %08lx)\n", addr, val, (1<<i));

        if (org & (1<<i))
a0022c64:	1440000c 	bnez	v0,a0022c98 <otp_write+0xd8>
a0022c68:	00711021 	addu	v0,v1,s1
            continue;
        }

        OTP_DBG("start otp bit %d programing\n", addr);

        WRITE_REG32(OTP_CTRL,
a0022c6c:	30421fff 	andi	v0,v0,0x1fff
a0022c70:	004d1025 	or	v0,v0,t5
a0022c74:	ad820000 	sw	v0,0(t4)
					SET_OTP_CTRL_A(addr));

//        wait_count = 0;
        do
        {
            status = READ_REG32(OTP_STATUS);
a0022c78:	8cc20000 	lw	v0,0(a2)
a0022c7c:	00000000 	nop
            OTP_DBG("Status = %08lx\n", status);

        	if (status & MASK_OTP_STATUS_OTP_FAIL_REG_WR)
a0022c80:	00482024 	and	a0,v0,t0
a0022c84:	14800009 	bnez	a0,a0022cac <otp_write+0xec>
a0022c88:	00472824 	and	a1,v0,a3
			break;
        	}
#endif
        	//otp_udelay(1000);

        }while((status & MASK_OTP_STATUS_OTP_DONE_REG_WR)==0);
a0022c8c:	10a0fffa 	beqz	a1,a0022c78 <otp_write+0xb8>
a0022c90:	004f1024 	and	v0,v0,t7

		OTP_DBG("otp bit %d programing completed\n", addr);

        WRITE_REG32(OTP_STATUS, status & ~(MASK_OTP_STATUS_OTP_FAIL_REG_WR | MASK_OTP_STATUS_OTP_DONE_REG_WR));
a0022c94:	adc20000 	sw	v0,0(t6)
	WRITE_REG32(OTP_CTRL1, SET_OTP_CTRL1_WRITE_EN1(1) |
	                       SET_OTP_CTRL1_EN_PROG_FUNC(OTP_PROG_MAGIC));

    OTP_DBG("val=%08lx\n", val);

    for (i = 0; i < 32; i++)
a0022c98:	24630001 	addiu	v1,v1,1
a0022c9c:	146affed 	bne	v1,t2,a0022c54 <otp_write+0x94>
a0022ca0:	00001021 	move	v0,zero
        WRITE_REG32(OTP_STATUS, status & ~(MASK_OTP_STATUS_OTP_FAIL_REG_WR | MASK_OTP_STATUS_OTP_DONE_REG_WR));
	}

final:

	WRITE_REG32(OTP_CTRL1, 0);
a0022ca4:	08008b2d 	j	a0022cb4 <otp_write+0xf4>
a0022ca8:	3c03b801 	lui	v1,0xb801
        do
        {
            status = READ_REG32(OTP_STATUS);
            OTP_DBG("Status = %08lx\n", status);

        	if (status & MASK_OTP_STATUS_OTP_FAIL_REG_WR)
a0022cac:	2402ffff 	li	v0,-1
        WRITE_REG32(OTP_STATUS, status & ~(MASK_OTP_STATUS_OTP_FAIL_REG_WR | MASK_OTP_STATUS_OTP_DONE_REG_WR));
	}

final:

	WRITE_REG32(OTP_CTRL1, 0);
a0022cb0:	3c03b801 	lui	v1,0xb801
	WRITE_REG32(OTP_STATUS, 0);
a0022cb4:	34647408 	ori	a0,v1,0x7408
        WRITE_REG32(OTP_STATUS, status & ~(MASK_OTP_STATUS_OTP_FAIL_REG_WR | MASK_OTP_STATUS_OTP_DONE_REG_WR));
	}

final:

	WRITE_REG32(OTP_CTRL1, 0);
a0022cb8:	34637404 	ori	v1,v1,0x7404
a0022cbc:	ac600000 	sw	zero,0(v1)
	WRITE_REG32(OTP_STATUS, 0);
a0022cc0:	ac800000 	sw	zero,0(a0)

    return ret;
}
a0022cc4:	8fbf0024 	lw	ra,36(sp)
a0022cc8:	8fb10020 	lw	s1,32(sp)
a0022ccc:	8fb0001c 	lw	s0,28(sp)
a0022cd0:	03e00008 	jr	ra
a0022cd4:	27bd0028 	addiu	sp,sp,40

    otp_read(ofst, &org);

    if (org==0xdeaddead)
    {
        printf("otp[0x%x] is non readable, no re-program check\n", ofst);
a0022cd8:	248455bc 	addiu	a0,a0,21948
a0022cdc:	0c008b6c 	jal	a0022db0 <printf>
a0022ce0:	02202821 	move	a1,s1
        org = 0;
a0022ce4:	08008b02 	j	a0022c08 <otp_write+0x48>
a0022ce8:	afa00010 	sw	zero,16(sp)
        return -1;
    }

    if (ofst >= MAX_OTP_OFST)
    {
        OTP_WARNING("write OTP failed, ofst %x >= MAX_OTP_OFST(%x)\n", ofst, MAX_OTP_OFST);
a0022cec:	3c04a002 	lui	a0,0xa002
a0022cf0:	2484557c 	addiu	a0,a0,21884
a0022cf4:	0c008b6c 	jal	a0022db0 <printf>
a0022cf8:	24060380 	li	a2,896
        return -1;
a0022cfc:	08008b31 	j	a0022cc4 <otp_write+0x104>
a0022d00:	2402ffff 	li	v0,-1
//    int wait_count;
    int ret = 0;

    if (ofst & 0x3)
    {
        OTP_WARNING("write OTP failed, ofst %x is not 4 bytes alignments\n", ofst);
a0022d04:	3c04a002 	lui	a0,0xa002
a0022d08:	24845538 	addiu	a0,a0,21816
a0022d0c:	0c008b6c 	jal	a0022db0 <printf>
a0022d10:	02202821 	move	a1,s1
        return -1;
a0022d14:	08008b31 	j	a0022cc4 <otp_write+0x104>
a0022d18:	2402ffff 	li	v0,-1

a0022d1c <otp_write_bits>:
    unsigned int           ofst,
    unsigned char           msb,
    unsigned char           lsb,
    unsigned int           val
    )
{
a0022d1c:	30a500ff 	andi	a1,a1,0xff
a0022d20:	30c600ff 	andi	a2,a2,0xff
    if (msb < lsb || lsb > 31 || msb > 31)
a0022d24:	00a6102b 	sltu	v0,a1,a2
a0022d28:	10400003 	beqz	v0,a0022d38 <otp_write_bits+0x1c>
a0022d2c:	00000000 	nop

    val &= BIT_MASK(msb - lsb + 1);
    val <<= lsb;                            // generate value

    return otp_write(ofst, val);
}
a0022d30:	03e00008 	jr	ra
a0022d34:	2402ffff 	li	v0,-1
    unsigned char           msb,
    unsigned char           lsb,
    unsigned int           val
    )
{
    if (msb < lsb || lsb > 31 || msb > 31)
a0022d38:	2cc20020 	sltiu	v0,a2,32
a0022d3c:	1040fffc 	beqz	v0,a0022d30 <otp_write_bits+0x14>
a0022d40:	00000000 	nop
a0022d44:	2ca20020 	sltiu	v0,a1,32
a0022d48:	1040fff9 	beqz	v0,a0022d30 <otp_write_bits+0x14>
a0022d4c:	00000000 	nop
        return -1;

    val &= BIT_MASK(msb - lsb + 1);
a0022d50:	00a62823 	subu	a1,a1,a2
a0022d54:	2402ffff 	li	v0,-1
a0022d58:	00052827 	nor	a1,zero,a1
a0022d5c:	00a22806 	srlv	a1,v0,a1
a0022d60:	00a72824 	and	a1,a1,a3
    val <<= lsb;                            // generate value

    return otp_write(ofst, val);
a0022d64:	00c52804 	sllv	a1,a1,a2
a0022d68:	08008af0 	j	a0022bc0 <otp_write>
a0022d6c:	00000000 	nop

a0022d70 <printf1>:
    sed_uart1_write((uint8 *)&ch);
}


int printf1(const char *fmt, ...)
{
a0022d70:	27bdffe0 	addiu	sp,sp,-32
a0022d74:	afbf001c 	sw	ra,28(sp)
    int ret;
    va_list args;
    va_start(args,fmt);
a0022d78:	27a20024 	addiu	v0,sp,36
    sed_uart1_write((uint8 *)&ch);
}


int printf1(const char *fmt, ...)
{
a0022d7c:	afa60028 	sw	a2,40(sp)
    int ret;
    va_list args;
    va_start(args,fmt);
    ret = _doprntx(fmt, args, putch1, 0);
a0022d80:	3c06a002 	lui	a2,0xa002
    sed_uart1_write((uint8 *)&ch);
}


int printf1(const char *fmt, ...)
{
a0022d84:	afa50024 	sw	a1,36(sp)
a0022d88:	afa7002c 	sw	a3,44(sp)
    int ret;
    va_list args;
    va_start(args,fmt);
    ret = _doprntx(fmt, args, putch1, 0);
a0022d8c:	00402821 	move	a1,v0
a0022d90:	24c62df0 	addiu	a2,a2,11760
a0022d94:	00003821 	move	a3,zero
a0022d98:	0c00886d 	jal	a00221b4 <_doprntx>
a0022d9c:	afa20010 	sw	v0,16(sp)
    va_end(args);
    return ret;
}
a0022da0:	8fbf001c 	lw	ra,28(sp)
a0022da4:	00000000 	nop
a0022da8:	03e00008 	jr	ra
a0022dac:	27bd0020 	addiu	sp,sp,32

a0022db0 <printf>:
    sed_uart_write((uint8 *)&ch);
}


int printf(const char *fmt, ...)
{
a0022db0:	27bdffe0 	addiu	sp,sp,-32
a0022db4:	afbf001c 	sw	ra,28(sp)
    int ret;
    va_list args;
    va_start(args,fmt);
a0022db8:	27a20024 	addiu	v0,sp,36
    sed_uart_write((uint8 *)&ch);
}


int printf(const char *fmt, ...)
{
a0022dbc:	afa60028 	sw	a2,40(sp)
    int ret;
    va_list args;
    va_start(args,fmt);
    ret = _doprntx(fmt, args, putch, 0);
a0022dc0:	3c06a002 	lui	a2,0xa002
    sed_uart_write((uint8 *)&ch);
}


int printf(const char *fmt, ...)
{
a0022dc4:	afa50024 	sw	a1,36(sp)
a0022dc8:	afa7002c 	sw	a3,44(sp)
    int ret;
    va_list args;
    va_start(args,fmt);
    ret = _doprntx(fmt, args, putch, 0);
a0022dcc:	00402821 	move	a1,v0
a0022dd0:	24c62e14 	addiu	a2,a2,11796
a0022dd4:	00003821 	move	a3,zero
a0022dd8:	0c00886d 	jal	a00221b4 <_doprntx>
a0022ddc:	afa20010 	sw	v0,16(sp)
    va_end(args);
    return ret;
}
a0022de0:	8fbf001c 	lw	ra,28(sp)
a0022de4:	00000000 	nop
a0022de8:	03e00008 	jr	ra
a0022dec:	27bd0020 	addiu	sp,sp,32

a0022df0 <putch1>:

static void putch1(char ch, char **pca)
{
a0022df0:	27bdffe8 	addiu	sp,sp,-24
a0022df4:	afbf0014 	sw	ra,20(sp)
a0022df8:	a3a40018 	sb	a0,24(sp)
    sed_uart1_write((uint8 *)&ch);
a0022dfc:	0c0091ff 	jal	a00247fc <sed_uart1_write>
a0022e00:	27a40018 	addiu	a0,sp,24
}
a0022e04:	8fbf0014 	lw	ra,20(sp)
a0022e08:	00000000 	nop
a0022e0c:	03e00008 	jr	ra
a0022e10:	27bd0018 	addiu	sp,sp,24

a0022e14 <putch>:
		     putc_func   putc,
		     char      **pca);


static void putch(char ch, char **pca)
{
a0022e14:	27bdffe8 	addiu	sp,sp,-24
a0022e18:	afbf0014 	sw	ra,20(sp)
a0022e1c:	a3a40018 	sb	a0,24(sp)
    sed_uart_write((uint8 *)&ch);
a0022e20:	0c0091e3 	jal	a002478c <sed_uart_write>
a0022e24:	27a40018 	addiu	a0,sp,24
}
a0022e28:	8fbf0014 	lw	ra,20(sp)
a0022e2c:	00000000 	nop
a0022e30:	03e00008 	jr	ra
a0022e34:	27bd0018 	addiu	sp,sp,24

a0022e38 <rsaSetKey>:
 * @param key data to set as key
 * @param length of the key
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t rsaSetKey(uint8_t* key, uint16_t length)
{
a0022e38:	27bdffe0 	addiu	sp,sp,-32
a0022e3c:	afbf001c 	sw	ra,28(sp)
a0022e40:	afb10018 	sw	s1,24(sp)
a0022e44:	afb00014 	sw	s0,20(sp)
a0022e48:	30b0ffff 	andi	s0,a1,0xffff
a0022e4c:	00808821 	move	s1,a0
    uint8_t rstatus = STATUS_OK;
    uint16_t    i;
    uint8_t* p_key;

    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
a0022e50:	3c05a002 	lui	a1,0xa002
a0022e54:	3c04a002 	lui	a0,0xa002
a0022e58:	24a556ec 	addiu	a1,a1,22252
a0022e5c:	248455ec 	addiu	a0,a0,21996
a0022e60:	0c008b5c 	jal	a0022d70 <printf1>
a0022e64:	24060452 	li	a2,1106
	rsa_key_len = length;

    fact_status |= RSA_KEY_SET;
a0022e68:	3c02a003 	lui	v0,0xa003
a0022e6c:	8c439c28 	lw	v1,-25560(v0)
    sed_printf1("length of RSA key is %d\n",length);
a0022e70:	3c04a002 	lui	a0,0xa002
a0022e74:	248455fc 	addiu	a0,a0,22012
    uint8_t* p_key;

    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
	rsa_key_len = length;

    fact_status |= RSA_KEY_SET;
a0022e78:	34630010 	ori	v1,v1,0x10
a0022e7c:	ac439c28 	sw	v1,-25560(v0)
    sed_printf1("length of RSA key is %d\n",length);
a0022e80:	02002821 	move	a1,s0
    uint8_t rstatus = STATUS_OK;
    uint16_t    i;
    uint8_t* p_key;

    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
	rsa_key_len = length;
a0022e84:	3c02a003 	lui	v0,0xa003

    fact_status |= RSA_KEY_SET;
    sed_printf1("length of RSA key is %d\n",length);
a0022e88:	0c008b5c 	jal	a0022d70 <printf1>
a0022e8c:	a4509c26 	sh	s0,-25562(v0)
    p_key = (uint8_t*)RSA_KEY_BUF;
    for (i=0; i<length;i++)
a0022e90:	1200000b 	beqz	s0,a0022ec0 <rsaSetKey+0x88>
a0022e94:	00001021 	move	v0,zero
        p_key[i] = key[i];
a0022e98:	3c06806b 	lui	a2,0x806b
a0022e9c:	34c60020 	ori	a2,a2,0x20
a0022ea0:	02221821 	addu	v1,s1,v0
a0022ea4:	90650000 	lbu	a1,0(v1)
a0022ea8:	00462021 	addu	a0,v0,a2
a0022eac:	24420001 	addiu	v0,v0,1
	rsa_key_len = length;

    fact_status |= RSA_KEY_SET;
    sed_printf1("length of RSA key is %d\n",length);
    p_key = (uint8_t*)RSA_KEY_BUF;
    for (i=0; i<length;i++)
a0022eb0:	3043ffff 	andi	v1,v0,0xffff
a0022eb4:	0070182b 	sltu	v1,v1,s0
a0022eb8:	1460fff9 	bnez	v1,a0022ea0 <rsaSetKey+0x68>
a0022ebc:	a0850000 	sb	a1,0(a0)
        p_key[i] = key[i];

    return rstatus;
}
a0022ec0:	8fbf001c 	lw	ra,28(sp)
a0022ec4:	8fb10018 	lw	s1,24(sp)
a0022ec8:	8fb00014 	lw	s0,20(sp)
a0022ecc:	00001021 	move	v0,zero
a0022ed0:	03e00008 	jr	ra
a0022ed4:	27bd0020 	addiu	sp,sp,32

a0022ed8 <rsaSetData>:
 * @param data to use as input for the crypto operation.
 * @param length of the data (8 for DES).
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t rsaSetData(uint8_t* data, uint16_t length)
{
a0022ed8:	27bdffe0 	addiu	sp,sp,-32
a0022edc:	afbf001c 	sw	ra,28(sp)
a0022ee0:	afb10018 	sw	s1,24(sp)
a0022ee4:	afb00014 	sw	s0,20(sp)
a0022ee8:	30b0ffff 	andi	s0,a1,0xffff
a0022eec:	00808821 	move	s1,a0
    uint16_t    i;
    uint8_t rstatus = STATUS_OK;//STATUS_OK;
    uint8_t* p_idata;

    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
a0022ef0:	3c05a002 	lui	a1,0xa002
a0022ef4:	3c04a002 	lui	a0,0xa002
a0022ef8:	24a556f8 	addiu	a1,a1,22264
a0022efc:	248455ec 	addiu	a0,a0,21996
a0022f00:	0c008b5c 	jal	a0022d70 <printf1>
a0022f04:	24060436 	li	a2,1078

    /* should to check length of RSA data ? */

    fact_status |= RSA_DATA_SET;
a0022f08:	3c02a003 	lui	v0,0xa003
a0022f0c:	8c439c28 	lw	v1,-25560(v0)

    rsa_data_len = length;
    sed_printf1("length of RSA data is %d\n",rsa_data_len);
a0022f10:	3c04a002 	lui	a0,0xa002
a0022f14:	24845618 	addiu	a0,a0,22040

    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);

    /* should to check length of RSA data ? */

    fact_status |= RSA_DATA_SET;
a0022f18:	34630020 	ori	v1,v1,0x20
a0022f1c:	ac439c28 	sw	v1,-25560(v0)

    rsa_data_len = length;
    sed_printf1("length of RSA data is %d\n",rsa_data_len);
a0022f20:	02002821 	move	a1,s0

    /* should to check length of RSA data ? */

    fact_status |= RSA_DATA_SET;

    rsa_data_len = length;
a0022f24:	3c02a003 	lui	v0,0xa003
    sed_printf1("length of RSA data is %d\n",rsa_data_len);
a0022f28:	0c008b5c 	jal	a0022d70 <printf1>
a0022f2c:	a4509c24 	sh	s0,-25564(v0)
    p_idata = (uint8_t*)RSA_IDATA_BUF;
    for (i=0; i<length;i++)
a0022f30:	1200000a 	beqz	s0,a0022f5c <rsaSetData+0x84>
a0022f34:	00001021 	move	v0,zero
        p_idata[i] = data[i];
a0022f38:	3c068069 	lui	a2,0x8069
a0022f3c:	02221821 	addu	v1,s1,v0
a0022f40:	90650000 	lbu	a1,0(v1)
a0022f44:	00462021 	addu	a0,v0,a2
a0022f48:	24420001 	addiu	v0,v0,1
    fact_status |= RSA_DATA_SET;

    rsa_data_len = length;
    sed_printf1("length of RSA data is %d\n",rsa_data_len);
    p_idata = (uint8_t*)RSA_IDATA_BUF;
    for (i=0; i<length;i++)
a0022f4c:	3043ffff 	andi	v1,v0,0xffff
a0022f50:	0070182b 	sltu	v1,v1,s0
a0022f54:	1460fff9 	bnez	v1,a0022f3c <rsaSetData+0x64>
a0022f58:	a0850000 	sb	a1,0(a0)
        p_idata[i] = data[i];

    return rstatus;
}
a0022f5c:	8fbf001c 	lw	ra,28(sp)
a0022f60:	8fb10018 	lw	s1,24(sp)
a0022f64:	8fb00014 	lw	s0,20(sp)
a0022f68:	00001021 	move	v0,zero
a0022f6c:	03e00008 	jr	ra
a0022f70:	27bd0020 	addiu	sp,sp,32

a0022f74 <aesDecrypt>:
 * @param response (output parameter) data of the crypto operation, if applicable.
 * @param length (output parameter) length of the response, if applicable.
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t aesDecrypt(uint8_t* response, uint16_t* length)
{
a0022f74:	27bdffe8 	addiu	sp,sp,-24
a0022f78:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0022f7c:	3c04a002 	lui	a0,0xa002
a0022f80:	3c05a002 	lui	a1,0xa002
a0022f84:	24845634 	addiu	a0,a0,22068
a0022f88:	0c008b5c 	jal	a0022d70 <printf1>
a0022f8c:	24a55704 	addiu	a1,a1,22276
    return rstatus;
#endif

}
a0022f90:	8fbf0014 	lw	ra,20(sp)
a0022f94:	00001021 	move	v0,zero
a0022f98:	03e00008 	jr	ra
a0022f9c:	27bd0018 	addiu	sp,sp,24

a0022fa0 <aesEncrypt>:
 * @param response (output parameter) data of the crypto operation, if applicable.
 * @param length (output parameter) length of the response, if applicable.
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t aesEncrypt(uint8_t* response, uint16_t* length)
{
a0022fa0:	27bdffe8 	addiu	sp,sp,-24
a0022fa4:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0022fa8:	3c04a002 	lui	a0,0xa002
a0022fac:	3c05a002 	lui	a1,0xa002
a0022fb0:	24845634 	addiu	a0,a0,22068
a0022fb4:	0c008b5c 	jal	a0022d70 <printf1>
a0022fb8:	24a55710 	addiu	a1,a1,22288
    return rstatus;
#endif

}
a0022fbc:	8fbf0014 	lw	ra,20(sp)
a0022fc0:	00001021 	move	v0,zero
a0022fc4:	03e00008 	jr	ra
a0022fc8:	27bd0018 	addiu	sp,sp,24

a0022fcc <aesSetKey>:
 * @param key data to set as key
 * @param length of the key
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t aesSetKey(uint8_t* key, uint16_t length)
{
a0022fcc:	27bdffe8 	addiu	sp,sp,-24
a0022fd0:	afbf0014 	sw	ra,20(sp)

    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0022fd4:	3c04a002 	lui	a0,0xa002
a0022fd8:	3c05a002 	lui	a1,0xa002
a0022fdc:	24845634 	addiu	a0,a0,22068
a0022fe0:	0c008b5c 	jal	a0022d70 <printf1>
a0022fe4:	24a5571c 	addiu	a1,a1,22300
    return rstatus;
#endif

}
a0022fe8:	8fbf0014 	lw	ra,20(sp)
a0022fec:	00001021 	move	v0,zero
a0022ff0:	03e00008 	jr	ra
a0022ff4:	27bd0018 	addiu	sp,sp,24

a0022ff8 <aesSetData>:
 * @param data to use as input for the crypto operation.
 * @param length of the data (8 for DES).
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t aesSetData(uint8_t* data, uint16_t length)
{
a0022ff8:	27bdffe8 	addiu	sp,sp,-24
a0022ffc:	afbf0014 	sw	ra,20(sp)

    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0023000:	3c04a002 	lui	a0,0xa002
a0023004:	3c05a002 	lui	a1,0xa002
a0023008:	24845634 	addiu	a0,a0,22068
a002300c:	0c008b5c 	jal	a0022d70 <printf1>
a0023010:	24a55728 	addiu	a1,a1,22312
    return rstatus;
#endif

}
a0023014:	8fbf0014 	lw	ra,20(sp)
a0023018:	00001021 	move	v0,zero
a002301c:	03e00008 	jr	ra
a0023020:	27bd0018 	addiu	sp,sp,24

a0023024 <tdesDecrypt>:
 * @param response (output parameter) data of the crypto operation, if applicable.
 * @param length (output parameter) length of the response, if applicable.
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t tdesDecrypt(uint8_t* response, uint16_t* length)
{
a0023024:	27bdffe8 	addiu	sp,sp,-24
a0023028:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a002302c:	3c04a002 	lui	a0,0xa002
a0023030:	3c05a002 	lui	a1,0xa002
a0023034:	24845634 	addiu	a0,a0,22068
a0023038:	0c008b5c 	jal	a0022d70 <printf1>
a002303c:	24a55734 	addiu	a1,a1,22324
    return rstatus;
#endif

}
a0023040:	8fbf0014 	lw	ra,20(sp)
a0023044:	00001021 	move	v0,zero
a0023048:	03e00008 	jr	ra
a002304c:	27bd0018 	addiu	sp,sp,24

a0023050 <tdesEncrypt>:
 * @param response (output parameter) data of the crypto operation, if applicable.
 * @param length (output parameter) length of the response, if applicable.
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t tdesEncrypt(uint8_t* response, uint16_t* length)
{
a0023050:	27bdffe8 	addiu	sp,sp,-24
a0023054:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0023058:	3c04a002 	lui	a0,0xa002
a002305c:	3c05a002 	lui	a1,0xa002
a0023060:	24845634 	addiu	a0,a0,22068
a0023064:	0c008b5c 	jal	a0022d70 <printf1>
a0023068:	24a55740 	addiu	a1,a1,22336
    return rstatus;
#endif

}
a002306c:	8fbf0014 	lw	ra,20(sp)
a0023070:	00001021 	move	v0,zero
a0023074:	03e00008 	jr	ra
a0023078:	27bd0018 	addiu	sp,sp,24

a002307c <tdesSetKey>:
 * @param key data to set as key
 * @param length of the key
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t tdesSetKey(uint8_t* key, uint16_t length)
{
a002307c:	27bdffe8 	addiu	sp,sp,-24
a0023080:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0023084:	3c04a002 	lui	a0,0xa002
a0023088:	3c05a002 	lui	a1,0xa002
a002308c:	24845634 	addiu	a0,a0,22068
a0023090:	0c008b5c 	jal	a0022d70 <printf1>
a0023094:	24a5574c 	addiu	a1,a1,22348
    return rstatus;
#endif

}
a0023098:	8fbf0014 	lw	ra,20(sp)
a002309c:	00001021 	move	v0,zero
a00230a0:	03e00008 	jr	ra
a00230a4:	27bd0018 	addiu	sp,sp,24

a00230a8 <tdesSetData>:
 * @param data to use as input for the crypto operation.
 * @param length of the data (8 for DES).
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t tdesSetData(uint8_t* data, uint16_t length)
{
a00230a8:	27bdffe8 	addiu	sp,sp,-24
a00230ac:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a00230b0:	3c04a002 	lui	a0,0xa002
a00230b4:	3c05a002 	lui	a1,0xa002
a00230b8:	24845634 	addiu	a0,a0,22068
a00230bc:	0c008b5c 	jal	a0022d70 <printf1>
a00230c0:	24a55758 	addiu	a1,a1,22360
    return rstatus;
#endif

}
a00230c4:	8fbf0014 	lw	ra,20(sp)
a00230c8:	00001021 	move	v0,zero
a00230cc:	03e00008 	jr	ra
a00230d0:	27bd0018 	addiu	sp,sp,24

a00230d4 <desDecrypt>:
 * @param response (output parameter) data of the crypto operation, if applicable.
 * @param length (output parameter) length of the response, if applicable.
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t desDecrypt(uint8_t* response, uint16_t* length)
{
a00230d4:	27bdffe8 	addiu	sp,sp,-24
a00230d8:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a00230dc:	3c04a002 	lui	a0,0xa002
a00230e0:	3c05a002 	lui	a1,0xa002
a00230e4:	24845634 	addiu	a0,a0,22068
a00230e8:	0c008b5c 	jal	a0022d70 <printf1>
a00230ec:	24a55764 	addiu	a1,a1,22372
    return rstatus;
#endif

}
a00230f0:	8fbf0014 	lw	ra,20(sp)
a00230f4:	00001021 	move	v0,zero
a00230f8:	03e00008 	jr	ra
a00230fc:	27bd0018 	addiu	sp,sp,24

a0023100 <desEncrypt>:
 * @param response (output parameter) data of the crypto operation, if applicable.
 * @param length (output parameter) length of the response, if applicable.
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t desEncrypt(uint8_t* response, uint16_t* length)
{
a0023100:	27bdffe8 	addiu	sp,sp,-24
a0023104:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0023108:	3c04a002 	lui	a0,0xa002
a002310c:	3c05a002 	lui	a1,0xa002
a0023110:	24845634 	addiu	a0,a0,22068
a0023114:	0c008b5c 	jal	a0022d70 <printf1>
a0023118:	24a55770 	addiu	a1,a1,22384
    return rstatus;
#endif

}
a002311c:	8fbf0014 	lw	ra,20(sp)
a0023120:	00001021 	move	v0,zero
a0023124:	03e00008 	jr	ra
a0023128:	27bd0018 	addiu	sp,sp,24

a002312c <desSetKey>:
 * @param key data to set as key
 * @param length of the key
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t desSetKey(uint8_t* key, uint16_t length)
{
a002312c:	27bdffe8 	addiu	sp,sp,-24
a0023130:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0023134:	3c04a002 	lui	a0,0xa002
a0023138:	3c05a002 	lui	a1,0xa002
a002313c:	24845634 	addiu	a0,a0,22068
a0023140:	0c008b5c 	jal	a0022d70 <printf1>
a0023144:	24a5577c 	addiu	a1,a1,22396
    return rstatus;
#endif

}
a0023148:	8fbf0014 	lw	ra,20(sp)
a002314c:	00001021 	move	v0,zero
a0023150:	03e00008 	jr	ra
a0023154:	27bd0018 	addiu	sp,sp,24

a0023158 <desSetData>:
 * @param length of the data (8 for DES).
 * @return status code. For status codes, see STATUS_* defines.
 */

uint8_t desSetData(uint8_t* data, uint16_t length)
{
a0023158:	27bdffe8 	addiu	sp,sp,-24
a002315c:	afbf0014 	sw	ra,20(sp)

    }
    return rstatus;
#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a0023160:	3c04a002 	lui	a0,0xa002
a0023164:	3c05a002 	lui	a1,0xa002
a0023168:	24845634 	addiu	a0,a0,22068
a002316c:	0c008b5c 	jal	a0022d70 <printf1>
a0023170:	24a55788 	addiu	a1,a1,22408
    return rstatus;
#endif

}
a0023174:	8fbf0014 	lw	ra,20(sp)
a0023178:	00001021 	move	v0,zero
a002317c:	03e00008 	jr	ra
a0023180:	27bd0018 	addiu	sp,sp,24

a0023184 <writeOTP>:
 */
uint8_t writeOTP( uint16_t*  address,
                 uint16_t  addressLength,
                 uint8_t*  data,
                 uint16_t* dataLength )
{
a0023184:	27bdffe8 	addiu	sp,sp,-24
a0023188:	afbf0014 	sw	ra,20(sp)
    }
    return rstatus;

#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a002318c:	3c04a002 	lui	a0,0xa002
a0023190:	3c05a002 	lui	a1,0xa002
a0023194:	24845634 	addiu	a0,a0,22068
a0023198:	0c008b5c 	jal	a0022d70 <printf1>
a002319c:	24a55794 	addiu	a1,a1,22420
    return rstatus;
#endif

}
a00231a0:	8fbf0014 	lw	ra,20(sp)
a00231a4:	00001021 	move	v0,zero
a00231a8:	03e00008 	jr	ra
a00231ac:	27bd0018 	addiu	sp,sp,24

a00231b0 <readOTP>:
 */
uint8_t readOTP( uint16_t*  address,
                 uint16_t  addressLength,
                 uint8_t*  data,
                 uint16_t* dataLength )
{
a00231b0:	27bdffe8 	addiu	sp,sp,-24
a00231b4:	afbf0014 	sw	ra,20(sp)
    return rstatus;


#else
	uint8_t rstatus = STATUS_OK;
    sed_printf1("Disable %s function\n",__func__);
a00231b8:	3c04a002 	lui	a0,0xa002
a00231bc:	3c05a002 	lui	a1,0xa002
a00231c0:	24845634 	addiu	a0,a0,22068
a00231c4:	0c008b5c 	jal	a0022d70 <printf1>
a00231c8:	24a557a0 	addiu	a1,a1,22432
    return rstatus;
#endif

}
a00231cc:	8fbf0014 	lw	ra,20(sp)
a00231d0:	00001021 	move	v0,zero
a00231d4:	03e00008 	jr	ra
a00231d8:	27bd0018 	addiu	sp,sp,24

a00231dc <initBoard>:
 * All unused peripherals (e.g. USB, Ethernet, Descrambler, etc) increase the
 * noise in the measurements made during DPA and DEMA testing.
 *
 */
void initBoard(void)
{
a00231dc:	27bdffe8 	addiu	sp,sp,-24
a00231e0:	afbf0014 	sw	ra,20(sp)
    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
a00231e4:	3c04a002 	lui	a0,0xa002
a00231e8:	3c05a002 	lui	a1,0xa002
a00231ec:	248455ec 	addiu	a0,a0,21996
a00231f0:	24a557c8 	addiu	a1,a1,22472
a00231f4:	0c008b5c 	jal	a0022d70 <printf1>
a00231f8:	240600b8 	li	a2,184

    kt_rdkey_usage = 0;
a00231fc:	3c02a003 	lui	v0,0xa003
a0023200:	ac409c10 	sw	zero,-25584(v0)
    kt_htkey_usage = 0;
a0023204:	3c02a003 	lui	v0,0xa003
a0023208:	ac409c14 	sw	zero,-25580(v0)
    md_usage       = 0;
a002320c:	3c02a003 	lui	v0,0xa003
a0023210:	ac409c18 	sw	zero,-25576(v0)
    md_type        = 0;
a0023214:	3c02a003 	lui	v0,0xa003
a0023218:	ac409c1c 	sw	zero,-25572(v0)

    tdes_data_len  = 0;
a002321c:	3c02a003 	lui	v0,0xa003
a0023220:	a4409c20 	sh	zero,-25568(v0)
    aes_data_len   = 0;
a0023224:	3c02a003 	lui	v0,0xa003
a0023228:	a4409c22 	sh	zero,-25566(v0)
    rsa_data_len   = 0;
    rsa_key_len	   = 0;

    /* clear all action flag */
    fact_status = 0;
}
a002322c:	8fbf0014 	lw	ra,20(sp)
    md_usage       = 0;
    md_type        = 0;

    tdes_data_len  = 0;
    aes_data_len   = 0;
    rsa_data_len   = 0;
a0023230:	3c02a003 	lui	v0,0xa003
a0023234:	a4409c24 	sh	zero,-25564(v0)
    rsa_key_len	   = 0;
a0023238:	3c02a003 	lui	v0,0xa003
a002323c:	a4409c26 	sh	zero,-25562(v0)

    /* clear all action flag */
    fact_status = 0;
a0023240:	3c02a003 	lui	v0,0xa003
a0023244:	ac409c28 	sw	zero,-25560(v0)
}
a0023248:	03e00008 	jr	ra
a002324c:	27bd0018 	addiu	sp,sp,24

a0023250 <initSerial>:
 * and 8N1 mode (8 data bits, no parity, 1 stop bit).
 */
void initSerial(void)
{
    /* sed_drv_uart.c void sed_uart_init (void) */
    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
a0023250:	3c04a002 	lui	a0,0xa002
a0023254:	3c05a002 	lui	a1,0xa002
a0023258:	248455ec 	addiu	a0,a0,21996
a002325c:	24a557d4 	addiu	a1,a1,22484
a0023260:	240600a1 	li	a2,161
a0023264:	08008b5c 	j	a0022d70 <printf1>
a0023268:	00000000 	nop

a002326c <rtk_rsa_op>:
    return rstatus;
}


uint8_t rtk_rsa_op(uint8_t op,uint8_t* response, uint16_t* length)
{
a002326c:	27bdffd0 	addiu	sp,sp,-48
a0023270:	afbf002c 	sw	ra,44(sp)
a0023274:	afb60028 	sw	s6,40(sp)
a0023278:	afb50024 	sw	s5,36(sp)
a002327c:	afb40020 	sw	s4,32(sp)
a0023280:	afb3001c 	sw	s3,28(sp)
a0023284:	afb20018 	sw	s2,24(sp)
a0023288:	afb10014 	sw	s1,20(sp)
a002328c:	afb00010 	sw	s0,16(sp)
    uint16_t    i;
    uint8_t rstatus = STATUS_OK;

    sed_printf1("RISCURS %s(%d)[fact_status=0x%08x]\n",
a0023290:	3c13a003 	lui	s3,0xa003
a0023294:	8e679c28 	lw	a3,-25560(s3)
    return rstatus;
}


uint8_t rtk_rsa_op(uint8_t op,uint8_t* response, uint16_t* length)
{
a0023298:	00a08821 	move	s1,a1
a002329c:	309200ff 	andi	s2,a0,0xff
    uint16_t    i;
    uint8_t rstatus = STATUS_OK;

    sed_printf1("RISCURS %s(%d)[fact_status=0x%08x]\n",
a00232a0:	3c05a002 	lui	a1,0xa002
a00232a4:	3c04a002 	lui	a0,0xa002
    return rstatus;
}


uint8_t rtk_rsa_op(uint8_t op,uint8_t* response, uint16_t* length)
{
a00232a8:	00c08021 	move	s0,a2
    uint16_t    i;
    uint8_t rstatus = STATUS_OK;

    sed_printf1("RISCURS %s(%d)[fact_status=0x%08x]\n",
a00232ac:	24a556e0 	addiu	a1,a1,22240
a00232b0:	2484564c 	addiu	a0,a0,22092
a00232b4:	0c008b5c 	jal	a0022d70 <printf1>
a00232b8:	24060465 	li	a2,1125
    			 __func__, __LINE__,fact_status);

	sed_printf1("RSA %srypt operation",(op == RTK_ENC)? "Enc":"Dec");
a00232bc:	24020001 	li	v0,1
a00232c0:	12420069 	beq	s2,v0,a0023468 <rtk_rsa_op+0x1fc>
a00232c4:	3c14a002 	lui	s4,0xa002
a00232c8:	3c04a002 	lui	a0,0xa002
a00232cc:	24845670 	addiu	a0,a0,22128
a00232d0:	0c008b5c 	jal	a0022d70 <printf1>
a00232d4:	26855248 	addiu	a1,s4,21064
			rstatus = STATUS_ERROR;
			goto ERR_OUT;
		}
#endif

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
a00232d8:	3c06806b 	lui	a2,0x806b
    			 __func__, __LINE__,fact_status);

	sed_printf1("RSA %srypt operation",(op == RTK_ENC)? "Enc":"Dec");

#ifdef DEBUG_RSA_FLOW
	rsa_data_len = 256;
a00232dc:	3c15a003 	lui	s5,0xa003
			rstatus = STATUS_ERROR;
			goto ERR_OUT;
		}
#endif

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
a00232e0:	3c058069 	lui	a1,0x8069
    			 __func__, __LINE__,fact_status);

	sed_printf1("RSA %srypt operation",(op == RTK_ENC)? "Enc":"Dec");

#ifdef DEBUG_RSA_FLOW
	rsa_data_len = 256;
a00232e4:	24020100 	li	v0,256
			rstatus = STATUS_ERROR;
			goto ERR_OUT;
		}
#endif

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
a00232e8:	34c60020 	ori	a2,a2,0x20
a00232ec:	36440080 	ori	a0,s2,0x80
a00232f0:	02203821 	move	a3,s1
a00232f4:	0c008758 	jal	a0021d60 <do_RSA>
a00232f8:	a6a29c24 	sh	v0,-25564(s5)
        *length = rsa_data_len;
a00232fc:	96a29c24 	lhu	v0,-25564(s5)
a0023300:	26855248 	addiu	a1,s4,21064
a0023304:	a6020000 	sh	v0,0(s0)

        sed_printf1("\n\nRSA %srypted Data:",(op == RTK_ENC)? "Enc":"Dec");
a0023308:	3c04a002 	lui	a0,0xa002
a002330c:	0c008b5c 	jal	a0022d70 <printf1>
a0023310:	24845688 	addiu	a0,a0,22152
        for(i=0;i<*length;i++){
a0023314:	96020000 	lhu	v0,0(s0)
a0023318:	00000000 	nop
a002331c:	10400020 	beqz	v0,a00233a0 <rtk_rsa_op+0x134>
a0023320:	24020001 	li	v0,1
            if((i%16)==0)
                sed_printf1("\n");
a0023324:	3c16a002 	lui	s6,0xa002
            sed_printf1("%02x ",response[i]);
a0023328:	3c15a002 	lui	s5,0xa002
        *length = rsa_data_len;

        sed_printf1("\n\nRSA %srypted Data:",(op == RTK_ENC)? "Enc":"Dec");
        for(i=0;i<*length;i++){
            if((i%16)==0)
                sed_printf1("\n");
a002332c:	26d658bc 	addiu	s6,s6,22716
            sed_printf1("%02x ",response[i]);
a0023330:	26b55260 	addiu	s5,s5,21088

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
        *length = rsa_data_len;

        sed_printf1("\n\nRSA %srypted Data:",(op == RTK_ENC)? "Enc":"Dec");
        for(i=0;i<*length;i++){
a0023334:	08008cd8 	j	a0023360 <rtk_rsa_op+0xf4>
a0023338:	0000a021 	move	s4,zero
            if((i%16)==0)
                sed_printf1("\n");
            sed_printf1("%02x ",response[i]);
a002333c:	90450000 	lbu	a1,0(v0)
a0023340:	02a02021 	move	a0,s5
a0023344:	0c008b5c 	jal	a0022d70 <printf1>
a0023348:	26940001 	addiu	s4,s4,1

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
        *length = rsa_data_len;

        sed_printf1("\n\nRSA %srypted Data:",(op == RTK_ENC)? "Enc":"Dec");
        for(i=0;i<*length;i++){
a002334c:	96020000 	lhu	v0,0(s0)
a0023350:	3294ffff 	andi	s4,s4,0xffff
a0023354:	0282102b 	sltu	v0,s4,v0
a0023358:	10400011 	beqz	v0,a00233a0 <rtk_rsa_op+0x134>
a002335c:	24020001 	li	v0,1
            if((i%16)==0)
a0023360:	3282000f 	andi	v0,s4,0xf
a0023364:	1440fff5 	bnez	v0,a002333c <rtk_rsa_op+0xd0>
a0023368:	02341021 	addu	v0,s1,s4
                sed_printf1("\n");
a002336c:	0c008b5c 	jal	a0022d70 <printf1>
a0023370:	02c02021 	move	a0,s6
            sed_printf1("%02x ",response[i]);
a0023374:	02341021 	addu	v0,s1,s4
a0023378:	90450000 	lbu	a1,0(v0)
a002337c:	02a02021 	move	a0,s5
a0023380:	0c008b5c 	jal	a0022d70 <printf1>
a0023384:	26940001 	addiu	s4,s4,1

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
        *length = rsa_data_len;

        sed_printf1("\n\nRSA %srypted Data:",(op == RTK_ENC)? "Enc":"Dec");
        for(i=0;i<*length;i++){
a0023388:	96020000 	lhu	v0,0(s0)
a002338c:	3294ffff 	andi	s4,s4,0xffff
a0023390:	0282102b 	sltu	v0,s4,v0
a0023394:	1440fff3 	bnez	v0,a0023364 <rtk_rsa_op+0xf8>
a0023398:	3282000f 	andi	v0,s4,0xf
            if((i%16)==0)
                sed_printf1("\n");
            sed_printf1("%02x ",response[i]);
        }

        sed_printf1("\n\nRSA %srypted Data string:\n",(op == RTK_ENC)? "Enc":"Dec");
a002339c:	24020001 	li	v0,1
a00233a0:	12420045 	beq	s2,v0,a00234b8 <rtk_rsa_op+0x24c>
a00233a4:	3c05a002 	lui	a1,0xa002
a00233a8:	3c05a002 	lui	a1,0xa002
a00233ac:	24a55248 	addiu	a1,a1,21064
a00233b0:	3c04a002 	lui	a0,0xa002
a00233b4:	0c008b5c 	jal	a0022d70 <printf1>
a00233b8:	248456a0 	addiu	a0,a0,22176
        for(i=0;i<*length;i++){
a00233bc:	96020000 	lhu	v0,0(s0)
a00233c0:	00000000 	nop
a00233c4:	1040000d 	beqz	v0,a00233fc <rtk_rsa_op+0x190>
a00233c8:	3c15a002 	lui	s5,0xa002
            sed_printf1("%02x",response[i]);
a00233cc:	26b556c0 	addiu	s5,s5,22208
                sed_printf1("\n");
            sed_printf1("%02x ",response[i]);
        }

        sed_printf1("\n\nRSA %srypted Data string:\n",(op == RTK_ENC)? "Enc":"Dec");
        for(i=0;i<*length;i++){
a00233d0:	0000a021 	move	s4,zero
            sed_printf1("%02x",response[i]);
a00233d4:	02341021 	addu	v0,s1,s4
a00233d8:	90450000 	lbu	a1,0(v0)
a00233dc:	02a02021 	move	a0,s5
a00233e0:	0c008b5c 	jal	a0022d70 <printf1>
a00233e4:	26940001 	addiu	s4,s4,1
                sed_printf1("\n");
            sed_printf1("%02x ",response[i]);
        }

        sed_printf1("\n\nRSA %srypted Data string:\n",(op == RTK_ENC)? "Enc":"Dec");
        for(i=0;i<*length;i++){
a00233e8:	96020000 	lhu	v0,0(s0)
a00233ec:	3294ffff 	andi	s4,s4,0xffff
a00233f0:	0282102b 	sltu	v0,s4,v0
a00233f4:	1440fff8 	bnez	v0,a00233d8 <rtk_rsa_op+0x16c>
a00233f8:	02341021 	addu	v0,s1,s4
            sed_printf1("%02x",response[i]);
        }
        sed_printf1("\n\n");
a00233fc:	3c04a002 	lui	a0,0xa002
a0023400:	0c008b5c 	jal	a0022d70 <printf1>
a0023404:	24845278 	addiu	a0,a0,21112
        sed_printf1("%srypt finish!!(%d)\n",(op == RTK_ENC)? "Enc":"Dec",*length);
a0023408:	24020001 	li	v0,1
a002340c:	12420028 	beq	s2,v0,a00234b0 <rtk_rsa_op+0x244>
a0023410:	3c05a002 	lui	a1,0xa002
a0023414:	3c05a002 	lui	a1,0xa002
a0023418:	24a55248 	addiu	a1,a1,21064
a002341c:	96060000 	lhu	a2,0(s0)
a0023420:	3c04a002 	lui	a0,0xa002
a0023424:	0c008b5c 	jal	a0022d70 <printf1>
a0023428:	248456c8 	addiu	a0,a0,22216
        rstatus = STATUS_ERROR;
        sed_printf1("Have not set RSA key or DATA.\n");
    }

ERR_OUT:
    fact_status &= ~(RSA_KEY_SET|RSA_DATA_SET);
a002342c:	8e649c28 	lw	a0,-25560(s3)
a0023430:	2403ffcf 	li	v1,-49
    return rstatus;
}
a0023434:	8fbf002c 	lw	ra,44(sp)
        rstatus = STATUS_ERROR;
        sed_printf1("Have not set RSA key or DATA.\n");
    }

ERR_OUT:
    fact_status &= ~(RSA_KEY_SET|RSA_DATA_SET);
a0023438:	00831824 	and	v1,a0,v1
a002343c:	ae639c28 	sw	v1,-25560(s3)
    return rstatus;
}
a0023440:	8fb60028 	lw	s6,40(sp)
a0023444:	8fb50024 	lw	s5,36(sp)
a0023448:	8fb40020 	lw	s4,32(sp)
a002344c:	8fb3001c 	lw	s3,28(sp)
a0023450:	8fb20018 	lw	s2,24(sp)
a0023454:	8fb10014 	lw	s1,20(sp)
a0023458:	8fb00010 	lw	s0,16(sp)
a002345c:	00001021 	move	v0,zero
a0023460:	03e00008 	jr	ra
a0023464:	27bd0030 	addiu	sp,sp,48
    uint8_t rstatus = STATUS_OK;

    sed_printf1("RISCURS %s(%d)[fact_status=0x%08x]\n",
    			 __func__, __LINE__,fact_status);

	sed_printf1("RSA %srypt operation",(op == RTK_ENC)? "Enc":"Dec");
a0023468:	3c14a002 	lui	s4,0xa002
a002346c:	3c04a002 	lui	a0,0xa002
a0023470:	24845670 	addiu	a0,a0,22128
a0023474:	0c008b5c 	jal	a0022d70 <printf1>
a0023478:	2685524c 	addiu	a1,s4,21068
			rstatus = STATUS_ERROR;
			goto ERR_OUT;
		}
#endif

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
a002347c:	3c06806b 	lui	a2,0x806b
    			 __func__, __LINE__,fact_status);

	sed_printf1("RSA %srypt operation",(op == RTK_ENC)? "Enc":"Dec");

#ifdef DEBUG_RSA_FLOW
	rsa_data_len = 256;
a0023480:	3c15a003 	lui	s5,0xa003
			rstatus = STATUS_ERROR;
			goto ERR_OUT;
		}
#endif

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
a0023484:	3c058069 	lui	a1,0x8069
    			 __func__, __LINE__,fact_status);

	sed_printf1("RSA %srypt operation",(op == RTK_ENC)? "Enc":"Dec");

#ifdef DEBUG_RSA_FLOW
	rsa_data_len = 256;
a0023488:	24020100 	li	v0,256
			rstatus = STATUS_ERROR;
			goto ERR_OUT;
		}
#endif

        do_RSA(op|RSA_HW,RSA_IDATA_BUF,RSA_KEY_BUF,(unsigned int)response);
a002348c:	34c60020 	ori	a2,a2,0x20
a0023490:	24040081 	li	a0,129
a0023494:	02203821 	move	a3,s1
a0023498:	0c008758 	jal	a0021d60 <do_RSA>
a002349c:	a6a29c24 	sh	v0,-25564(s5)
        *length = rsa_data_len;
a00234a0:	96a29c24 	lhu	v0,-25564(s5)
a00234a4:	2685524c 	addiu	a1,s4,21068
a00234a8:	08008cc2 	j	a0023308 <rtk_rsa_op+0x9c>
a00234ac:	a6020000 	sh	v0,0(s0)
        sed_printf1("\n\nRSA %srypted Data string:\n",(op == RTK_ENC)? "Enc":"Dec");
        for(i=0;i<*length;i++){
            sed_printf1("%02x",response[i]);
        }
        sed_printf1("\n\n");
        sed_printf1("%srypt finish!!(%d)\n",(op == RTK_ENC)? "Enc":"Dec",*length);
a00234b0:	08008d07 	j	a002341c <rtk_rsa_op+0x1b0>
a00234b4:	24a5524c 	addiu	a1,a1,21068
            if((i%16)==0)
                sed_printf1("\n");
            sed_printf1("%02x ",response[i]);
        }

        sed_printf1("\n\nRSA %srypted Data string:\n",(op == RTK_ENC)? "Enc":"Dec");
a00234b8:	08008cec 	j	a00233b0 <rtk_rsa_op+0x144>
a00234bc:	24a5524c 	addiu	a1,a1,21068

a00234c0 <rsaDecrypt>:
 * @param length (output parameter) length of the response, if applicable.
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t rsaDecrypt(uint8_t* response, uint16_t* length)
{
	return rtk_rsa_op(RTK_DEC,response,length);
a00234c0:	00a03021 	move	a2,a1
a00234c4:	00802821 	move	a1,a0
a00234c8:	24040010 	li	a0,16
a00234cc:	08008c9b 	j	a002326c <rtk_rsa_op>
a00234d0:	00000000 	nop

a00234d4 <rsaEncrypt>:
 * @return status code. For status codes, see STATUS_* defines.
 */

uint8_t rsaEncrypt(uint8_t* response, uint16_t* length)
{
    return rtk_rsa_op(RTK_ENC,response,length);
a00234d4:	00a03021 	move	a2,a1
a00234d8:	00802821 	move	a1,a0
a00234dc:	24040001 	li	a0,1
a00234e0:	08008c9b 	j	a002326c <rtk_rsa_op>
a00234e4:	00000000 	nop

a00234e8 <disableTrigger>:

/**
 * Disable the output that is used as trigger (the same one previously enabled with enableTrigger())
 */
void disableTrigger(void)
{
a00234e8:	27bdffe8 	addiu	sp,sp,-24
a00234ec:	afbf0014 	sw	ra,20(sp)
    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
a00234f0:	3c04a002 	lui	a0,0xa002
a00234f4:	3c05a002 	lui	a1,0xa002
a00234f8:	248455ec 	addiu	a0,a0,21996
a00234fc:	24a557a8 	addiu	a1,a1,22440
a0023500:	0c008b5c 	jal	a0022d70 <printf1>
a0023504:	240600fa 	li	a2,250
    GPIO_pulse();
    //GPIO_toggle;
}
a0023508:	8fbf0014 	lw	ra,20(sp)
 * Disable the output that is used as trigger (the same one previously enabled with enableTrigger())
 */
void disableTrigger(void)
{
    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
    GPIO_pulse();
a002350c:	08009020 	j	a0024080 <GPIO_pulse>
a0023510:	27bd0018 	addiu	sp,sp,24

a0023514 <enableTrigger>:
 * the code that enables or disables the trigger is time constant and has a delay
 * (between calling the routine and performing the trigger operation) as small as
 * possible.
 */
void enableTrigger(void)
{
a0023514:	27bdffe8 	addiu	sp,sp,-24
a0023518:	afbf0014 	sw	ra,20(sp)
    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
a002351c:	3c04a002 	lui	a0,0xa002
a0023520:	3c05a002 	lui	a1,0xa002
a0023524:	248455ec 	addiu	a0,a0,21996
a0023528:	24a557b8 	addiu	a1,a1,22456
a002352c:	0c008b5c 	jal	a0022d70 <printf1>
a0023530:	240600f0 	li	a2,240
    GPIO_pulse();
    //GPIO_reset;
}
a0023534:	8fbf0014 	lw	ra,20(sp)
 * possible.
 */
void enableTrigger(void)
{
    sed_printf1("RISCURS %s(%d)\n", __func__, __LINE__);
    GPIO_pulse();
a0023538:	08009020 	j	a0024080 <GPIO_pulse>
a002353c:	27bd0018 	addiu	sp,sp,24

a0023540 <serial_recv>:
 *
 * @param data pointer to where to store the byte
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t serial_recv(uint8_t* data)
{
a0023540:	27bdffe8 	addiu	sp,sp,-24
a0023544:	afbf0014 	sw	ra,20(sp)
    uint8_t rstatus = STATUS_ERROR;
    if(rtk_getc(data,UART0_REG_BASE) == 0){
a0023548:	3c05b806 	lui	a1,0xb806
a002354c:	0c0091cd 	jal	a0024734 <rtk_getc>
a0023550:	34a52300 	ori	a1,a1,0x2300
        //sed_printf0("%s",data);
        //sed_printf1("%s: 0x%x\n", __func__,*data);
        rstatus = STATUS_OK;
    }
    return rstatus;
}
a0023554:	8fbf0014 	lw	ra,20(sp)
a0023558:	0002102b 	sltu	v0,zero,v0
a002355c:	03e00008 	jr	ra
a0023560:	27bd0018 	addiu	sp,sp,24

a0023564 <serial_send>:

 * @param data byte to send
 * @return status code. For status codes, see STATUS_* defines.
 */
uint8_t serial_send(uint8_t data)
{
a0023564:	27bdffe8 	addiu	sp,sp,-24
a0023568:	afbf0014 	sw	ra,20(sp)
    uint8_t rstatus = STATUS_OK;
    //sed_printf1("%s: 0x%x\n", __func__,data);
    rtk_putc(data,UART0_REG_BASE);
a002356c:	3c05b806 	lui	a1,0xb806
a0023570:	00042600 	sll	a0,a0,0x18
a0023574:	00042603 	sra	a0,a0,0x18
a0023578:	0c0091d8 	jal	a0024760 <rtk_putc>
a002357c:	34a52300 	ori	a1,a1,0x2300

    return rstatus;
}
a0023580:	8fbf0014 	lw	ra,20(sp)
a0023584:	00001021 	move	v0,zero
a0023588:	03e00008 	jr	ra
a002358c:	27bd0018 	addiu	sp,sp,24

a0023590 <T.38>:
    (array)[1] = (number) >> 16;
    (array)[2] = (number) >> 8;
    (array)[3] = (number);
}

static uint8_t serial_recv_buffer(uint8_t* buffer, int length) {
a0023590:	27bdffc0 	addiu	sp,sp,-64
a0023594:	afbf003c 	sw	ra,60(sp)
a0023598:	afb70038 	sw	s7,56(sp)
a002359c:	afb60034 	sw	s6,52(sp)
a00235a0:	afb50030 	sw	s5,48(sp)
a00235a4:	afb4002c 	sw	s4,44(sp)
a00235a8:	afb30028 	sw	s3,40(sp)
a00235ac:	afb20024 	sw	s2,36(sp)
a00235b0:	afb10020 	sw	s1,32(sp)
a00235b4:	afb0001c 	sw	s0,28(sp)
    int i;
    int cnt;
    unsigned char ch;
    uint32_t loop = 10000*length;
a00235b8:	24102710 	li	s0,10000
    (array)[1] = (number) >> 16;
    (array)[2] = (number) >> 8;
    (array)[3] = (number);
}

static uint8_t serial_recv_buffer(uint8_t* buffer, int length) {
a00235bc:	00808821 	move	s1,a0
    int i;
    int cnt;
    unsigned char ch;
    uint32_t loop = 10000*length;
a00235c0:	02300018 	mult	s1,s0
    uint8_t status = STATUS_ERROR;
    sed_printf1("RISCURS %s(%d)length=%d\n", __func__, __LINE__,length);
a00235c4:	3c04a002 	lui	a0,0xa002
a00235c8:	3c05a002 	lui	a1,0xa002
a00235cc:	248457e0 	addiu	a0,a0,22496
a00235d0:	24a55a70 	addiu	a1,a1,23152
a00235d4:	24060032 	li	a2,50
a00235d8:	02203821 	move	a3,s1

    cnt = 0;
    while( loop--){
        if(serial_recv(&ch) == 0){
a00235dc:	27b30010 	addiu	s3,sp,16
    int i;
    int cnt;
    unsigned char ch;
    uint32_t loop = 10000*length;
    uint8_t status = STATUS_ERROR;
    sed_printf1("RISCURS %s(%d)length=%d\n", __func__, __LINE__,length);
a00235e0:	00009021 	move	s2,zero

    cnt = 0;
    while( loop--){
        if(serial_recv(&ch) == 0){
            buffer[cnt] = ch;
a00235e4:	3c148060 	lui	s4,0x8060
    int i;
    int cnt;
    unsigned char ch;
    uint32_t loop = 10000*length;
    uint8_t status = STATUS_ERROR;
    sed_printf1("RISCURS %s(%d)length=%d\n", __func__, __LINE__,length);
a00235e8:	0c008b5c 	jal	a0022d70 <printf1>
a00235ec:	00008012 	mflo	s0

    cnt = 0;
    while( loop--){
a00235f0:	1200000c 	beqz	s0,a0023624 <T.38+0x94>
a00235f4:	02602021 	move	a0,s3
        if(serial_recv(&ch) == 0){
a00235f8:	0c008d50 	jal	a0023540 <serial_recv>
a00235fc:	00000000 	nop
a0023600:	14400005 	bnez	v0,a0023618 <T.38+0x88>
a0023604:	02921821 	addu	v1,s4,s2
            buffer[cnt] = ch;
a0023608:	93a20010 	lbu	v0,16(sp)
            //sed_printf1("buffer[%d]=%x\n",cnt,buffer[cnt]);
            cnt+=1;
a002360c:	26520001 	addiu	s2,s2,1
            if(cnt == length){
a0023610:	1232003b 	beq	s1,s2,a0023700 <T.38+0x170>
a0023614:	a0620000 	sb	v0,0(v1)
a0023618:	2610ffff 	addiu	s0,s0,-1
    uint32_t loop = 10000*length;
    uint8_t status = STATUS_ERROR;
    sed_printf1("RISCURS %s(%d)length=%d\n", __func__, __LINE__,length);

    cnt = 0;
    while( loop--){
a002361c:	1600fff6 	bnez	s0,a00235f8 <T.38+0x68>
a0023620:	02602021 	move	a0,s3
a0023624:	02408821 	move	s1,s2
a0023628:	24160001 	li	s6,1
        if (status != STATUS_OK)
            return status;
    }
#endif

    for (i = 0; i < cnt; i++) {
a002362c:	1a200036 	blez	s1,a0023708 <T.38+0x178>
a0023630:	3c15a002 	lui	s5,0xa002
a0023634:	3c17a002 	lui	s7,0xa002
        if((i%8)==0){
            sed_printf1("\n");
            sed_printf1("%04x-%04x : ",i,i+7);
        }
        sed_printf1("0x%02x ", buffer[i]);
a0023638:	3c13a002 	lui	s3,0xa002
#endif

    for (i = 0; i < cnt; i++) {
        if((i%8)==0){
            sed_printf1("\n");
            sed_printf1("%04x-%04x : ",i,i+7);
a002363c:	26b557fc 	addiu	s5,s5,22524
        }
        sed_printf1("0x%02x ", buffer[i]);
a0023640:	2673580c 	addiu	s3,s3,22540
        if (status != STATUS_OK)
            return status;
    }
#endif

    for (i = 0; i < cnt; i++) {
a0023644:	00008021 	move	s0,zero
        if((i%8)==0){
            sed_printf1("\n");
a0023648:	26f458bc 	addiu	s4,s7,22716
            sed_printf1("%04x-%04x : ",i,i+7);
        }
        sed_printf1("0x%02x ", buffer[i]);
a002364c:	08008d9c 	j	a0023670 <T.38+0xe0>
a0023650:	3c128060 	lui	s2,0x8060
a0023654:	90450000 	lbu	a1,0(v0)
        if (status != STATUS_OK)
            return status;
    }
#endif

    for (i = 0; i < cnt; i++) {
a0023658:	26100001 	addiu	s0,s0,1
        if((i%8)==0){
            sed_printf1("\n");
            sed_printf1("%04x-%04x : ",i,i+7);
        }
        sed_printf1("0x%02x ", buffer[i]);
a002365c:	0c008b5c 	jal	a0022d70 <printf1>
a0023660:	02602021 	move	a0,s3
        if (status != STATUS_OK)
            return status;
    }
#endif

    for (i = 0; i < cnt; i++) {
a0023664:	0211102a 	slt	v0,s0,s1
a0023668:	10400012 	beqz	v0,a00236b4 <T.38+0x124>
a002366c:	00000000 	nop
        if((i%8)==0){
a0023670:	32020007 	andi	v0,s0,0x7
a0023674:	1440fff7 	bnez	v0,a0023654 <T.38+0xc4>
a0023678:	02121021 	addu	v0,s0,s2
            sed_printf1("\n");
a002367c:	0c008b5c 	jal	a0022d70 <printf1>
a0023680:	02802021 	move	a0,s4
            sed_printf1("%04x-%04x : ",i,i+7);
a0023684:	02002821 	move	a1,s0
a0023688:	26060007 	addiu	a2,s0,7
a002368c:	0c008b5c 	jal	a0022d70 <printf1>
a0023690:	02a02021 	move	a0,s5
        }
        sed_printf1("0x%02x ", buffer[i]);
a0023694:	02121021 	addu	v0,s0,s2
a0023698:	90450000 	lbu	a1,0(v0)
        if (status != STATUS_OK)
            return status;
    }
#endif

    for (i = 0; i < cnt; i++) {
a002369c:	26100001 	addiu	s0,s0,1
        if((i%8)==0){
            sed_printf1("\n");
            sed_printf1("%04x-%04x : ",i,i+7);
        }
        sed_printf1("0x%02x ", buffer[i]);
a00236a0:	0c008b5c 	jal	a0022d70 <printf1>
a00236a4:	02602021 	move	a0,s3
        if (status != STATUS_OK)
            return status;
    }
#endif

    for (i = 0; i < cnt; i++) {
a00236a8:	0211102a 	slt	v0,s0,s1
a00236ac:	1440fff1 	bnez	v0,a0023674 <T.38+0xe4>
a00236b0:	32020007 	andi	v0,s0,0x7
            sed_printf1("\n");
            sed_printf1("%04x-%04x : ",i,i+7);
        }
        sed_printf1("0x%02x ", buffer[i]);
    }
    sed_printf1("\n");
a00236b4:	0c008b5c 	jal	a0022d70 <printf1>
a00236b8:	26e458bc 	addiu	a0,s7,22716

    if(status){
a00236bc:	12c00005 	beqz	s6,a00236d4 <T.38+0x144>
a00236c0:	02c01021 	move	v0,s6
        sed_printf1("buffer data lose!!!");
a00236c4:	3c04a002 	lui	a0,0xa002
a00236c8:	0c008b5c 	jal	a0022d70 <printf1>
a00236cc:	24845814 	addiu	a0,a0,22548
    }

    return status;
}
a00236d0:	02c01021 	move	v0,s6
a00236d4:	8fbf003c 	lw	ra,60(sp)
a00236d8:	8fb70038 	lw	s7,56(sp)
a00236dc:	8fb60034 	lw	s6,52(sp)
a00236e0:	8fb50030 	lw	s5,48(sp)
a00236e4:	8fb4002c 	lw	s4,44(sp)
a00236e8:	8fb30028 	lw	s3,40(sp)
a00236ec:	8fb20024 	lw	s2,36(sp)
a00236f0:	8fb10020 	lw	s1,32(sp)
a00236f4:	8fb0001c 	lw	s0,28(sp)
a00236f8:	03e00008 	jr	ra
a00236fc:	27bd0040 	addiu	sp,sp,64
    while( loop--){
        if(serial_recv(&ch) == 0){
            buffer[cnt] = ch;
            //sed_printf1("buffer[%d]=%x\n",cnt,buffer[cnt]);
            cnt+=1;
            if(cnt == length){
a0023700:	08008d8b 	j	a002362c <T.38+0x9c>
a0023704:	0000b021 	move	s6,zero
a0023708:	08008dad 	j	a00236b4 <T.38+0x124>
a002370c:	3c17a002 	lui	s7,0xa002

a0023710 <testapp>:
 *
 * The test application must be the only process running in a single threaded
 * context. This is required so that acquired measurements are not influenced
 * by any schedulers.
 */
void testapp(void) {
a0023710:	27bdffa0 	addiu	sp,sp,-96
a0023714:	afbf005c 	sw	ra,92(sp)
a0023718:	afbe0058 	sw	s8,88(sp)
a002371c:	afb70054 	sw	s7,84(sp)
a0023720:	afb60050 	sw	s6,80(sp)
a0023724:	afb5004c 	sw	s5,76(sp)
a0023728:	afb40048 	sw	s4,72(sp)
a002372c:	afb30044 	sw	s3,68(sp)
a0023730:	afb20040 	sw	s2,64(sp)
a0023734:	afb1003c 	sw	s1,60(sp)
a0023738:	afb00038 	sw	s0,56(sp)
    //uint8_t rspBuf[BUFLEN]; // Buffer that contains the response data
    uint8_t *cmdBuf; // Buffer that contains the received data
    uint8_t *rspBuf; // Buffer that contains the response data
    uint8_t status; // Status byte (0 = OK, >0 = Error)

    sed_printf0("Riscure %s %s\n", __TIME__, __DATE__);
a002373c:	3c12a002 	lui	s2,0xa002
a0023740:	3c11a002 	lui	s1,0xa002
a0023744:	3c10a002 	lui	s0,0xa002
a0023748:	26445828 	addiu	a0,s2,22568
a002374c:	26255838 	addiu	a1,s1,22584
a0023750:	0c008b6c 	jal	a0022db0 <printf>
a0023754:	26065844 	addiu	a2,s0,22596
    sed_printf1("Riscure %s %s\n", __TIME__, __DATE__);
a0023758:	26445828 	addiu	a0,s2,22568
a002375c:	26255838 	addiu	a1,s1,22584
a0023760:	0c008b5c 	jal	a0022d70 <printf1>
a0023764:	26065844 	addiu	a2,s0,22596
        sed_printf("[%03x]=%03x ",i,cmdBuf[i]);
    }
    sed_printf("\n");
#endif  //?#ifdef DDR_TEST_ENABLE

    initSerial();
a0023768:	0c008c94 	jal	a0023250 <initSerial>
a002376c:	3c15a002 	lui	s5,0xa002
    initBoard();
a0023770:	0c008c77 	jal	a00231dc <initBoard>
a0023774:	3c17a002 	lui	s7,0xa002

    sed_printf1("%s(%d)",__func__,__LINE__);
a0023778:	3c04a002 	lui	a0,0xa002
a002377c:	24845850 	addiu	a0,a0,22608
a0023780:	26a55a68 	addiu	a1,s5,23144
a0023784:	0c008b5c 	jal	a0022d70 <printf1>
a0023788:	240600e7 	li	a2,231
static uint8_t serial_send_buffer(uint8_t* buffer, int length) {
    uint8_t curStatus = STATUS_OK;
    int i;

    for (i = 0; i < length; i++) {
        curStatus |= serial_send(buffer[i]);
a002378c:	3c128061 	lui	s2,0x8061
a0023790:	26f758d4 	addiu	s7,s7,22740
a0023794:	27b40018 	addiu	s4,sp,24
a0023798:	27b0001c 	addiu	s0,sp,28
a002379c:	3c16a002 	lui	s6,0xa002
    uint8_t cnt = 0;
    uint32_t loop = 50000;

    status = STATUS_ERROR;
    //sed_printf1("%s(%d)\n", __func__, __LINE__);
    while(loop--){
a00237a0:	2411ffff 	li	s1,-1

    sed_printf1("%s(%d)",__func__,__LINE__);
    while (1) {
        uint8_t recvStatus = STATUS_OK;

        recvStatus = serial_recv(&cmd);
a00237a4:	0c008d50 	jal	a0023540 <serial_recv>
a00237a8:	02802021 	move	a0,s4
        if (recvStatus == STATUS_OK) {
a00237ac:	1440fffd 	bnez	v0,a00237a4 <testapp+0x94>
a00237b0:	341ec34f 	li	s8,0xc34f
a00237b4:	afb30028 	sw	s3,40(sp)
a00237b8:	08008df7 	j	a00237dc <testapp+0xcc>
a00237bc:	00409821 	move	s3,v0
    //sed_printf1("%s(%d)\n", __func__, __LINE__);
    while(loop--){
        status = serial_recv(&tmp);
        if (status == STATUS_OK){
            if(cnt == 0){
                *value = (tmp << 8);
a00237c0:	93a3001c 	lbu	v1,28(sp)
a00237c4:	24130001 	li	s3,1
a00237c8:	00031a00 	sll	v1,v1,0x8
a00237cc:	afa30028 	sw	v1,40(sp)
    uint8_t cnt = 0;
    uint32_t loop = 50000;

    status = STATUS_ERROR;
    //sed_printf1("%s(%d)\n", __func__, __LINE__);
    while(loop--){
a00237d0:	27deffff 	addiu	s8,s8,-1
a00237d4:	13d100fa 	beq	s8,s1,a0023bc0 <testapp+0x4b0>
a00237d8:	00000000 	nop
        status = serial_recv(&tmp);
a00237dc:	0c008d50 	jal	a0023540 <serial_recv>
a00237e0:	02002021 	move	a0,s0
        if (status == STATUS_OK){
a00237e4:	1440fffa 	bnez	v0,a00237d0 <testapp+0xc0>
a00237e8:	00000000 	nop
            if(cnt == 0){
a00237ec:	1260fff4 	beqz	s3,a00237c0 <testapp+0xb0>
a00237f0:	00000000 	nop
a00237f4:	8fb30028 	lw	s3,40(sp)
                *value = (tmp << 8);
                cnt +=1;
                //sed_printf1("%s(%d)val=%d\n", __func__, __LINE__,*value);
            }else{
                *value |= tmp;
a00237f8:	93a2001c 	lbu	v0,28(sp)
a00237fc:	00000000 	nop
a0023800:	02629825 	or	s3,s3,v0
                //sed_printf1("%s(%d)val=%d\n", __func__, __LINE__,*value);
                break;
            }
        }
    }
    if(loop==0)
a0023804:	13c0ffe7 	beqz	s8,a00237a4 <testapp+0x94>
a0023808:	3273ffff 	andi	s3,s3,0xffff
        if (recvStatus == STATUS_OK) {
            recvStatus |= serial_recv_uint16_t(&cmdLen);
        }

        if (recvStatus == STATUS_OK) {
            sed_printf1("%s(%d)cmd=0x%x(len=%u [0x%x])\n",
a002380c:	93a70018 	lbu	a3,24(sp)
a0023810:	26c45858 	addiu	a0,s6,22616
a0023814:	26a55a68 	addiu	a1,s5,23144
a0023818:	240600f2 	li	a2,242
a002381c:	afb30010 	sw	s3,16(sp)
a0023820:	0c008b5c 	jal	a0022d70 <printf1>
a0023824:	afb30014 	sw	s3,20(sp)
                         __func__,__LINE__,cmd,cmdLen,cmdLen);
            status = STATUS_OK;
            rspLen = 0;

            // Handle command
            switch (cmd) {
a0023828:	93a20018 	lbu	v0,24(sp)
a002382c:	00000000 	nop
a0023830:	2442fff0 	addiu	v0,v0,-16
a0023834:	304200ff 	andi	v0,v0,0xff
a0023838:	2c430065 	sltiu	v1,v0,101
a002383c:	1460001b 	bnez	v1,a00238ac <testapp+0x19c>
a0023840:	a7a0001a 	sh	zero,26(sp)
a0023844:	24030001 	li	v1,1
a0023848:	00002021 	move	a0,zero
a002384c:	241e0002 	li	s8,2
}

static uint8_t serial_send_uint16_t(uint16_t value) {
    uint8_t curStatus;

    curStatus = serial_send((value >> 8) & 0xFF);
a0023850:	0c008d59 	jal	a0023564 <serial_send>
a0023854:	afa30030 	sw	v1,48(sp)
    curStatus |= serial_send(value & 0xFF);
a0023858:	8fa30030 	lw	v1,48(sp)
a002385c:	0c008d59 	jal	a0023564 <serial_send>
a0023860:	00602021 	move	a0,v1
                break;
            }

            // Send the response
            serial_send_uint16_t(rspLen + 1);
            serial_send(status);
a0023864:	0c008d59 	jal	a0023564 <serial_send>
a0023868:	03c02021 	move	a0,s8
            serial_send_buffer(rspBuf, rspLen);
a002386c:	97a2001a 	lhu	v0,26(sp)
a0023870:	00000000 	nop

static uint8_t serial_send_buffer(uint8_t* buffer, int length) {
    uint8_t curStatus = STATUS_OK;
    int i;

    for (i = 0; i < length; i++) {
a0023874:	1040ffcb 	beqz	v0,a00237a4 <testapp+0x94>
a0023878:	0000f021 	move	s8,zero
a002387c:	afb30028 	sw	s3,40(sp)
a0023880:	00409821 	move	s3,v0
        curStatus |= serial_send(buffer[i]);
a0023884:	03d21021 	addu	v0,s8,s2
a0023888:	90440000 	lbu	a0,0(v0)
a002388c:	0c008d59 	jal	a0023564 <serial_send>
a0023890:	27de0001 	addiu	s8,s8,1

static uint8_t serial_send_buffer(uint8_t* buffer, int length) {
    uint8_t curStatus = STATUS_OK;
    int i;

    for (i = 0; i < length; i++) {
a0023894:	03d3102a 	slt	v0,s8,s3
a0023898:	1440fffb 	bnez	v0,a0023888 <testapp+0x178>
a002389c:	03d21021 	addu	v0,s8,s2
a00238a0:	8fb30028 	lw	s3,40(sp)
a00238a4:	08008de9 	j	a00237a4 <testapp+0x94>
a00238a8:	00000000 	nop
                         __func__,__LINE__,cmd,cmdLen,cmdLen);
            status = STATUS_OK;
            rspLen = 0;

            // Handle command
            switch (cmd) {
a00238ac:	00021080 	sll	v0,v0,0x2
a00238b0:	02e21021 	addu	v0,s7,v0
a00238b4:	8c420000 	lw	v0,0(v0)
a00238b8:	00000000 	nop
a00238bc:	00400008 	jr	v0
a00238c0:	00000000 	nop
            case CMD_TEST:  //0x74
                rspLen = 4;
a00238c4:	24020004 	li	v0,4
a00238c8:	a7a2001a 	sh	v0,26(sp)
                rspBuf[0] = 'O';
                rspBuf[1] = 'K';
a00238cc:	3c038061 	lui	v1,0x8061

            // Handle command
            switch (cmd) {
            case CMD_TEST:  //0x74
                rspLen = 4;
                rspBuf[0] = 'O';
a00238d0:	2402004f 	li	v0,79
a00238d4:	a2420000 	sb	v0,0(s2)
                rspBuf[1] = 'K';
a00238d8:	34630001 	ori	v1,v1,0x1
a00238dc:	2402004b 	li	v0,75
                rspBuf[2] = '\r';
a00238e0:	3c048061 	lui	a0,0x8061
            // Handle command
            switch (cmd) {
            case CMD_TEST:  //0x74
                rspLen = 4;
                rspBuf[0] = 'O';
                rspBuf[1] = 'K';
a00238e4:	a0620000 	sb	v0,0(v1)
                rspBuf[2] = '\r';
a00238e8:	34840002 	ori	a0,a0,0x2
a00238ec:	2402000d 	li	v0,13
                rspBuf[3] = '\n';
a00238f0:	3c058061 	lui	a1,0x8061
            switch (cmd) {
            case CMD_TEST:  //0x74
                rspLen = 4;
                rspBuf[0] = 'O';
                rspBuf[1] = 'K';
                rspBuf[2] = '\r';
a00238f4:	a0820000 	sb	v0,0(a0)
                rspBuf[3] = '\n';
a00238f8:	34a50003 	ori	a1,a1,0x3
a00238fc:	2402000a 	li	v0,10
a0023900:	a0a20000 	sb	v0,0(a1)
a0023904:	24030005 	li	v1,5
a0023908:	00002021 	move	a0,zero
                break;
a002390c:	08008e14 	j	a0023850 <testapp+0x140>
a0023910:	0000f021 	move	s8,zero
                    status = STATUS_COMM_ERR;

                break;

            case CMD_OTP_WRITE:    //0x52
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK){
a0023914:	0c008d64 	jal	a0023590 <T.38>
a0023918:	02602021 	move	a0,s3
a002391c:	1440000f 	bnez	v0,a002395c <testapp+0x24c>
a0023920:	241e0004 	li	s8,4
                    uint8_t* 	ptr;
                    //uint8_t* 	dptr;
					uint16_t 	dlen;
					uint16_t* 	otp_ary;

                    dlen = (uint16_t)cmdBuf[0]<<8|cmdBuf[1];
a0023924:	3c078060 	lui	a3,0x8060
a0023928:	3c088060 	lui	t0,0x8060
a002392c:	90e30000 	lbu	v1,0(a3)
a0023930:	35080001 	ori	t0,t0,0x1
a0023934:	91020000 	lbu	v0,0(t0)
a0023938:	00031a00 	sll	v1,v1,0x8
a002393c:	00621825 	or	v1,v1,v0

                    if(dlen> 1024){
a0023940:	2c620401 	sltiu	v0,v1,1025
a0023944:	144000a3 	bnez	v0,a0023bd4 <testapp+0x4c4>
a0023948:	afa30028 	sw	v1,40(sp)
						sed_printf1("OTP length over 1K\n");
a002394c:	3c02a002 	lui	v0,0xa002
a0023950:	0c008b5c 	jal	a0022d70 <printf1>
a0023954:	24445878 	addiu	a0,v0,22648
a0023958:	241e0001 	li	s8,1
                break;
            case CMD_RSA_ENCRYPT:   //0x42
                status = rsaEncrypt(rspBuf, &rspLen);
                break;
            case CMD_RSA_DECRYPT:   //0x43
                status = rsaDecrypt(rspBuf, &rspLen);
a002395c:	97a4001a 	lhu	a0,26(sp)
a0023960:	00000000 	nop
a0023964:	24840001 	addiu	a0,a0,1
a0023968:	3084ffff 	andi	a0,a0,0xffff
a002396c:	308300ff 	andi	v1,a0,0xff
                break;
a0023970:	08008e14 	j	a0023850 <testapp+0x140>
a0023974:	00042202 	srl	a0,a0,0x8
                    status = STATUS_COMM_ERR;
                break;

                // OTP related
            case CMD_OTP_READ:     //0x51
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK){
a0023978:	0c008d64 	jal	a0023590 <T.38>
a002397c:	02602021 	move	a0,s3
a0023980:	1440fff6 	bnez	v0,a002395c <testapp+0x24c>
a0023984:	241e0004 	li	s8,4
                     **/
                    uint8_t* ptr;
                    uint16_t dlen;
                    uint16_t* otp_ary;

                    dlen = ((uint16_t)cmdBuf[0]<<8|cmdBuf[1]);
a0023988:	3c068060 	lui	a2,0x8060
a002398c:	3c078060 	lui	a3,0x8060
a0023990:	90c80000 	lbu	t0,0(a2)
a0023994:	34e70001 	ori	a3,a3,0x1
a0023998:	90e20000 	lbu	v0,0(a3)
a002399c:	00084200 	sll	t0,t0,0x8
a00239a0:	01024025 	or	t0,t0,v0
                    if(dlen> 1024){
a00239a4:	2d020401 	sltiu	v0,t0,1025
a00239a8:	144000c6 	bnez	v0,a0023cc4 <testapp+0x5b4>
a00239ac:	3c02a002 	lui	v0,0xa002
                        sed_printf1("OTP length over 1K\n");
a00239b0:	3c08a002 	lui	t0,0xa002
a00239b4:	0c008b5c 	jal	a0022d70 <printf1>
a00239b8:	25045878 	addiu	a0,t0,22648
a00239bc:	08008e57 	j	a002395c <testapp+0x24c>
a00239c0:	241e0001 	li	s8,1
                rspBuf[2] = '\r';
                rspBuf[3] = '\n';
                break;

            case CMD_LOOP:  //0x50
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a00239c4:	0c008d64 	jal	a0023590 <T.38>
a00239c8:	02602021 	move	a0,s3
a00239cc:	1440ffe3 	bnez	v0,a002395c <testapp+0x24c>
a00239d0:	241e0004 	li	s8,4
                        uint16_t* out_length) {
    // These variables should be declared volatile to prevent the compiler from optimizing out the loop!!
    volatile uint32_t counter = 0;
    volatile uint32_t ceiling = 0;

    if (in_length != 4) {
a00239d4:	24020004 	li	v0,4
static uint8_t loopTest(uint8_t* in_buf,
                        uint16_t in_length,
                        uint8_t* out_buf,
                        uint16_t* out_length) {
    // These variables should be declared volatile to prevent the compiler from optimizing out the loop!!
    volatile uint32_t counter = 0;
a00239d8:	afa0001c 	sw	zero,28(sp)
    volatile uint32_t ceiling = 0;
a00239dc:	afa00020 	sw	zero,32(sp)

    if (in_length != 4) {
a00239e0:	126200e1 	beq	s3,v0,a0023d68 <testapp+0x658>
a00239e4:	24030001 	li	v1,1
        *out_length = 0;
a00239e8:	a7a0001a 	sh	zero,26(sp)
a00239ec:	00002021 	move	a0,zero
a00239f0:	08008e14 	j	a0023850 <testapp+0x140>
a00239f4:	241e0001 	li	s8,1
                break;
            case CMD_RSA_ENCRYPT:   //0x42
                status = rsaEncrypt(rspBuf, &rspLen);
                break;
            case CMD_RSA_DECRYPT:   //0x43
                status = rsaDecrypt(rspBuf, &rspLen);
a00239f8:	3c048061 	lui	a0,0x8061
a00239fc:	0c008d30 	jal	a00234c0 <rsaDecrypt>
a0023a00:	27a5001a 	addiu	a1,sp,26
a0023a04:	08008e57 	j	a002395c <testapp+0x24c>
a0023a08:	0040f021 	move	s8,v0
                    status = rsaSetData(cmdBuf, cmdLen);
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_RSA_ENCRYPT:   //0x42
                status = rsaEncrypt(rspBuf, &rspLen);
a0023a0c:	3c048061 	lui	a0,0x8061
a0023a10:	0c008d35 	jal	a00234d4 <rsaEncrypt>
a0023a14:	27a5001a 	addiu	a1,sp,26
                break;
            case CMD_RSA_DECRYPT:   //0x43
                status = rsaDecrypt(rspBuf, &rspLen);
a0023a18:	08008e57 	j	a002395c <testapp+0x24c>
a0023a1c:	0040f021 	move	s8,v0
                    status = rsaSetKey(cmdBuf, cmdLen);
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_RSA_SET_DATA:  //0x41
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a0023a20:	0c008d64 	jal	a0023590 <T.38>
a0023a24:	02602021 	move	a0,s3
a0023a28:	10400060 	beqz	v0,a0023bac <testapp+0x49c>
a0023a2c:	00000000 	nop
a0023a30:	08008e57 	j	a002395c <testapp+0x24c>
a0023a34:	241e0004 	li	s8,4
                status = aesDecrypt(rspBuf, &rspLen);
                break;

                // RSA related
            case CMD_RSA_SET_KEY:   //0x40
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a0023a38:	0c008d64 	jal	a0023590 <T.38>
a0023a3c:	02602021 	move	a0,s3
a0023a40:	1440fffb 	bnez	v0,a0023a30 <testapp+0x320>
a0023a44:	00000000 	nop
                    status = rsaSetKey(cmdBuf, cmdLen);
a0023a48:	3c048060 	lui	a0,0x8060
a0023a4c:	0c008b8e 	jal	a0022e38 <rsaSetKey>
a0023a50:	02602821 	move	a1,s3
a0023a54:	08008e57 	j	a002395c <testapp+0x24c>
a0023a58:	0040f021 	move	s8,v0
                break;
            case CMD_AES_ENCRYPT:   //0x32
                status = aesEncrypt(rspBuf, &rspLen);
                break;
            case CMD_AES_DECRYPT:   //0x33
                status = aesDecrypt(rspBuf, &rspLen);
a0023a5c:	3c048061 	lui	a0,0x8061
a0023a60:	0c008bdd 	jal	a0022f74 <aesDecrypt>
a0023a64:	27a5001a 	addiu	a1,sp,26
a0023a68:	08008e57 	j	a002395c <testapp+0x24c>
a0023a6c:	0040f021 	move	s8,v0
                    status = aesSetData(cmdBuf, cmdLen);
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_AES_ENCRYPT:   //0x32
                status = aesEncrypt(rspBuf, &rspLen);
a0023a70:	3c048061 	lui	a0,0x8061
a0023a74:	0c008be8 	jal	a0022fa0 <aesEncrypt>
a0023a78:	27a5001a 	addiu	a1,sp,26
a0023a7c:	08008e57 	j	a002395c <testapp+0x24c>
a0023a80:	0040f021 	move	s8,v0
                    status = aesSetKey(cmdBuf, cmdLen);
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_AES_SET_DATA:  //0x31
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a0023a84:	0c008d64 	jal	a0023590 <T.38>
a0023a88:	02602021 	move	a0,s3
a0023a8c:	1440ffe8 	bnez	v0,a0023a30 <testapp+0x320>
a0023a90:	00000000 	nop
                    status = aesSetData(cmdBuf, cmdLen);
a0023a94:	3c048060 	lui	a0,0x8060
a0023a98:	0c008bfe 	jal	a0022ff8 <aesSetData>
a0023a9c:	02602821 	move	a1,s3
a0023aa0:	08008e57 	j	a002395c <testapp+0x24c>
a0023aa4:	0040f021 	move	s8,v0
                status = tdesDecrypt(rspBuf, &rspLen);
                break;

                // AES related
            case CMD_AES_SET_KEY:   //0x30
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a0023aa8:	0c008d64 	jal	a0023590 <T.38>
a0023aac:	02602021 	move	a0,s3
a0023ab0:	1440ffdf 	bnez	v0,a0023a30 <testapp+0x320>
a0023ab4:	00000000 	nop
                    status = aesSetKey(cmdBuf, cmdLen);
a0023ab8:	3c048060 	lui	a0,0x8060
a0023abc:	0c008bf3 	jal	a0022fcc <aesSetKey>
a0023ac0:	02602821 	move	a1,s3
a0023ac4:	08008e57 	j	a002395c <testapp+0x24c>
a0023ac8:	0040f021 	move	s8,v0
                break;
            case CMD_TDES_ENCRYPT:  //0x22
                status = tdesEncrypt(rspBuf, &rspLen);
                break;
            case CMD_TDES_DECRYPT:	//0x23
                status = tdesDecrypt(rspBuf, &rspLen);
a0023acc:	3c048061 	lui	a0,0x8061
a0023ad0:	0c008c09 	jal	a0023024 <tdesDecrypt>
a0023ad4:	27a5001a 	addiu	a1,sp,26
a0023ad8:	08008e57 	j	a002395c <testapp+0x24c>
a0023adc:	0040f021 	move	s8,v0
                    status = tdesSetData(cmdBuf, cmdLen);
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_TDES_ENCRYPT:  //0x22
                status = tdesEncrypt(rspBuf, &rspLen);
a0023ae0:	3c048061 	lui	a0,0x8061
a0023ae4:	0c008c14 	jal	a0023050 <tdesEncrypt>
a0023ae8:	27a5001a 	addiu	a1,sp,26
a0023aec:	08008e57 	j	a002395c <testapp+0x24c>
a0023af0:	0040f021 	move	s8,v0
                    status = tdesSetKey(cmdBuf, cmdLen);
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_TDES_SET_DATA: //0x21
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a0023af4:	0c008d64 	jal	a0023590 <T.38>
a0023af8:	02602021 	move	a0,s3
a0023afc:	1440ffcc 	bnez	v0,a0023a30 <testapp+0x320>
a0023b00:	00000000 	nop
                    status = tdesSetData(cmdBuf, cmdLen);
a0023b04:	3c048060 	lui	a0,0x8060
a0023b08:	0c008c2a 	jal	a00230a8 <tdesSetData>
a0023b0c:	02602821 	move	a1,s3
a0023b10:	08008e57 	j	a002395c <testapp+0x24c>
a0023b14:	0040f021 	move	s8,v0
                status = desDecrypt(rspBuf, &rspLen);
                break;

                // TDES related
            case CMD_TDES_SET_KEY:  //0x20
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a0023b18:	0c008d64 	jal	a0023590 <T.38>
a0023b1c:	02602021 	move	a0,s3
a0023b20:	1440ffc3 	bnez	v0,a0023a30 <testapp+0x320>
a0023b24:	00000000 	nop
                    status = tdesSetKey(cmdBuf, cmdLen);
a0023b28:	3c048060 	lui	a0,0x8060
a0023b2c:	0c008c1f 	jal	a002307c <tdesSetKey>
a0023b30:	02602821 	move	a1,s3
a0023b34:	08008e57 	j	a002395c <testapp+0x24c>
a0023b38:	0040f021 	move	s8,v0
                    status = desSetData(cmdBuf, cmdLen);
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_DES_ENCRYPT:   //0x12
                status = desEncrypt(rspBuf, &rspLen);
a0023b3c:	3c048061 	lui	a0,0x8061
a0023b40:	0c008c40 	jal	a0023100 <desEncrypt>
a0023b44:	27a5001a 	addiu	a1,sp,26
a0023b48:	08008e57 	j	a002395c <testapp+0x24c>
a0023b4c:	0040f021 	move	s8,v0
                break;
            case CMD_DES_DECRYPT:   //0x13
                status = desDecrypt(rspBuf, &rspLen);
a0023b50:	3c048061 	lui	a0,0x8061
a0023b54:	0c008c35 	jal	a00230d4 <desDecrypt>
a0023b58:	27a5001a 	addiu	a1,sp,26
a0023b5c:	08008e57 	j	a002395c <testapp+0x24c>
a0023b60:	0040f021 	move	s8,v0

                break;

                // DES related
            case CMD_DES_SET_KEY:   //0x10
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a0023b64:	0c008d64 	jal	a0023590 <T.38>
a0023b68:	02602021 	move	a0,s3
a0023b6c:	1440ffb0 	bnez	v0,a0023a30 <testapp+0x320>
a0023b70:	00000000 	nop
                    status = desSetKey(cmdBuf, cmdLen);
a0023b74:	3c048060 	lui	a0,0x8060
a0023b78:	0c008c4b 	jal	a002312c <desSetKey>
a0023b7c:	02602821 	move	a1,s3
a0023b80:	08008e57 	j	a002395c <testapp+0x24c>
a0023b84:	0040f021 	move	s8,v0
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_DES_SET_DATA:  //0x11
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
a0023b88:	0c008d64 	jal	a0023590 <T.38>
a0023b8c:	02602021 	move	a0,s3
a0023b90:	1440ffa7 	bnez	v0,a0023a30 <testapp+0x320>
a0023b94:	00000000 	nop
                    status = desSetData(cmdBuf, cmdLen);
a0023b98:	3c048060 	lui	a0,0x8060
a0023b9c:	0c008c56 	jal	a0023158 <desSetData>
a0023ba0:	02602821 	move	a1,s3
a0023ba4:	08008e57 	j	a002395c <testapp+0x24c>
a0023ba8:	0040f021 	move	s8,v0
                else
                    status = STATUS_COMM_ERR;
                break;
            case CMD_RSA_SET_DATA:  //0x41
                if (serial_recv_buffer(cmdBuf, cmdLen) == STATUS_OK)
                    status = rsaSetData(cmdBuf, cmdLen);
a0023bac:	3c048060 	lui	a0,0x8060
a0023bb0:	0c008bb6 	jal	a0022ed8 <rsaSetData>
a0023bb4:	02602821 	move	a1,s3
a0023bb8:	08008e57 	j	a002395c <testapp+0x24c>
a0023bbc:	0040f021 	move	s8,v0
a0023bc0:	8fb30028 	lw	s3,40(sp)
        recvStatus = serial_recv(&cmd);
        if (recvStatus == STATUS_OK) {
            recvStatus |= serial_recv_uint16_t(&cmdLen);
        }

        if (recvStatus == STATUS_OK) {
a0023bc4:	1040ff11 	beqz	v0,a002380c <testapp+0xfc>
a0023bc8:	00000000 	nop
a0023bcc:	08008de9 	j	a00237a4 <testapp+0x94>
a0023bd0:	00000000 	nop

                    if(dlen> 1024){
						sed_printf1("OTP length over 1K\n");
						status = STATUS_ERROR;
					}else{
						sed_printf1("data number of OTP is %d\n",dlen);
a0023bd4:	8fa50028 	lw	a1,40(sp)
a0023bd8:	3c03a002 	lui	v1,0xa002
a0023bdc:	0c008b5c 	jal	a0022d70 <printf1>
a0023be0:	2464588c 	addiu	a0,v1,22668
						ptr		= cmdBuf+2;
						otp_ary = (uint16_t*)OTP_POOL;
						for(i=0;i<dlen;i++){
a0023be4:	8fa40028 	lw	a0,40(sp)
a0023be8:	00000000 	nop
a0023bec:	108000a7 	beqz	a0,a0023e8c <testapp+0x77c>
a0023bf0:	3c038060 	lui	v1,0x8060
a0023bf4:	3c1e8060 	lui	s8,0x8060
a0023bf8:	37de0002 	ori	s8,s8,0x2
a0023bfc:	00001821 	move	v1,zero
							otp_ary[i] = (uint16_t)ptr[i*2]<<8|ptr[(i*2)+1];
a0023c00:	93c20000 	lbu	v0,0(s8)
a0023c04:	93c50001 	lbu	a1,1(s8)
a0023c08:	3c060002 	lui	a2,0x2
a0023c0c:	34c6fffe 	ori	a2,a2,0xfffe
a0023c10:	00021200 	sll	v0,v0,0x8
a0023c14:	00451025 	or	v0,v0,a1
a0023c18:	03c62021 	addu	a0,s8,a2
a0023c1c:	a4820000 	sh	v0,0(a0)
							sed_printf1("otp_ary[%d]=0x%x(%d)\n",i,otp_ary[i],otp_ary[i]);
a0023c20:	3c04a002 	lui	a0,0xa002
a0023c24:	00602821 	move	a1,v1
a0023c28:	00403821 	move	a3,v0
a0023c2c:	24630001 	addiu	v1,v1,1
a0023c30:	00403021 	move	a2,v0
a0023c34:	248458a8 	addiu	a0,a0,22696
a0023c38:	0c008b5c 	jal	a0022d70 <printf1>
a0023c3c:	afa30030 	sw	v1,48(sp)
						status = STATUS_ERROR;
					}else{
						sed_printf1("data number of OTP is %d\n",dlen);
						ptr		= cmdBuf+2;
						otp_ary = (uint16_t*)OTP_POOL;
						for(i=0;i<dlen;i++){
a0023c40:	8fa30030 	lw	v1,48(sp)
a0023c44:	8fa70028 	lw	a3,40(sp)
a0023c48:	3062ffff 	andi	v0,v1,0xffff
a0023c4c:	0047102b 	sltu	v0,v0,a3
a0023c50:	1440ffeb 	bnez	v0,a0023c00 <testapp+0x4f0>
a0023c54:	27de0002 	addiu	s8,s8,2
							otp_ary[i] = (uint16_t)ptr[i*2]<<8|ptr[(i*2)+1];
							sed_printf1("otp_ary[%d]=0x%x(%d)\n",i,otp_ary[i],otp_ary[i]);
						}
						ptr		= ptr+(dlen*2);
a0023c58:	3c088060 	lui	t0,0x8060
a0023c5c:	00071840 	sll	v1,a3,0x1
a0023c60:	35080002 	ori	t0,t0,0x2
a0023c64:	00681821 	addu	v1,v1,t0
a0023c68:	0000f021 	move	s8,zero
						for(i=0;i<dlen;i++){
							sed_printf1("data[%d]=0x%x(%d)\n",i,ptr[i],ptr[i]);
a0023c6c:	007e1021 	addu	v0,v1,s8
a0023c70:	90460000 	lbu	a2,0(v0)
a0023c74:	3c04a002 	lui	a0,0xa002
a0023c78:	03c02821 	move	a1,s8
a0023c7c:	248458c0 	addiu	a0,a0,22720
a0023c80:	00c03821 	move	a3,a2
a0023c84:	0c008b5c 	jal	a0022d70 <printf1>
a0023c88:	afa30030 	sw	v1,48(sp)
						for(i=0;i<dlen;i++){
							otp_ary[i] = (uint16_t)ptr[i*2]<<8|ptr[(i*2)+1];
							sed_printf1("otp_ary[%d]=0x%x(%d)\n",i,otp_ary[i],otp_ary[i]);
						}
						ptr		= ptr+(dlen*2);
						for(i=0;i<dlen;i++){
a0023c8c:	8fa50028 	lw	a1,40(sp)
							sed_printf1("data[%d]=0x%x(%d)\n",i,ptr[i],ptr[i]);
a0023c90:	27de0001 	addiu	s8,s8,1
						for(i=0;i<dlen;i++){
							otp_ary[i] = (uint16_t)ptr[i*2]<<8|ptr[(i*2)+1];
							sed_printf1("otp_ary[%d]=0x%x(%d)\n",i,otp_ary[i],otp_ary[i]);
						}
						ptr		= ptr+(dlen*2);
						for(i=0;i<dlen;i++){
a0023c94:	33c2ffff 	andi	v0,s8,0xffff
a0023c98:	0045102b 	sltu	v0,v0,a1
a0023c9c:	8fa30030 	lw	v1,48(sp)
a0023ca0:	1440fff3 	bnez	v0,a0023c70 <testapp+0x560>
a0023ca4:	007e1021 	addu	v0,v1,s8
							sed_printf1("data[%d]=0x%x(%d)\n",i,ptr[i],ptr[i]);
						}
#if 1
                    	status = writeOTP( otp_ary,dlen,ptr,&rspLen);
a0023ca8:	8fa50028 	lw	a1,40(sp)
a0023cac:	00603021 	move	a2,v1
a0023cb0:	3c048063 	lui	a0,0x8063
a0023cb4:	0c008c61 	jal	a0023184 <writeOTP>
a0023cb8:	27a7001a 	addiu	a3,sp,26
a0023cbc:	08008e57 	j	a002395c <testapp+0x24c>
a0023cc0:	0040f021 	move	s8,v0
                    dlen = ((uint16_t)cmdBuf[0]<<8|cmdBuf[1]);
                    if(dlen> 1024){
                        sed_printf1("OTP length over 1K\n");
                        status = STATUS_ERROR;
                    }else{
                        sed_printf1("data number of OTP is %d\n",dlen);
a0023cc4:	01002821 	move	a1,t0
a0023cc8:	2444588c 	addiu	a0,v0,22668
a0023ccc:	0c008b5c 	jal	a0022d70 <printf1>
a0023cd0:	afa8002c 	sw	t0,44(sp)
                        ptr     = cmdBuf+2;
                        otp_ary = (uint16_t*)OTP_POOL;
                        for(i=0;i<dlen;i++){
a0023cd4:	8fa8002c 	lw	t0,44(sp)
a0023cd8:	00000000 	nop
a0023cdc:	1100001c 	beqz	t0,a0023d50 <testapp+0x640>
a0023ce0:	01002821 	move	a1,t0
a0023ce4:	3c1e8060 	lui	s8,0x8060
a0023ce8:	37de0002 	ori	s8,s8,0x2
a0023cec:	00001821 	move	v1,zero
                            otp_ary[i] = ((uint16_t)ptr[i*2]<<8|ptr[(i*2)+1]);
a0023cf0:	93c20000 	lbu	v0,0(s8)
a0023cf4:	93c50001 	lbu	a1,1(s8)
a0023cf8:	3c060002 	lui	a2,0x2
a0023cfc:	34c6fffe 	ori	a2,a2,0xfffe
a0023d00:	00021200 	sll	v0,v0,0x8
a0023d04:	00451025 	or	v0,v0,a1
a0023d08:	03c62021 	addu	a0,s8,a2
a0023d0c:	a4820000 	sh	v0,0(a0)
                            sed_printf1("otp_ary[%d]=0x%x(%d)\n",i,otp_ary[i],otp_ary[i]);
a0023d10:	3c04a002 	lui	a0,0xa002
a0023d14:	00602821 	move	a1,v1
a0023d18:	00403021 	move	a2,v0
a0023d1c:	24630001 	addiu	v1,v1,1
a0023d20:	248458a8 	addiu	a0,a0,22696
a0023d24:	00403821 	move	a3,v0
a0023d28:	afa30030 	sw	v1,48(sp)
a0023d2c:	0c008b5c 	jal	a0022d70 <printf1>
a0023d30:	afa8002c 	sw	t0,44(sp)
                        status = STATUS_ERROR;
                    }else{
                        sed_printf1("data number of OTP is %d\n",dlen);
                        ptr     = cmdBuf+2;
                        otp_ary = (uint16_t*)OTP_POOL;
                        for(i=0;i<dlen;i++){
a0023d34:	8fa30030 	lw	v1,48(sp)
a0023d38:	8fa8002c 	lw	t0,44(sp)
a0023d3c:	3062ffff 	andi	v0,v1,0xffff
a0023d40:	0048102b 	sltu	v0,v0,t0
a0023d44:	1440ffea 	bnez	v0,a0023cf0 <testapp+0x5e0>
a0023d48:	27de0002 	addiu	s8,s8,2
                            otp_ary[i] = ((uint16_t)ptr[i*2]<<8|ptr[(i*2)+1]);
                            sed_printf1("otp_ary[%d]=0x%x(%d)\n",i,otp_ary[i],otp_ary[i]);
                        }
#if 1
                        status = readOTP( otp_ary,dlen,rspBuf,&rspLen );
a0023d4c:	01002821 	move	a1,t0
a0023d50:	3c048063 	lui	a0,0x8063
a0023d54:	3c068061 	lui	a2,0x8061
a0023d58:	0c008c6c 	jal	a00231b0 <readOTP>
a0023d5c:	27a7001a 	addiu	a3,sp,26
                break;
            case CMD_RSA_ENCRYPT:   //0x42
                status = rsaEncrypt(rspBuf, &rspLen);
                break;
            case CMD_RSA_DECRYPT:   //0x43
                status = rsaDecrypt(rspBuf, &rspLen);
a0023d60:	08008e57 	j	a002395c <testapp+0x24c>
a0023d64:	0040f021 	move	s8,v0
#include "rtaes_testfunctions.h"

static int const BUFLEN = 65536; //!<Maximum buffer length

static uint32_t array_to_uint32(uint8_t* array) {
    return ((array)[0] << 24 | (array)[1] << 16 | (array)[2] << 8 | (array)[3]);
a0023d68:	3c078060 	lui	a3,0x8060
a0023d6c:	3c068060 	lui	a2,0x8060
a0023d70:	34e70001 	ori	a3,a3,0x1
a0023d74:	90c50000 	lbu	a1,0(a2)
a0023d78:	90e30000 	lbu	v1,0(a3)
a0023d7c:	3c088060 	lui	t0,0x8060
a0023d80:	35080002 	ori	t0,t0,0x2
a0023d84:	34c60003 	ori	a2,a2,0x3
a0023d88:	91020000 	lbu	v0,0(t0)
a0023d8c:	90c40000 	lbu	a0,0(a2)
a0023d90:	00052e00 	sll	a1,a1,0x18
a0023d94:	00031c00 	sll	v1,v1,0x10
a0023d98:	00a31825 	or	v1,a1,v1
a0023d9c:	00641825 	or	v1,v1,a0
a0023da0:	00021200 	sll	v0,v0,0x8
a0023da4:	00621025 	or	v0,v1,v0
    if (in_length != 4) {
        *out_length = 0;
        return STATUS_ERROR;
    }

    ceiling = array_to_uint32(in_buf);
a0023da8:	afa20020 	sw	v0,32(sp)

    enableTrigger();
a0023dac:	0c008d45 	jal	a0023514 <enableTrigger>
a0023db0:	00000000 	nop
    while (counter < ceiling) {
a0023db4:	8fa2001c 	lw	v0,28(sp)
a0023db8:	8fa30020 	lw	v1,32(sp)
a0023dbc:	00000000 	nop
a0023dc0:	0043102b 	sltu	v0,v0,v1
a0023dc4:	1040000b 	beqz	v0,a0023df4 <testapp+0x6e4>
a0023dc8:	00000000 	nop
        counter++;
a0023dcc:	8fa2001c 	lw	v0,28(sp)
a0023dd0:	00000000 	nop
a0023dd4:	24420001 	addiu	v0,v0,1
a0023dd8:	afa2001c 	sw	v0,28(sp)
    }

    ceiling = array_to_uint32(in_buf);

    enableTrigger();
    while (counter < ceiling) {
a0023ddc:	8fa3001c 	lw	v1,28(sp)
a0023de0:	8fa20020 	lw	v0,32(sp)
a0023de4:	00000000 	nop
a0023de8:	0062102b 	sltu	v0,v1,v0
a0023dec:	1440fff7 	bnez	v0,a0023dcc <testapp+0x6bc>
a0023df0:	00000000 	nop
        counter++;
    }
    disableTrigger();
a0023df4:	0c008d3a 	jal	a00234e8 <disableTrigger>
a0023df8:	00000000 	nop

    *out_length = 8;

    uint32_to_array(counter, out_buf);
a0023dfc:	8fa2001c 	lw	v0,28(sp)
    while (counter < ceiling) {
        counter++;
    }
    disableTrigger();

    *out_length = 8;
a0023e00:	24030008 	li	v1,8
}


static void uint32_to_array(uint32_t number, uint8_t* array) {
    (array)[0] = (number) >> 24;
    (array)[1] = (number) >> 16;
a0023e04:	3c078061 	lui	a3,0x8061
    (array)[2] = (number) >> 8;
a0023e08:	3c088061 	lui	t0,0x8061
    while (counter < ceiling) {
        counter++;
    }
    disableTrigger();

    *out_length = 8;
a0023e0c:	a7a3001a 	sh	v1,26(sp)
    return ((array)[0] << 24 | (array)[1] << 16 | (array)[2] << 8 | (array)[3]);
}


static void uint32_to_array(uint32_t number, uint8_t* array) {
    (array)[0] = (number) >> 24;
a0023e10:	00022e02 	srl	a1,v0,0x18
    (array)[1] = (number) >> 16;
a0023e14:	00022402 	srl	a0,v0,0x10
    (array)[2] = (number) >> 8;
a0023e18:	00021a02 	srl	v1,v0,0x8
}


static void uint32_to_array(uint32_t number, uint8_t* array) {
    (array)[0] = (number) >> 24;
    (array)[1] = (number) >> 16;
a0023e1c:	34e70001 	ori	a3,a3,0x1
    (array)[2] = (number) >> 8;
a0023e20:	35080002 	ori	t0,t0,0x2
    return ((array)[0] << 24 | (array)[1] << 16 | (array)[2] << 8 | (array)[3]);
}


static void uint32_to_array(uint32_t number, uint8_t* array) {
    (array)[0] = (number) >> 24;
a0023e24:	a2450000 	sb	a1,0(s2)
    (array)[1] = (number) >> 16;
a0023e28:	a0e40000 	sb	a0,0(a3)
    (array)[2] = (number) >> 8;
a0023e2c:	a1030000 	sb	v1,0(t0)
    (array)[3] = (number);
a0023e30:	3c038061 	lui	v1,0x8061
a0023e34:	34630003 	ori	v1,v1,0x3
a0023e38:	a0620000 	sb	v0,0(v1)
    disableTrigger();

    *out_length = 8;

    uint32_to_array(counter, out_buf);
    uint32_to_array(ceiling, out_buf + 4);
a0023e3c:	8fa20020 	lw	v0,32(sp)
    return ((array)[0] << 24 | (array)[1] << 16 | (array)[2] << 8 | (array)[3]);
}


static void uint32_to_array(uint32_t number, uint8_t* array) {
    (array)[0] = (number) >> 24;
a0023e40:	3c088061 	lui	t0,0x8061
a0023e44:	35080004 	ori	t0,t0,0x4
a0023e48:	00023e02 	srl	a3,v0,0x18
a0023e4c:	a1070000 	sb	a3,0(t0)
    (array)[1] = (number) >> 16;
a0023e50:	3c078061 	lui	a3,0x8061
    (array)[2] = (number) >> 8;
a0023e54:	3c088061 	lui	t0,0x8061
a0023e58:	00022a02 	srl	a1,v0,0x8
}


static void uint32_to_array(uint32_t number, uint8_t* array) {
    (array)[0] = (number) >> 24;
    (array)[1] = (number) >> 16;
a0023e5c:	00023402 	srl	a2,v0,0x10
a0023e60:	34e70005 	ori	a3,a3,0x5
    (array)[2] = (number) >> 8;
a0023e64:	35080006 	ori	t0,t0,0x6
}


static void uint32_to_array(uint32_t number, uint8_t* array) {
    (array)[0] = (number) >> 24;
    (array)[1] = (number) >> 16;
a0023e68:	a0e60000 	sb	a2,0(a3)
    (array)[2] = (number) >> 8;
a0023e6c:	a1050000 	sb	a1,0(t0)
    (array)[3] = (number);
a0023e70:	3c058061 	lui	a1,0x8061
a0023e74:	34a50007 	ori	a1,a1,0x7
a0023e78:	24030009 	li	v1,9
a0023e7c:	00002021 	move	a0,zero
a0023e80:	a0a20000 	sb	v0,0(a1)
a0023e84:	08008e14 	j	a0023850 <testapp+0x140>
a0023e88:	0000f021 	move	s8,zero
						otp_ary = (uint16_t*)OTP_POOL;
						for(i=0;i<dlen;i++){
							otp_ary[i] = (uint16_t)ptr[i*2]<<8|ptr[(i*2)+1];
							sed_printf1("otp_ary[%d]=0x%x(%d)\n",i,otp_ary[i],otp_ary[i]);
						}
						ptr		= ptr+(dlen*2);
a0023e8c:	08008f2a 	j	a0023ca8 <testapp+0x598>
a0023e90:	34630002 	ori	v1,v1,0x2

a0023e94 <sed_command_entry>:

	/* Initialize output buffer */
	for (i = 0; i < len; i++)
		obuf[i] = i;
#endif
}
a0023e94:	03e00008 	jr	ra
a0023e98:	00000000 	nop

a0023e9c <sed_command_exit>:

int sed_command_exit (uint8 *obuf, uint8 ack, uint16 dlen, uint8 sts)
{
a0023e9c:	24c20004 	addiu	v0,a2,4
a0023ea0:	3042ffff 	andi	v0,v0,0xffff

	set_rsp_xor_chek(obuf,len,val);
#endif
	return len + 3; // sizeof(len + ack1) = 3

}
a0023ea4:	03e00008 	jr	ra
a0023ea8:	24420003 	addiu	v0,v0,3

a0023eac <sed_format_print>:
	if (len)
		sed_printf("\n");

	return;
#endif
}
a0023eac:	03e00008 	jr	ra
a0023eb0:	00000000 	nop

a0023eb4 <get_cmd_data_len>:

#ifdef SED_USE_FUNC
uint16 get_cmd_data_len(uint8 *ibuf)
{
a0023eb4:	90820001 	lbu	v0,1(a0)
a0023eb8:	90830002 	lbu	v1,2(a0)
a0023ebc:	00021200 	sll	v0,v0,0x8
	return (((uint16)(ibuf[CMD_DATA_LEN_H_IDX])<<8)|ibuf[CMD_DATA_LEN_L_IDX]);
}
a0023ec0:	03e00008 	jr	ra
a0023ec4:	00431025 	or	v0,v0,v1

a0023ec8 <get_cmd_data_uint32>:

uint32 get_cmd_data_uint32(uint8 *ibuf, uint32 ofs)
{
a0023ec8:	00852021 	addu	a0,a0,a1
a0023ecc:	90820000 	lbu	v0,0(a0)
a0023ed0:	90860003 	lbu	a2,3(a0)
a0023ed4:	90850001 	lbu	a1,1(a0)
a0023ed8:	90830002 	lbu	v1,2(a0)
a0023edc:	00021600 	sll	v0,v0,0x18
a0023ee0:	00c21025 	or	v0,a2,v0
a0023ee4:	00052400 	sll	a0,a1,0x10
a0023ee8:	00441025 	or	v0,v0,a0
a0023eec:	00031a00 	sll	v1,v1,0x8
	return (((uint32)(ibuf[ofs])<<24)|((uint32)(ibuf[ofs+1])<<16)|
			((uint32)(ibuf[ofs+2])<<8)|(ibuf[ofs+3]&0xFF));
}
a0023ef0:	03e00008 	jr	ra
a0023ef4:	00431025 	or	v0,v0,v1

a0023ef8 <get_cmd_data_addr64>:

addr64 get_cmd_data_addr64(uint8 *ibuf, uint32 ofs)
{
a0023ef8:	00852021 	addu	a0,a0,a1
a0023efc:	90890000 	lbu	t1,0(a0)
a0023f00:	90830001 	lbu	v1,1(a0)
a0023f04:	90880002 	lbu	t0,2(a0)
a0023f08:	90820004 	lbu	v0,4(a0)
a0023f0c:	90870007 	lbu	a3,7(a0)
a0023f10:	90860005 	lbu	a2,5(a0)
a0023f14:	90850006 	lbu	a1,6(a0)
a0023f18:	00094e00 	sll	t1,t1,0x18
a0023f1c:	90840003 	lbu	a0,3(a0)
a0023f20:	00031c00 	sll	v1,v1,0x10
a0023f24:	01231825 	or	v1,t1,v1
a0023f28:	00084200 	sll	t0,t0,0x8
a0023f2c:	00021600 	sll	v0,v0,0x18
a0023f30:	00681825 	or	v1,v1,t0
a0023f34:	00e21025 	or	v0,a3,v0
a0023f38:	00063400 	sll	a2,a2,0x10
a0023f3c:	00461025 	or	v0,v0,a2
a0023f40:	00641825 	or	v1,v1,a0
a0023f44:	00052200 	sll	a0,a1,0x8
	return (((addr64)(ibuf[ofs])<<56)|((addr64)(ibuf[ofs+1])<<48)|
			((addr64)(ibuf[ofs+2])<<40)|((addr64)(ibuf[ofs+3])<<32)|
			((addr64)(ibuf[ofs+4])<<24)|((addr64)(ibuf[ofs+5])<<16)|
			((addr64)(ibuf[ofs+6])<<8)|(ibuf[ofs+7]&0xFF));
}
a0023f48:	03e00008 	jr	ra
a0023f4c:	00441025 	or	v0,v0,a0

a0023f50 <set_rsp_data_len>:

void set_rsp_data_len(uint8 *obuf, uint16 len)
{
a0023f50:	30a5ffff 	andi	a1,a1,0xffff
	obuf[RSP_DATA_LEN_H_IDX]=((len)>>8)&0xFF;
a0023f54:	00051202 	srl	v0,a1,0x8
	obuf[RSP_DATA_LEN_L_IDX]=(len)&0xFF;
a0023f58:	a0850002 	sb	a1,2(a0)
}
a0023f5c:	03e00008 	jr	ra
a0023f60:	a0820001 	sb	v0,1(a0)

a0023f64 <set_rsp_data_uint32>:

void set_rsp_data_uint32(uint8 *obuf, uint32 ofs, uint32 val)
{
	obuf[ofs]=((val)>>24)&0xFF;
a0023f64:	00852021 	addu	a0,a0,a1
	obuf[ofs+1]=((val)>>16)&0xFF;
a0023f68:	00061c02 	srl	v1,a2,0x10
	obuf[RSP_DATA_LEN_L_IDX]=(len)&0xFF;
}

void set_rsp_data_uint32(uint8 *obuf, uint32 ofs, uint32 val)
{
	obuf[ofs]=((val)>>24)&0xFF;
a0023f6c:	00062e02 	srl	a1,a2,0x18
	obuf[ofs+1]=((val)>>16)&0xFF;
	obuf[ofs+2]=((val)>>8)&0xFF;
a0023f70:	00061202 	srl	v0,a2,0x8
	obuf[ofs+3]=(val)&0xFF;
a0023f74:	a0860003 	sb	a2,3(a0)
	obuf[RSP_DATA_LEN_L_IDX]=(len)&0xFF;
}

void set_rsp_data_uint32(uint8 *obuf, uint32 ofs, uint32 val)
{
	obuf[ofs]=((val)>>24)&0xFF;
a0023f78:	a0850000 	sb	a1,0(a0)
	obuf[ofs+1]=((val)>>16)&0xFF;
a0023f7c:	a0830001 	sb	v1,1(a0)
	obuf[ofs+2]=((val)>>8)&0xFF;
	obuf[ofs+3]=(val)&0xFF;
}
a0023f80:	03e00008 	jr	ra
a0023f84:	a0820002 	sb	v0,2(a0)

a0023f88 <set_rsp_data_addr64>:

void set_rsp_data_addr64(uint8 *obuf, uint32 ofs, addr64 val)
{
	obuf[ofs]=((val)>>56)&0xFF;
a0023f88:	00852021 	addu	a0,a0,a1
a0023f8c:	00075602 	srl	t2,a3,0x18
	obuf[ofs+1]=((val)>>48)&0xFF;
a0023f90:	00074c02 	srl	t1,a3,0x10
	obuf[ofs+2]=((val)>>40)&0xFF;
a0023f94:	00074202 	srl	t0,a3,0x8
	obuf[ofs+3]=((val)>>32)&0xFF;
	obuf[ofs+4]=((val)>>24)&0xFF;
a0023f98:	00062e02 	srl	a1,a2,0x18
	obuf[ofs+5]=((val)>>16)&0xFF;
a0023f9c:	00061c02 	srl	v1,a2,0x10
	obuf[ofs+6]=((val)>>8)&0xFF;
a0023fa0:	00061202 	srl	v0,a2,0x8
	obuf[ofs+7]=(val)&0xFF;
a0023fa4:	a0860007 	sb	a2,7(a0)
	obuf[ofs+3]=(val)&0xFF;
}

void set_rsp_data_addr64(uint8 *obuf, uint32 ofs, addr64 val)
{
	obuf[ofs]=((val)>>56)&0xFF;
a0023fa8:	a08a0000 	sb	t2,0(a0)
	obuf[ofs+1]=((val)>>48)&0xFF;
a0023fac:	a0890001 	sb	t1,1(a0)
	obuf[ofs+2]=((val)>>40)&0xFF;
a0023fb0:	a0880002 	sb	t0,2(a0)
	obuf[ofs+3]=((val)>>32)&0xFF;
a0023fb4:	a0870003 	sb	a3,3(a0)
	obuf[ofs+4]=((val)>>24)&0xFF;
a0023fb8:	a0850004 	sb	a1,4(a0)
	obuf[ofs+5]=((val)>>16)&0xFF;
a0023fbc:	a0830005 	sb	v1,5(a0)
	obuf[ofs+6]=((val)>>8)&0xFF;
	obuf[ofs+7]=(val)&0xFF;
}
a0023fc0:	03e00008 	jr	ra
a0023fc4:	a0820006 	sb	v0,6(a0)

a0023fc8 <sed_gpio_init>:
void sed_gpio_init (void)
{
	//REG32(GPIO0_IE) = 0x0;

	//setting pinmux of GPIO
	REG32(0xb806023c) = (REG32(0xb806023c)&(~(0x7C0000)))|(0x7C0000);
a0023fc8:	3c02b806 	lui	v0,0xb806
a0023fcc:	3443023c 	ori	v1,v0,0x23c
a0023fd0:	8c650000 	lw	a1,0(v1)
a0023fd4:	3c04007c 	lui	a0,0x7c
	REG32(MIS_GPDIR) |= (0x1<<28);
a0023fd8:	34421100 	ori	v0,v0,0x1100
void sed_gpio_init (void)
{
	//REG32(GPIO0_IE) = 0x0;

	//setting pinmux of GPIO
	REG32(0xb806023c) = (REG32(0xb806023c)&(~(0x7C0000)))|(0x7C0000);
a0023fdc:	00a42025 	or	a0,a1,a0
a0023fe0:	ac640000 	sw	a0,0(v1)
	REG32(MIS_GPDIR) |= (0x1<<28);
a0023fe4:	8c440000 	lw	a0,0(v0)
a0023fe8:	3c031000 	lui	v1,0x1000
a0023fec:	00831825 	or	v1,a0,v1
a0023ff0:	ac430000 	sw	v1,0(v0)
}
a0023ff4:	03e00008 	jr	ra
a0023ff8:	00000000 	nop

a0023ffc <GPIO_reset>:
#define SHOW_GPIO(str)
void GPIO_reset (void)
{
	GPIO = 0;

	REG32(MIS_GPDATO) = REG32(MIS_GPDATO)&0xEFFFFFFF;
a0023ffc:	3c02b806 	lui	v0,0xb806
a0024000:	34421108 	ori	v0,v0,0x1108
a0024004:	8c440000 	lw	a0,0(v0)
a0024008:	3c03efff 	lui	v1,0xefff
a002400c:	3463ffff 	ori	v1,v1,0xffff
a0024010:	00831824 	and	v1,a0,v1
a0024014:	ac430000 	sw	v1,0(v0)

//#define SHOW_GPIO(str)	sed_printf("[%s:%s]\n", str, (GPIO)?"H":"L"); // debug only
#define SHOW_GPIO(str)
void GPIO_reset (void)
{
	GPIO = 0;
a0024018:	3c02a003 	lui	v0,0xa003

	SHOW_GPIO("reset");

	//sed_printf("REG32(MIS_GPDATO):0x%x\n",REG32(MIS_GPDATO));

}
a002401c:	03e00008 	jr	ra
a0024020:	a0409c2c 	sb	zero,-25556(v0)

a0024024 <GPIO_toggle>:

void GPIO_toggle (void)
{
	GPIO ^= 1;
a0024024:	3c03a003 	lui	v1,0xa003
a0024028:	90629c2c 	lbu	v0,-25556(v1)
a002402c:	00000000 	nop
a0024030:	38420001 	xori	v0,v0,0x1

	//REG32(MIS_GPDATO) |= (GPIO<<28);

	if(GPIO)
a0024034:	1440000a 	bnez	v0,a0024060 <GPIO_toggle+0x3c>
a0024038:	a0629c2c 	sb	v0,-25556(v1)
		REG32(MIS_GPDATO) |= 0x10000000;
	else
		REG32(MIS_GPDATO) &= 0xEFFFFFFF;
a002403c:	3c02b806 	lui	v0,0xb806
a0024040:	34421108 	ori	v0,v0,0x1108
a0024044:	8c440000 	lw	a0,0(v0)
a0024048:	3c03efff 	lui	v1,0xefff
a002404c:	3463ffff 	ori	v1,v1,0xffff
a0024050:	00831824 	and	v1,a0,v1
a0024054:	ac430000 	sw	v1,0(v0)
a0024058:	03e00008 	jr	ra
a002405c:	00000000 	nop
	GPIO ^= 1;

	//REG32(MIS_GPDATO) |= (GPIO<<28);

	if(GPIO)
		REG32(MIS_GPDATO) |= 0x10000000;
a0024060:	3c02b806 	lui	v0,0xb806
a0024064:	34421108 	ori	v0,v0,0x1108
a0024068:	8c440000 	lw	a0,0(v0)
a002406c:	3c031000 	lui	v1,0x1000
a0024070:	00831825 	or	v1,a0,v1
a0024074:	ac430000 	sw	v1,0(v0)
a0024078:	03e00008 	jr	ra
a002407c:	00000000 	nop

a0024080 <GPIO_pulse>:
void GPIO_pulse (void)
{
//	uint32 tick1, tick2;
	uint32 new_value, old_value = REG32(MIS_GPDATO);

	if(GPIO) {
a0024080:	3c02a003 	lui	v0,0xa003
a0024084:	90429c2c 	lbu	v0,-25556(v0)
}

void GPIO_pulse (void)
{
//	uint32 tick1, tick2;
	uint32 new_value, old_value = REG32(MIS_GPDATO);
a0024088:	3c03b806 	lui	v1,0xb806
a002408c:	34631108 	ori	v1,v1,0x1108
a0024090:	8c630000 	lw	v1,0(v1)

	if(GPIO) {
a0024094:	14400008 	bnez	v0,a00240b8 <GPIO_pulse+0x38>
a0024098:	3c041000 	lui	a0,0x1000
		new_value = old_value & 0xEFFFFFFF;
	} else {
		new_value = old_value  | 0x10000000;
	}

	REG32(MIS_GPDATO) = new_value;
a002409c:	3c02b806 	lui	v0,0xb806
a00240a0:	34421108 	ori	v0,v0,0x1108
	uint32 new_value, old_value = REG32(MIS_GPDATO);

	if(GPIO) {
		new_value = old_value & 0xEFFFFFFF;
	} else {
		new_value = old_value  | 0x10000000;
a00240a4:	00642025 	or	a0,v1,a0
	}

	REG32(MIS_GPDATO) = new_value;
a00240a8:	ac440000 	sw	a0,0(v0)
	REG32(MIS_GPDATO) = old_value;
a00240ac:	ac430000 	sw	v1,0(v0)

	//SHOW_GPIO("pulse");
	//sed_printf("REG32(MIS_GPDATO):0x%x\n",REG32(MIS_GPDATO));
#endif

}
a00240b0:	03e00008 	jr	ra
a00240b4:	00000000 	nop
{
//	uint32 tick1, tick2;
	uint32 new_value, old_value = REG32(MIS_GPDATO);

	if(GPIO) {
		new_value = old_value & 0xEFFFFFFF;
a00240b8:	3c04efff 	lui	a0,0xefff
a00240bc:	3484ffff 	ori	a0,a0,0xffff
	} else {
		new_value = old_value  | 0x10000000;
	}

	REG32(MIS_GPDATO) = new_value;
a00240c0:	3c02b806 	lui	v0,0xb806
a00240c4:	34421108 	ori	v0,v0,0x1108
{
//	uint32 tick1, tick2;
	uint32 new_value, old_value = REG32(MIS_GPDATO);

	if(GPIO) {
		new_value = old_value & 0xEFFFFFFF;
a00240c8:	00642024 	and	a0,v1,a0
	} else {
		new_value = old_value  | 0x10000000;
	}

	REG32(MIS_GPDATO) = new_value;
a00240cc:	ac440000 	sw	a0,0(v0)
	REG32(MIS_GPDATO) = old_value;
a00240d0:	ac430000 	sw	v1,0(v0)

	//SHOW_GPIO("pulse");
	//sed_printf("REG32(MIS_GPDATO):0x%x\n",REG32(MIS_GPDATO));
#endif

}
a00240d4:	03e00008 	jr	ra
a00240d8:	00000000 	nop

a00240dc <sed_pinmux_spi>:
#include "sed_common.h"

void sed_pinmux_spi(void)
{
	// set the spi pin mux
	REG32(GPIO_MUXCFG_12)= 0x08040200;
a00240dc:	3c02b800 	lui	v0,0xb800
a00240e0:	3c040804 	lui	a0,0x804
	REG32(GPIO_MUXCFG_13)= 0x087C3E00;
a00240e4:	34430834 	ori	v1,v0,0x834
#include "sed_common.h"

void sed_pinmux_spi(void)
{
	// set the spi pin mux
	REG32(GPIO_MUXCFG_12)= 0x08040200;
a00240e8:	34840200 	ori	a0,a0,0x200
a00240ec:	34420830 	ori	v0,v0,0x830
a00240f0:	ac440000 	sw	a0,0(v0)
	REG32(GPIO_MUXCFG_13)= 0x087C3E00;
a00240f4:	3c02087c 	lui	v0,0x87c
a00240f8:	34423e00 	ori	v0,v0,0x3e00
a00240fc:	ac620000 	sw	v0,0(v1)
}
a0024100:	03e00008 	jr	ra
a0024104:	00000000 	nop

a0024108 <sed_pinmux_uart>:

	/* RX */
	/* set uart0_rxdi_in_sel pin mux */
	/* UART0_rxdi_sel [18:16] -> "0: uart0_rxdi_src0 (vddc_scl_ps)" */
	inverse = (0x7 << 16);
	bitwise_AND_OR(ST_PIN_MUX_CTRL0, ~inverse, 0);
a0024108:	3c03b806 	lui	v1,0xb806
a002410c:	346202a0 	ori	v0,v1,0x2a0
a0024110:	8c450000 	lw	a1,0(v0)
a0024114:	3c04fff8 	lui	a0,0xfff8
a0024118:	3484ffff 	ori	a0,a0,0xffff
a002411c:	00a42024 	and	a0,a1,a0
a0024120:	ac440000 	sw	a0,0(v0)

	/* set vddc_scl_ps pin mux */
	/* vddc_scl_ps [13:9 ] -> "9: uart0_rxdi_src0,<I>" */
	inverse = (0x1f << 9);
	bitwise_AND_OR(GPIO_ST_MUXCFG_0, ~inverse, (0x9 << 9));
a0024124:	34640200 	ori	a0,v1,0x200
a0024128:	8c860000 	lw	a2,0(a0)
a002412c:	2405c1ff 	li	a1,-15873

	/* set uart1_rxdi_in_sel pin mux */
	/* uart1_rxdi_sel [22:20] -> "0: uart1_rxdi_src0(gpio_53_ps)" */
	inverse = (0x7 << 20);
	bitwise_AND_OR(PIN_MUX_CTRL0, ~inverse, 0);
a0024130:	3c02b800 	lui	v0,0xb800
	bitwise_AND_OR(ST_PIN_MUX_CTRL0, ~inverse, 0);

	/* set vddc_scl_ps pin mux */
	/* vddc_scl_ps [13:9 ] -> "9: uart0_rxdi_src0,<I>" */
	inverse = (0x1f << 9);
	bitwise_AND_OR(GPIO_ST_MUXCFG_0, ~inverse, (0x9 << 9));
a0024134:	00c53024 	and	a2,a2,a1
a0024138:	34c61200 	ori	a2,a2,0x1200
a002413c:	ac860000 	sw	a2,0(a0)

	/* set uart1_rxdi_in_sel pin mux */
	/* uart1_rxdi_sel [22:20] -> "0: uart1_rxdi_src0(gpio_53_ps)" */
	inverse = (0x7 << 20);
	bitwise_AND_OR(PIN_MUX_CTRL0, ~inverse, 0);
a0024140:	344408c0 	ori	a0,v0,0x8c0
a0024144:	8c870000 	lw	a3,0(a0)
a0024148:	3c06ff8f 	lui	a2,0xff8f
a002414c:	34c6ffff 	ori	a2,a2,0xffff
a0024150:	00e63024 	and	a2,a3,a2
a0024154:	ac860000 	sw	a2,0(a0)

	/* set gpio_53_ps  pin mux */
	/* gpio_53_ps  [13:9 ] -> "2: uart1_rxdi_src0,<I>" */
	inverse = (0x1f << 9);
	bitwise_AND_OR(GPIO_MUXCFG_16, ~inverse, (0x2 << 9));
a0024158:	34440840 	ori	a0,v0,0x840
a002415c:	8c860000 	lw	a2,0(a0)

	/* TX */
	/* set vddc_sda_ps pin mux */
	/* vddc_sda_ps [31:27] -> "9: uart0_txdo,<O> */
	inverse = (0x1f << 27);
	bitwise_AND_OR(GPIO_ST_MUXCFG_1, ~inverse, (0x9 << 27));
a0024160:	34630204 	ori	v1,v1,0x204

	/* set gpio_54_ps pin mux */
	/* gpio_54_ps [31:27] -> "2: uart1_txdo,<O>" */
	bitwise_AND_OR(GPIO_MUXCFG_17, ~inverse, (0x2 << 27));
a0024164:	34420844 	ori	v0,v0,0x844
	bitwise_AND_OR(PIN_MUX_CTRL0, ~inverse, 0);

	/* set gpio_53_ps  pin mux */
	/* gpio_53_ps  [13:9 ] -> "2: uart1_rxdi_src0,<I>" */
	inverse = (0x1f << 9);
	bitwise_AND_OR(GPIO_MUXCFG_16, ~inverse, (0x2 << 9));
a0024168:	00c52824 	and	a1,a2,a1
a002416c:	34a50400 	ori	a1,a1,0x400
a0024170:	ac850000 	sw	a1,0(a0)

	/* TX */
	/* set vddc_sda_ps pin mux */
	/* vddc_sda_ps [31:27] -> "9: uart0_txdo,<O> */
	inverse = (0x1f << 27);
	bitwise_AND_OR(GPIO_ST_MUXCFG_1, ~inverse, (0x9 << 27));
a0024174:	8c650000 	lw	a1,0(v1)
a0024178:	3c0407ff 	lui	a0,0x7ff
a002417c:	3484ffff 	ori	a0,a0,0xffff
a0024180:	00a42824 	and	a1,a1,a0
a0024184:	3c064800 	lui	a2,0x4800
a0024188:	00a62825 	or	a1,a1,a2
a002418c:	ac650000 	sw	a1,0(v1)

	/* set gpio_54_ps pin mux */
	/* gpio_54_ps [31:27] -> "2: uart1_txdo,<O>" */
	bitwise_AND_OR(GPIO_MUXCFG_17, ~inverse, (0x2 << 27));
a0024190:	8c430000 	lw	v1,0(v0)
a0024194:	00000000 	nop
a0024198:	00642024 	and	a0,v1,a0
a002419c:	3c031000 	lui	v1,0x1000
a00241a0:	00832025 	or	a0,a0,v1
a00241a4:	ac440000 	sw	a0,0(v0)
#endif
}
a00241a8:	03e00008 	jr	ra
a00241ac:	00000000 	nop

a00241b0 <sed_rng_init>:
#include "sed_drv_rng.h"

void sed_rng_init (void)
{
	// enable RNG
	REG32(0xb800181c) = 0x01010b09;
a00241b0:	3c04b800 	lui	a0,0xb800
a00241b4:	3c030101 	lui	v1,0x101
a00241b8:	3482181c 	ori	v0,a0,0x181c
a00241bc:	34630b09 	ori	v1,v1,0xb09
a00241c0:	ac430000 	sw	v1,0(v0)

#if defined (SIRIUS)
	/* Check ROSC is lock (CKOUT_ROSC is stable) */
	while (!(REG32(RNG_CALI_RETURN) & ROSC_LOCK_MASK));
a00241c4:	34841820 	ori	a0,a0,0x1820
a00241c8:	3c030002 	lui	v1,0x2
a00241cc:	8c820000 	lw	v0,0(a0)
a00241d0:	00000000 	nop
a00241d4:	00431024 	and	v0,v0,v1
a00241d8:	1040fffc 	beqz	v0,a00241cc <sed_rng_init+0x1c>
a00241dc:	00000000 	nop
#endif
}
a00241e0:	03e00008 	jr	ra
a00241e4:	00000000 	nop

a00241e8 <sed_rng_get>:

void sed_rng_get (uint32 *rand) //Not used currently, access register directly
{
#if defined (SIRIUS)
	do {
		*rand = REG32(RNG_RESULTR);
a00241e8:	3c03b800 	lui	v1,0xb800
a00241ec:	34631838 	ori	v1,v1,0x1838
a00241f0:	8c620000 	lw	v0,0(v1)
a00241f4:	00000000 	nop
	} while (*rand == 0x0);
a00241f8:	1040fffd 	beqz	v0,a00241f0 <sed_rng_get+0x8>
a00241fc:	00000000 	nop
#endif
	return;
}
a0024200:	03e00008 	jr	ra
a0024204:	ac820000 	sw	v0,0(a0)

a0024208 <sed_sfc_read>:
int sed_sfc_read (uint32 offset, uint8 *buf, uint32 len)
{
#if defined (SIRIUS) || defined (FPGA)
	uint32 i;

	if (!buf || !len)
a0024208:	14a00003 	bnez	a1,a0024218 <sed_sfc_read+0x10>
a002420c:	00000000 	nop

	for (i = 0; i < len; i++)
		buf[i] = REG8(SPI_BASE_ADDR + offset + i);
#endif
	return 0;
}
a0024210:	03e00008 	jr	ra
a0024214:	2402ffff 	li	v0,-1
int sed_sfc_read (uint32 offset, uint8 *buf, uint32 len)
{
#if defined (SIRIUS) || defined (FPGA)
	uint32 i;

	if (!buf || !len)
a0024218:	10c0fffd 	beqz	a2,a0024210 <sed_sfc_read+0x8>
a002421c:	00000000 	nop
a0024220:	3c02bec0 	lui	v0,0xbec0
a0024224:	00822021 	addu	a0,a0,v0
a0024228:	00001021 	move	v0,zero
		return -1;

	for (i = 0; i < len; i++)
		buf[i] = REG8(SPI_BASE_ADDR + offset + i);
a002422c:	90880000 	lbu	t0,0(a0)
a0024230:	00a23821 	addu	a3,a1,v0
	uint32 i;

	if (!buf || !len)
		return -1;

	for (i = 0; i < len; i++)
a0024234:	24420001 	addiu	v0,v0,1
a0024238:	0046182b 	sltu	v1,v0,a2
		buf[i] = REG8(SPI_BASE_ADDR + offset + i);
a002423c:	a0e80000 	sb	t0,0(a3)
	uint32 i;

	if (!buf || !len)
		return -1;

	for (i = 0; i < len; i++)
a0024240:	1460fffa 	bnez	v1,a002422c <sed_sfc_read+0x24>
a0024244:	24840001 	addiu	a0,a0,1
a0024248:	03e00008 	jr	ra
a002424c:	00001021 	move	v0,zero

a0024250 <sed_sfc_write>:
#endif
	return 0;
}

int sed_sfc_write (uint32 offset, uint8 *buf, uint32 len)
{
a0024250:	27bdfff8 	addiu	sp,sp,-8
a0024254:	afb10004 	sw	s1,4(sp)
a0024258:	afb00000 	sw	s0,0(sp)
#if defined (SIRIUS) || defined (FPGA)
	uint32 value;
	uint32 src = (uint32) buf;
	uint32 dst = SPI_BASE_ADDR + offset;

	if (!buf || !len)
a002425c:	14a00006 	bnez	a1,a0024278 <sed_sfc_write+0x28>
a0024260:	00000000 	nop
			//printf("sfc write fail...\n"); //can be removed
			return -1;
		}

		src++;
		dst++;
a0024264:	2402ffff 	li	v0,-1
	}
#endif
	return 0;
}
a0024268:	8fb10004 	lw	s1,4(sp)
a002426c:	8fb00000 	lw	s0,0(sp)
a0024270:	03e00008 	jr	ra
a0024274:	27bd0008 	addiu	sp,sp,8
#if defined (SIRIUS) || defined (FPGA)
	uint32 value;
	uint32 src = (uint32) buf;
	uint32 dst = SPI_BASE_ADDR + offset;

	if (!buf || !len)
a0024278:	10c0fffa 	beqz	a2,a0024264 <sed_sfc_write+0x14>
a002427c:	3c08b801 	lui	t0,0xb801
	while (len--) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
		sync();
		REG32(SFC_CTL) = 0x00;
a0024280:	3507a804 	ori	a3,t0,0xa804

	/* Set HW write protect ?! */

	while (len--) {
		/* Write enable */
		sync();
a0024284:	3502a020 	ori	v0,t0,0xa020
int sed_sfc_write (uint32 offset, uint8 *buf, uint32 len)
{
#if defined (SIRIUS) || defined (FPGA)
	uint32 value;
	uint32 src = (uint32) buf;
	uint32 dst = SPI_BASE_ADDR + offset;
a0024288:	3c03bec0 	lui	v1,0xbec0
	/* Set HW write protect ?! */

	while (len--) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
a002428c:	3508a800 	ori	t0,t0,0xa800
int sed_sfc_write (uint32 offset, uint8 *buf, uint32 len)
{
#if defined (SIRIUS) || defined (FPGA)
	uint32 value;
	uint32 src = (uint32) buf;
	uint32 dst = SPI_BASE_ADDR + offset;
a0024290:	00832021 	addu	a0,a0,v1
a0024294:	00005821 	move	t3,zero
	/* Set HW write protect ?! */

	while (len--) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
a0024298:	24110006 	li	s1,6
		REG32(SFC_CTL) = 0x00;
		value = REG8(dst);

		/* Byte program */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_BYTE_PROG;
a002429c:	24100002 	li	s0,2
		sync();
		REG32(SFC_CTL) = DATA_EN|ADDR_EN;
a00242a0:	240e0018 	li	t6,24
		REG8(dst) = REG8(src);

		/* Read status register */
		do {
			sync();
a00242a4:	00406821 	move	t5,v0
			REG32(SFC_OPCODE) = CMD_OP_READ_STS;
a00242a8:	0100c821 	move	t9,t0
a00242ac:	240a0005 	li	t2,5
			sync();
			REG32(SFC_CTL) = DATA_EN;
a00242b0:	00e0c021 	move	t8,a3
a00242b4:	24090010 	li	t1,16
		} while ((value = REG8(dst)) & 0x1);

		/* Read */
#if 1 /* For code size */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_READ;
a00242b8:	240f0003 	li	t7,3

	/* Set HW write protect ?! */

	while (len--) {
		/* Write enable */
		sync();
a00242bc:	ac400000 	sw	zero,0(v0)
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
a00242c0:	ad110000 	sw	s1,0(t0)
		sync();
a00242c4:	ac400000 	sw	zero,0(v0)
		REG32(SFC_CTL) = 0x00;
a00242c8:	ace00000 	sw	zero,0(a3)
		value = REG8(dst);
a00242cc:	90830000 	lbu	v1,0(a0)

		/* Byte program */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_BYTE_PROG;
		sync();
		REG32(SFC_CTL) = DATA_EN|ADDR_EN;
a00242d0:	00ab6021 	addu	t4,a1,t3
		sync();
		REG32(SFC_CTL) = 0x00;
		value = REG8(dst);

		/* Byte program */
		sync();
a00242d4:	ac400000 	sw	zero,0(v0)
		REG32(SFC_OPCODE) = CMD_OP_BYTE_PROG;
a00242d8:	ad100000 	sw	s0,0(t0)
		sync();
a00242dc:	ac400000 	sw	zero,0(v0)
		REG32(SFC_CTL) = DATA_EN|ADDR_EN;
a00242e0:	acee0000 	sw	t6,0(a3)
		REG8(dst) = REG8(src);
a00242e4:	91830000 	lbu	v1,0(t4)
a00242e8:	00000000 	nop
a00242ec:	306300ff 	andi	v1,v1,0xff
a00242f0:	a0830000 	sb	v1,0(a0)

		/* Read status register */
		do {
			sync();
a00242f4:	ac400000 	sw	zero,0(v0)
			REG32(SFC_OPCODE) = CMD_OP_READ_STS;
a00242f8:	ad0a0000 	sw	t2,0(t0)
			sync();
a00242fc:	ac400000 	sw	zero,0(v0)
			REG32(SFC_CTL) = DATA_EN;
a0024300:	ace90000 	sw	t1,0(a3)
		} while ((value = REG8(dst)) & 0x1);
a0024304:	90830000 	lbu	v1,0(a0)
a0024308:	00000000 	nop
a002430c:	30630001 	andi	v1,v1,0x1
a0024310:	1460fff8 	bnez	v1,a00242f4 <sed_sfc_write+0xa4>
a0024314:	00000000 	nop

		/* Read */
#if 1 /* For code size */
		sync();
a0024318:	ada00000 	sw	zero,0(t5)
		REG32(SFC_OPCODE) = CMD_OP_READ;
a002431c:	af2f0000 	sw	t7,0(t9)
		sync();
a0024320:	ada00000 	sw	zero,0(t5)
		REG32(SFC_CTL) = DATA_EN|ADDR_EN; //no need |0x1;
a0024324:	af0e0000 	sw	t6,0(t8)
			sync();
			REG32(SFC_CTL) = DATA_EN|ADDR_EN|0x1;
		}
#endif

		if (REG8(dst) != REG8(src)) {
a0024328:	90830000 	lbu	v1,0(a0)
a002432c:	918c0000 	lbu	t4,0(t4)
a0024330:	00000000 	nop
a0024334:	1583ffcb 	bne	t4,v1,a0024264 <sed_sfc_write+0x14>
a0024338:	256b0001 	addiu	t3,t3,1
	if (!buf || !len)
		return -1;

	/* Set HW write protect ?! */

	while (len--) {
a002433c:	10cb0003 	beq	a2,t3,a002434c <sed_sfc_write+0xfc>
a0024340:	00000000 	nop
			//printf("sfc write fail...\n"); //can be removed
			return -1;
		}

		src++;
		dst++;
a0024344:	080090af 	j	a00242bc <sed_sfc_write+0x6c>
a0024348:	24840001 	addiu	a0,a0,1
	if (!buf || !len)
		return -1;

	/* Set HW write protect ?! */

	while (len--) {
a002434c:	0800909a 	j	a0024268 <sed_sfc_write+0x18>
a0024350:	00001021 	move	v0,zero

a0024354 <sed_sfc_erase>:
#endif
	return 0;
}

int sed_sfc_erase (uint32 offset, uint32 len)
{
a0024354:	27bdffd0 	addiu	sp,sp,-48
a0024358:	afbe002c 	sw	s8,44(sp)
a002435c:	afb70028 	sw	s7,40(sp)
a0024360:	afb60024 	sw	s6,36(sp)
a0024364:	afb50020 	sw	s5,32(sp)
a0024368:	afb4001c 	sw	s4,28(sp)
a002436c:	afb30018 	sw	s3,24(sp)
a0024370:	afb20014 	sw	s2,20(sp)
a0024374:	afb10010 	sw	s1,16(sp)
a0024378:	afb0000c 	sw	s0,12(sp)
	uint32 size=0, value;
	uint32 dst = SPI_BASE_ADDR + offset;

	/* Set HW write protect ?! */

	while (len) {
a002437c:	10a00084 	beqz	a1,a0024590 <sed_sfc_erase+0x23c>
a0024380:	3c03a003 	lui	v1,0xa003
		value = REG8(dst);

		/* Erase sector */
		sync();
		if (len >= 0x40000) {
			if (devicetype.sec_256k_en == 1) {
a0024384:	24629c30 	addiu	v0,v1,-25552

	/* Set HW write protect ?! */

	while (len) {
		/* Write enable */
		sync();
a0024388:	3c06b801 	lui	a2,0xb801
				size = 0x10000;
			} else if (devicetype.sec_32k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_4k_en == 1) {
				if (devicetype.id == PMC_4Mbit)
a002438c:	8c719c30 	lw	s1,-25552(v1)
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x10000;
			} else if (devicetype.sec_32k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_4k_en == 1) {
a0024390:	9057000b 	lbu	s7,11(v0)
		value = REG8(dst);

		/* Erase sector */
		sync();
		if (len >= 0x40000) {
			if (devicetype.sec_256k_en == 1) {
a0024394:	90530008 	lbu	s3,8(v0)
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			} else if (devicetype.sec_64k_en == 1) {
a0024398:	90520009 	lbu	s2,9(v0)
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x10000;
			} else if (devicetype.sec_32k_en == 1) {
a002439c:	9054000a 	lbu	s4,10(v0)
	while (len) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
		sync();
		REG32(SFC_CTL) = 0x00;
a00243a0:	34c3a804 	ori	v1,a2,0xa804

	/* Set HW write protect ?! */

	while (len) {
		/* Write enable */
		sync();
a00243a4:	34c2a020 	ori	v0,a2,0xa020

int sed_sfc_erase (uint32 offset, uint32 len)
{
#if defined (SIRIUS) || defined (FPGA)
	uint32 size=0, value;
	uint32 dst = SPI_BASE_ADDR + offset;
a00243a8:	3c07bec0 	lui	a3,0xbec0
	/* Set HW write protect ?! */

	while (len) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
a00243ac:	34c6a800 	ori	a2,a2,0xa800
a00243b0:	24100006 	li	s0,6
		REG32(SFC_CTL) = 0x00;
		value = REG8(dst);

		/* Erase sector */
		sync();
		if (len >= 0x40000) {
a00243b4:	3c190004 	lui	t9,0x4

	/* Set HW write protect ?! */

	while (len) {
		/* Write enable */
		sync();
a00243b8:	ac400000 	sw	zero,0(v0)

int sed_sfc_erase (uint32 offset, uint32 len)
{
#if defined (SIRIUS) || defined (FPGA)
	uint32 size=0, value;
	uint32 dst = SPI_BASE_ADDR + offset;
a00243bc:	00872021 	addu	a0,a0,a3
	/* Set HW write protect ?! */

	while (len) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
a00243c0:	acd00000 	sw	s0,0(a2)
		REG32(SFC_CTL) = 0x00;
		value = REG8(dst);

		/* Erase sector */
		sync();
		if (len >= 0x40000) {
a00243c4:	00b9602b 	sltu	t4,a1,t9

	while (len) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
		sync();
a00243c8:	ac400000 	sw	zero,0(v0)
		REG32(SFC_CTL) = 0x00;
a00243cc:	ac600000 	sw	zero,0(v1)
		value = REG8(dst);
a00243d0:	909e0000 	lbu	s8,0(a0)
				size = 0x10000;
			} else if (devicetype.sec_32k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_4k_en == 1) {
				if (devicetype.id == PMC_4Mbit)
a00243d4:	00004821 	move	t1,zero
					REG32(SFC_OPCODE) = 0x000000d7;
				else
					REG32(SFC_OPCODE) = CMD_OP_4K_ERASE;
				size = 0x1000;
			}
		} else if ((0x40000 > len) && (len >= 0x10000)) {
a00243d8:	3c16ffff 	lui	s6,0xffff
a00243dc:	3c150003 	lui	s5,0x3
			} else if (devicetype.sec_256k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			}
		} else if (0x8000 > len) {
			if (devicetype.sec_4k_en == 1) {
a00243e0:	240a0001 	li	t2,1
		REG32(SFC_CTL) = ADDR_EN;
		value = REG8(dst);

		/* Read status register */
		do {
			sync();
a00243e4:	00405821 	move	t3,v0
			REG32(SFC_OPCODE) = CMD_OP_READ_STS;
a00243e8:	00c0c021 	move	t8,a2
a00243ec:	24080005 	li	t0,5
			sync();
			REG32(SFC_CTL) = DATA_EN;
a00243f0:	00607821 	move	t7,v1
a00243f4:	24070010 	li	a3,16
		} while ((value = REG8(dst)) & 0x1);

		/* Read */
#if 1 /* For code size */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_READ;
a00243f8:	240e0003 	li	t6,3
		sync();
		REG32(SFC_CTL) = DATA_EN|ADDR_EN; //no need |0x1;
a00243fc:	240d0018 	li	t5,24
		sync();
		REG32(SFC_CTL) = 0x00;
		value = REG8(dst);

		/* Erase sector */
		sync();
a0024400:	ac400000 	sw	zero,0(v0)
		if (len >= 0x40000) {
a0024404:	1580002a 	bnez	t4,a00244b0 <sed_sfc_erase+0x15c>
a0024408:	00b66021 	addu	t4,a1,s6
			if (devicetype.sec_256k_en == 1) {
a002440c:	126a005c 	beq	s3,t2,a0024580 <sed_sfc_erase+0x22c>
a0024410:	00000000 	nop
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			} else if (devicetype.sec_64k_en == 1) {
a0024414:	124a0051 	beq	s2,t2,a002455c <sed_sfc_erase+0x208>
a0024418:	241e00d8 	li	s8,216
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x10000;
			} else if (devicetype.sec_32k_en == 1) {
a002441c:	128a0052 	beq	s4,t2,a0024568 <sed_sfc_erase+0x214>
a0024420:	00000000 	nop
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_4k_en == 1) {
a0024424:	12ea0031 	beq	s7,t2,a00244ec <sed_sfc_erase+0x198>
a0024428:	00000000 	nop
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			}
		}
		sync();
		REG32(SFC_CTL) = ADDR_EN;
a002442c:	240c0008 	li	t4,8
			} else if (devicetype.sec_256k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			}
		}
		sync();
a0024430:	ac400000 	sw	zero,0(v0)
		REG32(SFC_CTL) = ADDR_EN;
a0024434:	ac6c0000 	sw	t4,0(v1)
		value = REG8(dst);
a0024438:	908c0000 	lbu	t4,0(a0)

		/* Read status register */
		do {
			sync();
a002443c:	ac400000 	sw	zero,0(v0)
			REG32(SFC_OPCODE) = CMD_OP_READ_STS;
a0024440:	acc80000 	sw	t0,0(a2)
			sync();
a0024444:	ac400000 	sw	zero,0(v0)
			REG32(SFC_CTL) = DATA_EN;
a0024448:	ac670000 	sw	a3,0(v1)
		} while ((value = REG8(dst)) & 0x1);
a002444c:	908c0000 	lbu	t4,0(a0)
a0024450:	00000000 	nop
a0024454:	318c0001 	andi	t4,t4,0x1
a0024458:	1580fff8 	bnez	t4,a002443c <sed_sfc_erase+0xe8>
a002445c:	00a9602b 	sltu	t4,a1,t1
			printf("sfc erase fail...\n"); //can be removed
			return -1;
		}
#endif
		dst += size;
		size = (len > size)? size: len;
a0024460:	00a0f021 	move	s8,a1
a0024464:	012cf00a 	movz	s8,t1,t4
		len -= size;
a0024468:	00be2823 	subu	a1,a1,s8
			REG32(SFC_CTL) = DATA_EN;
		} while ((value = REG8(dst)) & 0x1);

		/* Read */
#if 1 /* For code size */
		sync();
a002446c:	ad600000 	sw	zero,0(t3)
		REG32(SFC_OPCODE) = CMD_OP_READ;
a0024470:	af0e0000 	sw	t6,0(t8)
		sync();
a0024474:	ad600000 	sw	zero,0(t3)
		REG32(SFC_CTL) = DATA_EN|ADDR_EN; //no need |0x1;
a0024478:	aded0000 	sw	t5,0(t7)
	uint32 size=0, value;
	uint32 dst = SPI_BASE_ADDR + offset;

	/* Set HW write protect ?! */

	while (len) {
a002447c:	10a00044 	beqz	a1,a0024590 <sed_sfc_erase+0x23c>
a0024480:	00000000 	nop
		/* Write enable */
		sync();
a0024484:	ac400000 	sw	zero,0(v0)
		if (REG8(dst) != 0xFF) {
			printf("sfc erase fail...\n"); //can be removed
			return -1;
		}
#endif
		dst += size;
a0024488:	00892021 	addu	a0,a0,t1
	/* Set HW write protect ?! */

	while (len) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
a002448c:	acd00000 	sw	s0,0(a2)
		REG32(SFC_CTL) = 0x00;
		value = REG8(dst);

		/* Erase sector */
		sync();
		if (len >= 0x40000) {
a0024490:	00b9602b 	sltu	t4,a1,t9

	while (len) {
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
		sync();
a0024494:	ac400000 	sw	zero,0(v0)
		REG32(SFC_CTL) = 0x00;
a0024498:	ac600000 	sw	zero,0(v1)
		if (REG8(dst) != 0xFF) {
			printf("sfc erase fail...\n"); //can be removed
			return -1;
		}
#endif
		dst += size;
a002449c:	03c04821 	move	t1,s8
		/* Write enable */
		sync();
		REG32(SFC_OPCODE) = CMD_OP_WRITE_EN;
		sync();
		REG32(SFC_CTL) = 0x00;
		value = REG8(dst);
a00244a0:	909e0000 	lbu	s8,0(a0)

		/* Erase sector */
		sync();
a00244a4:	ac400000 	sw	zero,0(v0)
		if (len >= 0x40000) {
a00244a8:	1180ffd8 	beqz	t4,a002440c <sed_sfc_erase+0xb8>
a00244ac:	00b66021 	addu	t4,a1,s6
					REG32(SFC_OPCODE) = 0x000000d7;
				else
					REG32(SFC_OPCODE) = CMD_OP_4K_ERASE;
				size = 0x1000;
			}
		} else if ((0x40000 > len) && (len >= 0x10000)) {
a00244b0:	0195602b 	sltu	t4,t4,s5
a00244b4:	11800015 	beqz	t4,a002450c <sed_sfc_erase+0x1b8>
a00244b8:	341e8000 	li	s8,0x8000
			if (devicetype.sec_64k_en == 1) {
a00244bc:	124a0027 	beq	s2,t2,a002455c <sed_sfc_erase+0x208>
a00244c0:	241e00d8 	li	s8,216
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x10000;
			} else if (devicetype.sec_32k_en == 1) {
a00244c4:	128a0028 	beq	s4,t2,a0024568 <sed_sfc_erase+0x214>
a00244c8:	00000000 	nop
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_4k_en == 1) {
a00244cc:	12ea0007 	beq	s7,t2,a00244ec <sed_sfc_erase+0x198>
a00244d0:	00000000 	nop
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_64k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x10000;
			} else if (devicetype.sec_256k_en == 1) {
a00244d4:	166affd6 	bne	s3,t2,a0024430 <sed_sfc_erase+0xdc>
a00244d8:	240c0008 	li	t4,8
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
a00244dc:	241e00d8 	li	s8,216
a00244e0:	acde0000 	sw	s8,0(a2)
a00244e4:	0800910b 	j	a002442c <sed_sfc_erase+0xd8>
a00244e8:	3c090004 	lui	t1,0x4
		} else if ((0x10000 > len) && (len >= 0x8000)) {
			if (devicetype.sec_32k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_4k_en == 1) {
				if (devicetype.id == PMC_4Mbit)
a00244ec:	3c097f9d 	lui	t1,0x7f9d
a00244f0:	35297e00 	ori	t1,t1,0x7e00
a00244f4:	12290036 	beq	s1,t1,a00245d0 <sed_sfc_erase+0x27c>
a00244f8:	00000000 	nop
		} else if (0x8000 > len) {
			if (devicetype.sec_4k_en == 1) {
				if (devicetype.id == PMC_4Mbit)
					REG32(SFC_OPCODE) = 0x000000d7;
				else
					REG32(SFC_OPCODE) = CMD_OP_4K_ERASE;
a00244fc:	24090020 	li	t1,32
a0024500:	acc90000 	sw	t1,0(a2)
a0024504:	0800910b 	j	a002442c <sed_sfc_erase+0xd8>
a0024508:	24091000 	li	t1,4096
				size = 0x1000;
			} else if (devicetype.sec_256k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			}
		} else if ((0x10000 > len) && (len >= 0x8000)) {
a002450c:	24ac8000 	addiu	t4,a1,-32768
a0024510:	019e602b 	sltu	t4,t4,s8
a0024514:	1580000b 	bnez	t4,a0024544 <sed_sfc_erase+0x1f0>
a0024518:	00000000 	nop
			} else if (devicetype.sec_256k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			}
		} else if (0x8000 > len) {
			if (devicetype.sec_4k_en == 1) {
a002451c:	12ea0028 	beq	s7,t2,a00245c0 <sed_sfc_erase+0x26c>
a0024520:	00000000 	nop
				if (devicetype.id == PMC_4Mbit)
					REG32(SFC_OPCODE) = 0x000000d7;
				else
					REG32(SFC_OPCODE) = CMD_OP_4K_ERASE;
				size = 0x1000;
			} else if (devicetype.sec_32k_en == 1) {
a0024524:	128a0010 	beq	s4,t2,a0024568 <sed_sfc_erase+0x214>
a0024528:	00000000 	nop
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_64k_en == 1) {
a002452c:	164affe9 	bne	s2,t2,a00244d4 <sed_sfc_erase+0x180>
a0024530:	00000000 	nop
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
a0024534:	240900d8 	li	t1,216
a0024538:	acc90000 	sw	t1,0(a2)
a002453c:	0800910b 	j	a002442c <sed_sfc_erase+0xd8>
a0024540:	3c090001 	lui	t1,0x1
			} else if (devicetype.sec_256k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			}
		} else if ((0x10000 > len) && (len >= 0x8000)) {
			if (devicetype.sec_32k_en == 1) {
a0024544:	128a0008 	beq	s4,t2,a0024568 <sed_sfc_erase+0x214>
a0024548:	00000000 	nop
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
				size = 0x8000;
			} else if (devicetype.sec_4k_en == 1) {
a002454c:	12eaffe7 	beq	s7,t2,a00244ec <sed_sfc_erase+0x198>
a0024550:	00000000 	nop
				if (devicetype.id == PMC_4Mbit)
					REG32(SFC_OPCODE) = 0x000000d7;
				else
					REG32(SFC_OPCODE) = CMD_OP_4K_ERASE;
				size = 0x1000;
			} else if (devicetype.sec_64k_en == 1) {
a0024554:	164a0008 	bne	s2,t2,a0024578 <sed_sfc_erase+0x224>
a0024558:	241e00d8 	li	s8,216
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
a002455c:	acde0000 	sw	s8,0(a2)
a0024560:	0800910b 	j	a002442c <sed_sfc_erase+0xd8>
a0024564:	3c090001 	lui	t1,0x1
					REG32(SFC_OPCODE) = 0x000000d7;
				else
					REG32(SFC_OPCODE) = CMD_OP_4K_ERASE;
				size = 0x1000;
			} else if (devicetype.sec_32k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_32K_ERASE;
a0024568:	24090052 	li	t1,82
a002456c:	acc90000 	sw	t1,0(a2)
a0024570:	0800910b 	j	a002442c <sed_sfc_erase+0xd8>
a0024574:	34098000 	li	t1,0x8000
					REG32(SFC_OPCODE) = CMD_OP_4K_ERASE;
				size = 0x1000;
			} else if (devicetype.sec_64k_en == 1) {
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x10000;
			} else if (devicetype.sec_256k_en == 1) {
a0024578:	166affad 	bne	s3,t2,a0024430 <sed_sfc_erase+0xdc>
a002457c:	240c0008 	li	t4,8
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
a0024580:	240900d8 	li	t1,216
a0024584:	acc90000 	sw	t1,0(a2)
a0024588:	0800910b 	j	a002442c <sed_sfc_erase+0xd8>
a002458c:	3c090004 	lui	t1,0x4
		size = (len > size)? size: len;
		len -= size;
	}
#endif
	return 0;
}
a0024590:	8fbe002c 	lw	s8,44(sp)
a0024594:	8fb70028 	lw	s7,40(sp)
a0024598:	8fb60024 	lw	s6,36(sp)
a002459c:	8fb50020 	lw	s5,32(sp)
a00245a0:	8fb4001c 	lw	s4,28(sp)
a00245a4:	8fb30018 	lw	s3,24(sp)
a00245a8:	8fb20014 	lw	s2,20(sp)
a00245ac:	8fb10010 	lw	s1,16(sp)
a00245b0:	8fb0000c 	lw	s0,12(sp)
a00245b4:	00001021 	move	v0,zero
a00245b8:	03e00008 	jr	ra
a00245bc:	27bd0030 	addiu	sp,sp,48
				REG32(SFC_OPCODE) = CMD_OP_64K_ERASE;
				size = 0x40000;
			}
		} else if (0x8000 > len) {
			if (devicetype.sec_4k_en == 1) {
				if (devicetype.id == PMC_4Mbit)
a00245c0:	3c1e7f9d 	lui	s8,0x7f9d
a00245c4:	37de7e00 	ori	s8,s8,0x7e00
a00245c8:	163effcc 	bne	s1,s8,a00244fc <sed_sfc_erase+0x1a8>
a00245cc:	00000000 	nop
					REG32(SFC_OPCODE) = 0x000000d7;
a00245d0:	240900d7 	li	t1,215
a00245d4:	acc90000 	sw	t1,0(a2)
a00245d8:	0800910b 	j	a002442c <sed_sfc_erase+0xd8>
a00245dc:	24091000 	li	t1,4096

a00245e0 <sed_sfc_init>:

static t_device_type devicetype;

#define SPI_SAFE_OFFSET		0x100000
int sed_sfc_init (void)
{
a00245e0:	27bdffe8 	addiu	sp,sp,-24
a00245e4:	afbf0014 	sw	ra,20(sp)
	uint32 value;
	uint32 dst = SPI_BASE_ADDR + SPI_SAFE_OFFSET;

	/* Clock div */
	//REG32(SFC_SCK) = 0x1f;
	sed_pinmux_spi();
a00245e8:	0c009037 	jal	a00240dc <sed_pinmux_spi>
a00245ec:	00000000 	nop
	REG32(SFC_CTL) = DATA_EN;
	value = REG32(dst) & 0xFFFFFF00;

//	printf("Device ID: 0x%08X\n", value); //can be removed

	devicetype = device[0];
a00245f0:	3c04a002 	lui	a0,0xa002
a00245f4:	24825a90 	addiu	v0,a0,23184

	/* Clock div */
	//REG32(SFC_SCK) = 0x1f;
	sed_pinmux_spi();
	/* Read device ID */
	sync();
a00245f8:	3c03b801 	lui	v1,0xb801
	REG32(SFC_CTL) = DATA_EN;
	value = REG32(dst) & 0xFFFFFF00;

//	printf("Device ID: 0x%08X\n", value); //can be removed

	devicetype = device[0];
a00245fc:	8c4b0014 	lw	t3,20(v0)
	sed_pinmux_spi();
	/* Read device ID */
	sync();
	REG32(SFC_OPCODE) = CMD_OP_JEDEC_ID;
	sync();
	REG32(SFC_CTL) = DATA_EN;
a0024600:	3465a804 	ori	a1,v1,0xa804
	value = REG32(dst) & 0xFFFFFF00;

//	printf("Device ID: 0x%08X\n", value); //can be removed

	devicetype = device[0];
a0024604:	8c490004 	lw	t1,4(v0)
a0024608:	8c480008 	lw	t0,8(v0)
a002460c:	8c47000c 	lw	a3,12(v0)
a0024610:	8c460010 	lw	a2,16(v0)
	/* Clock div */
	//REG32(SFC_SCK) = 0x1f;
	sed_pinmux_spi();
	/* Read device ID */
	sync();
	REG32(SFC_OPCODE) = CMD_OP_JEDEC_ID;
a0024614:	240c009f 	li	t4,159

	/* Clock div */
	//REG32(SFC_SCK) = 0x1f;
	sed_pinmux_spi();
	/* Read device ID */
	sync();
a0024618:	3462a020 	ori	v0,v1,0xa020
	REG32(SFC_OPCODE) = CMD_OP_JEDEC_ID;
a002461c:	3463a800 	ori	v1,v1,0xa800

	/* Clock div */
	//REG32(SFC_SCK) = 0x1f;
	sed_pinmux_spi();
	/* Read device ID */
	sync();
a0024620:	ac400000 	sw	zero,0(v0)
	REG32(SFC_CTL) = DATA_EN;
	value = REG32(dst) & 0xFFFFFF00;

//	printf("Device ID: 0x%08X\n", value); //can be removed

	devicetype = device[0];
a0024624:	8c8a5a90 	lw	t2,23184(a0)
	/* Clock div */
	//REG32(SFC_SCK) = 0x1f;
	sed_pinmux_spi();
	/* Read device ID */
	sync();
	REG32(SFC_OPCODE) = CMD_OP_JEDEC_ID;
a0024628:	ac6c0000 	sw	t4,0(v1)
	REG32(SFC_CTL) = DATA_EN;
	value = REG32(dst) & 0xFFFFFF00;

//	printf("Device ID: 0x%08X\n", value); //can be removed

	devicetype = device[0];
a002462c:	3c04a003 	lui	a0,0xa003
	//REG32(SFC_SCK) = 0x1f;
	sed_pinmux_spi();
	/* Read device ID */
	sync();
	REG32(SFC_OPCODE) = CMD_OP_JEDEC_ID;
	sync();
a0024630:	ac400000 	sw	zero,0(v0)
	REG32(SFC_CTL) = DATA_EN;
a0024634:	24020010 	li	v0,16
a0024638:	aca20000 	sw	v0,0(a1)
	value = REG32(dst) & 0xFFFFFF00;

//	printf("Device ID: 0x%08X\n", value); //can be removed

	devicetype = device[0];
a002463c:	24829c30 	addiu	v0,a0,-25552
a0024640:	ac4b0014 	sw	t3,20(v0)
	/* Read device ID */
	sync();
	REG32(SFC_OPCODE) = CMD_OP_JEDEC_ID;
	sync();
	REG32(SFC_CTL) = DATA_EN;
	value = REG32(dst) & 0xFFFFFF00;
a0024644:	3c0bbed0 	lui	t3,0xbed0
a0024648:	8d6b0000 	lw	t3,0(t3)
#endif

	/* Read */
#if 1 /* For code size */
//	sync();
	REG32(SFC_OPCODE) = CMD_OP_READ;
a002464c:	240b0003 	li	t3,3
a0024650:	ac6b0000 	sw	t3,0(v1)
//	sync();
	REG32(SFC_CTL) = DATA_EN|ADDR_EN;
a0024654:	24030018 	li	v1,24
a0024658:	aca30000 	sw	v1,0(a1)
	REG32(SFC_CTL) = DATA_EN;
	value = REG32(dst) & 0xFFFFFF00;

//	printf("Device ID: 0x%08X\n", value); //can be removed

	devicetype = device[0];
a002465c:	ac490004 	sw	t1,4(v0)
a0024660:	ac480008 	sw	t0,8(v0)
a0024664:	ac47000c 	sw	a3,12(v0)
a0024668:	ac460010 	sw	a2,16(v0)

#else
	devicetype.string = "UNKNOWN"; //make compiler happy
#endif
	return 0;
}
a002466c:	8fbf0014 	lw	ra,20(sp)
a0024670:	00001021 	move	v0,zero
	REG32(SFC_CTL) = DATA_EN;
	value = REG32(dst) & 0xFFFFFF00;

//	printf("Device ID: 0x%08X\n", value); //can be removed

	devicetype = device[0];
a0024674:	ac8a9c30 	sw	t2,-25552(a0)

#else
	devicetype.string = "UNKNOWN"; //make compiler happy
#endif
	return 0;
}
a0024678:	03e00008 	jr	ra
a002467c:	27bd0018 	addiu	sp,sp,24

a0024680 <sed_timer_start>:

void sed_timer_start()
{
	/* Use MISC timer6 to get tick SIRIUS(27MHz) */
	/* One tick: Sirius(37ns)  */
	REG32(0xb801b618) = 0xffffffff;
a0024680:	3c02b801 	lui	v0,0xb801
	REG32(0xb801b658) = 0x80000000;
a0024684:	3443b658 	ori	v1,v0,0xb658

void sed_timer_start()
{
	/* Use MISC timer6 to get tick SIRIUS(27MHz) */
	/* One tick: Sirius(37ns)  */
	REG32(0xb801b618) = 0xffffffff;
a0024688:	2404ffff 	li	a0,-1
a002468c:	3442b618 	ori	v0,v0,0xb618
a0024690:	ac440000 	sw	a0,0(v0)
	REG32(0xb801b658) = 0x80000000;
a0024694:	3c028000 	lui	v0,0x8000
a0024698:	ac620000 	sw	v0,0(v1)
}
a002469c:	03e00008 	jr	ra
a00246a0:	00000000 	nop

a00246a4 <sed_timer_getstamp>:

// it is start form 0
// the timer tick will be 27M/per second
uint32 sed_timer_getstamp()
{
	return REG32(0xb801b638);	
a00246a4:	3c02b801 	lui	v0,0xb801
a00246a8:	3442b638 	ori	v0,v0,0xb638
a00246ac:	8c420000 	lw	v0,0(v0)
}
a00246b0:	03e00008 	jr	ra
a00246b4:	00000000 	nop

a00246b8 <sed_timer_stop>:

void sed_timer_stop()
{
	REG32(0xb801b658) = 0x00000000;	
a00246b8:	3c02b801 	lui	v0,0xb801
a00246bc:	3442b658 	ori	v0,v0,0xb658
a00246c0:	ac400000 	sw	zero,0(v0)
}
a00246c4:	03e00008 	jr	ra
a00246c8:	00000000 	nop

a00246cc <sed_timer_1s_delay_example>:

void sed_timer_start()
{
	/* Use MISC timer6 to get tick SIRIUS(27MHz) */
	/* One tick: Sirius(37ns)  */
	REG32(0xb801b618) = 0xffffffff;
a00246cc:	3c05b801 	lui	a1,0xb801
a00246d0:	34a3b618 	ori	v1,a1,0xb618
a00246d4:	2404ffff 	li	a0,-1
a00246d8:	ac640000 	sw	a0,0(v1)
	REG32(0xb801b658) = 0x80000000;
a00246dc:	34a2b658 	ori	v0,a1,0xb658
a00246e0:	3c038000 	lui	v1,0x8000
a00246e4:	ac430000 	sw	v1,0(v0)

// it is start form 0
// the timer tick will be 27M/per second
uint32 sed_timer_getstamp()
{
	return REG32(0xb801b638);	
a00246e8:	34a5b638 	ori	a1,a1,0xb638
a00246ec:	8ca30000 	lw	v1,0(a1)
a00246f0:	8ca20000 	lw	v0,0(a1)
	sed_timer_start();
	tick1 = sed_timer_getstamp();
	//sed_printf("start\n");
	tick2 = sed_timer_getstamp();
	// counting to 27M
	while(tick2-tick1<27000000)
a00246f4:	3c04019b 	lui	a0,0x19b
a00246f8:	3484fcc0 	ori	a0,a0,0xfcc0
a00246fc:	00431023 	subu	v0,v0,v1
a0024700:	0044102b 	sltu	v0,v0,a0
a0024704:	10400007 	beqz	v0,a0024724 <sed_timer_1s_delay_example+0x58>
a0024708:	00000000 	nop

// it is start form 0
// the timer tick will be 27M/per second
uint32 sed_timer_getstamp()
{
	return REG32(0xb801b638);	
a002470c:	8ca20000 	lw	v0,0(a1)
a0024710:	00000000 	nop
	sed_timer_start();
	tick1 = sed_timer_getstamp();
	//sed_printf("start\n");
	tick2 = sed_timer_getstamp();
	// counting to 27M
	while(tick2-tick1<27000000)
a0024714:	00431023 	subu	v0,v0,v1
a0024718:	0044102b 	sltu	v0,v0,a0
a002471c:	1440fffb 	bnez	v0,a002470c <sed_timer_1s_delay_example+0x40>
a0024720:	00000000 	nop
	{
		tick2 = sed_timer_getstamp();
	}
	sed_printf("after 1s\n");
a0024724:	3c04a002 	lui	a0,0xa002
a0024728:	24845aa8 	addiu	a0,a0,23208
a002472c:	08008b6c 	j	a0022db0 <printf>
a0024730:	00000000 	nop

a0024734 <rtk_getc>:
#define RPC_DEV        UART0_REG_BASE
#define CON_DEV        UART1_REG_BASE

unsigned char rtk_getc(unsigned char* ch,unsigned int dev_no)
{
	if ((REG32(dev_no + UART_LSR) & UARTINFO_DATA_READY_MASK) == 0)
a0024734:	8ca20014 	lw	v0,20(a1)
a0024738:	00000000 	nop
a002473c:	30420001 	andi	v0,v0,0x1
a0024740:	10400005 	beqz	v0,a0024758 <rtk_getc+0x24>
a0024744:	00000000 	nop
		return -1;

	*ch = (uint8) (REG32(dev_no + UART_RBR) & 0xFF);
a0024748:	8ca30000 	lw	v1,0(a1)
a002474c:	00001021 	move	v0,zero
	return 0;
}
a0024750:	03e00008 	jr	ra
a0024754:	a0830000 	sb	v1,0(a0)
#define RPC_DEV        UART0_REG_BASE
#define CON_DEV        UART1_REG_BASE

unsigned char rtk_getc(unsigned char* ch,unsigned int dev_no)
{
	if ((REG32(dev_no + UART_LSR) & UARTINFO_DATA_READY_MASK) == 0)
a0024758:	03e00008 	jr	ra
a002475c:	240200ff 	li	v0,255

a0024760 <rtk_putc>:
	*ch = (uint8) (REG32(dev_no + UART_RBR) & 0xFF);
	return 0;
}

void rtk_putc(char c,unsigned int dev_no)
{
a0024760:	00042600 	sll	a0,a0,0x18
a0024764:	00042603 	sra	a0,a0,0x18
a0024768:	24a30014 	addiu	v1,a1,20
    while ((REG32(dev_no+UART_LSR) & 0x60) == 0);
a002476c:	8c620000 	lw	v0,0(v1)
a0024770:	00000000 	nop
a0024774:	30420060 	andi	v0,v0,0x60
a0024778:	1040fffc 	beqz	v0,a002476c <rtk_putc+0xc>
a002477c:	00000000 	nop
    REG32(dev_no+UART_THR) = c;
a0024780:	aca40000 	sw	a0,0(a1)
}
a0024784:	03e00008 	jr	ra
a0024788:	00000000 	nop

a002478c <sed_uart_write>:
void sed_uart_write (uint8 *ch)
{
	//while((UartReg->UartLsr.Value & UARTINFO_TRANSMITTER_READY_MASK) !=
	//								UARTINFO_TRANSMITTER_READY_MASK);
	//UartReg->UartRbrTheDll.Value = *ch;
	rtk_putc(*ch,UART0_REG_BASE);
a002478c:	90840000 	lbu	a0,0(a0)
	return 0;
}

void rtk_putc(char c,unsigned int dev_no)
{
    while ((REG32(dev_no+UART_LSR) & 0x60) == 0);
a0024790:	3c03b806 	lui	v1,0xb806
a0024794:	34632314 	ori	v1,v1,0x2314
a0024798:	8c620000 	lw	v0,0(v1)
a002479c:	00000000 	nop
a00247a0:	30420060 	andi	v0,v0,0x60
a00247a4:	1040fffc 	beqz	v0,a0024798 <sed_uart_write+0xc>
a00247a8:	3c02b806 	lui	v0,0xb806
    REG32(dev_no+UART_THR) = c;
a00247ac:	00041e00 	sll	v1,a0,0x18
a00247b0:	00031e03 	sra	v1,v1,0x18
a00247b4:	34422300 	ori	v0,v0,0x2300
a00247b8:	ac430000 	sw	v1,0(v0)
{
	//while((UartReg->UartLsr.Value & UARTINFO_TRANSMITTER_READY_MASK) !=
	//								UARTINFO_TRANSMITTER_READY_MASK);
	//UartReg->UartRbrTheDll.Value = *ch;
	rtk_putc(*ch,UART0_REG_BASE);
}
a00247bc:	03e00008 	jr	ra
a00247c0:	00000000 	nop

a00247c4 <sed_uart_read>:
#define RPC_DEV        UART0_REG_BASE
#define CON_DEV        UART1_REG_BASE

unsigned char rtk_getc(unsigned char* ch,unsigned int dev_no)
{
	if ((REG32(dev_no + UART_LSR) & UARTINFO_DATA_READY_MASK) == 0)
a00247c4:	3c02b806 	lui	v0,0xb806
a00247c8:	34432314 	ori	v1,v0,0x2314
a00247cc:	8c630000 	lw	v1,0(v1)
a00247d0:	00000000 	nop
a00247d4:	30630001 	andi	v1,v1,0x1
a00247d8:	10600006 	beqz	v1,a00247f4 <sed_uart_read+0x30>
a00247dc:	00000000 	nop
		return -1;

	*ch = (uint8) (REG32(dev_no + UART_RBR) & 0xFF);
a00247e0:	34422300 	ori	v0,v0,0x2300
a00247e4:	8c430000 	lw	v1,0(v0)
a00247e8:	00001021 	move	v0,zero
//		return -1;
//
//	*ch = (uint8) (UartReg->UartRbrTheDll.Value & 0xFF);
//	return 0;
	return rtk_getc(ch,UART0_REG_BASE);
}
a00247ec:	03e00008 	jr	ra
a00247f0:	a0830000 	sb	v1,0(a0)
#define RPC_DEV        UART0_REG_BASE
#define CON_DEV        UART1_REG_BASE

unsigned char rtk_getc(unsigned char* ch,unsigned int dev_no)
{
	if ((REG32(dev_no + UART_LSR) & UARTINFO_DATA_READY_MASK) == 0)
a00247f4:	03e00008 	jr	ra
a00247f8:	240200ff 	li	v0,255

a00247fc <sed_uart1_write>:
//}

void sed_uart1_write (uint8 *ch)
{
	//rtk_putc(*ch);
	rtk_putc(*ch,UART1_REG_BASE);
a00247fc:	90840000 	lbu	a0,0(a0)
	return 0;
}

void rtk_putc(char c,unsigned int dev_no)
{
    while ((REG32(dev_no+UART_LSR) & 0x60) == 0);
a0024800:	3c03b801 	lui	v1,0xb801
a0024804:	3463bc14 	ori	v1,v1,0xbc14
a0024808:	8c620000 	lw	v0,0(v1)
a002480c:	00000000 	nop
a0024810:	30420060 	andi	v0,v0,0x60
a0024814:	1040fffc 	beqz	v0,a0024808 <sed_uart1_write+0xc>
a0024818:	3c02b801 	lui	v0,0xb801
    REG32(dev_no+UART_THR) = c;
a002481c:	00041e00 	sll	v1,a0,0x18
a0024820:	00031e03 	sra	v1,v1,0x18
a0024824:	3442bc00 	ori	v0,v0,0xbc00
a0024828:	ac430000 	sw	v1,0(v0)

void sed_uart1_write (uint8 *ch)
{
	//rtk_putc(*ch);
	rtk_putc(*ch,UART1_REG_BASE);
}
a002482c:	03e00008 	jr	ra
a0024830:	00000000 	nop

a0024834 <sed_uart1_read>:
#define RPC_DEV        UART0_REG_BASE
#define CON_DEV        UART1_REG_BASE

unsigned char rtk_getc(unsigned char* ch,unsigned int dev_no)
{
	if ((REG32(dev_no + UART_LSR) & UARTINFO_DATA_READY_MASK) == 0)
a0024834:	3c02b801 	lui	v0,0xb801
a0024838:	3443bc14 	ori	v1,v0,0xbc14
a002483c:	8c630000 	lw	v1,0(v1)
a0024840:	00000000 	nop
a0024844:	30630001 	andi	v1,v1,0x1
a0024848:	10600006 	beqz	v1,a0024864 <sed_uart1_read+0x30>
a002484c:	00000000 	nop
		return -1;

	*ch = (uint8) (REG32(dev_no + UART_RBR) & 0xFF);
a0024850:	3442bc00 	ori	v0,v0,0xbc00
a0024854:	8c430000 	lw	v1,0(v0)
a0024858:	00001021 	move	v0,zero
//		return -1;
//
//	*ch = (uint8) (Uart1Reg->UartRbrTheDll.Value & 0xFF);
//	return 0;
	return rtk_getc(ch,UART1_REG_BASE);
}
a002485c:	03e00008 	jr	ra
a0024860:	a0830000 	sb	v1,0(a0)
#define RPC_DEV        UART0_REG_BASE
#define CON_DEV        UART1_REG_BASE

unsigned char rtk_getc(unsigned char* ch,unsigned int dev_no)
{
	if ((REG32(dev_no + UART_LSR) & UARTINFO_DATA_READY_MASK) == 0)
a0024864:	03e00008 	jr	ra
a0024868:	240200ff 	li	v0,255

a002486c <sed_uart_init>:
    while ((REG32(dev_no+UART_LSR) & 0x60) == 0);
    REG32(dev_no+UART_THR) = c;
}

void sed_uart_init (void)
{
a002486c:	27bdffe8 	addiu	sp,sp,-24
a0024870:	afbf0014 	sw	ra,20(sp)
	sed_pinmux_uart();
a0024874:	0c009042 	jal	a0024108 <sed_pinmux_uart>
a0024878:	00000000 	nop

#if defined (SIRIUS)
	//sed_pinmux_uart();

	/* Initial UART0 */
	REG32(U0LCR) = 0x90;
a002487c:	3c03b806 	lui	v1,0xb806
	REG32(U0IIR_FCR) = 0xb7;
	REG32(U0IER_DLH) = 0;

#if !defined(FPGA)
	/* Initial UART1 */
	REG32(U1LCR) = 0x90;
a0024880:	3c02b801 	lui	v0,0xb801

#if defined (SIRIUS)
	//sed_pinmux_uart();

	/* Initial UART0 */
	REG32(U0LCR) = 0x90;
a0024884:	346a230c 	ori	t2,v1,0x230c
#if defined(FPGA)
	REG32(U0RBR_THR_DLL) = 0xe;	// 115200 baud (for FPGA 25MHz) 25*1000*1000/115200/16
#else
	REG32(U0RBR_THR_DLL) = 0xf;	// 115200 baud (for ASIC 27MHz)
#endif
	REG32(U0IER_DLH) = 0;
a0024888:	34692304 	ori	t1,v1,0x2304
	REG32(U0LCR) = 0x3;		// 8-N-1
	REG32(U0IIR_FCR) = 0xb7;
a002488c:	346c2308 	ori	t4,v1,0x2308

#if defined (SIRIUS)
	//sed_pinmux_uart();

	/* Initial UART0 */
	REG32(U0LCR) = 0x90;
a0024890:	24080090 	li	t0,144
#if defined(FPGA)
	REG32(U0RBR_THR_DLL) = 0xe;	// 115200 baud (for FPGA 25MHz) 25*1000*1000/115200/16
#else
	REG32(U0RBR_THR_DLL) = 0xf;	// 115200 baud (for ASIC 27MHz)
a0024894:	34632300 	ori	v1,v1,0x2300
a0024898:	240d000f 	li	t5,15

#if defined (SIRIUS)
	//sed_pinmux_uart();

	/* Initial UART0 */
	REG32(U0LCR) = 0x90;
a002489c:	ad480000 	sw	t0,0(t2)
	REG32(U0IIR_FCR) = 0xb7;
	REG32(U0IER_DLH) = 0;

#if !defined(FPGA)
	/* Initial UART1 */
	REG32(U1LCR) = 0x90;
a00248a0:	3446bc0c 	ori	a2,v0,0xbc0c
	/* Initial UART0 */
	REG32(U0LCR) = 0x90;
#if defined(FPGA)
	REG32(U0RBR_THR_DLL) = 0xe;	// 115200 baud (for FPGA 25MHz) 25*1000*1000/115200/16
#else
	REG32(U0RBR_THR_DLL) = 0xf;	// 115200 baud (for ASIC 27MHz)
a00248a4:	ac6d0000 	sw	t5,0(v1)
#if defined(FPGA)
	REG32(U1RBR_THR_DLL) = 0xe;	 // 115200 baud (for FPGA 25MHz) 25*1000*1000/115200/16
#else
	REG32(U1RBR_THR_DLL) = 0xea; // 115200 baud (for ASIC 432MHz)
#endif
	REG32(U1IER_DLH) = 0;
a00248a8:	3444bc04 	ori	a0,v0,0xbc04
	REG32(U1LCR) = 0x3; 	// 8-N-1
	REG32(U1IIR_FCR) = 0xb7;
a00248ac:	344bbc08 	ori	t3,v0,0xbc08
	REG32(U0RBR_THR_DLL) = 0xe;	// 115200 baud (for FPGA 25MHz) 25*1000*1000/115200/16
#else
	REG32(U0RBR_THR_DLL) = 0xf;	// 115200 baud (for ASIC 27MHz)
#endif
	REG32(U0IER_DLH) = 0;
	REG32(U0LCR) = 0x3;		// 8-N-1
a00248b0:	24070003 	li	a3,3
	REG32(U0IIR_FCR) = 0xb7;
a00248b4:	240500b7 	li	a1,183
	/* Initial UART1 */
	REG32(U1LCR) = 0x90;
#if defined(FPGA)
	REG32(U1RBR_THR_DLL) = 0xe;	 // 115200 baud (for FPGA 25MHz) 25*1000*1000/115200/16
#else
	REG32(U1RBR_THR_DLL) = 0xea; // 115200 baud (for ASIC 432MHz)
a00248b8:	3442bc00 	ori	v0,v0,0xbc00
a00248bc:	240300ea 	li	v1,234
#if defined(FPGA)
	REG32(U0RBR_THR_DLL) = 0xe;	// 115200 baud (for FPGA 25MHz) 25*1000*1000/115200/16
#else
	REG32(U0RBR_THR_DLL) = 0xf;	// 115200 baud (for ASIC 27MHz)
#endif
	REG32(U0IER_DLH) = 0;
a00248c0:	ad200000 	sw	zero,0(t1)
	REG32(U0LCR) = 0x3;		// 8-N-1
a00248c4:	ad470000 	sw	a3,0(t2)
	REG32(U0IIR_FCR) = 0xb7;
a00248c8:	ad850000 	sw	a1,0(t4)
	REG32(U0IER_DLH) = 0;
a00248cc:	ad200000 	sw	zero,0(t1)

#if !defined(FPGA)
	/* Initial UART1 */
	REG32(U1LCR) = 0x90;
a00248d0:	acc80000 	sw	t0,0(a2)
#if defined(FPGA)
	REG32(U1RBR_THR_DLL) = 0xe;	 // 115200 baud (for FPGA 25MHz) 25*1000*1000/115200/16
#else
	REG32(U1RBR_THR_DLL) = 0xea; // 115200 baud (for ASIC 432MHz)
a00248d4:	ac430000 	sw	v1,0(v0)
#endif
	REG32(U1IER_DLH) = 0;
a00248d8:	ac800000 	sw	zero,0(a0)
	REG32(U1LCR) = 0x3; 	// 8-N-1
a00248dc:	acc70000 	sw	a3,0(a2)
	REG32(U1IIR_FCR) = 0xb7;
a00248e0:	ad650000 	sw	a1,0(t3)
	REG32(U1IER_DLH) = 0;
a00248e4:	ac800000 	sw	zero,0(a0)
#endif
#endif
}
a00248e8:	8fbf0014 	lw	ra,20(sp)
a00248ec:	00000000 	nop
a00248f0:	03e00008 	jr	ra
a00248f4:	27bd0018 	addiu	sp,sp,24

a00248f8 <sed_wdog_reset>:
	REG32(MIS_TCWCR) = 0;		// enable watchdog
#endif


#if defined (SIRIUS)
	REG32(0xb8017184) = 0x0;  // reset chip for CUTA only
a00248f8:	3c02b801 	lui	v0,0xb801
a00248fc:	34427184 	ori	v0,v0,0x7184
a0024900:	ac400000 	sw	zero,0(v0)
	REG32(0xb80600E4) = 0xa;  // reset chip
a0024904:	3c02b806 	lui	v0,0xb806
a0024908:	2403000a 	li	v1,10
a002490c:	344200e4 	ori	v0,v0,0xe4
a0024910:	ac430000 	sw	v1,0(v0)
#endif


}
a0024914:	03e00008 	jr	ra
a0024918:	00000000 	nop

a002491c <InitTimer>:

void InitTimer(unsigned int dwInit)
{

	//Disable Interrupt
	REG32(0xb801b664) = 0;
a002491c:	3c02b801 	lui	v0,0xb801

	//Disable Timer
	REG32(0xb801b644) = 0;
a0024920:	3443b644 	ori	v1,v0,0xb644

	//Enable Timer Mode
	REG32(0xb801b644) = 0xC0000000;

	// Clear Interrupt Pending (must after enable)
	REG32(0xb801b008) = 1 << (7);
a0024924:	3445b008 	ori	a1,v0,0xb008

void InitTimer(unsigned int dwInit)
{

	//Disable Interrupt
	REG32(0xb801b664) = 0;
a0024928:	3446b664 	ori	a2,v0,0xb664

	//Disable Timer
	REG32(0xb801b644) = 0;

	//Set The Initial Value
	REG32(0xb801b604) = dwInit;
a002492c:	3442b604 	ori	v0,v0,0xb604

void InitTimer(unsigned int dwInit)
{

	//Disable Interrupt
	REG32(0xb801b664) = 0;
a0024930:	acc00000 	sw	zero,0(a2)

	//Disable Timer
	REG32(0xb801b644) = 0;
a0024934:	ac600000 	sw	zero,0(v1)

	//Set The Initial Value
	REG32(0xb801b604) = dwInit;
a0024938:	ac440000 	sw	a0,0(v0)

	//Enable Timer Mode
	REG32(0xb801b644) = 0xC0000000;
a002493c:	3c02c000 	lui	v0,0xc000
a0024940:	ac620000 	sw	v0,0(v1)

	// Clear Interrupt Pending (must after enable)
	REG32(0xb801b008) = 1 << (7);
a0024944:	24020080 	li	v0,128
a0024948:	aca20000 	sw	v0,0(a1)
}
a002494c:	03e00008 	jr	ra
a0024950:	00000000 	nop

a0024954 <SystemTimeout>:
bool SystemTimeout()
{
	bool	bIoStatus = FALSE;
	UINT32 	bitmask = 1 << (7);

	if(REG32(0xb801b008) & bitmask)
a0024954:	3c02b801 	lui	v0,0xb801
a0024958:	3442b008 	ori	v0,v0,0xb008
a002495c:	8c420000 	lw	v0,0(v0)
a0024960:	00000000 	nop
a0024964:	000211c2 	srl	v0,v0,0x7
	{
		bIoStatus = TRUE;
	}

	return bIoStatus;
}
a0024968:	03e00008 	jr	ra
a002496c:	30420001 	andi	v0,v0,0x1

a0024970 <arom_mdelay>:

#define TIMERINFO_MSEC      1000000/37

void arom_mdelay(unsigned int dwMiniSecond)
{
	InitTimer(dwMiniSecond*TIMERINFO_MSEC);
a0024970:	3c02000f 	lui	v0,0xf
a0024974:	34424240 	ori	v0,v0,0x4240
a0024978:	00820018 	mult	a0,v0
a002497c:	3c06bacf 	lui	a2,0xbacf
a0024980:	34c6914d 	ori	a2,a2,0x914d

void InitTimer(unsigned int dwInit)
{

	//Disable Interrupt
	REG32(0xb801b664) = 0;
a0024984:	3c07b801 	lui	a3,0xb801

	//Enable Timer Mode
	REG32(0xb801b644) = 0xC0000000;

	// Clear Interrupt Pending (must after enable)
	REG32(0xb801b008) = 1 << (7);
a0024988:	34e3b008 	ori	v1,a3,0xb008

	//Disable Interrupt
	REG32(0xb801b664) = 0;

	//Disable Timer
	REG32(0xb801b644) = 0;
a002498c:	34e5b644 	ori	a1,a3,0xb644

void InitTimer(unsigned int dwInit)
{

	//Disable Interrupt
	REG32(0xb801b664) = 0;
a0024990:	34e2b664 	ori	v0,a3,0xb664

	//Disable Timer
	REG32(0xb801b644) = 0;

	//Set The Initial Value
	REG32(0xb801b604) = dwInit;
a0024994:	34e7b604 	ori	a3,a3,0xb604

void InitTimer(unsigned int dwInit)
{

	//Disable Interrupt
	REG32(0xb801b664) = 0;
a0024998:	ac400000 	sw	zero,0(v0)

	//Disable Timer
	REG32(0xb801b644) = 0;
a002499c:	aca00000 	sw	zero,0(a1)
bool SystemTimeout()
{
	bool	bIoStatus = FALSE;
	UINT32 	bitmask = 1 << (7);

	if(REG32(0xb801b008) & bitmask)
a00249a0:	00601021 	move	v0,v1

#define TIMERINFO_MSEC      1000000/37

void arom_mdelay(unsigned int dwMiniSecond)
{
	InitTimer(dwMiniSecond*TIMERINFO_MSEC);
a00249a4:	00002012 	mflo	a0
a00249a8:	00860019 	multu	a0,a2
a00249ac:	00003010 	mfhi	a2
a00249b0:	00862023 	subu	a0,a0,a2
a00249b4:	00042042 	srl	a0,a0,0x1
a00249b8:	00c43021 	addu	a2,a2,a0
a00249bc:	00063142 	srl	a2,a2,0x5

	//Set The Initial Value
	REG32(0xb801b604) = dwInit;

	//Enable Timer Mode
	REG32(0xb801b644) = 0xC0000000;
a00249c0:	3c04c000 	lui	a0,0xc000

	//Disable Timer
	REG32(0xb801b644) = 0;

	//Set The Initial Value
	REG32(0xb801b604) = dwInit;
a00249c4:	ace60000 	sw	a2,0(a3)

	//Enable Timer Mode
	REG32(0xb801b644) = 0xC0000000;
a00249c8:	aca40000 	sw	a0,0(a1)

	// Clear Interrupt Pending (must after enable)
	REG32(0xb801b008) = 1 << (7);
a00249cc:	24040080 	li	a0,128
a00249d0:	ac640000 	sw	a0,0(v1)
bool SystemTimeout()
{
	bool	bIoStatus = FALSE;
	UINT32 	bitmask = 1 << (7);

	if(REG32(0xb801b008) & bitmask)
a00249d4:	8c430000 	lw	v1,0(v0)
a00249d8:	00000000 	nop
a00249dc:	30630080 	andi	v1,v1,0x80
a00249e0:	1060fffc 	beqz	v1,a00249d4 <arom_mdelay+0x64>
a00249e4:	00000000 	nop
void arom_mdelay(unsigned int dwMiniSecond)
{
	InitTimer(dwMiniSecond*TIMERINFO_MSEC);
	//Wait for Interrupt Pending Status
	while(SystemTimeout() == FALSE);
}
a00249e8:	03e00008 	jr	ra
a00249ec:	00000000 	nop

a00249f0 <arom_mask_register>:

//=====================Start init DDR============================
void arom_mask_register(const unsigned int reg_addr, const unsigned int AND_filter,
	 const unsigned int OR_filter)
{
	REG32(reg_addr) = (REG32(reg_addr) & AND_filter) | OR_filter;
a00249f0:	8c830000 	lw	v1,0(a0)


//=====================Start init DDR============================
void arom_mask_register(const unsigned int reg_addr, const unsigned int AND_filter,
	 const unsigned int OR_filter)
{
a00249f4:	00801021 	move	v0,a0
	REG32(reg_addr) = (REG32(reg_addr) & AND_filter) | OR_filter;
	arom_mdelay(20);
a00249f8:	24040014 	li	a0,20

//=====================Start init DDR============================
void arom_mask_register(const unsigned int reg_addr, const unsigned int AND_filter,
	 const unsigned int OR_filter)
{
	REG32(reg_addr) = (REG32(reg_addr) & AND_filter) | OR_filter;
a00249fc:	00651824 	and	v1,v1,a1
a0024a00:	00661825 	or	v1,v1,a2
a0024a04:	ac430000 	sw	v1,0(v0)
	arom_mdelay(20);
a0024a08:	0800925c 	j	a0024970 <arom_mdelay>
a0024a0c:	00000000 	nop

a0024a10 <sed_ddr_init>:
	//Wait for Interrupt Pending Status
	while(SystemTimeout() == FALSE);
}

void sed_ddr_init()
{
a0024a10:	27bdffc8 	addiu	sp,sp,-56
a0024a14:	afbf0034 	sw	ra,52(sp)
a0024a18:	afbe0030 	sw	s8,48(sp)
a0024a1c:	afb7002c 	sw	s7,44(sp)
a0024a20:	afb60028 	sw	s6,40(sp)
a0024a24:	afb50024 	sw	s5,36(sp)
a0024a28:	afb40020 	sw	s4,32(sp)
a0024a2c:	afb3001c 	sw	s3,28(sp)
a0024a30:	afb20018 	sw	s2,24(sp)
a0024a34:	afb10014 	sw	s1,20(sp)
a0024a38:	afb00010 	sw	s0,16(sp)

#ifdef ENABLE_DDR

	//-------- HDMI bandgap power---------
	arom_mask_register(0xb800000c, 0xfffffffd, 0x00000002);// enable HDMI clock
a0024a3c:	3c11b800 	lui	s1,0xb800
a0024a40:	3624000c 	ori	a0,s1,0xc
a0024a44:	2405fffd 	li	a1,-3
a0024a48:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024a4c:	24060002 	li	a2,2
	arom_mask_register(0xb800000c, 0xfffffffd, 0x00000000);// disable HDMI clock
	arom_mask_register(0xb8000008, 0xfffdffff, 0x00000000);// hold HDMI reset
a0024a50:	3c10fffd 	lui	s0,0xfffd

#ifdef ENABLE_DDR

	//-------- HDMI bandgap power---------
	arom_mask_register(0xb800000c, 0xfffffffd, 0x00000002);// enable HDMI clock
	arom_mask_register(0xb800000c, 0xfffffffd, 0x00000000);// disable HDMI clock
a0024a54:	3624000c 	ori	a0,s1,0xc
a0024a58:	2405fffd 	li	a1,-3
a0024a5c:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024a60:	00003021 	move	a2,zero
	arom_mask_register(0xb8000008, 0xfffdffff, 0x00000000);// hold HDMI reset
a0024a64:	36240008 	ori	a0,s1,0x8
a0024a68:	3605ffff 	ori	a1,s0,0xffff
a0024a6c:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024a70:	00003021 	move	a2,zero
	arom_mask_register(0xb8000008, 0xfffdffff, 0x00020000);// release HDMI reset
a0024a74:	3605ffff 	ori	a1,s0,0xffff
a0024a78:	3c060002 	lui	a2,0x2
a0024a7c:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024a80:	36240008 	ori	a0,s1,0x8
	arom_mdelay(0x1);
a0024a84:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024a88:	24040001 	li	a0,1
	arom_mask_register(0xb800000c, 0xfffffffd, 0x00000002);// enable HDMI clock
a0024a8c:	2405fffd 	li	a1,-3
a0024a90:	24060002 	li	a2,2
a0024a94:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024a98:	3624000c 	ori	a0,s1,0xc
	arom_mdelay(0x1);
a0024a9c:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024aa0:	24040001 	li	a0,1
	arom_mask_register(0xb8007b40, 0xfdffffff, 0x02000000);		 //HDMI bandgap power 1:on 0:off
a0024aa4:	3c05fdff 	lui	a1,0xfdff
	//arom_mask_register(0xb8000004,0xffffffef,0x00000100);//2.REGPLL_Rst
	//arom_mdelay(0x5);
	//arom_mask_register(0xb8000014, 0xffffffef, 0x00000000);	   //3.REGPLL_ck_en
	//-------- IFD MBIAS ----------
	arom_mask_register(0xb8000014, 0xfffeffff, 0x00010000);		 // enable IFADC clock
a0024aa8:	3c10fffe 	lui	s0,0xfffe
	arom_mask_register(0xb8000008, 0xfffdffff, 0x00000000);// hold HDMI reset
	arom_mask_register(0xb8000008, 0xfffdffff, 0x00020000);// release HDMI reset
	arom_mdelay(0x1);
	arom_mask_register(0xb800000c, 0xfffffffd, 0x00000002);// enable HDMI clock
	arom_mdelay(0x1);
	arom_mask_register(0xb8007b40, 0xfdffffff, 0x02000000);		 //HDMI bandgap power 1:on 0:off
a0024aac:	36247b40 	ori	a0,s1,0x7b40
a0024ab0:	34a5ffff 	ori	a1,a1,0xffff
a0024ab4:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024ab8:	3c060200 	lui	a2,0x200
	//arom_mask_register(0xb8000004,0xffffffef,0x00000100);//2.REGPLL_Rst
	//arom_mdelay(0x5);
	//arom_mask_register(0xb8000014, 0xffffffef, 0x00000000);	   //3.REGPLL_ck_en
	//-------- IFD MBIAS ----------
	arom_mask_register(0xb8000014, 0xfffeffff, 0x00010000);		 // enable IFADC clock
a0024abc:	36240014 	ori	a0,s1,0x14
a0024ac0:	3605ffff 	ori	a1,s0,0xffff
a0024ac4:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024ac8:	3c060001 	lui	a2,0x1
	arom_mask_register(0xb8000014, 0xfffeffff, 0x00000000);		 // disable IFADC clock
a0024acc:	36240014 	ori	a0,s1,0x14
a0024ad0:	3605ffff 	ori	a1,s0,0xffff
a0024ad4:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024ad8:	00003021 	move	a2,zero
	arom_mask_register(0xb8000008, 0xffffffdf, 0x00000000);		 // hold IFADC reset
a0024adc:	36240008 	ori	a0,s1,0x8
a0024ae0:	2405ffdf 	li	a1,-33
a0024ae4:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024ae8:	00003021 	move	a2,zero
	arom_mask_register(0xb8000008, 0xffffffdf, 0x00000020);		 // release IFADC reset
a0024aec:	2405ffdf 	li	a1,-33
a0024af0:	24060020 	li	a2,32
a0024af4:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024af8:	36240008 	ori	a0,s1,0x8
	arom_mdelay(0x1);
a0024afc:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024b00:	24040001 	li	a0,1
	arom_mask_register(0xb8000014, 0xfffeffff, 0x00010000);		 // enable IFADC clock
a0024b04:	3605ffff 	ori	a1,s0,0xffff
a0024b08:	3c060001 	lui	a2,0x1
a0024b0c:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024b10:	36240014 	ori	a0,s1,0x14
	arom_mdelay(0x1);
a0024b14:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024b18:	24040001 	li	a0,1
	arom_mask_register(0xb8033110, 0xfffffeff, 0x00000100);		 // IFD MBIAS power on
a0024b1c:	3c04b803 	lui	a0,0xb803
a0024b20:	2405feff 	li	a1,-257
a0024b24:	24060100 	li	a2,256
a0024b28:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024b2c:	34843110 	ori	a0,a0,0x3110
	arom_mdelay(0x1);


	rtd_inl(0xb80002e0); //--> 0x00000000;
a0024b30:	363202e0 	ori	s2,s1,0x2e0
	arom_mask_register(0xb8000008, 0xffffffdf, 0x00000020);		 // release IFADC reset
	arom_mdelay(0x1);
	arom_mask_register(0xb8000014, 0xfffeffff, 0x00010000);		 // enable IFADC clock
	arom_mdelay(0x1);
	arom_mask_register(0xb8033110, 0xfffffeff, 0x00000100);		 // IFD MBIAS power on
	arom_mdelay(0x1);
a0024b34:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024b38:	24040001 	li	a0,1


	rtd_inl(0xb80002e0); //--> 0x00000000;
	//rtd_outl(0x180002DC,0x000000ff);//4.reg_dpi_pll_dum[0] go HIGH (PLL LDO reset)//4.LDO reset--400~750MHz,800~1100MHz
	//arom_mdelay(300);
	rtd_outl(0xb80002dc, 0x000000ff);		//4.reg_dpi_pll_dum[0] go HIGH (PLL LDO reset)//4.LDO reset--1400~1700MHz
a0024b3c:	362202dc 	ori	v0,s1,0x2dc
	arom_mdelay(0x1);
	arom_mask_register(0xb8033110, 0xfffffeff, 0x00000100);		 // IFD MBIAS power on
	arom_mdelay(0x1);


	rtd_inl(0xb80002e0); //--> 0x00000000;
a0024b40:	8e430000 	lw	v1,0(s2)
	//rtd_outl(0x180002DC,0x000000ff);//4.reg_dpi_pll_dum[0] go HIGH (PLL LDO reset)//4.LDO reset--400~750MHz,800~1100MHz
	//arom_mdelay(300);
	rtd_outl(0xb80002dc, 0x000000ff);		//4.reg_dpi_pll_dum[0] go HIGH (PLL LDO reset)//4.LDO reset--1400~1700MHz
a0024b44:	240300ff 	li	v1,255
	arom_mdelay(100);
	rtd_outl(0xb80102e4, 0x00000000);//ckref_sel
a0024b48:	3c10b801 	lui	s0,0xb801


	rtd_inl(0xb80002e0); //--> 0x00000000;
	//rtd_outl(0x180002DC,0x000000ff);//4.reg_dpi_pll_dum[0] go HIGH (PLL LDO reset)//4.LDO reset--400~750MHz,800~1100MHz
	//arom_mdelay(300);
	rtd_outl(0xb80002dc, 0x000000ff);		//4.reg_dpi_pll_dum[0] go HIGH (PLL LDO reset)//4.LDO reset--1400~1700MHz
a0024b4c:	ac430000 	sw	v1,0(v0)
	arom_mdelay(100);
a0024b50:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024b54:	24040064 	li	a0,100
	rtd_outl(0xb80102e4, 0x00000000);//ckref_sel
a0024b58:	360a02e4 	ori	t2,s0,0x2e4
	 //=========== PLL Phase interpolation (PI) setting ===================//

	//rtd_outl(0xb80002d4,0x03e00000) //854MHz
	//rtd_outl(0xb80002d4,0x03b00000) //800MHz
	rtd_outl(0xb80002d4,0x02f00000); //661.5MHz
a0024b5c:	362902d4 	ori	t1,s1,0x2d4
	//rtd_outl(0xb80002d4, 0x01a00000);//3XX
	//rtd_outl(0xb80002d4, 0x01f00000);//445.5MHz
	//rtd_outl(0xb80002d4, 0x01f00000);//445.5MHz

	 //PI_phase
	 rtd_outl(0xb80002c8, 0x00000000);		 //DQS0,DQS1,cmd,ck
a0024b60:	362802c8 	ori	t0,s1,0x2c8
	rtd_inl(0xb80002e0); //--> 0x00000000;
	//rtd_outl(0x180002DC,0x000000ff);//4.reg_dpi_pll_dum[0] go HIGH (PLL LDO reset)//4.LDO reset--400~750MHz,800~1100MHz
	//arom_mdelay(300);
	rtd_outl(0xb80002dc, 0x000000ff);		//4.reg_dpi_pll_dum[0] go HIGH (PLL LDO reset)//4.LDO reset--1400~1700MHz
	arom_mdelay(100);
	rtd_outl(0xb80102e4, 0x00000000);//ckref_sel
a0024b64:	ad400000 	sw	zero,0(t2)
	//rtd_outl(0xb80002d4, 0x01f00000);//445.5MHz
	//rtd_outl(0xb80002d4, 0x01f00000);//445.5MHz

	 //PI_phase
	 rtd_outl(0xb80002c8, 0x00000000);		 //DQS0,DQS1,cmd,ck
	 rtd_outl(0xb80002cc, 0x00000000);		 // xx,ck_1,,DQS3,DQS2
a0024b68:	362702cc 	ori	a3,s1,0x2cc
	rtd_outl(0xb80102e4, 0x00000000);//ckref_sel
	 //=========== PLL Phase interpolation (PI) setting ===================//

	//rtd_outl(0xb80002d4,0x03e00000) //854MHz
	//rtd_outl(0xb80002d4,0x03b00000) //800MHz
	rtd_outl(0xb80002d4,0x02f00000); //661.5MHz
a0024b6c:	3c0a02f0 	lui	t2,0x2f0
a0024b70:	ad2a0000 	sw	t2,0(t1)
	//rtd_outl(0xb80002d4, 0x01f00000);//445.5MHz

	 //PI_phase
	 rtd_outl(0xb80002c8, 0x00000000);		 //DQS0,DQS1,cmd,ck
	 rtd_outl(0xb80002cc, 0x00000000);		 // xx,ck_1,,DQS3,DQS2
	 rtd_outl(0xb80002d0, 0x00000879);
a0024b74:	362302d0 	ori	v1,s1,0x2d0
	//rtd_outl(0xb80002d4, 0x01a00000);//3XX
	//rtd_outl(0xb80002d4, 0x01f00000);//445.5MHz
	//rtd_outl(0xb80002d4, 0x01f00000);//445.5MHz

	 //PI_phase
	 rtd_outl(0xb80002c8, 0x00000000);		 //DQS0,DQS1,cmd,ck
a0024b78:	ad000000 	sw	zero,0(t0)
	 rtd_outl(0xb80002cc, 0x00000000);		 // xx,ck_1,,DQS3,DQS2
a0024b7c:	ace00000 	sw	zero,0(a3)
	 rtd_outl(0xb80002d0, 0x00000879);
a0024b80:	24070879 	li	a3,2169
a0024b84:	ac670000 	sw	a3,0(v1)

	 //PI_RL_BIAS
	 //rtd_outl(0xb80002c4,0xff98ca9e);//clok;200-375MHz,VCO;400~750MHz
	 //rtd_outl(0xb80002c4,0xffcaca9f);//clock;400~550MHz,VCO;800~1100MHz
	 rtd_outl(0xb80002c4, 0xffdaca8e);		 //clock;700~850MHz,VCO;1400~1700MHz
a0024b88:	3c03ffda 	lui	v1,0xffda
a0024b8c:	362202c4 	ori	v0,s1,0x2c4
a0024b90:	3463ca8e 	ori	v1,v1,0xca8e

	 //
	 //===================================PLL initial=================================================
	arom_mask_register(0xb8000000, 0xfe7fffff, 0x01800000); 	  //DCU&DC_phy reset
a0024b94:	3c05fe7f 	lui	a1,0xfe7f
	 rtd_outl(0xb80002d0, 0x00000879);

	 //PI_RL_BIAS
	 //rtd_outl(0xb80002c4,0xff98ca9e);//clok;200-375MHz,VCO;400~750MHz
	 //rtd_outl(0xb80002c4,0xffcaca9f);//clock;400~550MHz,VCO;800~1100MHz
	 rtd_outl(0xb80002c4, 0xffdaca8e);		 //clock;700~850MHz,VCO;1400~1700MHz
a0024b98:	ac430000 	sw	v1,0(v0)

	 //
	 //===================================PLL initial=================================================
	arom_mask_register(0xb8000000, 0xfe7fffff, 0x01800000); 	  //DCU&DC_phy reset
a0024b9c:	34a5ffff 	ori	a1,a1,0xffff
a0024ba0:	3c060180 	lui	a2,0x180
a0024ba4:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024ba8:	3c04b800 	lui	a0,0xb800
	 arom_mdelay(0x1);
a0024bac:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024bb0:	24040001 	li	a0,1
	 arom_mask_register(0xb800000c, 0xfffbffff, 0x00040000); 	  //DCU&DC_phy_ck_en on
a0024bb4:	3c05fffb 	lui	a1,0xfffb
a0024bb8:	3624000c 	ori	a0,s1,0xc
a0024bbc:	34a5ffff 	ori	a1,a1,0xffff
a0024bc0:	0c00927c 	jal	a00249f0 <arom_mask_register>
a0024bc4:	3c060004 	lui	a2,0x4
	 //rtd_outl(0xb800000c, 0xffffffff);	   //DCU&DC_phy_ck_en on
	 rtd_outl(0xb80002c0, 0x020000ff);		 //c) enable reg_dpi_mck_clk_en
a0024bc8:	3c030200 	lui	v1,0x200
	 //rtd_outl(0xb80002C0,0x200003ff); //c) enable reg_dpi_mck_clk_oe
	 //rtd_outl(0xb80002C0,0x200007ff); //c) enable reg_dpi_mck_clk_oe
	 //rtd_outl(0xb80002C0,0x20000fff); //c) enable reg_dpi_mck_clk_oe
	 //rtd_outl(0xb80002C0,0x20001fff); //c) enable reg_dpi_mck_clk_oe
	 //rtd_outl(0xb80002C0,0x20003fff); //c) enable reg_dpi_mck_clk_oe
	 rtd_outl(0xb80002c0, 0x02007fff);		 //c) enable reg_dpi_mck_clk_oe
a0024bcc:	34667fff 	ori	a2,v1,0x7fff
	 //===================================PLL initial=================================================
	arom_mask_register(0xb8000000, 0xfe7fffff, 0x01800000); 	  //DCU&DC_phy reset
	 arom_mdelay(0x1);
	 arom_mask_register(0xb800000c, 0xfffbffff, 0x00040000); 	  //DCU&DC_phy_ck_en on
	 //rtd_outl(0xb800000c, 0xffffffff);	   //DCU&DC_phy_ck_en on
	 rtd_outl(0xb80002c0, 0x020000ff);		 //c) enable reg_dpi_mck_clk_en
a0024bd0:	362202c0 	ori	v0,s1,0x2c0
a0024bd4:	346300ff 	ori	v1,v1,0xff
a0024bd8:	ac430000 	sw	v1,0(v0)
	 //rtd_outl(0xb80002C0,0x20003fff); //c) enable reg_dpi_mck_clk_oe
	 rtd_outl(0xb80002c0, 0x02007fff);		 //c) enable reg_dpi_mck_clk_oe


	// b80002c0 is right is ok
	rtd_outl(0xb801E6A0,0x10000000); //[27]:[24]-->_dqs_mux_sel_BIST_2TO1-->DPI_spec
a0024bdc:	3605e6a0 	ori	a1,s0,0xe6a0
	 //rtd_outl(0xb80002C0,0x200003ff); //c) enable reg_dpi_mck_clk_oe
	 //rtd_outl(0xb80002C0,0x200007ff); //c) enable reg_dpi_mck_clk_oe
	 //rtd_outl(0xb80002C0,0x20000fff); //c) enable reg_dpi_mck_clk_oe
	 //rtd_outl(0xb80002C0,0x20001fff); //c) enable reg_dpi_mck_clk_oe
	 //rtd_outl(0xb80002C0,0x20003fff); //c) enable reg_dpi_mck_clk_oe
	 rtd_outl(0xb80002c0, 0x02007fff);		 //c) enable reg_dpi_mck_clk_oe
a0024be0:	ac460000 	sw	a2,0(v0)


	// b80002c0 is right is ok
	rtd_outl(0xb801E6A0,0x10000000); //[27]:[24]-->_dqs_mux_sel_BIST_2TO1-->DPI_spec
a0024be4:	3c131000 	lui	s3,0x1000
	//rtd_outl(0xb801E524,0x00000000);
	rtd_outl(0xb801E524,0x0000003c); //[5]:[2]-->  dqs_mux_sel_WRLVL_CTRL-->DPI_spec
a0024be8:	3604e524 	ori	a0,s0,0xe524
a0024bec:	2402003c 	li	v0,60
	 //rtd_outl(0xb80002C0,0x20003fff); //c) enable reg_dpi_mck_clk_oe
	 rtd_outl(0xb80002c0, 0x02007fff);		 //c) enable reg_dpi_mck_clk_oe


	// b80002c0 is right is ok
	rtd_outl(0xb801E6A0,0x10000000); //[27]:[24]-->_dqs_mux_sel_BIST_2TO1-->DPI_spec
a0024bf0:	acb30000 	sw	s3,0(a1)
	//rtd_outl(0xb801E524,0x00000000);
	rtd_outl(0xb801E524,0x0000003c); //[5]:[2]-->  dqs_mux_sel_WRLVL_CTRL-->DPI_spec
a0024bf4:	ac820000 	sw	v0,0(a0)
	//rtd_inl(0xb801e524);
	rtd_inl(0xb80002e0);
	arom_mdelay(0x10);
a0024bf8:	24040010 	li	a0,16
	// b80002c0 is right is ok
	rtd_outl(0xb801E6A0,0x10000000); //[27]:[24]-->_dqs_mux_sel_BIST_2TO1-->DPI_spec
	//rtd_outl(0xb801E524,0x00000000);
	rtd_outl(0xb801E524,0x0000003c); //[5]:[2]-->  dqs_mux_sel_WRLVL_CTRL-->DPI_spec
	//rtd_inl(0xb801e524);
	rtd_inl(0xb80002e0);
a0024bfc:	8e420000 	lw	v0,0(s2)
	arom_mdelay(0x10);
a0024c00:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024c04:	36328840 	ori	s2,s1,0x8840
	rtd_outl(0xb801e514,0x0);//PAD_IDDQ
	//==============OE end===================//

	//========Tx delay chain==========//
	//cmd&add
	rtd_outl(0xb801e500,0x44444444);//dly_a7-a0
a0024c08:	3c054444 	lui	a1,0x4444
a0024c0c:	34a54444 	ori	a1,a1,0x4444
	//============================ DC PAD/ZQ/TX Delay Chain Setting ===================================================//
	//**************************zq********************************//
	//====0x1801_E5D0?
	//==============add/cmd OE===============//
	//cmd&add
	rtd_outl(0xb801e510,0x3ef);//cmd&add_OE
a0024c10:	361ee510 	ori	s8,s0,0xe510
	rtd_outl(0xb801e514,0x0);//PAD_IDDQ
a0024c14:	3617e514 	ori	s7,s0,0xe514
	//==============OE end===================//

	//========Tx delay chain==========//
	//cmd&add
	rtd_outl(0xb801e500,0x44444444);//dly_a7-a0
a0024c18:	3616e500 	ori	s6,s0,0xe500
	rtd_outl(0xb801e504,0x44444444);//dly_a15-a8
a0024c1c:	3615e504 	ori	s5,s0,0xe504
	//============================ DC PAD/ZQ/TX Delay Chain Setting ===================================================//
	//**************************zq********************************//
	//====0x1801_E5D0?
	//==============add/cmd OE===============//
	//cmd&add
	rtd_outl(0xb801e510,0x3ef);//cmd&add_OE
a0024c20:	241103ef 	li	s1,1007
a0024c24:	afd10000 	sw	s1,0(s8)
	rtd_outl(0xb801e514,0x0);//PAD_IDDQ
a0024c28:	aee00000 	sw	zero,0(s7)
	//==============OE end===================//

	//========Tx delay chain==========//
	//cmd&add
	rtd_outl(0xb801e500,0x44444444);//dly_a7-a0
a0024c2c:	aec50000 	sw	a1,0(s6)
	rtd_outl(0xb801e504,0x44444444);//dly_a15-a8
a0024c30:	aea50000 	sw	a1,0(s5)
	rtd_outl(0xb801e508,0x00044400);//dly_ba2-ba0
a0024c34:	3c150004 	lui	s5,0x4
	rtd_outl(0xb801e50c,0x44444444);//dly_csn_1,csn,odt,we_n,cas_n,ras_n,cke
a0024c38:	361fe50c 	ori	ra,s0,0xe50c

	//========Tx delay chain==========//
	//cmd&add
	rtd_outl(0xb801e500,0x44444444);//dly_a7-a0
	rtd_outl(0xb801e504,0x44444444);//dly_a15-a8
	rtd_outl(0xb801e508,0x00044400);//dly_ba2-ba0
a0024c3c:	3614e508 	ori	s4,s0,0xe508
	rtd_outl(0xb801e50c,0x44444444);//dly_csn_1,csn,odt,we_n,cas_n,ras_n,cke
	//Data delay chain
	rtd_outl(0xb801e530,0x44444444);//dly_DQ7_DQ0
a0024c40:	3619e530 	ori	t9,s0,0xe530

	//========Tx delay chain==========//
	//cmd&add
	rtd_outl(0xb801e500,0x44444444);//dly_a7-a0
	rtd_outl(0xb801e504,0x44444444);//dly_a15-a8
	rtd_outl(0xb801e508,0x00044400);//dly_ba2-ba0
a0024c44:	36b54400 	ori	s5,s5,0x4400
a0024c48:	ae950000 	sw	s5,0(s4)
	rtd_outl(0xb801e50c,0x44444444);//dly_csn_1,csn,odt,we_n,cas_n,ras_n,cke
a0024c4c:	afe50000 	sw	a1,0(ra)
	//Data delay chain
	rtd_outl(0xb801e530,0x44444444);//dly_DQ7_DQ0
a0024c50:	af250000 	sw	a1,0(t9)
	rtd_outl(0xb801e540,0x44444444);//dly_DQS3_DM3
a0024c54:	3c19b801 	lui	t9,0xb801
a0024c58:	3739e540 	ori	t9,t9,0xe540
	rtd_outl(0xb801e680,0x00004444);//dqs3-dqs0,OE_dly:dqs_OE???
a0024c5c:	3c11b801 	lui	s1,0xb801
	rtd_outl(0xb801e504,0x44444444);//dly_a15-a8
	rtd_outl(0xb801e508,0x00044400);//dly_ba2-ba0
	rtd_outl(0xb801e50c,0x44444444);//dly_csn_1,csn,odt,we_n,cas_n,ras_n,cke
	//Data delay chain
	rtd_outl(0xb801e530,0x44444444);//dly_DQ7_DQ0
	rtd_outl(0xb801e540,0x44444444);//dly_DQS3_DM3
a0024c60:	af250000 	sw	a1,0(t9)
	rtd_outl(0xb801e680,0x00004444);//dqs3-dqs0,OE_dly:dqs_OE???
a0024c64:	3631e680 	ori	s1,s1,0xe680
a0024c68:	24054444 	li	a1,17476
	//w 0xb8008004, 0x006b0000		 // DC1 SYS Setting 2DDR, 1Gb x 2 (256MBytes), bank re-mapping enable
	//rtd_outl(0xb8008004, 0x026b0000); 	  // DC1 SYS Setting 2DDR, 2Gb x 2 (512MBytes), bank re-mapping enable
	//rtd_outl(0xb8008004, 0x086b0000); 	  // DC1 SYS Setting 2DDR, 4Gb x 2 (1GBytes), bank re-mapping enable
	//w 0xb8008004, 0x00620000		 // DC1 SYS Setting 1DDR, 1Gb x 1 (128MBytes), bank re-mapping enable
	//w 0xb8008004, 0x02620000		 // DC1 SYS Setting 1DDR, 2Gb x 1 (256MBytes), bank re-mapping enable
	rtd_outl(0xb8008004, 0x08620000);		// DC1 SYS Setting 1DDR, 4Gb x 1 (512MBytes), bank re-mapping enable
a0024c6c:	3c19b800 	lui	t9,0xb800
	rtd_outl(0xb801e508,0x00044400);//dly_ba2-ba0
	rtd_outl(0xb801e50c,0x44444444);//dly_csn_1,csn,odt,we_n,cas_n,ras_n,cke
	//Data delay chain
	rtd_outl(0xb801e530,0x44444444);//dly_DQ7_DQ0
	rtd_outl(0xb801e540,0x44444444);//dly_DQS3_DM3
	rtd_outl(0xb801e680,0x00004444);//dqs3-dqs0,OE_dly:dqs_OE???
a0024c70:	ae250000 	sw	a1,0(s1)
	rtd_outl(0xb801E61C,0x00000003);//update tx dly
a0024c74:	3609e61c 	ori	t1,s0,0xe61c
a0024c78:	24070003 	li	a3,3
	//w 0xb8008004, 0x006b0000		 // DC1 SYS Setting 2DDR, 1Gb x 2 (256MBytes), bank re-mapping enable
	//rtd_outl(0xb8008004, 0x026b0000); 	  // DC1 SYS Setting 2DDR, 2Gb x 2 (512MBytes), bank re-mapping enable
	//rtd_outl(0xb8008004, 0x086b0000); 	  // DC1 SYS Setting 2DDR, 4Gb x 2 (1GBytes), bank re-mapping enable
	//w 0xb8008004, 0x00620000		 // DC1 SYS Setting 1DDR, 1Gb x 1 (128MBytes), bank re-mapping enable
	//w 0xb8008004, 0x02620000		 // DC1 SYS Setting 1DDR, 2Gb x 1 (256MBytes), bank re-mapping enable
	rtd_outl(0xb8008004, 0x08620000);		// DC1 SYS Setting 1DDR, 4Gb x 1 (512MBytes), bank re-mapping enable
a0024c7c:	3c050862 	lui	a1,0x862
a0024c80:	37398004 	ori	t9,t9,0x8004
	rtd_outl(0xb801e50c,0x44444444);//dly_csn_1,csn,odt,we_n,cas_n,ras_n,cke
	//Data delay chain
	rtd_outl(0xb801e530,0x44444444);//dly_DQ7_DQ0
	rtd_outl(0xb801e540,0x44444444);//dly_DQS3_DM3
	rtd_outl(0xb801e680,0x00004444);//dqs3-dqs0,OE_dly:dqs_OE???
	rtd_outl(0xb801E61C,0x00000003);//update tx dly
a0024c84:	ad270000 	sw	a3,0(t1)
	//====================================== DC1 Timing Setting Start =========================================//
	//1333 Setting
	// pupd1 --> TMCL_RD = CL or CL +0.5
	// pupd2 --> TMCL_RD = CL + 1 ~ 1.5
	// 4Gbits for DC1
	rtd_outl(0xb800880c, 0x2001707a);		//TMCTRL3: tFAW:0x19((25+2)*1.5=40.5)(40ns)/ tREF: 0x13((19+1)*128*1.5=3840)(3.9us/7.8us) / tmRFC:0xA3((163+11)*1.5=261)(260ns)
a0024c88:	3c11b800 	lui	s1,0xb800
	//w 0xb8008004, 0x006b0000		 // DC1 SYS Setting 2DDR, 1Gb x 2 (256MBytes), bank re-mapping enable
	//rtd_outl(0xb8008004, 0x026b0000); 	  // DC1 SYS Setting 2DDR, 2Gb x 2 (512MBytes), bank re-mapping enable
	//rtd_outl(0xb8008004, 0x086b0000); 	  // DC1 SYS Setting 2DDR, 4Gb x 2 (1GBytes), bank re-mapping enable
	//w 0xb8008004, 0x00620000		 // DC1 SYS Setting 1DDR, 1Gb x 1 (128MBytes), bank re-mapping enable
	//w 0xb8008004, 0x02620000		 // DC1 SYS Setting 1DDR, 2Gb x 1 (256MBytes), bank re-mapping enable
	rtd_outl(0xb8008004, 0x08620000);		// DC1 SYS Setting 1DDR, 4Gb x 1 (512MBytes), bank re-mapping enable
a0024c8c:	af250000 	sw	a1,0(t9)
	//====================================== DC1 Timing Setting Start =========================================//
	//1333 Setting
	// pupd1 --> TMCL_RD = CL or CL +0.5
	// pupd2 --> TMCL_RD = CL + 1 ~ 1.5
	// 4Gbits for DC1
	rtd_outl(0xb800880c, 0x2001707a);		//TMCTRL3: tFAW:0x19((25+2)*1.5=40.5)(40ns)/ tREF: 0x13((19+1)*128*1.5=3840)(3.9us/7.8us) / tmRFC:0xA3((163+11)*1.5=261)(260ns)
a0024c90:	3c052001 	lui	a1,0x2001
a0024c94:	34a5707a 	ori	a1,a1,0x707a
a0024c98:	3631880c 	ori	s1,s1,0x880c
a0024c9c:	ae250000 	sw	a1,0(s1)
	rtd_outl(0xb8008800, 0x00189714);		//TMCTRL0: tRAS:0x18((24+2)*1.5 = 39)(35ns) / #tCL:0x9(9nCK) / #tCWL:0x7(7nCK) / #tmCLRD:0x14(20/2=10)(10nCK)
a0024ca0:	3c19b800 	lui	t9,0xb800
a0024ca4:	3c050018 	lui	a1,0x18
a0024ca8:	34a59714 	ori	a1,a1,0x9714
a0024cac:	37398800 	ori	t9,t9,0x8800
a0024cb0:	af250000 	sw	a1,0(t9)
	rtd_outl(0xb8008804, 0x05100d0d);		//TMCTRL1: tRRD:0x6(6+2=8)(7.5nCK) / tRP:0x7((7+2)*1.5=13.5)(13.125ns) / tRCD:0x7((7+2)*1.5=13.5)(13.125ns) / tRC:0x1B((27+6)*1.5 = 49.5)(48.75ns)
a0024cb4:	3c11b800 	lui	s1,0xb800
a0024cb8:	3c050510 	lui	a1,0x510
a0024cbc:	34a50d0d 	ori	a1,a1,0xd0d
a0024cc0:	36318804 	ori	s1,s1,0x8804
a0024cc4:	ae250000 	sw	a1,0(s1)
	rtd_outl(0xb8008808, 0x02040508);		//TMCTRL2: TCCD:2(2+2=4)(4nCK) / tRTP:6(6*1.5=7.5)(7.5ns) / tWTR:5((5+1)*1.5=9)(7.5ns) / tWR:0x9((9+2)*1.5=18)(15ns)
a0024cc8:	3c19b800 	lui	t9,0xb800
a0024ccc:	3c050204 	lui	a1,0x204
a0024cd0:	34a50508 	ori	a1,a1,0x508
a0024cd4:	37398808 	ori	t9,t9,0x8808
a0024cd8:	af250000 	sw	a1,0(t9)
	rtd_outl(0xb8008810, 0x03030a02);		//TMCTRL4: tAOND:2((2+2)*1.5=6)(2ns) / tAOFD:2((2+2)*1.5=6)(2ns) / tMMOD(Mode register Set Command cycle time):13(13)max(12nCK, 15ns) / tMMRD(MRS cmd to ODT update delay):2(2+2=4)(4nCK)
a0024cdc:	3c11b800 	lui	s1,0xb800
a0024ce0:	3c050303 	lui	a1,0x303
a0024ce4:	34a50a02 	ori	a1,a1,0xa02
a0024ce8:	36318810 	ori	s1,s1,0x8810
a0024cec:	ae250000 	sw	a1,0(s1)
	rtd_outl(0xb8008814, 0x00200400);		//TMCTRL5: tMRTW:1(2nCK) / tZQOPER:0x200(512)((256nCK) / tZQINIT:0x400(1024)(512nCK)
a0024cf0:	3c19b800 	lui	t9,0xb800
a0024cf4:	3c050020 	lui	a1,0x20
a0024cf8:	34a50400 	ori	a1,a1,0x400
a0024cfc:	37398814 	ori	t9,t9,0x8814
a0024d00:	af250000 	sw	a1,0(t9)
	rtd_outl(0xb8008818, 0x00240080);		//TMCTRL6: dqs_lat_sel:1 / dqs_alt:12.5 / tDLLK:0x240(576)(512nCK) / tZQCS:0x80(128)(64nCK)
a0024d04:	3c11b800 	lui	s1,0xb800
a0024d08:	3c050024 	lui	a1,0x24
a0024d0c:	34a50080 	ori	a1,a1,0x80
a0024d10:	36318818 	ori	s1,s1,0x8818
	rtd_outl(0xb8008844, 0x00000d31);		//MOD_REG0,  bit[15:0] for DDR3-1600MHz: #CL11/BC4&BL8/#WR12/AL0, 34/60
a0024d14:	3c19b800 	lui	t9,0xb800
	rtd_outl(0xb8008800, 0x00189714);		//TMCTRL0: tRAS:0x18((24+2)*1.5 = 39)(35ns) / #tCL:0x9(9nCK) / #tCWL:0x7(7nCK) / #tmCLRD:0x14(20/2=10)(10nCK)
	rtd_outl(0xb8008804, 0x05100d0d);		//TMCTRL1: tRRD:0x6(6+2=8)(7.5nCK) / tRP:0x7((7+2)*1.5=13.5)(13.125ns) / tRCD:0x7((7+2)*1.5=13.5)(13.125ns) / tRC:0x1B((27+6)*1.5 = 49.5)(48.75ns)
	rtd_outl(0xb8008808, 0x02040508);		//TMCTRL2: TCCD:2(2+2=4)(4nCK) / tRTP:6(6*1.5=7.5)(7.5ns) / tWTR:5((5+1)*1.5=9)(7.5ns) / tWR:0x9((9+2)*1.5=18)(15ns)
	rtd_outl(0xb8008810, 0x03030a02);		//TMCTRL4: tAOND:2((2+2)*1.5=6)(2ns) / tAOFD:2((2+2)*1.5=6)(2ns) / tMMOD(Mode register Set Command cycle time):13(13)max(12nCK, 15ns) / tMMRD(MRS cmd to ODT update delay):2(2+2=4)(4nCK)
	rtd_outl(0xb8008814, 0x00200400);		//TMCTRL5: tMRTW:1(2nCK) / tZQOPER:0x200(512)((256nCK) / tZQINIT:0x400(1024)(512nCK)
	rtd_outl(0xb8008818, 0x00240080);		//TMCTRL6: dqs_lat_sel:1 / dqs_alt:12.5 / tDLLK:0x240(576)(512nCK) / tZQCS:0x80(128)(64nCK)
a0024d18:	ae250000 	sw	a1,0(s1)
	rtd_outl(0xb8008844, 0x00000d31);		//MOD_REG0,  bit[15:0] for DDR3-1600MHz: #CL11/BC4&BL8/#WR12/AL0, 34/60
a0024d1c:	37398844 	ori	t9,t9,0x8844
a0024d20:	24050d31 	li	a1,3377
	rtd_outl(0xb8008848, 0x00000010);		//MOD23_REG for DDR3:Rtt_WR: disable,  #CWL:8,	ASR disable,  dynamic ODT off.
a0024d24:	3c11b800 	lui	s1,0xb800
	rtd_outl(0xb8008804, 0x05100d0d);		//TMCTRL1: tRRD:0x6(6+2=8)(7.5nCK) / tRP:0x7((7+2)*1.5=13.5)(13.125ns) / tRCD:0x7((7+2)*1.5=13.5)(13.125ns) / tRC:0x1B((27+6)*1.5 = 49.5)(48.75ns)
	rtd_outl(0xb8008808, 0x02040508);		//TMCTRL2: TCCD:2(2+2=4)(4nCK) / tRTP:6(6*1.5=7.5)(7.5ns) / tWTR:5((5+1)*1.5=9)(7.5ns) / tWR:0x9((9+2)*1.5=18)(15ns)
	rtd_outl(0xb8008810, 0x03030a02);		//TMCTRL4: tAOND:2((2+2)*1.5=6)(2ns) / tAOFD:2((2+2)*1.5=6)(2ns) / tMMOD(Mode register Set Command cycle time):13(13)max(12nCK, 15ns) / tMMRD(MRS cmd to ODT update delay):2(2+2=4)(4nCK)
	rtd_outl(0xb8008814, 0x00200400);		//TMCTRL5: tMRTW:1(2nCK) / tZQOPER:0x200(512)((256nCK) / tZQINIT:0x400(1024)(512nCK)
	rtd_outl(0xb8008818, 0x00240080);		//TMCTRL6: dqs_lat_sel:1 / dqs_alt:12.5 / tDLLK:0x240(576)(512nCK) / tZQCS:0x80(128)(64nCK)
	rtd_outl(0xb8008844, 0x00000d31);		//MOD_REG0,  bit[15:0] for DDR3-1600MHz: #CL11/BC4&BL8/#WR12/AL0, 34/60
a0024d28:	af250000 	sw	a1,0(t9)
	rtd_outl(0xb8008848, 0x00000010);		//MOD23_REG for DDR3:Rtt_WR: disable,  #CWL:8,	ASR disable,  dynamic ODT off.
a0024d2c:	36318848 	ori	s1,s1,0x8848
a0024d30:	24050010 	li	a1,16
	rtd_outl(0xb801E558, 0x00000fff);		//ODT_CTRL_new
a0024d34:	3c19b801 	lui	t9,0xb801
	rtd_outl(0xb8008808, 0x02040508);		//TMCTRL2: TCCD:2(2+2=4)(4nCK) / tRTP:6(6*1.5=7.5)(7.5ns) / tWTR:5((5+1)*1.5=9)(7.5ns) / tWR:0x9((9+2)*1.5=18)(15ns)
	rtd_outl(0xb8008810, 0x03030a02);		//TMCTRL4: tAOND:2((2+2)*1.5=6)(2ns) / tAOFD:2((2+2)*1.5=6)(2ns) / tMMOD(Mode register Set Command cycle time):13(13)max(12nCK, 15ns) / tMMRD(MRS cmd to ODT update delay):2(2+2=4)(4nCK)
	rtd_outl(0xb8008814, 0x00200400);		//TMCTRL5: tMRTW:1(2nCK) / tZQOPER:0x200(512)((256nCK) / tZQINIT:0x400(1024)(512nCK)
	rtd_outl(0xb8008818, 0x00240080);		//TMCTRL6: dqs_lat_sel:1 / dqs_alt:12.5 / tDLLK:0x240(576)(512nCK) / tZQCS:0x80(128)(64nCK)
	rtd_outl(0xb8008844, 0x00000d31);		//MOD_REG0,  bit[15:0] for DDR3-1600MHz: #CL11/BC4&BL8/#WR12/AL0, 34/60
	rtd_outl(0xb8008848, 0x00000010);		//MOD23_REG for DDR3:Rtt_WR: disable,  #CWL:8,	ASR disable,  dynamic ODT off.
a0024d38:	ae250000 	sw	a1,0(s1)
	rtd_outl(0xb801E558, 0x00000fff);		//ODT_CTRL_new
a0024d3c:	3739e558 	ori	t9,t9,0xe558
a0024d40:	24050fff 	li	a1,4095
	//rtd_outl(0xb8008844, 0x00060d71); 	  //MOD_REG0,  bit[15:0] for DDR3-1600MHz: #CL11/BC4&BL8/#WR12/AL0, 34/60
	//rtd_outl(0xb8008848, 0x00000018); 	  //MOD23_REG for DDR3:Rtt_WR: disable,  #CWL:8,  ASR disable,	dynamic ODT off.
	//rtd_outl(0xb801E558, 0x00007fff); 	  //ODT_CTRL_new

	//====================================== DC1 Timing Setting End =========================================//
	rtd_outl(0xb8008f00, 0x00000002);		//enable 2T cmd
a0024d44:	3c11b800 	lui	s1,0xb800
	rtd_outl(0xb8008810, 0x03030a02);		//TMCTRL4: tAOND:2((2+2)*1.5=6)(2ns) / tAOFD:2((2+2)*1.5=6)(2ns) / tMMOD(Mode register Set Command cycle time):13(13)max(12nCK, 15ns) / tMMRD(MRS cmd to ODT update delay):2(2+2=4)(4nCK)
	rtd_outl(0xb8008814, 0x00200400);		//TMCTRL5: tMRTW:1(2nCK) / tZQOPER:0x200(512)((256nCK) / tZQINIT:0x400(1024)(512nCK)
	rtd_outl(0xb8008818, 0x00240080);		//TMCTRL6: dqs_lat_sel:1 / dqs_alt:12.5 / tDLLK:0x240(576)(512nCK) / tZQCS:0x80(128)(64nCK)
	rtd_outl(0xb8008844, 0x00000d31);		//MOD_REG0,  bit[15:0] for DDR3-1600MHz: #CL11/BC4&BL8/#WR12/AL0, 34/60
	rtd_outl(0xb8008848, 0x00000010);		//MOD23_REG for DDR3:Rtt_WR: disable,  #CWL:8,	ASR disable,  dynamic ODT off.
	rtd_outl(0xb801E558, 0x00000fff);		//ODT_CTRL_new
a0024d48:	af250000 	sw	a1,0(t9)
	//rtd_outl(0xb8008844, 0x00060d71); 	  //MOD_REG0,  bit[15:0] for DDR3-1600MHz: #CL11/BC4&BL8/#WR12/AL0, 34/60
	//rtd_outl(0xb8008848, 0x00000018); 	  //MOD23_REG for DDR3:Rtt_WR: disable,  #CWL:8,  ASR disable,	dynamic ODT off.
	//rtd_outl(0xb801E558, 0x00007fff); 	  //ODT_CTRL_new

	//====================================== DC1 Timing Setting End =========================================//
	rtd_outl(0xb8008f00, 0x00000002);		//enable 2T cmd
a0024d4c:	36318f00 	ori	s1,s1,0x8f00
a0024d50:	24050002 	li	a1,2
a0024d54:	ae250000 	sw	a1,0(s1)
	rtd_outl(0xb800882c, 0x00000000);		//DC_MIS
a0024d58:	3c19b800 	lui	t9,0xb800
	rtd_outl(0xb8008830, 0x00000000);		//DC_MISa pre_dis,0, lbk_en,disable
a0024d5c:	3c05b800 	lui	a1,0xb800
	//rtd_outl(0xb8008848, 0x00000018); 	  //MOD23_REG for DDR3:Rtt_WR: disable,  #CWL:8,  ASR disable,	dynamic ODT off.
	//rtd_outl(0xb801E558, 0x00007fff); 	  //ODT_CTRL_new

	//====================================== DC1 Timing Setting End =========================================//
	rtd_outl(0xb8008f00, 0x00000002);		//enable 2T cmd
	rtd_outl(0xb800882c, 0x00000000);		//DC_MIS
a0024d60:	3739882c 	ori	t9,t9,0x882c
	rtd_outl(0xb8008830, 0x00000000);		//DC_MISa pre_dis,0, lbk_en,disable
a0024d64:	34a58830 	ori	a1,a1,0x8830
	//rtd_outl(0xb8008848, 0x00000018); 	  //MOD23_REG for DDR3:Rtt_WR: disable,  #CWL:8,  ASR disable,	dynamic ODT off.
	//rtd_outl(0xb801E558, 0x00007fff); 	  //ODT_CTRL_new

	//====================================== DC1 Timing Setting End =========================================//
	rtd_outl(0xb8008f00, 0x00000002);		//enable 2T cmd
	rtd_outl(0xb800882c, 0x00000000);		//DC_MIS
a0024d68:	af200000 	sw	zero,0(t9)
	rtd_outl(0xb8008830, 0x00000000);		//DC_MISa pre_dis,0, lbk_en,disable
	rtd_outl(0xb8008834, 0x10000000);		//DC_MISb tmrc_sel,1: 0: tmrc,tmras+tmrp, 1: tmrc,tmrc (DRAM always let tRAS+tRP,tRC)
a0024d6c:	3c11b800 	lui	s1,0xb800
	//rtd_outl(0xb801E558, 0x00007fff); 	  //ODT_CTRL_new

	//====================================== DC1 Timing Setting End =========================================//
	rtd_outl(0xb8008f00, 0x00000002);		//enable 2T cmd
	rtd_outl(0xb800882c, 0x00000000);		//DC_MIS
	rtd_outl(0xb8008830, 0x00000000);		//DC_MISa pre_dis,0, lbk_en,disable
a0024d70:	aca00000 	sw	zero,0(a1)
	//======================================================PUPU3&4 Setting==================================//
	//==================pupd3 mode==================//
	//rtd_outl(0xb801e618,0x007f2052);//pupd3 mode
	//for pupd3 ZQ calibration
	//ODT unbalance setting-->side effect :duty-----using two ODT setting for DQSP & DQSN ,need measuremet
	 rtd_outl(0xb8062300,'l');
a0024d74:	3c05b806 	lui	a1,0xb806

	//====================================== DC1 Timing Setting End =========================================//
	rtd_outl(0xb8008f00, 0x00000002);		//enable 2T cmd
	rtd_outl(0xb800882c, 0x00000000);		//DC_MIS
	rtd_outl(0xb8008830, 0x00000000);		//DC_MISa pre_dis,0, lbk_en,disable
	rtd_outl(0xb8008834, 0x10000000);		//DC_MISb tmrc_sel,1: 0: tmrc,tmras+tmrp, 1: tmrc,tmrc (DRAM always let tRAS+tRP,tRC)
a0024d78:	36318834 	ori	s1,s1,0x8834
	//======================================================PUPU3&4 Setting==================================//
	//==================pupd3 mode==================//
	//rtd_outl(0xb801e618,0x007f2052);//pupd3 mode
	//for pupd3 ZQ calibration
	//ODT unbalance setting-->side effect :duty-----using two ODT setting for DQSP & DQSN ,need measuremet
	 rtd_outl(0xb8062300,'l');
a0024d7c:	2419006c 	li	t9,108
a0024d80:	34a52300 	ori	a1,a1,0x2300

	//====================================== DC1 Timing Setting End =========================================//
	rtd_outl(0xb8008f00, 0x00000002);		//enable 2T cmd
	rtd_outl(0xb800882c, 0x00000000);		//DC_MIS
	rtd_outl(0xb8008830, 0x00000000);		//DC_MISa pre_dis,0, lbk_en,disable
	rtd_outl(0xb8008834, 0x10000000);		//DC_MISb tmrc_sel,1: 0: tmrc,tmras+tmrp, 1: tmrc,tmrc (DRAM always let tRAS+tRP,tRC)
a0024d84:	ae330000 	sw	s3,0(s1)
	//======================================================PUPU3&4 Setting==================================//
	//==================pupd3 mode==================//
	//rtd_outl(0xb801e618,0x007f2052);//pupd3 mode
	//for pupd3 ZQ calibration
	//ODT unbalance setting-->side effect :duty-----using two ODT setting for DQSP & DQSN ,need measuremet
	 rtd_outl(0xb8062300,'l');
a0024d88:	acb90000 	sw	t9,0(a1)
	//read fifo setting:tm_dqs_en+2.5T=tm_rd_fifo  ,tm_dqs=tmcl_rd
	//CL+1T=tm_odt_en
	rtd_outl(0xb801e544,0x0000c010);//tm_dqs_en,7.5T-- dqs0
a0024d8c:	3c19b801 	lui	t9,0xb801
a0024d90:	3406c010 	li	a2,0xc010
a0024d94:	3739e544 	ori	t9,t9,0xe544
a0024d98:	af260000 	sw	a2,0(t9)
	rtd_outl(0xb801e548,0x0000c010);//tm_dqs_en,7.5T-- dqs1
a0024d9c:	3c05b801 	lui	a1,0xb801
	rtd_outl(0xb801e54c,0x0000c010);//tm_dqs_en,7.5T-- dqs2
a0024da0:	3c11b801 	lui	s1,0xb801
	rtd_outl(0xb801e550,0x0000c010);//tm_dqs_en,7.5T-- dqs3
a0024da4:	3c19b801 	lui	t9,0xb801
	//ODT unbalance setting-->side effect :duty-----using two ODT setting for DQSP & DQSN ,need measuremet
	 rtd_outl(0xb8062300,'l');
	//read fifo setting:tm_dqs_en+2.5T=tm_rd_fifo  ,tm_dqs=tmcl_rd
	//CL+1T=tm_odt_en
	rtd_outl(0xb801e544,0x0000c010);//tm_dqs_en,7.5T-- dqs0
	rtd_outl(0xb801e548,0x0000c010);//tm_dqs_en,7.5T-- dqs1
a0024da8:	34a5e548 	ori	a1,a1,0xe548
	rtd_outl(0xb801e54c,0x0000c010);//tm_dqs_en,7.5T-- dqs2
a0024dac:	3631e54c 	ori	s1,s1,0xe54c
	rtd_outl(0xb801e550,0x0000c010);//tm_dqs_en,7.5T-- dqs3
a0024db0:	3739e550 	ori	t9,t9,0xe550
	//ODT unbalance setting-->side effect :duty-----using two ODT setting for DQSP & DQSN ,need measuremet
	 rtd_outl(0xb8062300,'l');
	//read fifo setting:tm_dqs_en+2.5T=tm_rd_fifo  ,tm_dqs=tmcl_rd
	//CL+1T=tm_odt_en
	rtd_outl(0xb801e544,0x0000c010);//tm_dqs_en,7.5T-- dqs0
	rtd_outl(0xb801e548,0x0000c010);//tm_dqs_en,7.5T-- dqs1
a0024db4:	aca60000 	sw	a2,0(a1)
	rtd_outl(0xb801e54c,0x0000c010);//tm_dqs_en,7.5T-- dqs2
a0024db8:	ae260000 	sw	a2,0(s1)
	rtd_outl(0xb801e550,0x0000c010);//tm_dqs_en,7.5T-- dqs3
	rtd_outl(0xb801e554,0x0001040b);//tm_rd_fifo=11T //
a0024dbc:	3c050001 	lui	a1,0x1
	//read fifo setting:tm_dqs_en+2.5T=tm_rd_fifo  ,tm_dqs=tmcl_rd
	//CL+1T=tm_odt_en
	rtd_outl(0xb801e544,0x0000c010);//tm_dqs_en,7.5T-- dqs0
	rtd_outl(0xb801e548,0x0000c010);//tm_dqs_en,7.5T-- dqs1
	rtd_outl(0xb801e54c,0x0000c010);//tm_dqs_en,7.5T-- dqs2
	rtd_outl(0xb801e550,0x0000c010);//tm_dqs_en,7.5T-- dqs3
a0024dc0:	af260000 	sw	a2,0(t9)
	rtd_outl(0xb801e554,0x0001040b);//tm_rd_fifo=11T //
a0024dc4:	3c06b801 	lui	a2,0xb801
a0024dc8:	34a5040b 	ori	a1,a1,0x40b
a0024dcc:	34c6e554 	ori	a2,a2,0xe554
a0024dd0:	acc50000 	sw	a1,0(a2)




	//we must follow the Cas latency//
	rtd_outl(0xb801e5d8,0x0);//ODT
a0024dd4:	3c11b801 	lui	s1,0xb801
	rtd_outl(0xb801e5dc,0x0);//ODT
a0024dd8:	3c19b801 	lui	t9,0xb801

	//fifo reset


	//==================pupd3 mode==================//
	rtd_outl(0xb801e618,0x007f2012);//rst_fifo_mode=1,fw_set_mode=2//old mode
a0024ddc:	3c05007f 	lui	a1,0x7f
a0024de0:	3c06b801 	lui	a2,0xb801




	//we must follow the Cas latency//
	rtd_outl(0xb801e5d8,0x0);//ODT
a0024de4:	3631e5d8 	ori	s1,s1,0xe5d8
	rtd_outl(0xb801e5dc,0x0);//ODT
a0024de8:	3739e5dc 	ori	t9,t9,0xe5dc

	//fifo reset


	//==================pupd3 mode==================//
	rtd_outl(0xb801e618,0x007f2012);//rst_fifo_mode=1,fw_set_mode=2//old mode
a0024dec:	34a52012 	ori	a1,a1,0x2012
a0024df0:	34c6e618 	ori	a2,a2,0xe618




	//we must follow the Cas latency//
	rtd_outl(0xb801e5d8,0x0);//ODT
a0024df4:	ae200000 	sw	zero,0(s1)
	//==============================================//
	//======================================================PUPU3&4 Setting==================================//

	//==========read delay chain (rx phase)======//

	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024df8:	3c020a0a 	lui	v0,0xa0a



	//we must follow the Cas latency//
	rtd_outl(0xb801e5d8,0x0);//ODT
	rtd_outl(0xb801e5dc,0x0);//ODT
a0024dfc:	af200000 	sw	zero,0(t9)
	//==============================================//
	//======================================================PUPU3&4 Setting==================================//

	//==========read delay chain (rx phase)======//

	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e00:	3c11b801 	lui	s1,0xb801

	//fifo reset


	//==================pupd3 mode==================//
	rtd_outl(0xb801e618,0x007f2012);//rst_fifo_mode=1,fw_set_mode=2//old mode
a0024e04:	acc50000 	sw	a1,0(a2)
	//======================================================PUPU3&4 Setting==================================//

	//==========read delay chain (rx phase)======//

	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e590,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e08:	3c19b801 	lui	t9,0xb801
	rtd_outl(0xb801e594,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e0c:	3c05b801 	lui	a1,0xb801
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e10:	3c06b801 	lui	a2,0xb801
	//==============================================//
	//======================================================PUPU3&4 Setting==================================//

	//==========read delay chain (rx phase)======//

	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e14:	34420a0a 	ori	v0,v0,0xa0a
a0024e18:	3631e58c 	ori	s1,s1,0xe58c
	rtd_outl(0xb801e590,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e1c:	3739e590 	ori	t9,t9,0xe590
	rtd_outl(0xb801e594,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e20:	34a5e594 	ori	a1,a1,0xe594
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e24:	34c6e598 	ori	a2,a2,0xe598
	//==============================================//
	//======================================================PUPU3&4 Setting==================================//

	//==========read delay chain (rx phase)======//

	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e28:	ae220000 	sw	v0,0(s1)
	rtd_outl(0xb801e590,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e2c:	af220000 	sw	v0,0(t9)
	rtd_outl(0xb801e594,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly

	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e30:	3c11b801 	lui	s1,0xb801

	//==========read delay chain (rx phase)======//

	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e590,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e594,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e34:	aca20000 	sw	v0,0(a1)
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly

	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a0,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e38:	3c19b801 	lui	t9,0xb801
	//==========read delay chain (rx phase)======//

	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e590,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e594,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
a0024e3c:	acc20000 	sw	v0,0(a2)

	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a0,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a4,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e40:	3c05b801 	lui	a1,0xb801
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e44:	3c06b801 	lui	a2,0xb801
	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e590,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e594,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly

	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e48:	3631e59c 	ori	s1,s1,0xe59c
	rtd_outl(0xb801e5a0,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e4c:	3739e5a0 	ori	t9,t9,0xe5a0
	rtd_outl(0xb801e5a4,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e50:	34a5e5a4 	ori	a1,a1,0xe5a4
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e54:	34c6e5a8 	ori	a2,a2,0xe5a8
	rtd_outl(0xb801e58c,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e590,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e594,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly

	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e58:	ae220000 	sw	v0,0(s1)
	rtd_outl(0xb801e5a0,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e5c:	af220000 	sw	v0,0(t9)
	rtd_outl(0xb801e5a4,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly

	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e60:	3c11b801 	lui	s1,0xb801
	rtd_outl(0xb801e594,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly

	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a0,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a4,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e64:	aca20000 	sw	v0,0(a1)
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly

	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b0,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e68:	3c19b801 	lui	t9,0xb801
	rtd_outl(0xb801e598,0x0a0a0a0a);//DQSP[3]~DQSP[0] dly

	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a0,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a4,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
a0024e6c:	acc20000 	sw	v0,0(a2)

	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b0,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b4,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e70:	3c05b801 	lui	a1,0xb801
	rtd_outl(0xb801e5b8,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e74:	3c06b801 	lui	a2,0xb801
	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a0,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a4,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly

	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e78:	3631e5ac 	ori	s1,s1,0xe5ac
	rtd_outl(0xb801e5b0,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e7c:	3739e5b0 	ori	t9,t9,0xe5b0
	rtd_outl(0xb801e5b4,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e80:	34a5e5b4 	ori	a1,a1,0xe5b4
	rtd_outl(0xb801e5b8,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e84:	34c6e5b8 	ori	a2,a2,0xe5b8
	rtd_outl(0xb801e59c,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a0,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a4,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly

	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e88:	ae220000 	sw	v0,0(s1)
	rtd_outl(0xb801e5b0,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e8c:	af220000 	sw	v0,0(t9)
	rtd_outl(0xb801e5b4,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b8,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly

	rtd_outl(0xb801e5bc,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024e90:	3c11b801 	lui	s1,0xb801
	rtd_outl(0xb801e5a4,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly

	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b0,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b4,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e94:	aca20000 	sw	v0,0(a1)
	rtd_outl(0xb801e5b8,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly

	rtd_outl(0xb801e5bc,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c0,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024e98:	3c19b801 	lui	t9,0xb801
	rtd_outl(0xb801e5a8,0x0a0a0a0a);//DQSP[7]~DQSP[4] dly

	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b0,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b4,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b8,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
a0024e9c:	acc20000 	sw	v0,0(a2)

	rtd_outl(0xb801e5bc,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c0,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c4,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024ea0:	3c05b801 	lui	a1,0xb801
	rtd_outl(0xb801e5c8,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024ea4:	3c06b801 	lui	a2,0xb801
	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b0,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b4,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b8,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly

	rtd_outl(0xb801e5bc,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024ea8:	3631e5bc 	ori	s1,s1,0xe5bc
	rtd_outl(0xb801e5c0,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024eac:	3739e5c0 	ori	t9,t9,0xe5c0
	rtd_outl(0xb801e5c4,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024eb0:	34a5e5c4 	ori	a1,a1,0xe5c4
	rtd_outl(0xb801e5c8,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024eb4:	34c6e5c8 	ori	a2,a2,0xe5c8
	rtd_outl(0xb801e5ac,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b0,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b4,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b8,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly

	rtd_outl(0xb801e5bc,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024eb8:	ae220000 	sw	v0,0(s1)
	rtd_outl(0xb801e5c0,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024ebc:	af220000 	sw	v0,0(t9)
	rtd_outl(0xb801e5c4,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c8,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly

	rtd_outl(0xb801e684,0x0a330a33);//?
a0024ec0:	3c11b801 	lui	s1,0xb801
	rtd_outl(0xb801e5b4,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly
	rtd_outl(0xb801e5b8,0x0a0a0a0a);//DQSN[3]~DQSN[0] dly

	rtd_outl(0xb801e5bc,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c0,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c4,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024ec4:	aca20000 	sw	v0,0(a1)
	rtd_outl(0xb801e5c8,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
a0024ec8:	acc20000 	sw	v0,0(a2)

	rtd_outl(0xb801e684,0x0a330a33);//?
a0024ecc:	3c020a33 	lui	v0,0xa33
a0024ed0:	34420a33 	ori	v0,v0,0xa33
a0024ed4:	3631e684 	ori	s1,s1,0xe684
a0024ed8:	ae220000 	sw	v0,0(s1)
	rtd_outl(0xb801e690,0x00000000);//?
a0024edc:	3c19b801 	lui	t9,0xb801
	rtd_outl(0xb801e69c,0x00000000);//?
a0024ee0:	3c02b801 	lui	v0,0xb801
	rtd_outl(0xb801e5c0,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c4,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c8,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly

	rtd_outl(0xb801e684,0x0a330a33);//?
	rtd_outl(0xb801e690,0x00000000);//?
a0024ee4:	3739e690 	ori	t9,t9,0xe690
	rtd_outl(0xb801e69c,0x00000000);//?
a0024ee8:	3442e69c 	ori	v0,v0,0xe69c
	rtd_outl(0xb801e5c0,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c4,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c8,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly

	rtd_outl(0xb801e684,0x0a330a33);//?
	rtd_outl(0xb801e690,0x00000000);//?
a0024eec:	af200000 	sw	zero,0(t9)
	rtd_outl(0xb801e61c,0x0000000c);//fw_Set_rd_dly=1,for update the Rx dly chain
	//Reg for update the Rx phase

	//==========read delay chain (rx phase)end===//
	//========================fifo===============================//
	rtd_outl(0xb800884c,0x00000030);   //R/W/Q FIFO
a0024ef0:	3c05b800 	lui	a1,0xb800
	rtd_outl(0xb801e5c4,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly
	rtd_outl(0xb801e5c8,0x0a0a0a0a);//DQSN[7]~DQSN[4] dly

	rtd_outl(0xb801e684,0x0a330a33);//?
	rtd_outl(0xb801e690,0x00000000);//?
	rtd_outl(0xb801e69c,0x00000000);//?
a0024ef4:	ac400000 	sw	zero,0(v0)
	rtd_outl(0xb801e61c,0x0000000c);//fw_Set_rd_dly=1,for update the Rx dly chain
a0024ef8:	2402000c 	li	v0,12
a0024efc:	ad220000 	sw	v0,0(t1)
	//Reg for update the Rx phase

	//==========read delay chain (rx phase)end===//
	//========================fifo===============================//
	rtd_outl(0xb800884c,0x00000030);   //R/W/Q FIFO
a0024f00:	34a5884c 	ori	a1,a1,0x884c
a0024f04:	24020030 	li	v0,48
a0024f08:	aca20000 	sw	v0,0(a1)
	rtd_outl(0xb801e6dc,0x22116677);//?
	rtd_outl(0xb801e6e0,0x10101010);//?
	rtd_outl(0xb801e568,0x22116677);//cal_shift_ctrl
	rtd_outl(0xb801e56c,0x22222222);//cal_LS_sel
a0024f0c:	3c032222 	lui	v1,0x2222
	//Reg for update the Rx phase

	//==========read delay chain (rx phase)end===//
	//========================fifo===============================//
	rtd_outl(0xb800884c,0x00000030);   //R/W/Q FIFO
	rtd_outl(0xb801e6dc,0x22116677);//?
a0024f10:	3c082211 	lui	t0,0x2211
	rtd_outl(0xb801e6e0,0x10101010);//?
a0024f14:	3c021010 	lui	v0,0x1010
	rtd_outl(0xb801e56c,0x22222222);//cal_LS_sel
	rtd_outl(0xb801e570,0x22222222);//cal_LS_sel
	rtd_outl(0xb801e574,0x22222222);//cal_LS_sel
	rtd_outl(0xb801e578,0x22222222);//cal_LS_sel

	rtd_outl(0xb801e57c,0x22222222);//cal_RS_sel
a0024f18:	3c06b801 	lui	a2,0xb801
	rtd_outl(0xb801e580,0x22222222);//cal_RS_sel
a0024f1c:	3c11b801 	lui	s1,0xb801
	rtd_outl(0xb801e584,0x22222222);//cal_RS_sel
	rtd_outl(0xb801e588,0x22222222);//cal_RS_sel
a0024f20:	3c19b801 	lui	t9,0xb801
	//========================fifo===============================//
	rtd_outl(0xb800884c,0x00000030);   //R/W/Q FIFO
	rtd_outl(0xb801e6dc,0x22116677);//?
	rtd_outl(0xb801e6e0,0x10101010);//?
	rtd_outl(0xb801e568,0x22116677);//cal_shift_ctrl
	rtd_outl(0xb801e56c,0x22222222);//cal_LS_sel
a0024f24:	34632222 	ori	v1,v1,0x2222
	//Reg for update the Rx phase

	//==========read delay chain (rx phase)end===//
	//========================fifo===============================//
	rtd_outl(0xb800884c,0x00000030);   //R/W/Q FIFO
	rtd_outl(0xb801e6dc,0x22116677);//?
a0024f28:	35086677 	ori	t0,t0,0x6677
a0024f2c:	3618e6dc 	ori	t8,s0,0xe6dc
	rtd_outl(0xb801e6e0,0x10101010);//?
a0024f30:	360fe6e0 	ori	t7,s0,0xe6e0
	rtd_outl(0xb801e568,0x22116677);//cal_shift_ctrl
a0024f34:	360ee568 	ori	t6,s0,0xe568
	rtd_outl(0xb801e56c,0x22222222);//cal_LS_sel
a0024f38:	360de56c 	ori	t5,s0,0xe56c
	rtd_outl(0xb801e570,0x22222222);//cal_LS_sel
a0024f3c:	360ce570 	ori	t4,s0,0xe570
	rtd_outl(0xb801e574,0x22222222);//cal_LS_sel
a0024f40:	360be574 	ori	t3,s0,0xe574
	rtd_outl(0xb801e578,0x22222222);//cal_LS_sel
a0024f44:	360ae578 	ori	t2,s0,0xe578

	rtd_outl(0xb801e57c,0x22222222);//cal_RS_sel
a0024f48:	34c6e57c 	ori	a2,a2,0xe57c
	rtd_outl(0xb801e580,0x22222222);//cal_RS_sel
	rtd_outl(0xb801e584,0x22222222);//cal_RS_sel
	rtd_outl(0xb801e588,0x22222222);//cal_RS_sel
a0024f4c:	3739e588 	ori	t9,t9,0xe588

	//==========read delay chain (rx phase)end===//
	//========================fifo===============================//
	rtd_outl(0xb800884c,0x00000030);   //R/W/Q FIFO
	rtd_outl(0xb801e6dc,0x22116677);//?
	rtd_outl(0xb801e6e0,0x10101010);//?
a0024f50:	34421010 	ori	v0,v0,0x1010
	rtd_outl(0xb801e574,0x22222222);//cal_LS_sel
	rtd_outl(0xb801e578,0x22222222);//cal_LS_sel

	rtd_outl(0xb801e57c,0x22222222);//cal_RS_sel
	rtd_outl(0xb801e580,0x22222222);//cal_RS_sel
	rtd_outl(0xb801e584,0x22222222);//cal_RS_sel
a0024f54:	3610e584 	ori	s0,s0,0xe584
	rtd_outl(0xb801e570,0x22222222);//cal_LS_sel
	rtd_outl(0xb801e574,0x22222222);//cal_LS_sel
	rtd_outl(0xb801e578,0x22222222);//cal_LS_sel

	rtd_outl(0xb801e57c,0x22222222);//cal_RS_sel
	rtd_outl(0xb801e580,0x22222222);//cal_RS_sel
a0024f58:	3631e580 	ori	s1,s1,0xe580
	//Reg for update the Rx phase

	//==========read delay chain (rx phase)end===//
	//========================fifo===============================//
	rtd_outl(0xb800884c,0x00000030);   //R/W/Q FIFO
	rtd_outl(0xb801e6dc,0x22116677);//?
a0024f5c:	af080000 	sw	t0,0(t8)
	rtd_outl(0xb801e588,0x22222222);//cal_RS_sel

	//============================DDR_initial==================//
	//rtd_outl(0xb8008940, 0x00000001); 	  //
	rtd_outl(0xb8008840, 0x00000003);		//DRAM init
	arom_mdelay(0x1);
a0024f60:	24040001 	li	a0,1

	//==========read delay chain (rx phase)end===//
	//========================fifo===============================//
	rtd_outl(0xb800884c,0x00000030);   //R/W/Q FIFO
	rtd_outl(0xb801e6dc,0x22116677);//?
	rtd_outl(0xb801e6e0,0x10101010);//?
a0024f64:	ade20000 	sw	v0,0(t7)
	rtd_outl(0xb801e568,0x22116677);//cal_shift_ctrl
a0024f68:	adc80000 	sw	t0,0(t6)
	rtd_outl(0xb801e56c,0x22222222);//cal_LS_sel
a0024f6c:	ada30000 	sw	v1,0(t5)
	rtd_outl(0xb801e570,0x22222222);//cal_LS_sel
a0024f70:	ad830000 	sw	v1,0(t4)
	rtd_outl(0xb801e574,0x22222222);//cal_LS_sel
a0024f74:	ad630000 	sw	v1,0(t3)
	rtd_outl(0xb801e578,0x22222222);//cal_LS_sel
a0024f78:	ad430000 	sw	v1,0(t2)

	rtd_outl(0xb801e57c,0x22222222);//cal_RS_sel
a0024f7c:	acc30000 	sw	v1,0(a2)
	rtd_outl(0xb801e580,0x22222222);//cal_RS_sel
a0024f80:	ae230000 	sw	v1,0(s1)
	rtd_outl(0xb801e584,0x22222222);//cal_RS_sel
a0024f84:	ae030000 	sw	v1,0(s0)
	rtd_outl(0xb801e588,0x22222222);//cal_RS_sel
a0024f88:	af230000 	sw	v1,0(t9)

	//============================DDR_initial==================//
	//rtd_outl(0xb8008940, 0x00000001); 	  //
	rtd_outl(0xb8008840, 0x00000003);		//DRAM init
a0024f8c:	ae470000 	sw	a3,0(s2)
	arom_mdelay(0x1);
a0024f90:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024f94:	00000000 	nop
	rtd_outl(0xb8008840, 0x03000000);		//end 200us
a0024f98:	3c020300 	lui	v0,0x300
a0024f9c:	ae420000 	sw	v0,0(s2)
	arom_mdelay(0x2);
a0024fa0:	0c00925c 	jal	a0024970 <arom_mdelay>
a0024fa4:	24040002 	li	a0,2
	rtd_outl(0xb8008840, 0x0c000000);		//end 500us
a0024fa8:	3c020c00 	lui	v0,0xc00
a0024fac:	ae420000 	sw	v0,0(s2)
	arom_mdelay(0x5);
	//==========================DDR_initail_end==================//
#endif

}
a0024fb0:	8fbf0034 	lw	ra,52(sp)
a0024fb4:	8fbe0030 	lw	s8,48(sp)
a0024fb8:	8fb7002c 	lw	s7,44(sp)
a0024fbc:	8fb60028 	lw	s6,40(sp)
a0024fc0:	8fb50024 	lw	s5,36(sp)
a0024fc4:	8fb40020 	lw	s4,32(sp)
a0024fc8:	8fb3001c 	lw	s3,28(sp)
a0024fcc:	8fb20018 	lw	s2,24(sp)
a0024fd0:	8fb10014 	lw	s1,20(sp)
a0024fd4:	8fb00010 	lw	s0,16(sp)
	rtd_outl(0xb8008840, 0x00000003);		//DRAM init
	arom_mdelay(0x1);
	rtd_outl(0xb8008840, 0x03000000);		//end 200us
	arom_mdelay(0x2);
	rtd_outl(0xb8008840, 0x0c000000);		//end 500us
	arom_mdelay(0x5);
a0024fd8:	24040005 	li	a0,5
a0024fdc:	0800925c 	j	a0024970 <arom_mdelay>
a0024fe0:	27bd0038 	addiu	sp,sp,56

a0024fe4 <sed_cmd_chip_rst_post>:
	for (i=0; i<10; i++)
		sed_printf("dmem(%x %x):\n", (uint32) ptr, *(ptr++));

	sed_printf("dmem(%x %x):\n", END_OF_DMEM_ADDR, *(uint32 *) END_OF_DMEM_ADDR-4);
	#endif
	ptr = (uint32 *)(uint32) &__heap_start_addr;
a0024fe4:	3c02a003 	lui	v0,0xa003

	/* Clear volatile memory */
	while ( ((uint32) ptr)<END_OF_DMEM_ADDR ) {
a0024fe8:	3c04b807 	lui	a0,0xb807
	for (i=0; i<10; i++)
		sed_printf("dmem(%x %x):\n", (uint32) ptr, *(ptr++));

	sed_printf("dmem(%x %x):\n", END_OF_DMEM_ADDR, *(uint32 *) END_OF_DMEM_ADDR-4);
	#endif
	ptr = (uint32 *)(uint32) &__heap_start_addr;
a0024fec:	24429c50 	addiu	v0,v0,-25520

	/* Clear volatile memory */
	while ( ((uint32) ptr)<END_OF_DMEM_ADDR ) {
a0024ff0:	3484a800 	ori	a0,a0,0xa800
a0024ff4:	0044182b 	sltu	v1,v0,a0
a0024ff8:	10600006 	beqz	v1,a0025014 <sed_cmd_chip_rst_post+0x30>
a0024ffc:	00000000 	nop
		*(ptr++) = 0;
a0025000:	ac400000 	sw	zero,0(v0)
a0025004:	24420004 	addiu	v0,v0,4
	sed_printf("dmem(%x %x):\n", END_OF_DMEM_ADDR, *(uint32 *) END_OF_DMEM_ADDR-4);
	#endif
	ptr = (uint32 *)(uint32) &__heap_start_addr;

	/* Clear volatile memory */
	while ( ((uint32) ptr)<END_OF_DMEM_ADDR ) {
a0025008:	0044182b 	sltu	v1,v0,a0
a002500c:	1460fffc 	bnez	v1,a0025000 <sed_cmd_chip_rst_post+0x1c>
a0025010:	00000000 	nop
a0025014:	03e00008 	jr	ra
a0025018:	00000000 	nop

a002501c <wait_loop>:
	bitwise_AND_OR(SYS_PLL_BUS1, 0xfe03ffff, (bus_m<<18));

}

void wait_loop(volatile unsigned int count)
{
a002501c:	afa40000 	sw	a0,0(sp)
	while (count--)
a0025020:	8fa20000 	lw	v0,0(sp)
a0025024:	00000000 	nop
a0025028:	2443ffff 	addiu	v1,v0,-1
a002502c:	afa30000 	sw	v1,0(sp)
a0025030:	1440fffb 	bnez	v0,a0025020 <wait_loop+0x4>
a0025034:	00000000 	nop
		;
}
a0025038:	03e00008 	jr	ra
a002503c:	00000000 	nop

a0025040 <enable_clock>:
	prints(__FUNCTION__);
	prints("\n");
#endif

	/* set CLKEN = 0 */
	REG32(reg_clock) &= ~mask_clock;
a0025040:	8cc20000 	lw	v0,0(a2)
a0025044:	00071827 	nor	v1,zero,a3

	/* set RSTN = 0 */
	REG32(reg_reset) &= ~mask_reset;
a0025048:	00054027 	nor	t0,zero,a1
	prints(__FUNCTION__);
	prints("\n");
#endif

	/* set CLKEN = 0 */
	REG32(reg_clock) &= ~mask_clock;
a002504c:	00621024 	and	v0,v1,v0
a0025050:	acc20000 	sw	v0,0(a2)

	/* set RSTN = 0 */
	REG32(reg_reset) &= ~mask_reset;
a0025054:	8c820000 	lw	v0,0(a0)
a0025058:	00000000 	nop
a002505c:	01021024 	and	v0,t0,v0
a0025060:	ac820000 	sw	v0,0(a0)

	/* set CLKEN = 1 */
	REG32(reg_clock) |= mask_clock;
a0025064:	8cc80000 	lw	t0,0(a2)
a0025068:	24020010 	li	v0,16
a002506c:	01074025 	or	t0,t0,a3
a0025070:	acc80000 	sw	t0,0(a2)

}

void wait_loop(volatile unsigned int count)
{
	while (count--)
a0025074:	00404021 	move	t0,v0
a0025078:	1500fffe 	bnez	t0,a0025074 <enable_clock+0x34>
a002507c:	2442ffff 	addiu	v0,v0,-1

	/* wait a while */
	wait_loop(0x10);

	/* set CLKEN = 0 */
	REG32(reg_clock) &= ~mask_clock;
a0025080:	8cc20000 	lw	v0,0(a2)
a0025084:	00000000 	nop
a0025088:	00431824 	and	v1,v0,v1
a002508c:	acc30000 	sw	v1,0(a2)

	/* set RSTN = 1 */
	REG32(reg_reset) |= mask_reset;
a0025090:	8c820000 	lw	v0,0(a0)
a0025094:	00000000 	nop
a0025098:	00452825 	or	a1,v0,a1
a002509c:	ac850000 	sw	a1,0(a0)

	/* wait a while */
	//wait_loop(0x10);

	/* set CLKEN = 1 */
	REG32(reg_clock) |= mask_clock;
a00250a0:	8cc20000 	lw	v0,0(a2)
a00250a4:	00000000 	nop
a00250a8:	00473825 	or	a3,v0,a3
a00250ac:	acc70000 	sw	a3,0(a2)
}
a00250b0:	03e00008 	jr	ra
a00250b4:	00000000 	nop

a00250b8 <sed_cert_reset>:
#define SYS_GROUP1_CK_EN		(SYS_REG_BASE + 0x14)

void sed_cert_reset()
{
	// Nagra AKL/ND/DSC
	enable_clock(SYS_SOFT_RESET3, 0xE0000000, SYS_GROUP1_CK_EN, 0x00000600);
a00250b8:	3c04b800 	lui	a0,0xb800
a00250bc:	34860014 	ori	a2,a0,0x14
a00250c0:	3c05e000 	lui	a1,0xe000
a00250c4:	34840008 	ori	a0,a0,0x8
a00250c8:	24070600 	li	a3,1536
a00250cc:	08009410 	j	a0025040 <enable_clock>
a00250d0:	00000000 	nop

a00250d4 <sed_init_config>:

}
#endif //?#ifndef SKIP_SED_FUNC

void sed_init_config()
{
a00250d4:	27bdffd8 	addiu	sp,sp,-40
a00250d8:	afbf0024 	sw	ra,36(sp)
	uint8 temp[16]= {0,0,0,0,1};

	// read the config date back from spi flash
 	sed_sfc_read(0x200000, temp, 16);
a00250dc:	3c040020 	lui	a0,0x20
a00250e0:	27a50010 	addiu	a1,sp,16
a00250e4:	24060010 	li	a2,16
}
#endif //?#ifndef SKIP_SED_FUNC

void sed_init_config()
{
	uint8 temp[16]= {0,0,0,0,1};
a00250e8:	24020001 	li	v0,1
a00250ec:	afa00014 	sw	zero,20(sp)
a00250f0:	afa00010 	sw	zero,16(sp)
a00250f4:	a3a20014 	sb	v0,20(sp)
a00250f8:	afa00018 	sw	zero,24(sp)

	// read the config date back from spi flash
 	sed_sfc_read(0x200000, temp, 16);
a00250fc:	0c009082 	jal	a0024208 <sed_sfc_read>
a0025100:	afa0001c 	sw	zero,28(sp)
	kcpu_m = temp[2];
a0025104:	93a20012 	lbu	v0,18(sp)
	bus_m = temp[3];
a0025108:	93a60013 	lbu	a2,19(sp)
	visualize_print_disable = temp[4];
a002510c:	93a80014 	lbu	t0,20(sp)
{
	uint8 temp[16]= {0,0,0,0,1};

	// read the config date back from spi flash
 	sed_sfc_read(0x200000, temp, 16);
	kcpu_m = temp[2];
a0025110:	3c03a003 	lui	v1,0xa003
	bus_m = temp[3];
a0025114:	3c05a003 	lui	a1,0xa003
	visualize_print_disable = temp[4];
a0025118:	3c04a002 	lui	a0,0xa002

	//sed_printf("%x ", kcpu_m);
	//sed_printf("%x ", bus_m);

	if ((kcpu_m > 13) || (bus_m > 13) || (kcpu_m <1)) {  // restore to default
a002511c:	2c47000e 	sltiu	a3,v0,14

	// read the config date back from spi flash
 	sed_sfc_read(0x200000, temp, 16);
	kcpu_m = temp[2];
	bus_m = temp[3];
	visualize_print_disable = temp[4];
a0025120:	a0885ac0 	sb	t0,23232(a0)
{
	uint8 temp[16]= {0,0,0,0,1};

	// read the config date back from spi flash
 	sed_sfc_read(0x200000, temp, 16);
	kcpu_m = temp[2];
a0025124:	a0629c48 	sb	v0,-25528(v1)
	visualize_print_disable = temp[4];

	//sed_printf("%x ", kcpu_m);
	//sed_printf("%x ", bus_m);

	if ((kcpu_m > 13) || (bus_m > 13) || (kcpu_m <1)) {  // restore to default
a0025128:	10e00004 	beqz	a3,a002513c <sed_init_config+0x68>
a002512c:	a0a69c49 	sb	a2,-25527(a1)
a0025130:	2cc7000e 	sltiu	a3,a2,14
a0025134:	14e0001b 	bnez	a3,a00251a4 <sed_init_config+0xd0>
a0025138:	00000000 	nop
		kcpu_m = 0xd; // 405Mhz
a002513c:	2402000d 	li	v0,13
		bus_m = 0xd; // 405Mhz/2
a0025140:	a0a29c49 	sb	v0,-25527(a1)
		visualize_print_disable	 = 1;
a0025144:	24050001 	li	a1,1
a0025148:	a0855ac0 	sb	a1,23232(a0)

	//sed_printf("%x ", kcpu_m);
	//sed_printf("%x ", bus_m);

	if ((kcpu_m > 13) || (bus_m > 13) || (kcpu_m <1)) {  // restore to default
		kcpu_m = 0xd; // 405Mhz
a002514c:	a0629c48 	sb	v0,-25528(v1)
		bus_m = 0xd; // 405Mhz/2
		visualize_print_disable	 = 1;
a0025150:	3c080034 	lui	t0,0x34
a0025154:	3409d000 	li	t1,0xd000
	}

	// kcpu clk
	bitwise_AND_OR(SYS_PLL_KCPU, 0xfff80fff, (kcpu_m<<12));
a0025158:	3c02b800 	lui	v0,0xb800
a002515c:	34430108 	ori	v1,v0,0x108
a0025160:	8c670000 	lw	a3,0(v1)
a0025164:	3c05fff8 	lui	a1,0xfff8
a0025168:	34a50fff 	ori	a1,a1,0xfff
a002516c:	00e52024 	and	a0,a3,a1
a0025170:	01242025 	or	a0,t1,a0
a0025174:	ac640000 	sw	a0,0(v1)
  	// cert/cp clk
	bitwise_AND_OR(SYS_PLL_BUS1, 0xfe03ffff, (bus_m<<18));
a0025178:	34420130 	ori	v0,v0,0x130
a002517c:	8c440000 	lw	a0,0(v0)
a0025180:	3c03fe03 	lui	v1,0xfe03
a0025184:	3463ffff 	ori	v1,v1,0xffff
a0025188:	00833024 	and	a2,a0,v1
a002518c:	01063025 	or	a2,t0,a2
a0025190:	ac460000 	sw	a2,0(v0)

}
a0025194:	8fbf0024 	lw	ra,36(sp)
a0025198:	00000000 	nop
a002519c:	03e00008 	jr	ra
a00251a0:	27bd0028 	addiu	sp,sp,40
	visualize_print_disable = temp[4];

	//sed_printf("%x ", kcpu_m);
	//sed_printf("%x ", bus_m);

	if ((kcpu_m > 13) || (bus_m > 13) || (kcpu_m <1)) {  // restore to default
a00251a4:	1040ffe5 	beqz	v0,a002513c <sed_init_config+0x68>
a00251a8:	00024b00 	sll	t1,v0,0xc
a00251ac:	08009456 	j	a0025158 <sed_init_config+0x84>
a00251b0:	00064480 	sll	t0,a2,0x12

a00251b4 <strlen>:

int strlen(const char *s)
{
	int	l = 0;

	while (*s++) 
a00251b4:	80820000 	lb	v0,0(a0)
a00251b8:	00000000 	nop
a00251bc:	10400009 	beqz	v0,a00251e4 <strlen+0x30>
a00251c0:	00000000 	nop
a00251c4:	00001021 	move	v0,zero
	{
		
	 l++;
a00251c8:	24420001 	addiu	v0,v0,1

int strlen(const char *s)
{
	int	l = 0;

	while (*s++) 
a00251cc:	00821821 	addu	v1,a0,v0
a00251d0:	80630000 	lb	v1,0(v1)
a00251d4:	00000000 	nop
a00251d8:	1460fffc 	bnez	v1,a00251cc <strlen+0x18>
a00251dc:	24420001 	addiu	v0,v0,1
a00251e0:	2442ffff 	addiu	v0,v0,-1
	{
		
	 l++;
	} 
	return l;
}
a00251e4:	03e00008 	jr	ra
a00251e8:	00000000 	nop

Disassembly of section .rodata:

a00251f0 <__gp>:
a00251f0:	5f73250a 	0x5f73250a
a00251f4:	0a313030 	j	a8c4c0c0 <__heap_start_addr+0x8c22470>
a00251f8:	00000000 	nop
a00251fc:	202d2d2d 	addi	t5,at,11565
a0025200:	204b5452 	addi	t3,v0,21586
a0025204:	5f585541 	0x5f585541
a0025208:	65646f43 	udi1i	a0,t3,28483
a002520c:	766e4520 	jalx	a9b91480 <__heap_start_addr+0x9b67830>
a0025210:	6e6f7269 	udi3i	t7,s3,29289
a0025214:	746e656d 	jalx	a1b995b4 <__heap_start_addr+0x1b6f964>
a0025218:	2d2d2d20 	sltiu	t5,t1,11552
a002521c:	00000000 	nop
a0025220:	5f73250a 	0x5f73250a
a0025224:	0a323030 	j	a8c8c0c0 <__heap_start_addr+0x8c62470>
a0025228:	00000000 	nop
a002522c:	3173250a 	andi	s3,t3,0x250a
a0025230:	0000000a 	movz	zero,zero,zero
a0025234:	3273250a 	andi	s3,s3,0x250a
a0025238:	0000000a 	movz	zero,zero,zero

a002523c <__func__.1087>:
a002523c:	5f707061 	0x5f707061
a0025240:	6e69616d 	udi3i	t1,s3,24941
a0025244:	00000000 	nop
a0025248:	00636544 	0x636544
a002524c:	00636e45 	0x636e45
a0025250:	79727325 	0x79727325
a0025254:	44207470 	0x44207470
a0025258:	3a617461 	xori	at,s3,0x7461
a002525c:	00000000 	nop
a0025260:	78323025 	0x78323025
a0025264:	00000020 	add	zero,zero,zero
a0025268:	75500a0a 	jalx	a5402828 <__heap_start_addr+0x53d8bd8>
a002526c:	63696c62 	udi0i	t1,k1,27746
a0025270:	79654b20 	0x79654b20
a0025274:	0000003a 	udi1	zero,zero,zero
a0025278:	00000a0a 	0xa0a
a002527c:	75500a0a 	jalx	a5402828 <__heap_start_addr+0x53d8bd8>
a0025280:	63696c62 	udi0i	t1,k1,27746
a0025284:	3a325220 	xori	s2,s1,0x5220
a0025288:	00000000 	nop
a002528c:	76697250 	jalx	a9a5c940 <__heap_start_addr+0x9a32cf0>
a0025290:	20657461 	addi	a1,v1,29793
a0025294:	3a79654b 	xori	t9,s3,0x654b
a0025298:	00000000 	nop
a002529c:	72617453 	0x72617453
a00252a0:	6f742074 	udi3i	s4,k1,8308
a00252a4:	72732520 	0x72732520
a00252a8:	20747079 	addi	s4,v1,28793
a00252ac:	0a2e2e2e 	j	a8b8b8b8 <__heap_start_addr+0x8b61c68>
a00252b0:	00000000 	nop
a00252b4:	64726148 	udi1i	s2,v1,24904
a00252b8:	65726177 	udi1i	s2,t3,24951
a00252bc:	0000000a 	movz	zero,zero,zero
a00252c0:	74666f53 	jalx	a199bd4c <__heap_start_addr+0x19720fc>
a00252c4:	65726177 	udi1i	s2,t3,24951
a00252c8:	0000000a 	movz	zero,zero,zero

a00252cc <C.35.1612>:
a00252cc:	0d303130 	jal	a4c0c4c0 <__heap_start_addr+0x4be2870>
a00252d0:	86600906 	lh	zero,2310(s3)
a00252d4:	03650148 	0x3650148
a00252d8:	05010204 	bgez	t0,a0025aec <_ctype+0x24>
a00252dc:	00200400 	0x200400
a00252e0:	33323130 	andi	s2,t9,0x3130
a00252e4:	37363534 	ori	s6,t9,0x3534
a00252e8:	62613938 	udi0i	at,s3,14648
a00252ec:	66656463 	udi1i	a1,s3,25699
a00252f0:	00000000 	nop
a00252f4:	6c756e28 	udi3i	s5,v1,28200
a00252f8:	0000296c 	0x296c
a00252fc:	33323130 	andi	s2,t9,0x3130
a0025300:	37363534 	ori	s6,t9,0x3534
a0025304:	42413938 	c0	0x413938
a0025308:	46454443 	c1	0x454443
a002530c:	00000000 	nop
a0025310:	a0022214 	sb	v0,8724(zero)
a0025314:	a002229c 	sb	v0,8860(zero)
a0025318:	a002229c 	sb	v0,8860(zero)
a002531c:	a002229c 	sb	v0,8860(zero)
a0025320:	a002229c 	sb	v0,8860(zero)
a0025324:	a002229c 	sb	v0,8860(zero)
a0025328:	a002229c 	sb	v0,8860(zero)
a002532c:	a002229c 	sb	v0,8860(zero)
a0025330:	a002229c 	sb	v0,8860(zero)
a0025334:	a002229c 	sb	v0,8860(zero)
a0025338:	a002229c 	sb	v0,8860(zero)
a002533c:	a002229c 	sb	v0,8860(zero)
a0025340:	a002229c 	sb	v0,8860(zero)
a0025344:	a002229c 	sb	v0,8860(zero)
a0025348:	a002229c 	sb	v0,8860(zero)
a002534c:	a002229c 	sb	v0,8860(zero)
a0025350:	a002229c 	sb	v0,8860(zero)
a0025354:	a002229c 	sb	v0,8860(zero)
a0025358:	a002229c 	sb	v0,8860(zero)
a002535c:	a002229c 	sb	v0,8860(zero)
a0025360:	a002229c 	sb	v0,8860(zero)
a0025364:	a002229c 	sb	v0,8860(zero)
a0025368:	a002229c 	sb	v0,8860(zero)
a002536c:	a002229c 	sb	v0,8860(zero)
a0025370:	a002229c 	sb	v0,8860(zero)
a0025374:	a002229c 	sb	v0,8860(zero)
a0025378:	a002229c 	sb	v0,8860(zero)
a002537c:	a002229c 	sb	v0,8860(zero)
a0025380:	a002229c 	sb	v0,8860(zero)
a0025384:	a002229c 	sb	v0,8860(zero)
a0025388:	a002229c 	sb	v0,8860(zero)
a002538c:	a002229c 	sb	v0,8860(zero)
a0025390:	a00226cc 	sb	v0,9932(zero)
a0025394:	a002229c 	sb	v0,8860(zero)
a0025398:	a002229c 	sb	v0,8860(zero)
a002539c:	a00226e8 	sb	v0,9960(zero)
a00253a0:	a002229c 	sb	v0,8860(zero)
a00253a4:	a002229c 	sb	v0,8860(zero)
a00253a8:	a002229c 	sb	v0,8860(zero)
a00253ac:	a002229c 	sb	v0,8860(zero)
a00253b0:	a002229c 	sb	v0,8860(zero)
a00253b4:	a002229c 	sb	v0,8860(zero)
a00253b8:	a0022530 	sb	v0,9520(zero)
a00253bc:	a00225fc 	sb	v0,9724(zero)
a00253c0:	a002229c 	sb	v0,8860(zero)
a00253c4:	a0022544 	sb	v0,9540(zero)
a00253c8:	a0022620 	sb	v0,9760(zero)
a00253cc:	a002229c 	sb	v0,8860(zero)
a00253d0:	a0022610 	sb	v0,9744(zero)
a00253d4:	a0022734 	sb	v0,10036(zero)
a00253d8:	a0022734 	sb	v0,10036(zero)
a00253dc:	a0022734 	sb	v0,10036(zero)
a00253e0:	a0022734 	sb	v0,10036(zero)
a00253e4:	a0022734 	sb	v0,10036(zero)
a00253e8:	a0022734 	sb	v0,10036(zero)
a00253ec:	a0022734 	sb	v0,10036(zero)
a00253f0:	a0022734 	sb	v0,10036(zero)
a00253f4:	a0022734 	sb	v0,10036(zero)
a00253f8:	a002229c 	sb	v0,8860(zero)
a00253fc:	a002229c 	sb	v0,8860(zero)
a0025400:	a002229c 	sb	v0,8860(zero)
a0025404:	a002229c 	sb	v0,8860(zero)
a0025408:	a002229c 	sb	v0,8860(zero)
a002540c:	a002229c 	sb	v0,8860(zero)
a0025410:	a002229c 	sb	v0,8860(zero)
a0025414:	a002229c 	sb	v0,8860(zero)
a0025418:	a002229c 	sb	v0,8860(zero)
a002541c:	a002229c 	sb	v0,8860(zero)
a0025420:	a00224d4 	sb	v0,9428(zero)
a0025424:	a002229c 	sb	v0,8860(zero)
a0025428:	a002229c 	sb	v0,8860(zero)
a002542c:	a002229c 	sb	v0,8860(zero)
a0025430:	a002229c 	sb	v0,8860(zero)
a0025434:	a002229c 	sb	v0,8860(zero)
a0025438:	a002229c 	sb	v0,8860(zero)
a002543c:	a002229c 	sb	v0,8860(zero)
a0025440:	a0022724 	sb	v0,10020(zero)
a0025444:	a002229c 	sb	v0,8860(zero)
a0025448:	a002229c 	sb	v0,8860(zero)
a002544c:	a00224fc 	sb	v0,9468(zero)
a0025450:	a002229c 	sb	v0,8860(zero)
a0025454:	a002229c 	sb	v0,8860(zero)
a0025458:	a002229c 	sb	v0,8860(zero)
a002545c:	a002229c 	sb	v0,8860(zero)
a0025460:	a002229c 	sb	v0,8860(zero)
a0025464:	a00224ac 	sb	v0,9388(zero)
a0025468:	a002229c 	sb	v0,8860(zero)
a002546c:	a002229c 	sb	v0,8860(zero)
a0025470:	a00222dc 	sb	v0,8924(zero)
a0025474:	a002229c 	sb	v0,8860(zero)
a0025478:	a002229c 	sb	v0,8860(zero)
a002547c:	a002229c 	sb	v0,8860(zero)
a0025480:	a002229c 	sb	v0,8860(zero)
a0025484:	a002229c 	sb	v0,8860(zero)
a0025488:	a002229c 	sb	v0,8860(zero)
a002548c:	a002229c 	sb	v0,8860(zero)
a0025490:	a002229c 	sb	v0,8860(zero)
a0025494:	a002229c 	sb	v0,8860(zero)
a0025498:	a002229c 	sb	v0,8860(zero)
a002549c:	a00226f8 	sb	v0,9976(zero)
a00254a0:	a00224d8 	sb	v0,9432(zero)
a00254a4:	a002229c 	sb	v0,8860(zero)
a00254a8:	a002229c 	sb	v0,8860(zero)
a00254ac:	a002229c 	sb	v0,8860(zero)
a00254b0:	a0022564 	sb	v0,9572(zero)
a00254b4:	a00224d8 	sb	v0,9432(zero)
a00254b8:	a002229c 	sb	v0,8860(zero)
a00254bc:	a002229c 	sb	v0,8860(zero)
a00254c0:	a0022554 	sb	v0,9556(zero)
a00254c4:	a002229c 	sb	v0,8860(zero)
a00254c8:	a00225dc 	sb	v0,9692(zero)
a00254cc:	a0022500 	sb	v0,9472(zero)
a00254d0:	a00225c4 	sb	v0,9668(zero)
a00254d4:	a002229c 	sb	v0,8860(zero)
a00254d8:	a002229c 	sb	v0,8860(zero)
a00254dc:	a0022574 	sb	v0,9588(zero)
a00254e0:	a002229c 	sb	v0,8860(zero)
a00254e4:	a00224b0 	sb	v0,9392(zero)
a00254e8:	a002229c 	sb	v0,8860(zero)
a00254ec:	a002229c 	sb	v0,8860(zero)
a00254f0:	a00222e4 	sb	v0,8932(zero)
a00254f4:	50544f5b 	0x50544f5b
a00254f8:	41575b5d 	0x41575b5d
a00254fc:	4e494e52 	c3	0x494e52
a0025500:	65725d47 	udi1i	s2,t3,23879
a0025504:	6f206461 	udi3i	zero,t9,25697
a0025508:	66207074 	udi1i	zero,s1,28788
a002550c:	656c6961 	udi1i	t4,t3,26977
a0025510:	6f202c64 	udi3i	zero,t9,11364
a0025514:	20747366 	addi	s4,v1,29542
a0025518:	78383025 	0x78383025
a002551c:	20736920 	addi	s3,v1,26912
a0025520:	20746f6e 	addi	s4,v1,28526
a0025524:	79622034 	0x79622034
a0025528:	20736574 	addi	s3,v1,25972
a002552c:	67696c61 	udi1i	t1,k1,27745
a0025530:	6e656d6e 	udi3i	a1,s3,28014
a0025534:	000a7374 	0xa7374
a0025538:	50544f5b 	0x50544f5b
a002553c:	41575b5d 	0x41575b5d
a0025540:	4e494e52 	c3	0x494e52
a0025544:	72775d47 	0x72775d47
a0025548:	20657469 	addi	a1,v1,29801
a002554c:	2050544f 	addi	s0,v0,21583
a0025550:	6c696166 	udi3i	t1,v1,24934
a0025554:	202c6465 	addi	t4,at,25701
a0025558:	7473666f 	jalx	a1cd99bc <__heap_start_addr+0x1cafd6c>
a002555c:	20782520 	addi	t8,v1,9504
a0025560:	6e207369 	udi3i	zero,s1,29545
a0025564:	3420746f 	ori	zero,at,0x746f
a0025568:	74796220 	jalx	a1e58880 <__heap_start_addr+0x1e2ec30>
a002556c:	61207365 	udi0i	zero,t1,29541
a0025570:	6e67696c 	udi3i	a3,s3,26988
a0025574:	746e656d 	jalx	a1b995b4 <__heap_start_addr+0x1b6f964>
a0025578:	00000a73 	0xa73
a002557c:	50544f5b 	0x50544f5b
a0025580:	41575b5d 	0x41575b5d
a0025584:	4e494e52 	c3	0x494e52
a0025588:	72775d47 	0x72775d47
a002558c:	20657469 	addi	a1,v1,29801
a0025590:	2050544f 	addi	s0,v0,21583
a0025594:	6c696166 	udi3i	t1,v1,24934
a0025598:	202c6465 	addi	t4,at,25701
a002559c:	7473666f 	jalx	a1cd99bc <__heap_start_addr+0x1cafd6c>
a00255a0:	20782520 	addi	t8,v1,9504
a00255a4:	4d203d3e 	0x4d203d3e
a00255a8:	4f5f5841 	c3	0x15f5841
a00255ac:	4f5f5054 	c3	0x15f5054
a00255b0:	28545346 	slti	s4,v0,21318
a00255b4:	0a297825 	j	a8a5e094 <__heap_start_addr+0x8a34444>
a00255b8:	00000000 	nop
a00255bc:	5b70746f 	0x5b70746f
a00255c0:	78257830 	0x78257830
a00255c4:	7369205d 	0x7369205d
a00255c8:	6e6f6e20 	udi3i	t7,s3,28192
a00255cc:	61657220 	udi0i	a1,t3,29216
a00255d0:	6c626164 	udi3i	v0,v1,24932
a00255d4:	6e202c65 	udi3i	zero,s1,11365
a00255d8:	6572206f 	udi1i	s2,t3,8303
a00255dc:	6f72702d 	udi3i	s2,k1,28717
a00255e0:	6d617267 	udi3i	at,t3,29287
a00255e4:	65686320 	udi1i	t0,t3,25376
a00255e8:	000a6b63 	0xa6b63
a00255ec:	43534952 	c0	0x1534952
a00255f0:	20535255 	addi	s3,v0,21077
a00255f4:	25287325 	addiu	t0,t1,29477
a00255f8:	000a2964 	0xa2964
a00255fc:	676e656c 	udi1i	t6,k1,25964
a0025600:	6f206874 	udi3i	zero,t9,26740
a0025604:	53522066 	0x53522066
a0025608:	656b2041 	udi1i	t3,t3,8257
a002560c:	73692079 	0x73692079
a0025610:	0a642520 	j	a9909480 <__heap_start_addr+0x98df830>
a0025614:	00000000 	nop
a0025618:	676e656c 	udi1i	t6,k1,25964
a002561c:	6f206874 	udi3i	zero,t9,26740
a0025620:	53522066 	0x53522066
a0025624:	61642041 	udi0i	a0,t3,8257
a0025628:	69206174 	udi2i	zero,t1,24948
a002562c:	64252073 	udi1i	a1,at,8307
a0025630:	0000000a 	movz	zero,zero,zero
a0025634:	61736944 	udi0i	s3,t3,26948
a0025638:	20656c62 	addi	a1,v1,27746
a002563c:	66207325 	udi1i	zero,s1,29477
a0025640:	74636e75 	jalx	a18db9d4 <__heap_start_addr+0x18b1d84>
a0025644:	0a6e6f69 	j	a9b9bda4 <__heap_start_addr+0x9b72154>
a0025648:	00000000 	nop
a002564c:	43534952 	c0	0x1534952
a0025650:	20535255 	addi	s3,v0,21077
a0025654:	25287325 	addiu	t0,t1,29477
a0025658:	665b2964 	udi1i	k1,s2,10596
a002565c:	5f746361 	0x5f746361
a0025660:	74617473 	jalx	a185d1cc <__heap_start_addr+0x183357c>
a0025664:	303d7375 	andi	sp,at,0x7375
a0025668:	38302578 	xori	s0,at,0x2578
a002566c:	000a5d78 	0xa5d78
a0025670:	20415352 	addi	at,v0,21330
a0025674:	79727325 	0x79727325
a0025678:	6f207470 	udi3i	zero,t9,29808
a002567c:	61726570 	udi0i	s2,t3,25968
a0025680:	6e6f6974 	udi3i	t7,s3,26996
a0025684:	00000000 	nop
a0025688:	53520a0a 	0x53520a0a
a002568c:	73252041 	0x73252041
a0025690:	74707972 	jalx	a1c1e5c8 <__heap_start_addr+0x1bf4978>
a0025694:	44206465 	0x44206465
a0025698:	3a617461 	xori	at,s3,0x7461
a002569c:	00000000 	nop
a00256a0:	53520a0a 	0x53520a0a
a00256a4:	73252041 	0x73252041
a00256a8:	74707972 	jalx	a1c1e5c8 <__heap_start_addr+0x1bf4978>
a00256ac:	44206465 	0x44206465
a00256b0:	20617461 	addi	at,v1,29793
a00256b4:	69727473 	udi2i	s2,t3,29811
a00256b8:	0a3a676e 	j	a8e99db8 <__heap_start_addr+0x8e70168>
a00256bc:	00000000 	nop
a00256c0:	78323025 	0x78323025
a00256c4:	00000000 	nop
a00256c8:	79727325 	0x79727325
a00256cc:	66207470 	udi1i	zero,s1,29808
a00256d0:	73696e69 	0x73696e69
a00256d4:	28212168 	slti	at,at,8552
a00256d8:	0a296425 	j	a8a59094 <__heap_start_addr+0x8a2f444>
a00256dc:	00000000 	nop

a00256e0 <__func__.1357>:
a00256e0:	5f6b7472 	0x5f6b7472
a00256e4:	5f617372 	0x5f617372
a00256e8:	0000706f 	0x706f

a00256ec <__func__.1338>:
a00256ec:	53617372 	0x53617372
a00256f0:	654b7465 	udi1i	t3,t2,29797
a00256f4:	00000079 	0x79

a00256f8 <__func__.1318>:
a00256f8:	53617372 	0x53617372
a00256fc:	61447465 	udi0i	a0,t2,29797
a0025700:	00006174 	0x6174

a0025704 <__func__.1309>:
a0025704:	44736561 	0x44736561
a0025708:	79726365 	0x79726365
a002570c:	00007470 	0x7470

a0025710 <__func__.1302>:
a0025710:	45736561 	0x45736561
a0025714:	7972636e 	0x7972636e
a0025718:	00007470 	0x7470

a002571c <__func__.1295>:
a002571c:	53736561 	0x53736561
a0025720:	654b7465 	udi1i	t3,t2,29797
a0025724:	00000079 	0x79

a0025728 <__func__.1288>:
a0025728:	53736561 	0x53736561
a002572c:	61447465 	udi0i	a0,t2,29797
a0025730:	00006174 	0x6174

a0025734 <__func__.1281>:
a0025734:	73656474 	0x73656474
a0025738:	72636544 	0x72636544
a002573c:	00747079 	0x747079

a0025740 <__func__.1274>:
a0025740:	73656474 	0x73656474
a0025744:	72636e45 	0x72636e45
a0025748:	00747079 	0x747079

a002574c <__func__.1267>:
a002574c:	73656474 	0x73656474
a0025750:	4b746553 	c2	0x1746553
a0025754:	00007965 	0x7965

a0025758 <__func__.1260>:
a0025758:	73656474 	0x73656474
a002575c:	44746553 	0x44746553
a0025760:	00617461 	0x617461

a0025764 <__func__.1253>:
a0025764:	44736564 	0x44736564
a0025768:	79726365 	0x79726365
a002576c:	00007470 	0x7470

a0025770 <__func__.1246>:
a0025770:	45736564 	0x45736564
a0025774:	7972636e 	0x7972636e
a0025778:	00007470 	0x7470

a002577c <__func__.1239>:
a002577c:	53736564 	0x53736564
a0025780:	654b7465 	udi1i	t3,t2,29797
a0025784:	00000079 	0x79

a0025788 <__func__.1232>:
a0025788:	53736564 	0x53736564
a002578c:	61447465 	udi0i	a0,t2,29797
a0025790:	00006174 	0x6174

a0025794 <__func__.1225>:
a0025794:	74697277 	jalx	a1a5c9dc <__heap_start_addr+0x1a32d8c>
a0025798:	50544f65 	0x50544f65
a002579c:	00000000 	nop

a00257a0 <__func__.1216>:
a00257a0:	64616572 	udi1i	at,v1,25970
a00257a4:	0050544f 	0x50544f

a00257a8 <__func__.1208>:
a00257a8:	61736964 	udi0i	s3,t3,26980
a00257ac:	54656c62 	0x54656c62
a00257b0:	67676972 	udi1i	a3,k1,26994
a00257b4:	00007265 	0x7265

a00257b8 <__func__.1204>:
a00257b8:	62616e65 	udi0i	at,s3,28261
a00257bc:	7254656c 	0x7254656c
a00257c0:	65676769 	udi1i	a3,t3,26473
a00257c4:	00000072 	0x72

a00257c8 <__func__.1185>:
a00257c8:	74696e69 	jalx	a1a5b9a4 <__heap_start_addr+0x1a31d54>
a00257cc:	72616f42 	0x72616f42
a00257d0:	00000064 	0x64

a00257d4 <__func__.1181>:
a00257d4:	74696e69 	jalx	a1a5b9a4 <__heap_start_addr+0x1a31d54>
a00257d8:	69726553 	udi2i	s2,t3,25939
a00257dc:	00006c61 	0x6c61
a00257e0:	43534952 	c0	0x1534952
a00257e4:	20535255 	addi	s3,v0,21077
a00257e8:	25287325 	addiu	t0,t1,29477
a00257ec:	656c2964 	udi1i	t4,t3,10596
a00257f0:	6874676e 	udi2i	s4,v1,26478
a00257f4:	0a64253d 	j	a99094f4 <__heap_start_addr+0x98df8a4>
a00257f8:	00000000 	nop
a00257fc:	78343025 	0x78343025
a0025800:	3430252d 	ori	s0,at,0x252d
a0025804:	203a2078 	addi	k0,at,8312
a0025808:	00000000 	nop
a002580c:	30257830 	andi	a1,at,0x7830
a0025810:	00207832 	0x207832
a0025814:	66667562 	udi1i	a2,s3,30050
a0025818:	64207265 	udi1i	zero,at,29285
a002581c:	20617461 	addi	at,v1,29793
a0025820:	65736f6c 	udi1i	s3,t3,28524
a0025824:	00212121 	0x212121
a0025828:	63736952 	udi0i	s3,k1,26962
a002582c:	20657275 	addi	a1,v1,29301
a0025830:	25207325 	addiu	zero,t1,29477
a0025834:	00000a73 	0xa73
a0025838:	353a3631 	ori	k0,t1,0x3631
a002583c:	36353a36 	ori	s5,s1,0x3a36
a0025840:	00000000 	nop
a0025844:	206c754a 	addi	t4,v1,30026
a0025848:	32203320 	andi	zero,s1,0x3320
a002584c:	00343130 	0x343130
a0025850:	25287325 	addiu	t0,t1,29477
a0025854:	00002964 	0x2964
a0025858:	25287325 	addiu	t0,t1,29477
a002585c:	6d632964 	udi3i	v1,t3,10596
a0025860:	78303d64 	0x78303d64
a0025864:	6c287825 	udi3i	t0,at,30757
a0025868:	253d6e65 	addiu	sp,t1,28261
a002586c:	305b2075 	andi	k1,v0,0x2075
a0025870:	5d782578 	0x5d782578
a0025874:	00000a29 	0xa29
a0025878:	2050544f 	addi	s0,v0,21583
a002587c:	676e656c 	udi1i	t6,k1,25964
a0025880:	6f206874 	udi3i	zero,t9,26740
a0025884:	20726576 	addi	s2,v1,25974
a0025888:	000a4b31 	0xa4b31
a002588c:	61746164 	udi0i	s4,t3,24932
a0025890:	6d756e20 	udi3i	s5,t3,28192
a0025894:	20726562 	addi	s2,v1,25954
a0025898:	4f20666f 	c3	0x120666f
a002589c:	69205054 	udi2i	zero,t1,20564
a00258a0:	64252073 	udi1i	a1,at,8307
a00258a4:	0000000a 	movz	zero,zero,zero
a00258a8:	5f70746f 	0x5f70746f
a00258ac:	5b797261 	0x5b797261
a00258b0:	3d5d6425 	0x3d5d6425
a00258b4:	78257830 	0x78257830
a00258b8:	29642528 	slti	a0,t3,9512
a00258bc:	0000000a 	movz	zero,zero,zero
a00258c0:	61746164 	udi0i	s4,t3,24932
a00258c4:	5d64255b 	0x5d64255b
a00258c8:	2578303d 	addiu	t8,t3,12349
a00258cc:	64252878 	udi1i	a1,at,10360
a00258d0:	00000a29 	0xa29
a00258d4:	a0023b64 	sb	v0,15204(zero)
a00258d8:	a0023b88 	sb	v0,15240(zero)
a00258dc:	a0023b3c 	sb	v0,15164(zero)
a00258e0:	a0023b50 	sb	v0,15184(zero)
a00258e4:	a0023844 	sb	v0,14404(zero)
a00258e8:	a0023844 	sb	v0,14404(zero)
a00258ec:	a0023844 	sb	v0,14404(zero)
a00258f0:	a0023844 	sb	v0,14404(zero)
a00258f4:	a0023844 	sb	v0,14404(zero)
a00258f8:	a0023844 	sb	v0,14404(zero)
a00258fc:	a0023844 	sb	v0,14404(zero)
a0025900:	a0023844 	sb	v0,14404(zero)
a0025904:	a0023844 	sb	v0,14404(zero)
a0025908:	a0023844 	sb	v0,14404(zero)
a002590c:	a0023844 	sb	v0,14404(zero)
a0025910:	a0023844 	sb	v0,14404(zero)
a0025914:	a0023b18 	sb	v0,15128(zero)
a0025918:	a0023af4 	sb	v0,15092(zero)
a002591c:	a0023ae0 	sb	v0,15072(zero)
a0025920:	a0023acc 	sb	v0,15052(zero)
a0025924:	a0023844 	sb	v0,14404(zero)
a0025928:	a0023844 	sb	v0,14404(zero)
a002592c:	a0023844 	sb	v0,14404(zero)
a0025930:	a0023844 	sb	v0,14404(zero)
a0025934:	a0023844 	sb	v0,14404(zero)
a0025938:	a0023844 	sb	v0,14404(zero)
a002593c:	a0023844 	sb	v0,14404(zero)
a0025940:	a0023844 	sb	v0,14404(zero)
a0025944:	a0023844 	sb	v0,14404(zero)
a0025948:	a0023844 	sb	v0,14404(zero)
a002594c:	a0023844 	sb	v0,14404(zero)
a0025950:	a0023844 	sb	v0,14404(zero)
a0025954:	a0023aa8 	sb	v0,15016(zero)
a0025958:	a0023a84 	sb	v0,14980(zero)
a002595c:	a0023a70 	sb	v0,14960(zero)
a0025960:	a0023a5c 	sb	v0,14940(zero)
a0025964:	a0023844 	sb	v0,14404(zero)
a0025968:	a0023844 	sb	v0,14404(zero)
a002596c:	a0023844 	sb	v0,14404(zero)
a0025970:	a0023844 	sb	v0,14404(zero)
a0025974:	a0023844 	sb	v0,14404(zero)
a0025978:	a0023844 	sb	v0,14404(zero)
a002597c:	a0023844 	sb	v0,14404(zero)
a0025980:	a0023844 	sb	v0,14404(zero)
a0025984:	a0023844 	sb	v0,14404(zero)
a0025988:	a0023844 	sb	v0,14404(zero)
a002598c:	a0023844 	sb	v0,14404(zero)
a0025990:	a0023844 	sb	v0,14404(zero)
a0025994:	a0023a38 	sb	v0,14904(zero)
a0025998:	a0023a20 	sb	v0,14880(zero)
a002599c:	a0023a0c 	sb	v0,14860(zero)
a00259a0:	a00239f8 	sb	v0,14840(zero)
a00259a4:	a0023844 	sb	v0,14404(zero)
a00259a8:	a0023844 	sb	v0,14404(zero)
a00259ac:	a0023844 	sb	v0,14404(zero)
a00259b0:	a0023844 	sb	v0,14404(zero)
a00259b4:	a0023844 	sb	v0,14404(zero)
a00259b8:	a0023844 	sb	v0,14404(zero)
a00259bc:	a0023844 	sb	v0,14404(zero)
a00259c0:	a0023844 	sb	v0,14404(zero)
a00259c4:	a0023844 	sb	v0,14404(zero)
a00259c8:	a0023844 	sb	v0,14404(zero)
a00259cc:	a0023844 	sb	v0,14404(zero)
a00259d0:	a0023844 	sb	v0,14404(zero)
a00259d4:	a00239c4 	sb	v0,14788(zero)
a00259d8:	a0023978 	sb	v0,14712(zero)
a00259dc:	a0023914 	sb	v0,14612(zero)
a00259e0:	a0023844 	sb	v0,14404(zero)
a00259e4:	a0023844 	sb	v0,14404(zero)
a00259e8:	a0023844 	sb	v0,14404(zero)
a00259ec:	a0023844 	sb	v0,14404(zero)
a00259f0:	a0023844 	sb	v0,14404(zero)
a00259f4:	a0023844 	sb	v0,14404(zero)
a00259f8:	a0023844 	sb	v0,14404(zero)
a00259fc:	a0023844 	sb	v0,14404(zero)
a0025a00:	a0023844 	sb	v0,14404(zero)
a0025a04:	a0023844 	sb	v0,14404(zero)
a0025a08:	a0023844 	sb	v0,14404(zero)
a0025a0c:	a0023844 	sb	v0,14404(zero)
a0025a10:	a0023844 	sb	v0,14404(zero)
a0025a14:	a0023844 	sb	v0,14404(zero)
a0025a18:	a0023844 	sb	v0,14404(zero)
a0025a1c:	a0023844 	sb	v0,14404(zero)
a0025a20:	a0023844 	sb	v0,14404(zero)
a0025a24:	a0023844 	sb	v0,14404(zero)
a0025a28:	a0023844 	sb	v0,14404(zero)
a0025a2c:	a0023844 	sb	v0,14404(zero)
a0025a30:	a0023844 	sb	v0,14404(zero)
a0025a34:	a0023844 	sb	v0,14404(zero)
a0025a38:	a0023844 	sb	v0,14404(zero)
a0025a3c:	a0023844 	sb	v0,14404(zero)
a0025a40:	a0023844 	sb	v0,14404(zero)
a0025a44:	a0023844 	sb	v0,14404(zero)
a0025a48:	a0023844 	sb	v0,14404(zero)
a0025a4c:	a0023844 	sb	v0,14404(zero)
a0025a50:	a0023844 	sb	v0,14404(zero)
a0025a54:	a0023844 	sb	v0,14404(zero)
a0025a58:	a0023844 	sb	v0,14404(zero)
a0025a5c:	a0023844 	sb	v0,14404(zero)
a0025a60:	a0023844 	sb	v0,14404(zero)
a0025a64:	a00238c4 	sb	v0,14532(zero)

a0025a68 <__func__.1301>:
a0025a68:	74736574 	jalx	a1cd95d0 <__heap_start_addr+0x1caf980>
a0025a6c:	00707061 	0x707061

a0025a70 <__func__.1188>:
a0025a70:	69726573 	udi2i	s2,t3,25971
a0025a74:	725f6c61 	0x725f6c61
a0025a78:	5f766365 	0x5f766365
a0025a7c:	66667562 	udi1i	a2,s3,30050
a0025a80:	00007265 	0x7265
a0025a84:	3620584d 	ori	zero,s1,0x584d
a0025a88:	69624d34 	udi2i	v0,t3,19764
a0025a8c:	00000074 	0x74

a0025a90 <device>:
a0025a90:	c2201700 	ll	zero,5888(s1)
a0025a94:	00000003 	sra	zero,zero,0x0
a0025a98:	01000100 	0x1000100
a0025a9c:	00000001 	movf	zero,zero,$fcc0
a0025aa0:	a0025a84 	sb	v0,23172(zero)
a0025aa4:	00800000 	0x800000
a0025aa8:	65746661 	udi1i	s4,t3,26209
a0025aac:	73312072 	0x73312072
a0025ab0:	0000000a 	movz	zero,zero,zero

Disassembly of section .data:

a0025ac0 <visualize_print_disable>:
a0025ac0:	00000001 	movf	zero,zero,$fcc0

a0025ac4 <memory_pool>:
a0025ac4:	80620000 	lb	v0,0(v1)

a0025ac8 <_ctype>:
a0025ac8:	20202000 	addi	zero,at,8192
a0025acc:	20202020 	addi	zero,at,8224
a0025ad0:	28282820 	slti	t0,at,10272
a0025ad4:	20202828 	addi	zero,at,10280
a0025ad8:	20202020 	addi	zero,at,8224
a0025adc:	20202020 	addi	zero,at,8224
a0025ae0:	20202020 	addi	zero,at,8224
a0025ae4:	20202020 	addi	zero,at,8224
a0025ae8:	10101088 	beq	zero,s0,a0029d0c <__heap_start_addr+0xbc>
a0025aec:	10101010 	beq	zero,s0,a0029b30 <_appisr_stack+0x1f58>
a0025af0:	10101010 	beq	zero,s0,a0029b34 <_appisr_stack+0x1f5c>
a0025af4:	10101010 	beq	zero,s0,a0029b38 <_appisr_stack+0x1f60>
a0025af8:	04040404 	0x4040404
a0025afc:	04040404 	0x4040404
a0025b00:	10100404 	beq	zero,s0,a0026b14 <_app_stack+0xf3c>
a0025b04:	10101010 	beq	zero,s0,a0029b48 <_appisr_stack+0x1f70>
a0025b08:	41414110 	0x41414110
a0025b0c:	01414141 	0x1414141
a0025b10:	01010101 	0x1010101
a0025b14:	01010101 	0x1010101
a0025b18:	01010101 	0x1010101
a0025b1c:	01010101 	0x1010101
a0025b20:	10010101 	beq	zero,at,a0025f28 <_app_stack+0x350>
a0025b24:	10101010 	beq	zero,s0,a0029b68 <_appisr_stack+0x1f90>
a0025b28:	42424210 	c0	0x424210
a0025b2c:	02424242 	0x2424242
a0025b30:	02020202 	0x2020202
a0025b34:	02020202 	0x2020202
a0025b38:	02020202 	0x2020202
a0025b3c:	02020202 	0x2020202
a0025b40:	10020202 	beq	zero,v0,a002634c <_app_stack+0x774>
a0025b44:	20101010 	addi	s0,zero,4112
	...
a0025b68:	10101000 	beq	zero,s0,a0029b6c <_appisr_stack+0x1f94>
a0025b6c:	10101010 	beq	zero,s0,a0029bb0 <_appisr_stack+0x1fd8>
a0025b70:	10101010 	beq	zero,s0,a0029bb4 <_appisr_stack+0x1fdc>
a0025b74:	10101010 	beq	zero,s0,a0029bb8 <_appisr_stack+0x1fe0>
a0025b78:	10101010 	beq	zero,s0,a0029bbc <_appisr_stack+0x1fe4>
a0025b7c:	10101010 	beq	zero,s0,a0029bc0 <_appisr_stack+0x1fe8>
a0025b80:	10101010 	beq	zero,s0,a0029bc4 <_appisr_stack+0x1fec>
a0025b84:	10101010 	beq	zero,s0,a0029bc8 <_appisr_stack+0x1ff0>
a0025b88:	10101010 	beq	zero,s0,a0029bcc <_appisr_stack+0x1ff4>
a0025b8c:	10101010 	beq	zero,s0,a0029bd0 <_appisr_stack+0x1ff8>
a0025b90:	10101010 	beq	zero,s0,a0029bd4 <_appisr_stack+0x1ffc>
a0025b94:	10101010 	beq	zero,s0,a0029bd8 <_app_heap_start>
a0025b98:	10101010 	beq	zero,s0,a0029bdc <_app_heap_end>
a0025b9c:	10101010 	beq	zero,s0,a0029be0 <_isr_status_reg>
a0025ba0:	10101010 	beq	zero,s0,a0029be4 <_isr_cause_reg>
a0025ba4:	10101010 	beq	zero,s0,a0029be8 <_return_ra>
a0025ba8:	00000000 	nop
	...

a0025bc8 <UartReg>:
a0025bc8:	b8062300 	swr	a2,8960(zero)

a0025bcc <Uart1Reg>:
a0025bcc:	b801bc00 	swr	at,-17408(zero)

Disassembly of section .bss:

a0025bd0 <__bss_start>:
a0025bd0:	00000000 	nop

a0025bd4 <alloc_current>:
a0025bd4:	00000000 	nop

a0025bd8 <_app_stack>:
	...

a0027bd8 <_appisr_stack>:
	...

a0029bd8 <_app_heap_start>:
a0029bd8:	00000000 	nop

a0029bdc <_app_heap_end>:
a0029bdc:	00000000 	nop

a0029be0 <_isr_status_reg>:
a0029be0:	00000000 	nop

a0029be4 <_isr_cause_reg>:
a0029be4:	00000000 	nop

a0029be8 <_return_ra>:
a0029be8:	00000000 	nop

a0029bec <_return_s0>:
a0029bec:	00000000 	nop

a0029bf0 <_return_s1>:
a0029bf0:	00000000 	nop

a0029bf4 <_return_s2>:
a0029bf4:	00000000 	nop

a0029bf8 <_return_s3>:
a0029bf8:	00000000 	nop

a0029bfc <_return_s4>:
a0029bfc:	00000000 	nop

a0029c00 <_return_s5>:
a0029c00:	00000000 	nop

a0029c04 <_return_s6>:
a0029c04:	00000000 	nop

a0029c08 <_return_s7>:
a0029c08:	00000000 	nop

a0029c0c <_return_s8>:
a0029c0c:	00000000 	nop

a0029c10 <kt_rdkey_usage>:
a0029c10:	00000000 	nop

a0029c14 <kt_htkey_usage>:
a0029c14:	00000000 	nop

a0029c18 <md_usage>:
a0029c18:	00000000 	nop

a0029c1c <md_type>:
a0029c1c:	00000000 	nop

a0029c20 <tdes_data_len>:
	...

a0029c22 <aes_data_len>:
	...

a0029c24 <rsa_data_len>:
	...

a0029c26 <rsa_key_len>:
	...

a0029c28 <fact_status>:
a0029c28:	00000000 	nop

a0029c2c <GPIO>:
a0029c2c:	00000000 	nop

a0029c30 <devicetype>:
	...

a0029c48 <kcpu_m>:
	...

a0029c49 <bus_m>:
a0029c49:	0000      	addiu	s0,sp,0
	...

Disassembly of section .reginfo:

00000000 <.reginfo>:
   0:	a003007c 	sb	v1,124(zero)
	...

Disassembly of section .pdr:

00000000 <.pdr>:
   0:	a0020150 	sb	v0,336(zero)
   4:	80030000 	lb	v1,0(zero)
   8:	fffffffc 	0xfffffffc
	...
  14:	00000020 	add	zero,zero,zero
  18:	0000001d 	0x1d
  1c:	0000001f 	0x1f
  20:	a0020214 	sb	v0,532(zero)
	...
  38:	0000001d 	0x1d
  3c:	0000001f 	0x1f
  40:	a0020244 	sb	v0,580(zero)
	...
  58:	0000001d 	0x1d
  5c:	0000001f 	0x1f
  60:	a00202f0 	sb	v0,752(zero)
	...
  78:	0000001d 	0x1d
  7c:	0000001f 	0x1f
  80:	a0020314 	sb	v0,788(zero)
	...
  98:	0000001d 	0x1d
  9c:	0000001f 	0x1f
  a0:	a00203f0 	sb	v0,1008(zero)
	...
  b8:	0000001d 	0x1d
  bc:	0000001f 	0x1f
  c0:	a0020428 	sb	v0,1064(zero)
	...
  d8:	0000001d 	0x1d
  dc:	0000001f 	0x1f
  e0:	a00204c8 	sb	v0,1224(zero)
  e4:	00010000 	sll	zero,at,0x0
  e8:	fffffffc 	0xfffffffc
	...
  f4:	00000008 	jr	zero
  f8:	0000001d 	0x1d
  fc:	0000001f 	0x1f
 100:	a00206a8 	sb	v0,1704(zero)
	...
 118:	0000001d 	0x1d
 11c:	0000001f 	0x1f
 120:	a0020798 	sb	v0,1944(zero)
	...
 138:	0000001d 	0x1d
 13c:	0000001f 	0x1f
 140:	a002085c 	sb	v0,2140(zero)
	...
 158:	0000001d 	0x1d
 15c:	0000001f 	0x1f
 160:	a0020890 	sb	v0,2192(zero)
	...
 178:	0000001d 	0x1d
 17c:	0000001f 	0x1f
 180:	a0020914 	sb	v0,2324(zero)
	...
 198:	0000001d 	0x1d
 19c:	0000001f 	0x1f
 1a0:	a002094c 	sb	v0,2380(zero)
 1a4:	80000000 	lb	zero,0(zero)
 1a8:	fffffffc 	0xfffffffc
	...
 1b4:	00000020 	add	zero,zero,zero
 1b8:	0000001d 	0x1d
 1bc:	0000001f 	0x1f
 1c0:	a0020af0 	sb	v0,2800(zero)
	...
 1d8:	0000001d 	0x1d
 1dc:	0000001f 	0x1f
 1e0:	a0020bc0 	sb	v0,3008(zero)
 1e4:	80000000 	lb	zero,0(zero)
 1e8:	fffffffc 	0xfffffffc
	...
 1f4:	00000020 	add	zero,zero,zero
 1f8:	0000001d 	0x1d
 1fc:	0000001f 	0x1f
 200:	a0020c08 	sb	v0,3080(zero)
 204:	80000000 	lb	zero,0(zero)
 208:	fffffffc 	0xfffffffc
	...
 214:	00000020 	add	zero,zero,zero
 218:	0000001d 	0x1d
 21c:	0000001f 	0x1f
 220:	a0020cd0 	sb	v0,3280(zero)
 224:	80ff0000 	lb	ra,0(a3)
 228:	fffffffc 	0xfffffffc
	...
 234:	00000038 	udi0	zero,zero,zero
 238:	0000001d 	0x1d
 23c:	0000001f 	0x1f
 240:	a0020df4 	sb	v0,3572(zero)
 244:	803f0000 	lb	ra,0(at)
 248:	fffffffc 	0xfffffffc
	...
 254:	00000038 	udi0	zero,zero,zero
 258:	0000001d 	0x1d
 25c:	0000001f 	0x1f
 260:	a0020fe0 	sb	v0,4064(zero)
 264:	80000000 	lb	zero,0(zero)
 268:	fffffffc 	0xfffffffc
	...
 274:	00000020 	add	zero,zero,zero
 278:	0000001d 	0x1d
 27c:	0000001f 	0x1f
 280:	a0021044 	sb	v0,4164(zero)
 284:	803f0000 	lb	ra,0(at)
 288:	fffffffc 	0xfffffffc
	...
 294:	00000030 	0x30
 298:	0000001d 	0x1d
 29c:	0000001f 	0x1f
 2a0:	a0021350 	sb	v0,4944(zero)
 2a4:	c0ff0000 	ll	ra,0(a3)
 2a8:	fffffffc 	0xfffffffc
	...
 2b4:	00000038 	udi0	zero,zero,zero
 2b8:	0000001d 	0x1d
 2bc:	0000001f 	0x1f
 2c0:	a002169c 	sb	v0,5788(zero)
 2c4:	80000000 	lb	zero,0(zero)
 2c8:	fffffffc 	0xfffffffc
	...
 2d4:	00000020 	add	zero,zero,zero
 2d8:	0000001d 	0x1d
 2dc:	0000001f 	0x1f
 2e0:	a00216e8 	sb	v0,5864(zero)
 2e4:	801f0000 	lb	ra,0(zero)
 2e8:	fffffffc 	0xfffffffc
	...
 2f4:	00000028 	0x28
 2f8:	0000001d 	0x1d
 2fc:	0000001f 	0x1f
 300:	a00217fc 	sb	v0,6140(zero)
	...
 318:	0000001d 	0x1d
 31c:	0000001f 	0x1f
 320:	a0021830 	sb	v0,6192(zero)
	...
 338:	0000001d 	0x1d
 33c:	0000001f 	0x1f
 340:	a0021888 	sb	v0,6280(zero)
	...
 358:	0000001d 	0x1d
 35c:	0000001f 	0x1f
 360:	a00218fc 	sb	v0,6396(zero)
	...
 378:	0000001d 	0x1d
 37c:	0000001f 	0x1f
 380:	a0021934 	sb	v0,6452(zero)
	...
 398:	0000001d 	0x1d
 39c:	0000001f 	0x1f
 3a0:	a002194c 	sb	v0,6476(zero)
	...
 3b8:	0000001d 	0x1d
 3bc:	0000001f 	0x1f
 3c0:	a0021984 	sb	v0,6532(zero)
	...
 3d8:	0000001d 	0x1d
 3dc:	0000001f 	0x1f
 3e0:	a00219fc 	sb	v0,6652(zero)
 3e4:	80010000 	lb	at,0(zero)
 3e8:	fffffffc 	0xfffffffc
	...
 3f4:	00000110 	0x110
 3f8:	0000001d 	0x1d
 3fc:	0000001f 	0x1f
 400:	a0021ae4 	sb	v0,6884(zero)
	...
 418:	0000001d 	0x1d
 41c:	0000001f 	0x1f
 420:	a0021aec 	sb	v0,6892(zero)
 424:	80000000 	lb	zero,0(zero)
 428:	fffffffc 	0xfffffffc
	...
 434:	00000020 	add	zero,zero,zero
 438:	0000001d 	0x1d
 43c:	0000001f 	0x1f
 440:	a0021b38 	sb	v0,6968(zero)
	...
 458:	0000001d 	0x1d
 45c:	0000001f 	0x1f
 460:	a0021d60 	sb	v0,7520(zero)
 464:	c0ff0000 	ll	ra,0(a3)
 468:	fffffffc 	0xfffffffc
	...
 474:	00000040 	ssnop
 478:	0000001d 	0x1d
 47c:	0000001f 	0x1f
 480:	a00221b4 	sb	v0,8628(zero)
 484:	c0ff0000 	ll	ra,0(a3)
 488:	fffffffc 	0xfffffffc
	...
 494:	00000090 	0x90
 498:	0000001d 	0x1d
 49c:	0000001f 	0x1f
 4a0:	a0020000 	sb	v0,0(zero)
	...
 4c0:	a0022a4c 	sb	v0,10828(zero)
	...
 4d8:	0000001d 	0x1d
 4dc:	0000001f 	0x1f
 4e0:	a0022a80 	sb	v0,10880(zero)
	...
 4f8:	0000001d 	0x1d
 4fc:	0000001f 	0x1f
 500:	a0022a88 	sb	v0,10888(zero)
	...
 518:	0000001d 	0x1d
 51c:	0000001f 	0x1f
 520:	a0022ae0 	sb	v0,10976(zero)
 524:	80000000 	lb	zero,0(zero)
 528:	fffffffc 	0xfffffffc
	...
 534:	00000018 	mult	zero,zero
 538:	0000001d 	0x1d
 53c:	0000001f 	0x1f
 540:	a0022b34 	sb	v0,11060(zero)
 544:	80030000 	lb	v1,0(zero)
 548:	fffffffc 	0xfffffffc
	...
 554:	00000028 	0x28
 558:	0000001d 	0x1d
 55c:	0000001f 	0x1f
 560:	a0022bc0 	sb	v0,11200(zero)
 564:	80030000 	lb	v1,0(zero)
 568:	fffffffc 	0xfffffffc
	...
 574:	00000028 	0x28
 578:	0000001d 	0x1d
 57c:	0000001f 	0x1f
 580:	a0022d1c 	sb	v0,11548(zero)
	...
 598:	0000001d 	0x1d
 59c:	0000001f 	0x1f
 5a0:	a0022d70 	sb	v0,11632(zero)
 5a4:	80000000 	lb	zero,0(zero)
 5a8:	fffffffc 	0xfffffffc
	...
 5b4:	00000020 	add	zero,zero,zero
 5b8:	0000001d 	0x1d
 5bc:	0000001f 	0x1f
 5c0:	a0022db0 	sb	v0,11696(zero)
 5c4:	80000000 	lb	zero,0(zero)
 5c8:	fffffffc 	0xfffffffc
	...
 5d4:	00000020 	add	zero,zero,zero
 5d8:	0000001d 	0x1d
 5dc:	0000001f 	0x1f
 5e0:	a0022df0 	sb	v0,11760(zero)
 5e4:	80000000 	lb	zero,0(zero)
 5e8:	fffffffc 	0xfffffffc
	...
 5f4:	00000018 	mult	zero,zero
 5f8:	0000001d 	0x1d
 5fc:	0000001f 	0x1f
 600:	a0022e14 	sb	v0,11796(zero)
 604:	80000000 	lb	zero,0(zero)
 608:	fffffffc 	0xfffffffc
	...
 614:	00000018 	mult	zero,zero
 618:	0000001d 	0x1d
 61c:	0000001f 	0x1f
 620:	a0022e38 	sb	v0,11832(zero)
 624:	80030000 	lb	v1,0(zero)
 628:	fffffffc 	0xfffffffc
	...
 634:	00000020 	add	zero,zero,zero
 638:	0000001d 	0x1d
 63c:	0000001f 	0x1f
 640:	a0022ed8 	sb	v0,11992(zero)
 644:	80030000 	lb	v1,0(zero)
 648:	fffffffc 	0xfffffffc
	...
 654:	00000020 	add	zero,zero,zero
 658:	0000001d 	0x1d
 65c:	0000001f 	0x1f
 660:	a0022f74 	sb	v0,12148(zero)
 664:	80000000 	lb	zero,0(zero)
 668:	fffffffc 	0xfffffffc
	...
 674:	00000018 	mult	zero,zero
 678:	0000001d 	0x1d
 67c:	0000001f 	0x1f
 680:	a0022fa0 	sb	v0,12192(zero)
 684:	80000000 	lb	zero,0(zero)
 688:	fffffffc 	0xfffffffc
	...
 694:	00000018 	mult	zero,zero
 698:	0000001d 	0x1d
 69c:	0000001f 	0x1f
 6a0:	a0022fcc 	sb	v0,12236(zero)
 6a4:	80000000 	lb	zero,0(zero)
 6a8:	fffffffc 	0xfffffffc
	...
 6b4:	00000018 	mult	zero,zero
 6b8:	0000001d 	0x1d
 6bc:	0000001f 	0x1f
 6c0:	a0022ff8 	sb	v0,12280(zero)
 6c4:	80000000 	lb	zero,0(zero)
 6c8:	fffffffc 	0xfffffffc
	...
 6d4:	00000018 	mult	zero,zero
 6d8:	0000001d 	0x1d
 6dc:	0000001f 	0x1f
 6e0:	a0023024 	sb	v0,12324(zero)
 6e4:	80000000 	lb	zero,0(zero)
 6e8:	fffffffc 	0xfffffffc
	...
 6f4:	00000018 	mult	zero,zero
 6f8:	0000001d 	0x1d
 6fc:	0000001f 	0x1f
 700:	a0023050 	sb	v0,12368(zero)
 704:	80000000 	lb	zero,0(zero)
 708:	fffffffc 	0xfffffffc
	...
 714:	00000018 	mult	zero,zero
 718:	0000001d 	0x1d
 71c:	0000001f 	0x1f
 720:	a002307c 	sb	v0,12412(zero)
 724:	80000000 	lb	zero,0(zero)
 728:	fffffffc 	0xfffffffc
	...
 734:	00000018 	mult	zero,zero
 738:	0000001d 	0x1d
 73c:	0000001f 	0x1f
 740:	a00230a8 	sb	v0,12456(zero)
 744:	80000000 	lb	zero,0(zero)
 748:	fffffffc 	0xfffffffc
	...
 754:	00000018 	mult	zero,zero
 758:	0000001d 	0x1d
 75c:	0000001f 	0x1f
 760:	a00230d4 	sb	v0,12500(zero)
 764:	80000000 	lb	zero,0(zero)
 768:	fffffffc 	0xfffffffc
	...
 774:	00000018 	mult	zero,zero
 778:	0000001d 	0x1d
 77c:	0000001f 	0x1f
 780:	a0023100 	sb	v0,12544(zero)
 784:	80000000 	lb	zero,0(zero)
 788:	fffffffc 	0xfffffffc
	...
 794:	00000018 	mult	zero,zero
 798:	0000001d 	0x1d
 79c:	0000001f 	0x1f
 7a0:	a002312c 	sb	v0,12588(zero)
 7a4:	80000000 	lb	zero,0(zero)
 7a8:	fffffffc 	0xfffffffc
	...
 7b4:	00000018 	mult	zero,zero
 7b8:	0000001d 	0x1d
 7bc:	0000001f 	0x1f
 7c0:	a0023158 	sb	v0,12632(zero)
 7c4:	80000000 	lb	zero,0(zero)
 7c8:	fffffffc 	0xfffffffc
	...
 7d4:	00000018 	mult	zero,zero
 7d8:	0000001d 	0x1d
 7dc:	0000001f 	0x1f
 7e0:	a0023184 	sb	v0,12676(zero)
 7e4:	80000000 	lb	zero,0(zero)
 7e8:	fffffffc 	0xfffffffc
	...
 7f4:	00000018 	mult	zero,zero
 7f8:	0000001d 	0x1d
 7fc:	0000001f 	0x1f
 800:	a00231b0 	sb	v0,12720(zero)
 804:	80000000 	lb	zero,0(zero)
 808:	fffffffc 	0xfffffffc
	...
 814:	00000018 	mult	zero,zero
 818:	0000001d 	0x1d
 81c:	0000001f 	0x1f
 820:	a00231dc 	sb	v0,12764(zero)
 824:	80000000 	lb	zero,0(zero)
 828:	fffffffc 	0xfffffffc
	...
 834:	00000018 	mult	zero,zero
 838:	0000001d 	0x1d
 83c:	0000001f 	0x1f
 840:	a0023250 	sb	v0,12880(zero)
	...
 858:	0000001d 	0x1d
 85c:	0000001f 	0x1f
 860:	a002326c 	sb	v0,12908(zero)
 864:	807f0000 	lb	ra,0(v1)
 868:	fffffffc 	0xfffffffc
	...
 874:	00000030 	0x30
 878:	0000001d 	0x1d
 87c:	0000001f 	0x1f
 880:	a00234c0 	sb	v0,13504(zero)
	...
 898:	0000001d 	0x1d
 89c:	0000001f 	0x1f
 8a0:	a00234d4 	sb	v0,13524(zero)
	...
 8b8:	0000001d 	0x1d
 8bc:	0000001f 	0x1f
 8c0:	a00234e8 	sb	v0,13544(zero)
 8c4:	80000000 	lb	zero,0(zero)
 8c8:	fffffffc 	0xfffffffc
	...
 8d4:	00000018 	mult	zero,zero
 8d8:	0000001d 	0x1d
 8dc:	0000001f 	0x1f
 8e0:	a0023514 	sb	v0,13588(zero)
 8e4:	80000000 	lb	zero,0(zero)
 8e8:	fffffffc 	0xfffffffc
	...
 8f4:	00000018 	mult	zero,zero
 8f8:	0000001d 	0x1d
 8fc:	0000001f 	0x1f
 900:	a0023540 	sb	v0,13632(zero)
 904:	80000000 	lb	zero,0(zero)
 908:	fffffffc 	0xfffffffc
	...
 914:	00000018 	mult	zero,zero
 918:	0000001d 	0x1d
 91c:	0000001f 	0x1f
 920:	a0023564 	sb	v0,13668(zero)
 924:	80000000 	lb	zero,0(zero)
 928:	fffffffc 	0xfffffffc
	...
 934:	00000018 	mult	zero,zero
 938:	0000001d 	0x1d
 93c:	0000001f 	0x1f
 940:	a0023590 	sb	v0,13712(zero)
 944:	80ff0000 	lb	ra,0(a3)
 948:	fffffffc 	0xfffffffc
	...
 954:	00000040 	ssnop
 958:	0000001d 	0x1d
 95c:	0000001f 	0x1f
 960:	a0023710 	sb	v0,14096(zero)
 964:	c0ff0000 	ll	ra,0(a3)
 968:	fffffffc 	0xfffffffc
	...
 974:	00000060 	0x60
 978:	0000001d 	0x1d
 97c:	0000001f 	0x1f
 980:	a0023e94 	sb	v0,16020(zero)
	...
 998:	0000001d 	0x1d
 99c:	0000001f 	0x1f
 9a0:	a0023e9c 	sb	v0,16028(zero)
	...
 9b8:	0000001d 	0x1d
 9bc:	0000001f 	0x1f
 9c0:	a0023eac 	sb	v0,16044(zero)
	...
 9d8:	0000001d 	0x1d
 9dc:	0000001f 	0x1f
 9e0:	a0023eb4 	sb	v0,16052(zero)
	...
 9f8:	0000001d 	0x1d
 9fc:	0000001f 	0x1f
 a00:	a0023ec8 	sb	v0,16072(zero)
	...
 a18:	0000001d 	0x1d
 a1c:	0000001f 	0x1f
 a20:	a0023ef8 	sb	v0,16120(zero)
	...
 a38:	0000001d 	0x1d
 a3c:	0000001f 	0x1f
 a40:	a0023f50 	sb	v0,16208(zero)
	...
 a58:	0000001d 	0x1d
 a5c:	0000001f 	0x1f
 a60:	a0023f64 	sb	v0,16228(zero)
	...
 a78:	0000001d 	0x1d
 a7c:	0000001f 	0x1f
 a80:	a0023f88 	sb	v0,16264(zero)
	...
 a98:	0000001d 	0x1d
 a9c:	0000001f 	0x1f
 aa0:	a0023fc8 	sb	v0,16328(zero)
	...
 ab8:	0000001d 	0x1d
 abc:	0000001f 	0x1f
 ac0:	a0023ffc 	sb	v0,16380(zero)
	...
 ad8:	0000001d 	0x1d
 adc:	0000001f 	0x1f
 ae0:	a0024024 	sb	v0,16420(zero)
	...
 af8:	0000001d 	0x1d
 afc:	0000001f 	0x1f
 b00:	a0024080 	sb	v0,16512(zero)
	...
 b18:	0000001d 	0x1d
 b1c:	0000001f 	0x1f
 b20:	a00240dc 	sb	v0,16604(zero)
	...
 b38:	0000001d 	0x1d
 b3c:	0000001f 	0x1f
 b40:	a0024108 	sb	v0,16648(zero)
	...
 b58:	0000001d 	0x1d
 b5c:	0000001f 	0x1f
 b60:	a00241b0 	sb	v0,16816(zero)
	...
 b78:	0000001d 	0x1d
 b7c:	0000001f 	0x1f
 b80:	a00241e8 	sb	v0,16872(zero)
	...
 b98:	0000001d 	0x1d
 b9c:	0000001f 	0x1f
 ba0:	a0024208 	sb	v0,16904(zero)
	...
 bb8:	0000001d 	0x1d
 bbc:	0000001f 	0x1f
 bc0:	a0024250 	sb	v0,16976(zero)
 bc4:	00030000 	sll	zero,v1,0x0
 bc8:	fffffffc 	0xfffffffc
	...
 bd4:	00000008 	jr	zero
 bd8:	0000001d 	0x1d
 bdc:	0000001f 	0x1f
 be0:	a0024354 	sb	v0,17236(zero)
 be4:	40ff0000 	mtlxc0	ra,estatus
 be8:	fffffffc 	0xfffffffc
	...
 bf4:	00000030 	0x30
 bf8:	0000001d 	0x1d
 bfc:	0000001f 	0x1f
 c00:	a00245e0 	sb	v0,17888(zero)
 c04:	80000000 	lb	zero,0(zero)
 c08:	fffffffc 	0xfffffffc
	...
 c14:	00000018 	mult	zero,zero
 c18:	0000001d 	0x1d
 c1c:	0000001f 	0x1f
 c20:	a0024680 	sb	v0,18048(zero)
	...
 c38:	0000001d 	0x1d
 c3c:	0000001f 	0x1f
 c40:	a00246a4 	sb	v0,18084(zero)
	...
 c58:	0000001d 	0x1d
 c5c:	0000001f 	0x1f
 c60:	a00246b8 	sb	v0,18104(zero)
	...
 c78:	0000001d 	0x1d
 c7c:	0000001f 	0x1f
 c80:	a00246cc 	sb	v0,18124(zero)
	...
 c98:	0000001d 	0x1d
 c9c:	0000001f 	0x1f
 ca0:	a0024734 	sb	v0,18228(zero)
	...
 cb8:	0000001d 	0x1d
 cbc:	0000001f 	0x1f
 cc0:	a0024760 	sb	v0,18272(zero)
	...
 cd8:	0000001d 	0x1d
 cdc:	0000001f 	0x1f
 ce0:	a002478c 	sb	v0,18316(zero)
	...
 cf8:	0000001d 	0x1d
 cfc:	0000001f 	0x1f
 d00:	a00247c4 	sb	v0,18372(zero)
	...
 d18:	0000001d 	0x1d
 d1c:	0000001f 	0x1f
 d20:	a00247fc 	sb	v0,18428(zero)
	...
 d38:	0000001d 	0x1d
 d3c:	0000001f 	0x1f
 d40:	a0024834 	sb	v0,18484(zero)
	...
 d58:	0000001d 	0x1d
 d5c:	0000001f 	0x1f
 d60:	a002486c 	sb	v0,18540(zero)
 d64:	80000000 	lb	zero,0(zero)
 d68:	fffffffc 	0xfffffffc
	...
 d74:	00000018 	mult	zero,zero
 d78:	0000001d 	0x1d
 d7c:	0000001f 	0x1f
 d80:	a00248f8 	sb	v0,18680(zero)
	...
 d98:	0000001d 	0x1d
 d9c:	0000001f 	0x1f
 da0:	a002491c 	sb	v0,18716(zero)
	...
 db8:	0000001d 	0x1d
 dbc:	0000001f 	0x1f
 dc0:	a0024954 	sb	v0,18772(zero)
	...
 dd8:	0000001d 	0x1d
 ddc:	0000001f 	0x1f
 de0:	a0024970 	sb	v0,18800(zero)
	...
 df8:	0000001d 	0x1d
 dfc:	0000001f 	0x1f
 e00:	a00249f0 	sb	v0,18928(zero)
	...
 e18:	0000001d 	0x1d
 e1c:	0000001f 	0x1f
 e20:	a0024a10 	sb	v0,18960(zero)
 e24:	c0ff0000 	ll	ra,0(a3)
 e28:	fffffffc 	0xfffffffc
	...
 e34:	00000038 	udi0	zero,zero,zero
 e38:	0000001d 	0x1d
 e3c:	0000001f 	0x1f
 e40:	a0024fe4 	sb	v0,20452(zero)
	...
 e58:	0000001d 	0x1d
 e5c:	0000001f 	0x1f
 e60:	a002501c 	sb	v0,20508(zero)
	...
 e78:	0000001d 	0x1d
 e7c:	0000001f 	0x1f
 e80:	a0025040 	sb	v0,20544(zero)
	...
 e98:	0000001d 	0x1d
 e9c:	0000001f 	0x1f
 ea0:	a00250b8 	sb	v0,20664(zero)
	...
 eb8:	0000001d 	0x1d
 ebc:	0000001f 	0x1f
 ec0:	a00250d4 	sb	v0,20692(zero)
 ec4:	80000000 	lb	zero,0(zero)
 ec8:	fffffffc 	0xfffffffc
	...
 ed4:	00000028 	0x28
 ed8:	0000001d 	0x1d
 edc:	0000001f 	0x1f
 ee0:	a00251b4 	sb	v0,20916(zero)
	...
 ef8:	0000001d 	0x1d
 efc:	0000001f 	0x1f

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	xori	v1,s2,0x4347
   4:	65522820 	udi1i	s2,t2,10272
   8:	65746c61 	udi1i	s4,t3,27745
   c:	5352206b 	0x5352206b
  10:	312d4b44 	andi	t5,t1,0x4b44
  14:	392e352e 	xori	t6,t1,0x352e
  18:	69754220 	udi2i	s5,t3,16928
  1c:	3120646c 	andi	zero,t1,0x646c
  20:	29353630 	slti	s5,t1,13872
  24:	342e3420 	ori	t6,at,0x3420
  28:	Address 0x0000000000000028 is out of bounds.


Disassembly of section .gnu.attributes:

00000000 <.gnu.attributes>:
   0:	00000f41 	0xf41
   4:	756e6700 	jalx	5b99c00 <__Size_Of_SDRAM+0x5b8f400>
   8:	00070100 	sll	zero,a3,0x4
   c:	03040000 	0x3040000

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	addiu	at,t0,4353
       4:	030b130e 	0x30b130e
       8:	110e1b0e 	beq	t0,t6,6c44 <__Size_Of_SDRAM-0x3bbc>
       c:	10011201 	beq	zero,at,4814 <__Size_Of_SDRAM-0x5fec>
      10:	02000006 	srlv	zero,zero,s0
      14:	0e030016 	jal	80c0058 <__Size_Of_SDRAM+0x80b5858>
      18:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
      1c:	00001349 	0x1349
      20:	0b002403 	j	c00900c <__Size_Of_SDRAM+0xbffe80c>
      24:	030b3e0b 	0x30b3e0b
      28:	0400000e 	bltz	zero,64 <__Size_Of_SDRAM-0xa79c>
      2c:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
      30:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
      34:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
      38:	01111349 	0x1111349
      3c:	06400112 	bltz	s2,488 <__Size_Of_SDRAM-0xa378>
      40:	00001301 	0x1301
      44:	03000505 	0x3000505
      48:	3b0b3a0e 	xori	t3,t8,0x3a0e
      4c:	0213490b 	0x213490b
      50:	06000006 	bltz	s0,6c <__Size_Of_SDRAM-0xa794>
      54:	08030034 	j	c00d0 <__Size_Of_SDRAM+0xb58d0>
      58:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
      5c:	00001349 	0x1349
      60:	03003407 	0x3003407
      64:	3413490e 	li	s3,0x490e
      68:	000a020c 	syscall	0x2808
      6c:	00240800 	0x240800
      70:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
      74:	00000803 	sra	at,zero,0x0
      78:	0b000f09 	j	c003c24 <__Size_Of_SDRAM+0xbff9424>
      7c:	0013490b 	0x13490b
      80:	01010a00 	0x1010a00
      84:	13011349 	beq	t8,at,4dac <__Size_Of_SDRAM-0x5a54>
      88:	210b0000 	addi	t3,t0,0
      8c:	2f134900 	sltiu	s3,t8,18688
      90:	0c00000b 	jal	2c <__Size_Of_SDRAM-0xa7d4>
      94:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
      98:	00000b3e 	0xb3e
      9c:	4900260d 	bc2f	98d4 <__Size_Of_SDRAM-0xf2c>
      a0:	0e000013 	jal	800004c <__Size_Of_SDRAM+0x7ff584c>
      a4:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
      a8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
      ac:	0c3f1349 	jal	fc4d24 <__Size_Of_SDRAM+0xfba524>
      b0:	00000a02 	srl	at,zero,0x8
      b4:	01110100 	0x1110100
      b8:	0b130e25 	j	c4c3894 <__Size_Of_SDRAM+0xc4b9094>
      bc:	0e1b0e03 	jal	86c380c <__Size_Of_SDRAM+0x86b900c>
      c0:	01120111 	0x1120111
      c4:	00000610 	0x610
      c8:	0b002402 	j	c009008 <__Size_Of_SDRAM+0xbffe808>
      cc:	030b3e0b 	0x30b3e0b
      d0:	0300000e 	0x300000e
      d4:	0e030016 	jal	80c0058 <__Size_Of_SDRAM+0x80b5858>
      d8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
      dc:	00001349 	0x1349
      e0:	0b002404 	j	c009010 <__Size_Of_SDRAM+0xbffe810>
      e4:	030b3e0b 	0x30b3e0b
      e8:	05000008 	bltz	t0,10c <__Size_Of_SDRAM-0xa6f4>
      ec:	0e030113 	jal	80c044c <__Size_Of_SDRAM+0x80b5c4c>
      f0:	0b3a050b 	j	ce8142c <__Size_Of_SDRAM+0xce76c2c>
      f4:	13010b3b 	beq	t8,at,2de4 <__Size_Of_SDRAM-0x7a1c>
      f8:	0d060000 	jal	4180000 <__Size_Of_SDRAM+0x4175800>
      fc:	3a0e0300 	xori	t6,s0,0x300
     100:	490b3b0b 	0x490b3b0b
     104:	000a3813 	0xa3813
     108:	01010700 	0x1010700
     10c:	13011349 	beq	t8,at,4e34 <__Size_Of_SDRAM-0x59cc>
     110:	21080000 	addi	t0,t0,0
     114:	2f134900 	sltiu	s3,t8,18688
     118:	0900000b 	j	400002c <__Size_Of_SDRAM+0x3ff582c>
     11c:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
     120:	00000b3e 	0xb3e
     124:	0300160a 	0x300160a
     128:	3b0b3a08 	xori	t3,t8,0x3a08
     12c:	0013490b 	0x13490b
     130:	012e0b00 	0x12e0b00
     134:	08030c3f 	j	c30fc <__Size_Of_SDRAM+0xb88fc>
     138:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     13c:	13490c27 	beq	k0,t1,31dc <__Size_Of_SDRAM-0x7624>
     140:	13010b20 	beq	t8,at,2dc4 <__Size_Of_SDRAM-0x7a3c>
     144:	050c0000 	0x50c0000
     148:	3a080300 	xori	t0,s0,0x300
     14c:	490b3b0b 	0x490b3b0b
     150:	0d000013 	jal	400004c <__Size_Of_SDRAM+0x3ff584c>
     154:	08030034 	j	c00d0 <__Size_Of_SDRAM+0xb58d0>
     158:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     15c:	00001349 	0x1349
     160:	0b000f0e 	j	c003c38 <__Size_Of_SDRAM+0xbff9438>
     164:	0013490b 	0x13490b
     168:	012e0f00 	0x12e0f00
     16c:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     170:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     174:	13490c27 	beq	k0,t1,3214 <__Size_Of_SDRAM-0x75ec>
     178:	13010b20 	beq	t8,at,2dfc <__Size_Of_SDRAM-0x7a04>
     17c:	05100000 	bltzal	t0,180 <__Size_Of_SDRAM-0xa680>
     180:	3a0e0300 	xori	t6,s0,0x300
     184:	490b3b0b 	0x490b3b0b
     188:	11000013 	beqz	t0,1d8 <__Size_Of_SDRAM-0xa628>
     18c:	0b0b000f 	j	c2c003c <__Size_Of_SDRAM+0xc2b583c>
     190:	26120000 	addiu	s2,s0,0
     194:	13000000 	beqz	t8,198 <__Size_Of_SDRAM-0xa668>
     198:	1331012e 	beq	t9,s1,654 <__Size_Of_SDRAM-0xa1ac>
     19c:	01120111 	0x1120111
     1a0:	13010a40 	beq	t8,at,2aa4 <__Size_Of_SDRAM-0x7d5c>
     1a4:	05140000 	0x5140000
     1a8:	02133100 	0x2133100
     1ac:	15000006 	bnez	t0,1c8 <__Size_Of_SDRAM-0xa638>
     1b0:	13310005 	beq	t9,s1,1c8 <__Size_Of_SDRAM-0xa638>
     1b4:	00000a02 	srl	at,zero,0x8
     1b8:	31003416 	andi	zero,t0,0x3416
     1bc:	000a0213 	0xa0213
     1c0:	00341700 	0x341700
     1c4:	00001331 	0x1331
     1c8:	31003418 	andi	zero,t0,0x3418
     1cc:	00060213 	0x60213
     1d0:	012e1900 	0x12e1900
     1d4:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     1d8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     1dc:	13490c27 	beq	k0,t1,327c <__Size_Of_SDRAM-0x7584>
     1e0:	01120111 	0x1120111
     1e4:	13010a40 	beq	t8,at,2ae8 <__Size_Of_SDRAM-0x7d18>
     1e8:	051a0000 	0x51a0000
     1ec:	3a080300 	xori	t0,s0,0x300
     1f0:	490b3b0b 	0x490b3b0b
     1f4:	000a0213 	0xa0213
     1f8:	012e1b00 	0x12e1b00
     1fc:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     200:	053b0b3a 	0x53b0b3a
     204:	13490c27 	beq	k0,t1,32a4 <__Size_Of_SDRAM-0x755c>
     208:	01120111 	0x1120111
     20c:	13010a40 	beq	t8,at,2b10 <__Size_Of_SDRAM-0x7cf0>
     210:	051c0000 	0x51c0000
     214:	3a080300 	xori	t0,s0,0x300
     218:	49053b0b 	0x49053b0b
     21c:	00060213 	0x60213
     220:	00341d00 	0x341d00
     224:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     228:	1349053b 	beq	k0,t1,1718 <__Size_Of_SDRAM-0x90e8>
     22c:	00000602 	srl	zero,zero,0x18
     230:	0300341e 	0x300341e
     234:	3b0b3a08 	xori	t3,t8,0x3a08
     238:	00134905 	0x134905
     23c:	00051f00 	sll	v1,a1,0x1c
     240:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     244:	1349053b 	beq	k0,t1,1734 <__Size_Of_SDRAM-0x90cc>
     248:	00000a02 	srl	at,zero,0x8
     24c:	03003420 	0x3003420
     250:	3b0b3a08 	xori	t3,t8,0x3a08
     254:	02134905 	0x2134905
     258:	2100000a 	addi	zero,t0,10
     25c:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     260:	053b0b3a 	0x53b0b3a
     264:	06021349 	0x6021349
     268:	2e220000 	sltiu	v0,s1,0
     26c:	030c3f01 	0x30c3f01
     270:	3b0b3a0e 	xori	t3,t8,0x3a0e
     274:	490c2705 	0x490c2705
     278:	12011113 	beq	s0,at,46c8 <__Size_Of_SDRAM-0x6138>
     27c:	01064001 	0x1064001
     280:	23000013 	addi	zero,t8,19
     284:	0655010b 	0x655010b
     288:	00001301 	0x1301
     28c:	03003424 	0x3003424
     290:	3b0b3a0e 	xori	t3,t8,0x3a0e
     294:	00134905 	0x134905
     298:	00342500 	0x342500
     29c:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     2a0:	1349053b 	beq	k0,t1,1790 <__Size_Of_SDRAM-0x9070>
     2a4:	00000a02 	srl	at,zero,0x8
     2a8:	55010b26 	0x55010b26
     2ac:	27000006 	addiu	zero,t8,6
     2b0:	0111010b 	0x111010b
     2b4:	00000112 	0x112
     2b8:	3f012e28 	0x3f012e28
     2bc:	3a0e030c 	xori	t6,s0,0x30c
     2c0:	27053b0b 	addiu	a1,t8,15115
     2c4:	1201110c 	beq	s0,at,46f8 <__Size_Of_SDRAM-0x6108>
     2c8:	010a4001 	0x10a4001
     2cc:	29000013 	slti	zero,t0,19
     2d0:	0e030005 	jal	80c0014 <__Size_Of_SDRAM+0x80b5814>
     2d4:	053b0b3a 	0x53b0b3a
     2d8:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
     2dc:	052a0000 	0x52a0000
     2e0:	3a0e0300 	xori	t6,s0,0x300
     2e4:	49053b0b 	0x49053b0b
     2e8:	00060213 	0x60213
     2ec:	012e2b00 	0x12e2b00
     2f0:	08030c3f 	j	c30fc <__Size_Of_SDRAM+0xb88fc>
     2f4:	053b0b3a 	0x53b0b3a
     2f8:	13490c27 	beq	k0,t1,3398 <__Size_Of_SDRAM-0x7468>
     2fc:	01120111 	0x1120111
     300:	13010640 	beq	t8,at,1c04 <__Size_Of_SDRAM-0x8bfc>
     304:	1d2c0000 	0x1d2c0000
     308:	11133101 	beq	t0,s3,c710 <__Size_Of_SDRAM+0x1f10>
     30c:	58011201 	0x58011201
     310:	0005590b 	0x5590b
     314:	00052d00 	sll	a1,a1,0x14
     318:	00001331 	0x1331
     31c:	3f012e2e 	0x3f012e2e
     320:	3a08030c 	xori	t0,s0,0x30c
     324:	270b3b0b 	addiu	t3,t8,15115
     328:	1113490c 	beq	t0,s3,1275c <__Size_Of_SDRAM+0x7f5c>
     32c:	40011201 	0x40011201
     330:	0013010a 	0x13010a
     334:	00052f00 	sll	a1,a1,0x1c
     338:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     33c:	13490b3b 	beq	k0,t1,302c <__Size_Of_SDRAM-0x77d4>
     340:	00000602 	srl	zero,zero,0x18
     344:	03003430 	0x3003430
     348:	3b0b3a08 	xori	t3,t8,0x3a08
     34c:	0213490b 	0x213490b
     350:	31000006 	andi	zero,t0,0x6
     354:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     358:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     35c:	06021349 	0x6021349
     360:	2e320000 	sltiu	s2,s1,0
     364:	030c3f01 	0x30c3f01
     368:	3b0b3a0e 	xori	t3,t8,0x3a0e
     36c:	1113490b 	beq	t0,s3,1279c <__Size_Of_SDRAM+0x7f9c>
     370:	40011201 	0x40011201
     374:	00130106 	0x130106
     378:	00263300 	0x263300
     37c:	00001349 	0x1349
     380:	31011d34 	andi	at,t0,0x1d34
     384:	55015213 	0x55015213
     388:	590b5806 	0x590b5806
     38c:	35000005 	ori	zero,t0,0x5
     390:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
     394:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     398:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
     39c:	01111349 	0x1111349
     3a0:	06400112 	bltz	s2,7ec <__Size_Of_SDRAM-0xa014>
     3a4:	00001301 	0x1301
     3a8:	31011d36 	andi	at,t0,0x1d36
     3ac:	55015213 	0x55015213
     3b0:	590b5806 	0x590b5806
     3b4:	00130105 	0x130105
     3b8:	011d3700 	0x11d3700
     3bc:	01111331 	0x1111331
     3c0:	0b580112 	j	d600448 <__Size_Of_SDRAM+0xd5f5c48>
     3c4:	00000b59 	0xb59
     3c8:	3f012e38 	0x3f012e38
     3cc:	3a0e030c 	xori	t6,s0,0x30c
     3d0:	27053b0b 	addiu	a1,t8,15115
     3d4:	1113490c 	beq	t0,s3,12808 <__Size_Of_SDRAM+0x8008>
     3d8:	40011201 	0x40011201
     3dc:	00000006 	srlv	zero,zero,zero
     3e0:	25011101 	addiu	at,t0,4353
     3e4:	030b130e 	0x30b130e
     3e8:	110e1b0e 	beq	t0,t6,7024 <__Size_Of_SDRAM-0x37dc>
     3ec:	10011201 	beq	zero,at,4bf4 <__Size_Of_SDRAM-0x5c0c>
     3f0:	02000006 	srlv	zero,zero,s0
     3f4:	0e030016 	jal	80c0058 <__Size_Of_SDRAM+0x80b5858>
     3f8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     3fc:	00001349 	0x1349
     400:	0b002403 	j	c00900c <__Size_Of_SDRAM+0xbffe80c>
     404:	030b3e0b 	0x30b3e0b
     408:	0400000e 	bltz	zero,444 <__Size_Of_SDRAM-0xa3bc>
     40c:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
     410:	08030b3e 	j	c2cf8 <__Size_Of_SDRAM+0xb84f8>
     414:	13050000 	beq	t8,a1,418 <__Size_Of_SDRAM-0xa3e8>
     418:	0b0e0301 	j	c380c04 <__Size_Of_SDRAM+0xc376404>
     41c:	3b0b3a05 	xori	t3,t8,0x3a05
     420:	0013010b 	0x13010b
     424:	000d0600 	sll	zero,t5,0x18
     428:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     42c:	13490b3b 	beq	k0,t1,311c <__Size_Of_SDRAM-0x76e4>
     430:	00000a38 	0xa38
     434:	49010107 	bc2t	854 <__Size_Of_SDRAM-0x9fac>
     438:	00130113 	0x130113
     43c:	00210800 	0x210800
     440:	0b2f1349 	j	cbc4d24 <__Size_Of_SDRAM+0xcbba524>
     444:	24090000 	li	t1,0
     448:	3e0b0b00 	0x3e0b0b00
     44c:	0a00000b 	j	800002c <__Size_Of_SDRAM+0x7ff582c>
     450:	08030016 	j	c0058 <__Size_Of_SDRAM+0xb5858>
     454:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     458:	00001349 	0x1349
     45c:	03002e0b 	0x3002e0b
     460:	3b0b3a0e 	xori	t3,t8,0x3a0e
     464:	200c270b 	addi	t4,zero,9995
     468:	0c00000b 	jal	2c <__Size_Of_SDRAM-0xa7d4>
     46c:	0e03012e 	jal	80c04b8 <__Size_Of_SDRAM+0x80b5cb8>
     470:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     474:	0b200c27 	j	c80309c <__Size_Of_SDRAM+0xc7f889c>
     478:	00001301 	0x1301
     47c:	0300050d 	break	0x300,0x14
     480:	3b0b3a0e 	xori	t3,t8,0x3a0e
     484:	0013490b 	0x13490b
     488:	00050e00 	sll	at,a1,0x18
     48c:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     490:	13490b3b 	beq	k0,t1,3180 <__Size_Of_SDRAM-0x7680>
     494:	340f0000 	li	t7,0x0
     498:	3a080300 	xori	t0,s0,0x300
     49c:	490b3b0b 	0x490b3b0b
     4a0:	10000013 	b	4f0 <__Size_Of_SDRAM-0xa310>
     4a4:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     4a8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     4ac:	00001349 	0x1349
     4b0:	0b000f11 	j	c003c44 <__Size_Of_SDRAM+0xbff9444>
     4b4:	1200000b 	beqz	s0,4e4 <__Size_Of_SDRAM-0xa31c>
     4b8:	0b0b000f 	j	c2c003c <__Size_Of_SDRAM+0xc2b583c>
     4bc:	00001349 	0x1349
     4c0:	3f012e13 	0x3f012e13
     4c4:	3a0e030c 	xori	t6,s0,0x30c
     4c8:	270b3b0b 	addiu	t3,t8,15115
     4cc:	010b200c 	syscall	0x42c80
     4d0:	14000013 	bnez	zero,520 <__Size_Of_SDRAM-0xa2e0>
     4d4:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
     4d8:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     4dc:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
     4e0:	0b201349 	j	c804d24 <__Size_Of_SDRAM+0xc7fa524>
     4e4:	00001301 	0x1301
     4e8:	03012e15 	0x3012e15
     4ec:	3b0b3a0e 	xori	t3,t8,0x3a0e
     4f0:	200c2705 	addi	t4,zero,9989
     4f4:	0013010b 	0x13010b
     4f8:	00051600 	sll	v0,a1,0x18
     4fc:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     500:	1349053b 	beq	k0,t1,19f0 <__Size_Of_SDRAM-0x8e10>
     504:	05170000 	0x5170000
     508:	3a080300 	xori	t0,s0,0x300
     50c:	49053b0b 	0x49053b0b
     510:	18000013 	blez	zero,560 <__Size_Of_SDRAM-0xa2a0>
     514:	0c3f002e 	jal	fc00b8 <__Size_Of_SDRAM+0xfb58b8>
     518:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     51c:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
     520:	00000b20 	0xb20
     524:	31012e19 	andi	at,t0,0x2e19
     528:	12011113 	beq	s0,at,4978 <__Size_Of_SDRAM-0x5e88>
     52c:	010a4001 	0x10a4001
     530:	1a000013 	blez	s0,580 <__Size_Of_SDRAM-0xa280>
     534:	13310005 	beq	t9,s1,54c <__Size_Of_SDRAM-0xa2b4>
     538:	00000a02 	srl	at,zero,0x8
     53c:	3100341b 	andi	zero,t0,0x341b
     540:	000a0213 	0xa0213
     544:	00341c00 	0x341c00
     548:	00001331 	0x1331
     54c:	3f012e1d 	0x3f012e1d
     550:	3a0e030c 	xori	t6,s0,0x30c
     554:	270b3b0b 	addiu	t3,t8,15115
     558:	1113490c 	beq	t0,s3,1298c <__Size_Of_SDRAM+0x818c>
     55c:	40011201 	0x40011201
     560:	0013010a 	0x13010a
     564:	00051e00 	sll	v1,a1,0x18
     568:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     56c:	13490b3b 	beq	k0,t1,325c <__Size_Of_SDRAM-0x75a4>
     570:	00000602 	srl	zero,zero,0x18
     574:	0300341f 	0x300341f
     578:	3b0b3a08 	xori	t3,t8,0x3a08
     57c:	0213490b 	0x213490b
     580:	20000006 	addi	zero,zero,6
     584:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
     588:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     58c:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
     590:	01120111 	0x1120111
     594:	13010a40 	beq	t8,at,2e98 <__Size_Of_SDRAM-0x7968>
     598:	2e210000 	sltiu	at,s1,0
     59c:	11133100 	beq	t0,s3,c9a0 <__Size_Of_SDRAM+0x21a0>
     5a0:	40011201 	0x40011201
     5a4:	2200000a 	addi	zero,s0,10
     5a8:	08030005 	j	c0014 <__Size_Of_SDRAM+0xb5814>
     5ac:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     5b0:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
     5b4:	34230000 	ori	v1,at,0x0
     5b8:	3a0e0300 	xori	t6,s0,0x300
     5bc:	490b3b0b 	0x490b3b0b
     5c0:	00060213 	0x60213
     5c4:	00262400 	0x262400
     5c8:	00001349 	0x1349
     5cc:	03000525 	0x3000525
     5d0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     5d4:	0213490b 	0x213490b
     5d8:	2600000a 	addiu	zero,s0,10
     5dc:	0655010b 	0x655010b
     5e0:	2e270000 	sltiu	a3,s1,0
     5e4:	030c3f01 	0x30c3f01
     5e8:	3b0b3a0e 	xori	t3,t8,0x3a0e
     5ec:	490c2705 	0x490c2705
     5f0:	12011113 	beq	s0,at,4a40 <__Size_Of_SDRAM-0x5dc0>
     5f4:	01064001 	0x1064001
     5f8:	28000013 	slti	zero,zero,19
     5fc:	08030005 	j	c0014 <__Size_Of_SDRAM+0xb5814>
     600:	053b0b3a 	0x53b0b3a
     604:	06021349 	0x6021349
     608:	34290000 	ori	t1,at,0x0
     60c:	3a0e0300 	xori	t6,s0,0x300
     610:	49053b0b 	0x49053b0b
     614:	00060213 	0x60213
     618:	00342a00 	0x342a00
     61c:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     620:	1349053b 	beq	k0,t1,1b10 <__Size_Of_SDRAM-0x8cf0>
     624:	342b0000 	ori	t3,at,0x0
     628:	3a0e0300 	xori	t6,s0,0x300
     62c:	49053b0b 	0x49053b0b
     630:	000a0213 	0xa0213
     634:	011d2c00 	0x11d2c00
     638:	01111331 	0x1111331
     63c:	0b580112 	j	d600448 <__Size_Of_SDRAM+0xd5f5c48>
     640:	13010559 	beq	t8,at,1ba8 <__Size_Of_SDRAM-0x8c58>
     644:	052d0000 	0x52d0000
     648:	00133100 	sll	a2,s3,0x4
     64c:	010b2e00 	0x10b2e00
     650:	01120111 	0x1120111
     654:	1d2f0000 	0x1d2f0000
     658:	52133101 	0x52133101
     65c:	58065501 	0x58065501
     660:	0005590b 	0x5590b
     664:	00343000 	0x343000
     668:	06021331 	0x6021331
     66c:	2e310000 	sltiu	s1,s1,0
     670:	030c3f00 	0x30c3f00
     674:	3b0b3a0e 	xori	t3,t8,0x3a0e
     678:	490c2705 	0x490c2705
     67c:	12011113 	beq	s0,at,4acc <__Size_Of_SDRAM-0x5d34>
     680:	000a4001 	0xa4001
     684:	00343200 	0x343200
     688:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     68c:	1349053b 	beq	k0,t1,1b7c <__Size_Of_SDRAM-0x8c84>
     690:	00000602 	srl	zero,zero,0x18
     694:	31000533 	andi	zero,t0,0x533
     698:	00060213 	0x60213
     69c:	001d3400 	sll	a2,sp,0x10
     6a0:	01111331 	0x1111331
     6a4:	0b580112 	j	d600448 <__Size_Of_SDRAM+0xd5f5c48>
     6a8:	00000b59 	0xb59
     6ac:	31011d35 	andi	at,t0,0x1d35
     6b0:	12011113 	beq	s0,at,4b00 <__Size_Of_SDRAM-0x5d00>
     6b4:	590b5801 	0x590b5801
     6b8:	0013010b 	0x13010b
     6bc:	011d3600 	0x11d3600
     6c0:	01521331 	0x1521331
     6c4:	0b580655 	j	d601954 <__Size_Of_SDRAM+0xd5f7154>
     6c8:	13010b59 	beq	t8,at,3430 <__Size_Of_SDRAM-0x73d0>
     6cc:	1d370000 	0x1d370000
     6d0:	52133100 	0x52133100
     6d4:	58065501 	0x58065501
     6d8:	000b590b 	0xb590b
     6dc:	011d3800 	0x11d3800
     6e0:	01111331 	0x1111331
     6e4:	0b580112 	j	d600448 <__Size_Of_SDRAM+0xd5f5c48>
     6e8:	00000b59 	0xb59
     6ec:	03000539 	0x3000539
     6f0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     6f4:	02134905 	0x2134905
     6f8:	3a000006 	xori	zero,s0,0x6
     6fc:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     700:	053b0b3a 	0x53b0b3a
     704:	00001349 	0x1349
     708:	31001d3b 	andi	zero,t0,0x1d3b
     70c:	12011113 	beq	s0,at,4b5c <__Size_Of_SDRAM-0x5ca4>
     710:	590b5801 	0x590b5801
     714:	3c000005 	lui	zero,0x5
     718:	1331011d 	beq	t9,s1,b90 <__Size_Of_SDRAM-0x9c70>
     71c:	01120111 	0x1120111
     720:	05590b58 	0x5590b58
     724:	343d0000 	ori	sp,at,0x0
     728:	3a0e0300 	xori	t6,s0,0x300
     72c:	490b3b0b 	0x490b3b0b
     730:	000a0213 	0xa0213
     734:	00343e00 	0x343e00
     738:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     73c:	13490b3b 	beq	k0,t1,342c <__Size_Of_SDRAM-0x73d4>
     740:	0a020c3f 	j	80830fc <__Size_Of_SDRAM+0x80788fc>
     744:	01000000 	0x1000000
     748:	0e250111 	jal	8940444 <__Size_Of_SDRAM+0x8935c44>
     74c:	0e030b13 	jal	80c2c4c <__Size_Of_SDRAM+0x80b844c>
     750:	01110e1b 	0x1110e1b
     754:	06100112 	bltzal	s0,ba0 <__Size_Of_SDRAM-0x9c60>
     758:	01020000 	0x1020000
     75c:	01134901 	0x1134901
     760:	03000013 	mtlo	t8
     764:	13490021 	beq	k0,t1,7ec <__Size_Of_SDRAM-0xa014>
     768:	00000b2f 	0xb2f
     76c:	0b002404 	j	c009010 <__Size_Of_SDRAM+0xbffe810>
     770:	000b3e0b 	0xb3e0b
     774:	00240500 	0x240500
     778:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
     77c:	00000e03 	sra	at,zero,0x18
     780:	03003406 	0x3003406
     784:	3b0b3a0e 	xori	t3,t8,0x3a0e
     788:	3f13490b 	0x3f13490b
     78c:	000a020c 	syscall	0x2808
     790:	11010000 	beq	t0,at,794 <__Size_Of_SDRAM-0xa06c>
     794:	130e2501 	beq	t8,t6,9b9c <__Size_Of_SDRAM-0xc64>
     798:	1b0e030b 	0x1b0e030b
     79c:	1201110e 	beq	s0,at,4bd8 <__Size_Of_SDRAM-0x5c28>
     7a0:	00061001 	0x61001
     7a4:	00160200 	sll	zero,s6,0x8
     7a8:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     7ac:	13490b3b 	beq	k0,t1,349c <__Size_Of_SDRAM-0x7364>
     7b0:	24030000 	li	v1,0
     7b4:	3e0b0b00 	0x3e0b0b00
     7b8:	000e030b 	0xe030b
     7bc:	00240400 	0x240400
     7c0:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
     7c4:	00000803 	sra	at,zero,0x0
     7c8:	0b000f05 	j	c003c14 <__Size_Of_SDRAM+0xbff9414>
     7cc:	000e030b 	0xe030b
     7d0:	012e0600 	0x12e0600
     7d4:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     7d8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     7dc:	13490c27 	beq	k0,t1,387c <__Size_Of_SDRAM-0x6f84>
     7e0:	01120111 	0x1120111
     7e4:	13010640 	beq	t8,at,20e8 <__Size_Of_SDRAM-0x8718>
     7e8:	05070000 	0x5070000
     7ec:	3a0e0300 	xori	t6,s0,0x300
     7f0:	490b3b0b 	0x490b3b0b
     7f4:	00060213 	0x60213
     7f8:	00050800 	sll	at,a1,0x0
     7fc:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     800:	13490b3b 	beq	k0,t1,34f0 <__Size_Of_SDRAM-0x7310>
     804:	00000602 	srl	zero,zero,0x18
     808:	03003409 	0x3003409
     80c:	3b0b3a08 	xori	t3,t8,0x3a08
     810:	0213490b 	0x213490b
     814:	0a000006 	j	8000018 <__Size_Of_SDRAM+0x7ff5818>
     818:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     81c:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     820:	06021349 	0x6021349
     824:	340b0000 	li	t3,0x0
     828:	3a0e0300 	xori	t6,s0,0x300
     82c:	490b3b0b 	0x490b3b0b
     830:	000a0213 	0xa0213
     834:	00340c00 	0x340c00
     838:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     83c:	13490b3b 	beq	k0,t1,352c <__Size_Of_SDRAM-0x72d4>
     840:	340d0000 	li	t5,0x0
     844:	3a080300 	xori	t0,s0,0x300
     848:	490b3b0b 	0x490b3b0b
     84c:	000a0213 	0xa0213
     850:	000a0e00 	sll	at,t2,0x18
     854:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     858:	00000b3b 	0xb3b
     85c:	03000a0f 	0x3000a0f
     860:	3b0b3a0e 	xori	t3,t8,0x3a0e
     864:	00011105 	0x11105
     868:	000a1000 	sll	v0,t2,0x0
     86c:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     870:	0000053b 	0x53b
     874:	11010b11 	beq	t0,at,34bc <__Size_Of_SDRAM-0x7344>
     878:	00011201 	0x11201
     87c:	00341200 	0x341200
     880:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     884:	13490b3b 	beq	k0,t1,3574 <__Size_Of_SDRAM-0x728c>
     888:	0f130000 	jal	c4c0000 <__Size_Of_SDRAM+0xc4b5800>
     88c:	490b0b00 	0x490b0b00
     890:	14000013 	bnez	zero,8e0 <__Size_Of_SDRAM-0x9f20>
     894:	13010115 	beq	t8,at,cec <__Size_Of_SDRAM-0x9b14>
     898:	18150000 	0x18150000
     89c:	16000000 	bnez	s0,8a0 <__Size_Of_SDRAM-0x9f60>
     8a0:	13490101 	beq	k0,t1,ca8 <__Size_Of_SDRAM-0x9b58>
     8a4:	00001301 	0x1301
     8a8:	49002117 	bc2f	8d08 <__Size_Of_SDRAM-0x1af8>
     8ac:	000b2f13 	0xb2f13
     8b0:	00241800 	0x241800
     8b4:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
     8b8:	21190000 	addi	t9,t0,0
     8bc:	1a000000 	blez	s0,8c0 <__Size_Of_SDRAM-0x9f40>
     8c0:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     8c4:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     8c8:	0c3f1349 	jal	fc4d24 <__Size_Of_SDRAM+0xfba524>
     8cc:	00000c3c 	0xc3c
     8d0:	00110100 	sll	zero,s1,0x4
     8d4:	01110610 	0x1110610
     8d8:	08030112 	j	c0448 <__Size_Of_SDRAM+0xb5c48>
     8dc:	0825081b 	j	94206c <__Size_Of_SDRAM+0x93786c>
     8e0:	00000513 	0x513
     8e4:	01110100 	0x1110100
     8e8:	0b130e25 	j	c4c3894 <__Size_Of_SDRAM+0xc4b9094>
     8ec:	0e1b0e03 	jal	86c380c <__Size_Of_SDRAM+0x86b900c>
     8f0:	01120111 	0x1120111
     8f4:	00000610 	0x610
     8f8:	0b002402 	j	c009008 <__Size_Of_SDRAM+0xbffe808>
     8fc:	030b3e0b 	0x30b3e0b
     900:	0300000e 	0x300000e
     904:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
     908:	08030b3e 	j	c2cf8 <__Size_Of_SDRAM+0xb84f8>
     90c:	16040000 	bne	s0,a0,910 <__Size_Of_SDRAM-0x9ef0>
     910:	3a0e0300 	xori	t6,s0,0x300
     914:	490b3b0b 	0x490b3b0b
     918:	05000013 	bltz	t0,968 <__Size_Of_SDRAM-0x9e98>
     91c:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
     920:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     924:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
     928:	01111349 	0x1111349
     92c:	0a400112 	j	9000448 <__Size_Of_SDRAM+0x8ff5c48>
     930:	00001301 	0x1301
     934:	03000506 	0x3000506
     938:	3b0b3a08 	xori	t3,t8,0x3a08
     93c:	0213490b 	0x213490b
     940:	07000006 	bltz	t8,95c <__Size_Of_SDRAM-0x9ea4>
     944:	08030005 	j	c0014 <__Size_Of_SDRAM+0xb5814>
     948:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     94c:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
     950:	34080000 	li	t0,0x0
     954:	3a080300 	xori	t0,s0,0x300
     958:	490b3b0b 	0x490b3b0b
     95c:	000a0213 	0xa0213
     960:	000f0900 	sll	at,t7,0x4
     964:	00000b0b 	0xb0b
     968:	0b000f0a 	j	c003c28 <__Size_Of_SDRAM+0xbff9428>
     96c:	0013490b 	0x13490b
     970:	00260b00 	0x260b00
     974:	01000000 	0x1000000
     978:	0e250111 	jal	8940444 <__Size_Of_SDRAM+0x8935c44>
     97c:	0e030b13 	jal	80c2c4c <__Size_Of_SDRAM+0x80b844c>
     980:	01110e1b 	0x1110e1b
     984:	06100112 	bltzal	s0,dd0 <__Size_Of_SDRAM-0x9a30>
     988:	24020000 	li	v0,0
     98c:	3e0b0b00 	0x3e0b0b00
     990:	000e030b 	0xe030b
     994:	00240300 	0x240300
     998:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
     99c:	00000803 	sra	at,zero,0x0
     9a0:	3f012e04 	0x3f012e04
     9a4:	3a0e030c 	xori	t6,s0,0x30c
     9a8:	270b3b0b 	addiu	t3,t8,15115
     9ac:	2013490c 	addi	s3,zero,18700
     9b0:	0013010b 	0x13010b
     9b4:	00050500 	sll	zero,a1,0x14
     9b8:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     9bc:	13490b3b 	beq	k0,t1,36ac <__Size_Of_SDRAM-0x7154>
     9c0:	05060000 	0x5060000
     9c4:	3a080300 	xori	t0,s0,0x300
     9c8:	490b3b0b 	0x490b3b0b
     9cc:	07000013 	bltz	t8,a1c <__Size_Of_SDRAM-0x9de4>
     9d0:	0b0b000f 	j	c2c003c <__Size_Of_SDRAM+0xc2b583c>
     9d4:	00001349 	0x1349
     9d8:	3f012e08 	0x3f012e08
     9dc:	3a0e030c 	xori	t6,s0,0x30c
     9e0:	270b3b0b 	addiu	t3,t8,15115
     9e4:	1201110c 	beq	s0,at,4e18 <__Size_Of_SDRAM-0x59e8>
     9e8:	010a4001 	0x10a4001
     9ec:	09000013 	j	400004c <__Size_Of_SDRAM+0x3ff584c>
     9f0:	08030005 	j	c0014 <__Size_Of_SDRAM+0xb5814>
     9f4:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     9f8:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
     9fc:	340a0000 	li	t2,0x0
     a00:	3a080300 	xori	t0,s0,0x300
     a04:	490b3b0b 	0x490b3b0b
     a08:	0b000013 	j	c00004c <__Size_Of_SDRAM+0xbff584c>
     a0c:	1331012e 	beq	t9,s1,ec8 <__Size_Of_SDRAM-0x9938>
     a10:	01120111 	0x1120111
     a14:	13010a40 	beq	t8,at,3318 <__Size_Of_SDRAM-0x74e8>
     a18:	050c0000 	0x50c0000
     a1c:	02133100 	0x2133100
     a20:	0d00000a 	jal	4000028 <__Size_Of_SDRAM+0x3ff5828>
     a24:	13310005 	beq	t9,s1,a3c <__Size_Of_SDRAM-0x9dc4>
     a28:	00000602 	srl	zero,zero,0x18
     a2c:	3f012e0e 	0x3f012e0e
     a30:	3a0e030c 	xori	t6,s0,0x30c
     a34:	270b3b0b 	addiu	t3,t8,15115
     a38:	1113490c 	beq	t0,s3,12e6c <__Size_Of_SDRAM+0x866c>
     a3c:	40011201 	0x40011201
     a40:	00130106 	0x130106
     a44:	00050f00 	sll	at,a1,0x1c
     a48:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     a4c:	13490b3b 	beq	k0,t1,373c <__Size_Of_SDRAM-0x70c4>
     a50:	00000602 	srl	zero,zero,0x18
     a54:	03000510 	0x3000510
     a58:	3b0b3a08 	xori	t3,t8,0x3a08
     a5c:	0213490b 	0x213490b
     a60:	11000006 	beqz	t0,a7c <__Size_Of_SDRAM-0x9d84>
     a64:	08030034 	j	c00d0 <__Size_Of_SDRAM+0xb58d0>
     a68:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     a6c:	06021349 	0x6021349
     a70:	1d120000 	0x1d120000
     a74:	52133101 	0x52133101
     a78:	58065501 	0x58065501
     a7c:	000b590b 	0xb590b
     a80:	00051300 	sll	v0,a1,0xc
     a84:	00001331 	0x1331
     a88:	03003414 	0x3003414
     a8c:	3b0b3a0e 	xori	t3,t8,0x3a0e
     a90:	0213490b 	0x213490b
     a94:	15000006 	bnez	t0,ab0 <__Size_Of_SDRAM-0x9d50>
     a98:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     a9c:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     aa0:	00001349 	0x1349
     aa4:	03000a16 	0x3000a16
     aa8:	3b0b3a0e 	xori	t3,t8,0x3a0e
     aac:	0001110b 	0x1110b
     ab0:	012e1700 	0x12e1700
     ab4:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     ab8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     abc:	13490c27 	beq	k0,t1,3b5c <__Size_Of_SDRAM-0x6ca4>
     ac0:	01120111 	0x1120111
     ac4:	00000a40 	sll	at,zero,0x9
     ac8:	01110100 	0x1110100
     acc:	0b130e25 	j	c4c3894 <__Size_Of_SDRAM+0xc4b9094>
     ad0:	0e1b0e03 	jal	86c380c <__Size_Of_SDRAM+0x86b900c>
     ad4:	01120111 	0x1120111
     ad8:	00000610 	0x610
     adc:	03001602 	0x3001602
     ae0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     ae4:	0013490b 	0x13490b
     ae8:	000f0300 	sll	zero,t7,0xc
     aec:	0e030b0b 	jal	80c2c2c <__Size_Of_SDRAM+0x80b842c>
     af0:	24040000 	li	a0,0
     af4:	3e0b0b00 	0x3e0b0b00
     af8:	000e030b 	0xe030b
     afc:	00240500 	0x240500
     b00:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
     b04:	00000803 	sra	at,zero,0x0
     b08:	0b000f06 	j	c003c18 <__Size_Of_SDRAM+0xbff9418>
     b0c:	0013490b 	0x13490b
     b10:	012e0700 	0x12e0700
     b14:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     b18:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     b1c:	13490c27 	beq	k0,t1,3bbc <__Size_Of_SDRAM-0x6c44>
     b20:	01120111 	0x1120111
     b24:	13010640 	beq	t8,at,2428 <__Size_Of_SDRAM-0x83d8>
     b28:	05080000 	0x5080000
     b2c:	3a080300 	xori	t0,s0,0x300
     b30:	490b3b0b 	0x490b3b0b
     b34:	00060213 	0x60213
     b38:	00180900 	sll	at,t8,0x4
     b3c:	340a0000 	li	t2,0x0
     b40:	3a080300 	xori	t0,s0,0x300
     b44:	490b3b0b 	0x490b3b0b
     b48:	0b000013 	j	c00004c <__Size_Of_SDRAM+0xbff584c>
     b4c:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     b50:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     b54:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
     b58:	260c0000 	addiu	t4,s0,0
     b5c:	00134900 	sll	t1,s3,0x4
     b60:	012e0d00 	0x12e0d00
     b64:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     b68:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
     b6c:	01120111 	0x1120111
     b70:	13010640 	beq	t8,at,2474 <__Size_Of_SDRAM-0x838c>
     b74:	2e0e0000 	sltiu	t6,s0,0
     b78:	3a0e0301 	xori	t6,s0,0x301
     b7c:	270b3b0b 	addiu	t3,t8,15115
     b80:	1201110c 	beq	s0,at,4fb4 <__Size_Of_SDRAM-0x584c>
     b84:	00064001 	0x64001
     b88:	11010000 	beq	t0,at,b8c <__Size_Of_SDRAM-0x9c74>
     b8c:	130e2501 	beq	t8,t6,9f94 <__Size_Of_SDRAM-0x86c>
     b90:	1b0e030b 	0x1b0e030b
     b94:	1201110e 	beq	s0,at,4fd0 <__Size_Of_SDRAM-0x5830>
     b98:	00061001 	0x61001
     b9c:	00240200 	0x240200
     ba0:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
     ba4:	00000e03 	sra	at,zero,0x18
     ba8:	03001603 	0x3001603
     bac:	3b0b3a0e 	xori	t3,t8,0x3a0e
     bb0:	0013490b 	0x13490b
     bb4:	012e0400 	0x12e0400
     bb8:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     bbc:	053b0b3a 	0x53b0b3a
     bc0:	13490c27 	beq	k0,t1,3c60 <__Size_Of_SDRAM-0x6ba0>
     bc4:	01120111 	0x1120111
     bc8:	13010640 	beq	t8,at,24cc <__Size_Of_SDRAM-0x8334>
     bcc:	05050000 	0x5050000
     bd0:	3a080300 	xori	t0,s0,0x300
     bd4:	49053b0b 	0x49053b0b
     bd8:	00060213 	0x60213
     bdc:	00050600 	sll	zero,a1,0x18
     be0:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     be4:	1349053b 	beq	k0,t1,20d4 <__Size_Of_SDRAM-0x872c>
     be8:	00000602 	srl	zero,zero,0x18
     bec:	03003407 	0x3003407
     bf0:	3b0b3a0e 	xori	t3,t8,0x3a0e
     bf4:	00134905 	0x134905
     bf8:	00340800 	0x340800
     bfc:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     c00:	1349053b 	beq	k0,t1,20f0 <__Size_Of_SDRAM-0x8710>
     c04:	34090000 	li	t1,0x0
     c08:	490e0300 	0x490e0300
     c0c:	020c3413 	0x20c3413
     c10:	0a00000a 	j	8000028 <__Size_Of_SDRAM+0x7ff5828>
     c14:	0b0b000f 	j	c2c003c <__Size_Of_SDRAM+0xc2b583c>
     c18:	00001349 	0x1349
     c1c:	4901010b 	bc2t	104c <__Size_Of_SDRAM-0x97b4>
     c20:	00130113 	0x130113
     c24:	00210c00 	0x210c00
     c28:	0b2f1349 	j	cbc4d24 <__Size_Of_SDRAM+0xcbba524>
     c2c:	240d0000 	li	t5,0
     c30:	3e0b0b00 	0x3e0b0b00
     c34:	0e00000b 	jal	800002c <__Size_Of_SDRAM+0x7ff582c>
     c38:	13490026 	beq	k0,t1,cd4 <__Size_Of_SDRAM-0x9b2c>
     c3c:	2e0f0000 	sltiu	t7,s0,0
     c40:	030c3f01 	0x30c3f01
     c44:	3b0b3a0e 	xori	t3,t8,0x3a0e
     c48:	110c270b 	beq	t0,t4,a878 <__Size_Of_SDRAM+0x78>
     c4c:	40011201 	0x40011201
     c50:	00130106 	0x130106
     c54:	012e1000 	0x12e1000
     c58:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     c5c:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     c60:	01110c27 	0x1110c27
     c64:	0a400112 	j	9000448 <__Size_Of_SDRAM+0x8ff5c48>
     c68:	00001301 	0x1301
     c6c:	03003411 	0x3003411
     c70:	3b0b3a08 	xori	t3,t8,0x3a08
     c74:	02134905 	0x2134905
     c78:	12000006 	beqz	s0,c94 <__Size_Of_SDRAM-0x9b6c>
     c7c:	0e03000a 	jal	80c0028 <__Size_Of_SDRAM+0x80b5828>
     c80:	053b0b3a 	0x53b0b3a
     c84:	00000111 	0x111
     c88:	3f012e13 	0x3f012e13
     c8c:	3a0e030c 	xori	t6,s0,0x30c
     c90:	27053b0b 	addiu	a1,t8,15115
     c94:	1113490c 	beq	t0,s3,130c8 <__Size_Of_SDRAM+0x88c8>
     c98:	40011201 	0x40011201
     c9c:	0013010a 	0x13010a
     ca0:	012e1400 	0x12e1400
     ca4:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     ca8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     cac:	13490c27 	beq	k0,t1,3d4c <__Size_Of_SDRAM-0x6ab4>
     cb0:	01120111 	0x1120111
     cb4:	13010640 	beq	t8,at,25b8 <__Size_Of_SDRAM-0x8248>
     cb8:	05150000 	0x5150000
     cbc:	3a0e0300 	xori	t6,s0,0x300
     cc0:	490b3b0b 	0x490b3b0b
     cc4:	00060213 	0x60213
     cc8:	00341600 	0x341600
     ccc:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     cd0:	13490b3b 	beq	k0,t1,39c0 <__Size_Of_SDRAM-0x6e40>
     cd4:	34170000 	li	s7,0x0
     cd8:	3a0e0300 	xori	t6,s0,0x300
     cdc:	490b3b0b 	0x490b3b0b
     ce0:	000a0213 	0xa0213
     ce4:	11010000 	beq	t0,at,ce8 <__Size_Of_SDRAM-0x9b18>
     ce8:	130e2501 	beq	t8,t6,a0f0 <__Size_Of_SDRAM-0x710>
     cec:	1b0e030b 	0x1b0e030b
     cf0:	1201110e 	beq	s0,at,512c <__Size_Of_SDRAM-0x56d4>
     cf4:	00061001 	0x61001
     cf8:	00240200 	0x240200
     cfc:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
     d00:	00000e03 	sra	at,zero,0x18
     d04:	03001603 	0x3001603
     d08:	3b0b3a0e 	xori	t3,t8,0x3a0e
     d0c:	0013490b 	0x13490b
     d10:	012e0400 	0x12e0400
     d14:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     d18:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
     d1c:	0b201349 	j	c804d24 <__Size_Of_SDRAM+0xc7fa524>
     d20:	00001301 	0x1301
     d24:	03000505 	0x3000505
     d28:	3b0b3a0e 	xori	t3,t8,0x3a0e
     d2c:	0013490b 	0x13490b
     d30:	000f0600 	sll	zero,t7,0x18
     d34:	13490b0b 	beq	k0,t1,3964 <__Size_Of_SDRAM-0x6e9c>
     d38:	2e070000 	sltiu	a3,s0,0
     d3c:	3a0e0301 	xori	t6,s0,0x301
     d40:	270b3b0b 	addiu	t3,t8,15115
     d44:	010b200c 	syscall	0x42c80
     d48:	08000013 	j	4c <__Size_Of_SDRAM-0xa7b4>
     d4c:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     d50:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     d54:	00001349 	0x1349
     d58:	03003409 	0x3003409
     d5c:	3b0b3a08 	xori	t3,t8,0x3a08
     d60:	0013490b 	0x13490b
     d64:	00350a00 	0x350a00
     d68:	00001349 	0x1349
     d6c:	0b00240b 	j	c00902c <__Size_Of_SDRAM+0xbffe82c>
     d70:	030b3e0b 	0x30b3e0b
     d74:	0c000008 	jal	20 <__Size_Of_SDRAM-0xa7e0>
     d78:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     d7c:	0c341349 	jal	d04d24 <__Size_Of_SDRAM+0xcfa524>
     d80:	00000e1c 	0xe1c
     d84:	4901010d 	bc2t	11bc <__Size_Of_SDRAM-0x9644>
     d88:	00130113 	0x130113
     d8c:	00210e00 	0x210e00
     d90:	0b2f1349 	j	cbc4d24 <__Size_Of_SDRAM+0xcbba524>
     d94:	240f0000 	li	t7,0
     d98:	3e0b0b00 	0x3e0b0b00
     d9c:	1000000b 	b	dcc <__Size_Of_SDRAM-0x9a34>
     da0:	13490026 	beq	k0,t1,e3c <__Size_Of_SDRAM-0x99c4>
     da4:	2e110000 	sltiu	s1,s0,0
     da8:	11133101 	beq	t0,s3,d1b0 <__Size_Of_SDRAM+0x29b0>
     dac:	40011201 	0x40011201
     db0:	00130106 	0x130106
     db4:	00051200 	sll	v0,a1,0x8
     db8:	06021331 	0x6021331
     dbc:	34130000 	li	s3,0x0
     dc0:	02133100 	0x2133100
     dc4:	14000006 	bnez	zero,de0 <__Size_Of_SDRAM-0x9a20>
     dc8:	13310034 	beq	t9,s1,e9c <__Size_Of_SDRAM-0x9964>
     dcc:	05150000 	0x5150000
     dd0:	00133100 	sll	a2,s3,0x4
     dd4:	00341600 	0x341600
     dd8:	0a021331 	j	8084cc4 <__Size_Of_SDRAM+0x807a4c4>
     ddc:	2e170000 	sltiu	s7,s0,0
     de0:	030c3f01 	0x30c3f01
     de4:	3b0b3a0e 	xori	t3,t8,0x3a0e
     de8:	110c270b 	beq	t0,t4,aa18 <__Size_Of_SDRAM+0x218>
     dec:	40011201 	0x40011201
     df0:	00130106 	0x130106
     df4:	00341800 	0x341800
     df8:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     dfc:	13490b3b 	beq	k0,t1,3aec <__Size_Of_SDRAM-0x6d14>
     e00:	00000602 	srl	zero,zero,0x18
     e04:	03003419 	0x3003419
     e08:	3b0b3a0e 	xori	t3,t8,0x3a0e
     e0c:	0213490b 	0x213490b
     e10:	1a000006 	blez	s0,e2c <__Size_Of_SDRAM-0x99d4>
     e14:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     e18:	0c341349 	jal	d04d24 <__Size_Of_SDRAM+0xcfa524>
     e1c:	00000a02 	srl	at,zero,0x8
     e20:	11010b1b 	beq	t0,at,3a90 <__Size_Of_SDRAM-0x6d70>
     e24:	00011201 	0x11201
     e28:	011d1c00 	0x11d1c00
     e2c:	01521331 	0x1521331
     e30:	0b580655 	j	d601954 <__Size_Of_SDRAM+0xd5f7154>
     e34:	13010559 	beq	t8,at,239c <__Size_Of_SDRAM-0x8464>
     e38:	0b1d0000 	j	c740000 <__Size_Of_SDRAM+0xc735800>
     e3c:	00065501 	0x65501
     e40:	011d1e00 	0x11d1e00
     e44:	01521331 	0x1521331
     e48:	0b580655 	j	d601954 <__Size_Of_SDRAM+0xd5f7154>
     e4c:	13010b59 	beq	t8,at,3bb4 <__Size_Of_SDRAM-0x6c4c>
     e50:	1d1f0000 	0x1d1f0000
     e54:	11133101 	beq	t0,s3,d25c <__Size_Of_SDRAM+0x2a5c>
     e58:	58011201 	0x58011201
     e5c:	0105590b 	0x105590b
     e60:	20000013 	addi	zero,zero,19
     e64:	0655010b 	0x655010b
     e68:	00001301 	0x1301
     e6c:	03003421 	0x3003421
     e70:	3b0b3a08 	xori	t3,t8,0x3a08
     e74:	02134905 	0x2134905
     e78:	22000006 	addi	zero,s0,6
     e7c:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
     e80:	053b0b3a 	0x53b0b3a
     e84:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
     e88:	34230000 	ori	v1,at,0x0
     e8c:	3a0e0300 	xori	t6,s0,0x300
     e90:	49053b0b 	0x49053b0b
     e94:	24000013 	li	zero,19
     e98:	08030034 	j	c00d0 <__Size_Of_SDRAM+0xb58d0>
     e9c:	053b0b3a 	0x53b0b3a
     ea0:	00001349 	0x1349
     ea4:	03003425 	0x3003425
     ea8:	3b0b3a0e 	xori	t3,t8,0x3a0e
     eac:	02134905 	0x2134905
     eb0:	26000006 	addiu	zero,s0,6
     eb4:	1331011d 	beq	t9,s1,132c <__Size_Of_SDRAM-0x94d4>
     eb8:	06550152 	0x6550152
     ebc:	05590b58 	0x5590b58
     ec0:	1d270000 	0x1d270000
     ec4:	11133101 	beq	t0,s3,d2cc <__Size_Of_SDRAM+0x2acc>
     ec8:	58011201 	0x58011201
     ecc:	010b590b 	0x10b590b
     ed0:	28000013 	slti	zero,zero,19
     ed4:	1331011d 	beq	t9,s1,134c <__Size_Of_SDRAM-0x94b4>
     ed8:	01120111 	0x1120111
     edc:	0b590b58 	j	d642d60 <__Size_Of_SDRAM+0xd638560>
     ee0:	34290000 	ori	t1,at,0x0
     ee4:	3a0e0300 	xori	t6,s0,0x300
     ee8:	490b3b0b 	0x490b3b0b
     eec:	00061c13 	0x61c13
     ef0:	11010000 	beq	t0,at,ef4 <__Size_Of_SDRAM-0x990c>
     ef4:	130e2501 	beq	t8,t6,a2fc <__Size_Of_SDRAM-0x504>
     ef8:	1b0e030b 	0x1b0e030b
     efc:	1201110e 	beq	s0,at,5338 <__Size_Of_SDRAM-0x54c8>
     f00:	00061001 	0x61001
     f04:	00240200 	0x240200
     f08:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
     f0c:	00000e03 	sra	at,zero,0x18
     f10:	01110100 	0x1110100
     f14:	0b130e25 	j	c4c3894 <__Size_Of_SDRAM+0xc4b9094>
     f18:	0e1b0e03 	jal	86c380c <__Size_Of_SDRAM+0x86b900c>
     f1c:	01120111 	0x1120111
     f20:	00000610 	0x610
     f24:	0b002402 	j	c009008 <__Size_Of_SDRAM+0xbffe808>
     f28:	030b3e0b 	0x30b3e0b
     f2c:	0000000e 	0xe
     f30:	25011101 	addiu	at,t0,4353
     f34:	030b130e 	0x30b130e
     f38:	110e1b0e 	beq	t0,t6,7b74 <__Size_Of_SDRAM-0x2c8c>
     f3c:	10011201 	beq	zero,at,5744 <__Size_Of_SDRAM-0x50bc>
     f40:	02000006 	srlv	zero,zero,s0
     f44:	0e030016 	jal	80c0058 <__Size_Of_SDRAM+0x80b5858>
     f48:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     f4c:	00001349 	0x1349
     f50:	0b002403 	j	c00900c <__Size_Of_SDRAM+0xbffe80c>
     f54:	030b3e0b 	0x30b3e0b
     f58:	0400000e 	bltz	zero,f94 <__Size_Of_SDRAM-0x986c>
     f5c:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
     f60:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
     f64:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
     f68:	01120111 	0x1120111
     f6c:	13010a40 	beq	t8,at,3870 <__Size_Of_SDRAM-0x6f90>
     f70:	05050000 	0x5050000
     f74:	3a0e0300 	xori	t6,s0,0x300
     f78:	490b3b0b 	0x490b3b0b
     f7c:	000a0213 	0xa0213
     f80:	00050600 	sll	zero,a1,0x18
     f84:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     f88:	13490b3b 	beq	k0,t1,3c78 <__Size_Of_SDRAM-0x6b88>
     f8c:	00000a02 	srl	at,zero,0x8
     f90:	0b000f07 	j	c003c1c <__Size_Of_SDRAM+0xbff941c>
     f94:	0013490b 	0x13490b
     f98:	012e0800 	0x12e0800
     f9c:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
     fa0:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
     fa4:	13490c27 	beq	k0,t1,4044 <__Size_Of_SDRAM-0x67bc>
     fa8:	01120111 	0x1120111
     fac:	13010a40 	beq	t8,at,38b0 <__Size_Of_SDRAM-0x6f50>
     fb0:	34090000 	li	t1,0x0
     fb4:	3a080300 	xori	t0,s0,0x300
     fb8:	490b3b0b 	0x490b3b0b
     fbc:	0a000013 	j	800004c <__Size_Of_SDRAM+0x7ff584c>
     fc0:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
     fc4:	08030b3e 	j	c2cf8 <__Size_Of_SDRAM+0xb84f8>
     fc8:	050b0000 	0x50b0000
     fcc:	3a0e0300 	xori	t6,s0,0x300
     fd0:	490b3b0b 	0x490b3b0b
     fd4:	00060213 	0x60213
     fd8:	00050c00 	sll	at,a1,0x10
     fdc:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
     fe0:	13490b3b 	beq	k0,t1,3cd0 <__Size_Of_SDRAM-0x6b30>
     fe4:	00000602 	srl	zero,zero,0x18
     fe8:	3f012e0d 	0x3f012e0d
     fec:	3a0e030c 	xori	t6,s0,0x30c
     ff0:	270b3b0b 	addiu	t3,t8,15115
     ff4:	1201110c 	beq	s0,at,5428 <__Size_Of_SDRAM-0x53d8>
     ff8:	000a4001 	0xa4001
     ffc:	11010000 	beq	t0,at,1000 <__Size_Of_SDRAM-0x9800>
    1000:	130e2501 	beq	t8,t6,a408 <__Size_Of_SDRAM-0x3f8>
    1004:	1b0e030b 	0x1b0e030b
    1008:	1201110e 	beq	s0,at,5444 <__Size_Of_SDRAM-0x53bc>
    100c:	00061001 	0x61001
    1010:	00160200 	sll	zero,s6,0x8
    1014:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1018:	13490b3b 	beq	k0,t1,3d08 <__Size_Of_SDRAM-0x6af8>
    101c:	24030000 	li	v1,0
    1020:	3e0b0b00 	0x3e0b0b00
    1024:	000e030b 	0xe030b
    1028:	002e0400 	0x2e0400
    102c:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
    1030:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    1034:	01110c27 	0x1110c27
    1038:	0a400112 	j	9000448 <__Size_Of_SDRAM+0x8ff5c48>
    103c:	2e050000 	sltiu	a1,s0,0
    1040:	030c3f01 	0x30c3f01
    1044:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1048:	110c270b 	beq	t0,t4,ac78 <__Size_Of_SDRAM+0x478>
    104c:	40011201 	0x40011201
    1050:	0013010a 	0x13010a
    1054:	00340600 	0x340600
    1058:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    105c:	13490b3b 	beq	k0,t1,3d4c <__Size_Of_SDRAM-0x6ab4>
    1060:	00000602 	srl	zero,zero,0x18
    1064:	03003407 	0x3003407
    1068:	3b0b3a0e 	xori	t3,t8,0x3a0e
    106c:	0213490b 	0x213490b
    1070:	0800000a 	j	28 <__Size_Of_SDRAM-0xa7d8>
    1074:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
    1078:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    107c:	0c3f1349 	jal	fc4d24 <__Size_Of_SDRAM+0xfba524>
    1080:	00000a02 	srl	at,zero,0x8
    1084:	01110100 	0x1110100
    1088:	0b130e25 	j	c4c3894 <__Size_Of_SDRAM+0xc4b9094>
    108c:	0e1b0e03 	jal	86c380c <__Size_Of_SDRAM+0x86b900c>
    1090:	01120111 	0x1120111
    1094:	00000610 	0x610
    1098:	0b002402 	j	c009008 <__Size_Of_SDRAM+0xbffe808>
    109c:	030b3e0b 	0x30b3e0b
    10a0:	0300000e 	0x300000e
    10a4:	0e030016 	jal	80c0058 <__Size_Of_SDRAM+0x80b5858>
    10a8:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    10ac:	00001349 	0x1349
    10b0:	3f002e04 	0x3f002e04
    10b4:	3a0e030c 	xori	t6,s0,0x30c
    10b8:	270b3b0b 	addiu	t3,t8,15115
    10bc:	1201110c 	beq	s0,at,54f0 <__Size_Of_SDRAM-0x5310>
    10c0:	000a4001 	0xa4001
    10c4:	012e0500 	0x12e0500
    10c8:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
    10cc:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    10d0:	01110c27 	0x1110c27
    10d4:	0a400112 	j	9000448 <__Size_Of_SDRAM+0x8ff5c48>
    10d8:	34060000 	li	a2,0x0
    10dc:	3a0e0300 	xori	t6,s0,0x300
    10e0:	490b3b0b 	0x490b3b0b
    10e4:	00000013 	mtlo	zero
    10e8:	25011101 	addiu	at,t0,4353
    10ec:	030b130e 	0x30b130e
    10f0:	110e1b0e 	beq	t0,t6,7d2c <__Size_Of_SDRAM-0x2ad4>
    10f4:	10011201 	beq	zero,at,58fc <__Size_Of_SDRAM-0x4f04>
    10f8:	02000006 	srlv	zero,zero,s0
    10fc:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
    1100:	0e030b3e 	jal	80c2cf8 <__Size_Of_SDRAM+0x80b84f8>
    1104:	16030000 	bne	s0,v1,1108 <__Size_Of_SDRAM-0x96f8>
    1108:	3a0e0300 	xori	t6,s0,0x300
    110c:	490b3b0b 	0x490b3b0b
    1110:	04000013 	bltz	zero,1160 <__Size_Of_SDRAM-0x96a0>
    1114:	0c3f002e 	jal	fc00b8 <__Size_Of_SDRAM+0xfb58b8>
    1118:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    111c:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
    1120:	01120111 	0x1120111
    1124:	00000a40 	sll	at,zero,0x9
    1128:	3f012e05 	0x3f012e05
    112c:	3a0e030c 	xori	t6,s0,0x30c
    1130:	270b3b0b 	addiu	t3,t8,15115
    1134:	1201110c 	beq	s0,at,5568 <__Size_Of_SDRAM-0x5298>
    1138:	010a4001 	0x10a4001
    113c:	06000013 	bltz	s0,118c <__Size_Of_SDRAM-0x9674>
    1140:	0e030005 	jal	80c0014 <__Size_Of_SDRAM+0x80b5814>
    1144:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    1148:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
    114c:	0f070000 	jal	c1c0000 <__Size_Of_SDRAM+0xc1b5800>
    1150:	490b0b00 	0x490b0b00
    1154:	00000013 	mtlo	zero
    1158:	25011101 	addiu	at,t0,4353
    115c:	030b130e 	0x30b130e
    1160:	110e1b0e 	beq	t0,t6,7d9c <__Size_Of_SDRAM-0x2a64>
    1164:	10011201 	beq	zero,at,596c <__Size_Of_SDRAM-0x4e94>
    1168:	02000006 	srlv	zero,zero,s0
    116c:	0e030016 	jal	80c0058 <__Size_Of_SDRAM+0x80b5858>
    1170:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    1174:	00001349 	0x1349
    1178:	0b002403 	j	c00900c <__Size_Of_SDRAM+0xbffe80c>
    117c:	030b3e0b 	0x30b3e0b
    1180:	0400000e 	bltz	zero,11bc <__Size_Of_SDRAM-0x9644>
    1184:	0b0b0113 	j	c2c044c <__Size_Of_SDRAM+0xc2b5c4c>
    1188:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    118c:	00001301 	0x1301
    1190:	03000d05 	0x3000d05
    1194:	3b0b3a08 	xori	t3,t8,0x3a08
    1198:	3813490b 	xori	s3,zero,0x490b
    119c:	0600000a 	bltz	s0,11c8 <__Size_Of_SDRAM-0x9638>
    11a0:	0e03000d 	jal	80c0034 <__Size_Of_SDRAM+0x80b5834>
    11a4:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    11a8:	0a381349 	j	8e04d24 <__Size_Of_SDRAM+0x8dfa524>
    11ac:	0f070000 	jal	c1c0000 <__Size_Of_SDRAM+0xc1b5800>
    11b0:	490b0b00 	0x490b0b00
    11b4:	08000013 	j	4c <__Size_Of_SDRAM-0xa7b4>
    11b8:	13490026 	beq	k0,t1,1254 <__Size_Of_SDRAM-0x95ac>
    11bc:	2e090000 	sltiu	t1,s0,0
    11c0:	030c3f01 	0x30c3f01
    11c4:	3b0b3a0e 	xori	t3,t8,0x3a0e
    11c8:	490c270b 	0x490c270b
    11cc:	12011113 	beq	s0,at,561c <__Size_Of_SDRAM-0x51e4>
    11d0:	010a4001 	0x10a4001
    11d4:	0a000013 	j	800004c <__Size_Of_SDRAM+0x7ff584c>
    11d8:	0e030005 	jal	80c0014 <__Size_Of_SDRAM+0x80b5814>
    11dc:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    11e0:	06021349 	0x6021349
    11e4:	050b0000 	0x50b0000
    11e8:	3a080300 	xori	t0,s0,0x300
    11ec:	490b3b0b 	0x490b3b0b
    11f0:	000a0213 	0xa0213
    11f4:	00340c00 	0x340c00
    11f8:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
    11fc:	13490b3b 	beq	k0,t1,3eec <__Size_Of_SDRAM-0x6914>
    1200:	00000602 	srl	zero,zero,0x18
    1204:	0b00240d 	j	c009034 <__Size_Of_SDRAM+0xbffe834>
    1208:	030b3e0b 	0x30b3e0b
    120c:	0e000008 	jal	8000020 <__Size_Of_SDRAM+0x7ff5820>
    1210:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
    1214:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1218:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
    121c:	01111349 	0x1111349
    1220:	06400112 	bltz	s2,166c <__Size_Of_SDRAM-0x9194>
    1224:	00001301 	0x1301
    1228:	0300340f 	0x300340f
    122c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1230:	0013490b 	0x13490b
    1234:	00341000 	0x341000
    1238:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
    123c:	13490b3b 	beq	k0,t1,3f2c <__Size_Of_SDRAM-0x68d4>
    1240:	2e110000 	sltiu	s1,s0,0
    1244:	030c3f01 	0x30c3f01
    1248:	3b0b3a0e 	xori	t3,t8,0x3a0e
    124c:	490c2705 	0x490c2705
    1250:	12011113 	beq	s0,at,56a0 <__Size_Of_SDRAM-0x5160>
    1254:	01064001 	0x1064001
    1258:	12000013 	beqz	s0,12a8 <__Size_Of_SDRAM-0x9558>
    125c:	0e030005 	jal	80c0014 <__Size_Of_SDRAM+0x80b5814>
    1260:	053b0b3a 	0x53b0b3a
    1264:	06021349 	0x6021349
    1268:	05130000 	0x5130000
    126c:	3a080300 	xori	t0,s0,0x300
    1270:	49053b0b 	0x49053b0b
    1274:	000a0213 	0xa0213
    1278:	00341400 	0x341400
    127c:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1280:	1349053b 	beq	k0,t1,2770 <__Size_Of_SDRAM-0x8090>
    1284:	00000602 	srl	zero,zero,0x18
    1288:	03003415 	0x3003415
    128c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1290:	00134905 	0x134905
    1294:	00341600 	0x341600
    1298:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
    129c:	1349053b 	beq	k0,t1,278c <__Size_Of_SDRAM-0x8074>
    12a0:	00000a02 	srl	at,zero,0x8
    12a4:	49010117 	bc2t	1704 <__Size_Of_SDRAM-0x90fc>
    12a8:	00130113 	0x130113
    12ac:	00211800 	0x211800
    12b0:	0b2f1349 	j	cbc4d24 <__Size_Of_SDRAM+0xcbba524>
    12b4:	24190000 	li	t9,0
    12b8:	3e0b0b00 	0x3e0b0b00
    12bc:	1a00000b 	blez	s0,12ec <__Size_Of_SDRAM-0x9514>
    12c0:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
    12c4:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    12c8:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
    12cc:	01000000 	0x1000000
    12d0:	0e250111 	jal	8940444 <__Size_Of_SDRAM+0x8935c44>
    12d4:	0e030b13 	jal	80c2c4c <__Size_Of_SDRAM+0x80b844c>
    12d8:	01110e1b 	0x1110e1b
    12dc:	06100112 	bltzal	s0,1728 <__Size_Of_SDRAM-0x90d8>
    12e0:	24020000 	li	v0,0
    12e4:	3e0b0b00 	0x3e0b0b00
    12e8:	000e030b 	0xe030b
    12ec:	00160300 	sll	zero,s6,0xc
    12f0:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    12f4:	13490b3b 	beq	k0,t1,3fe4 <__Size_Of_SDRAM-0x681c>
    12f8:	2e040000 	sltiu	a0,s0,0
    12fc:	030c3f00 	0x30c3f00
    1300:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1304:	000b200b 	movn	a0,zero,t3
    1308:	002e0500 	0x2e0500
    130c:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
    1310:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    1314:	0b201349 	j	c804d24 <__Size_Of_SDRAM+0xc7fa524>
    1318:	2e060000 	sltiu	a2,s0,0
    131c:	11133100 	beq	t0,s3,d720 <__Size_Of_SDRAM+0x2f20>
    1320:	40011201 	0x40011201
    1324:	0700000a 	bltz	t8,1350 <__Size_Of_SDRAM-0x94b0>
    1328:	0c3f002e 	jal	fc00b8 <__Size_Of_SDRAM+0xfb58b8>
    132c:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1330:	01110b3b 	0x1110b3b
    1334:	0a400112 	j	9000448 <__Size_Of_SDRAM+0x8ff5c48>
    1338:	2e080000 	sltiu	t0,s0,0
    133c:	030c3f01 	0x30c3f01
    1340:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1344:	1201110b 	beq	s0,at,5774 <__Size_Of_SDRAM-0x508c>
    1348:	000a4001 	0xa4001
    134c:	00340900 	0x340900
    1350:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1354:	13490b3b 	beq	k0,t1,4044 <__Size_Of_SDRAM-0x67bc>
    1358:	00000602 	srl	zero,zero,0x18
    135c:	31001d0a 	andi	zero,t0,0x1d0a
    1360:	12011113 	beq	s0,at,57b0 <__Size_Of_SDRAM-0x5050>
    1364:	590b5801 	0x590b5801
    1368:	0000000b 	movn	zero,zero,zero
    136c:	25011101 	addiu	at,t0,4353
    1370:	030b130e 	0x30b130e
    1374:	110e1b0e 	beq	t0,t6,7fb0 <__Size_Of_SDRAM-0x2850>
    1378:	10011201 	beq	zero,at,5b80 <__Size_Of_SDRAM-0x4c80>
    137c:	02000006 	srlv	zero,zero,s0
    1380:	0e030016 	jal	80c0058 <__Size_Of_SDRAM+0x80b5858>
    1384:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    1388:	00001349 	0x1349
    138c:	0b002403 	j	c00900c <__Size_Of_SDRAM+0xbffe80c>
    1390:	030b3e0b 	0x30b3e0b
    1394:	0400000e 	bltz	zero,13d0 <__Size_Of_SDRAM-0x9430>
    1398:	0b0b0113 	j	c2c044c <__Size_Of_SDRAM+0xc2b5c4c>
    139c:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    13a0:	00001301 	0x1301
    13a4:	03000d05 	0x3000d05
    13a8:	3b0b3a0e 	xori	t3,t8,0x3a0e
    13ac:	0b13490b 	j	c4d242c <__Size_Of_SDRAM+0xc4c7c2c>
    13b0:	0c0b0d0b 	jal	2c342c <__Size_Of_SDRAM+0x2b8c2c>
    13b4:	000a380b 	movn	a3,zero,t2
    13b8:	000d0600 	sll	zero,t5,0x18
    13bc:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
    13c0:	13490b3b 	beq	k0,t1,40b0 <__Size_Of_SDRAM-0x6750>
    13c4:	0b0d0b0b 	j	c342c2c <__Size_Of_SDRAM+0xc33842c>
    13c8:	0a380b0c 	j	8e02c30 <__Size_Of_SDRAM+0x8df8430>
    13cc:	17070000 	bne	t8,a3,13d0 <__Size_Of_SDRAM-0x9430>
    13d0:	0b0e0301 	j	c380c04 <__Size_Of_SDRAM+0xc376404>
    13d4:	3b0b3a0b 	xori	t3,t8,0x3a0b
    13d8:	0013010b 	0x13010b
    13dc:	000d0800 	sll	at,t5,0x0
    13e0:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    13e4:	13490b3b 	beq	k0,t1,40d4 <__Size_Of_SDRAM-0x672c>
    13e8:	0d090000 	jal	4240000 <__Size_Of_SDRAM+0x4235800>
    13ec:	3a0e0300 	xori	t6,s0,0x300
    13f0:	49053b0b 	0x49053b0b
    13f4:	0d0b0b13 	jal	42c2c4c <__Size_Of_SDRAM+0x42b844c>
    13f8:	380b0c0b 	xori	t3,zero,0xc0b
    13fc:	0a00000a 	j	8000028 <__Size_Of_SDRAM+0x7ff5828>
    1400:	0e03000d 	jal	80c0034 <__Size_Of_SDRAM+0x80b5834>
    1404:	053b0b3a 	0x53b0b3a
    1408:	00001349 	0x1349
    140c:	0300160b 	0x300160b
    1410:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1414:	00134905 	0x134905
    1418:	01130c00 	0x1130c00
    141c:	0b3a0b0b 	j	ce82c2c <__Size_Of_SDRAM+0xce7842c>
    1420:	1301053b 	beq	t8,at,2910 <__Size_Of_SDRAM-0x7ef0>
    1424:	0d0d0000 	jal	4340000 <__Size_Of_SDRAM+0x4335800>
    1428:	3a080300 	xori	t0,s0,0x300
    142c:	49053b0b 	0x49053b0b
    1430:	0d0b0b13 	jal	42c2c4c <__Size_Of_SDRAM+0x42b844c>
    1434:	380b0c0b 	xori	t3,zero,0xc0b
    1438:	0e00000a 	jal	8000028 <__Size_Of_SDRAM+0x7ff5828>
    143c:	0e030117 	jal	80c045c <__Size_Of_SDRAM+0x80b5c5c>
    1440:	0b3a0b0b 	j	ce82c2c <__Size_Of_SDRAM+0xce7842c>
    1444:	1301053b 	beq	t8,at,2934 <__Size_Of_SDRAM-0x7ecc>
    1448:	130f0000 	beq	t8,t7,144c <__Size_Of_SDRAM-0x93b4>
    144c:	0b0e0301 	j	c380c04 <__Size_Of_SDRAM+0xc376404>
    1450:	3b0b3a0b 	xori	t3,t8,0x3a0b
    1454:	00130105 	0x130105
    1458:	000d1000 	sll	v0,t5,0x0
    145c:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1460:	1349053b 	beq	k0,t1,2950 <__Size_Of_SDRAM-0x7eb0>
    1464:	00000a38 	0xa38
    1468:	3f012e11 	0x3f012e11
    146c:	3a0e030c 	xori	t6,s0,0x30c
    1470:	270b3b0b 	addiu	t3,t8,15115
    1474:	010b200c 	syscall	0x42c80
    1478:	12000013 	beqz	s0,14c8 <__Size_Of_SDRAM-0x9338>
    147c:	08030005 	j	c0014 <__Size_Of_SDRAM+0xb5814>
    1480:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    1484:	00001349 	0x1349
    1488:	03000513 	0x3000513
    148c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1490:	0013490b 	0x13490b
    1494:	012e1400 	0x12e1400
    1498:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
    149c:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    14a0:	13490c27 	beq	k0,t1,4540 <__Size_Of_SDRAM-0x62c0>
    14a4:	13010b20 	beq	t8,at,4128 <__Size_Of_SDRAM-0x66d8>
    14a8:	0f150000 	jal	c540000 <__Size_Of_SDRAM+0xc535800>
    14ac:	490b0b00 	0x490b0b00
    14b0:	16000013 	bnez	s0,1500 <__Size_Of_SDRAM-0x9300>
    14b4:	1331012e 	beq	t9,s1,1970 <__Size_Of_SDRAM-0x8e90>
    14b8:	01120111 	0x1120111
    14bc:	13010a40 	beq	t8,at,3dc0 <__Size_Of_SDRAM-0x6a40>
    14c0:	05170000 	0x5170000
    14c4:	02133100 	0x2133100
    14c8:	1800000a 	blez	zero,14f4 <__Size_Of_SDRAM-0x930c>
    14cc:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
    14d0:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    14d4:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
    14d8:	01120111 	0x1120111
    14dc:	13010a40 	beq	t8,at,3de0 <__Size_Of_SDRAM-0x6a20>
    14e0:	05190000 	0x5190000
    14e4:	3a080300 	xori	t0,s0,0x300
    14e8:	490b3b0b 	0x490b3b0b
    14ec:	00060213 	0x60213
    14f0:	011d1a00 	0x11d1a00
    14f4:	01111331 	0x1111331
    14f8:	0b580112 	j	d600448 <__Size_Of_SDRAM+0xd5f5c48>
    14fc:	00000b59 	0xb59
    1500:	3100051b 	andi	zero,t0,0x51b
    1504:	1c000013 	bgtz	zero,1554 <__Size_Of_SDRAM-0x92ac>
    1508:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
    150c:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1510:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
    1514:	01111349 	0x1111349
    1518:	0a400112 	j	9000448 <__Size_Of_SDRAM+0x8ff5c48>
    151c:	00001301 	0x1301
    1520:	0300051d 	0x300051d
    1524:	3b0b3a08 	xori	t3,t8,0x3a08
    1528:	0213490b 	0x213490b
    152c:	1e00000a 	bgtz	s0,1558 <__Size_Of_SDRAM-0x92a8>
    1530:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
    1534:	08030b3e 	j	c2cf8 <__Size_Of_SDRAM+0xb84f8>
    1538:	2e1f0000 	sltiu	ra,s0,0
    153c:	030c3f00 	0x30c3f00
    1540:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1544:	110c270b 	beq	t0,t4,b174 <__Size_Of_SDRAM+0x974>
    1548:	40011201 	0x40011201
    154c:	20000006 	addi	zero,zero,6
    1550:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
    1554:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    1558:	0c3f1349 	jal	fc4d24 <__Size_Of_SDRAM+0xfba524>
    155c:	00000a02 	srl	at,zero,0x8
    1560:	49003521 	bc2f	e9e8 <__Size_Of_SDRAM+0x41e8>
    1564:	00000013 	mtlo	zero
    1568:	25011101 	addiu	at,t0,4353
    156c:	030b130e 	0x30b130e
    1570:	110e1b0e 	beq	t0,t6,81ac <__Size_Of_SDRAM-0x2654>
    1574:	10011201 	beq	zero,at,5d7c <__Size_Of_SDRAM-0x4a84>
    1578:	02000006 	srlv	zero,zero,s0
    157c:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
    1580:	0e030b3e 	jal	80c2cf8 <__Size_Of_SDRAM+0x80b84f8>
    1584:	2e030000 	sltiu	v1,s0,0
    1588:	030c3f00 	0x30c3f00
    158c:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1590:	110c270b 	beq	t0,t4,b1c0 <__Size_Of_SDRAM+0x9c0>
    1594:	40011201 	0x40011201
    1598:	0000000a 	movz	zero,zero,zero
    159c:	25011101 	addiu	at,t0,4353
    15a0:	030b130e 	0x30b130e
    15a4:	110e1b0e 	beq	t0,t6,81e0 <__Size_Of_SDRAM-0x2620>
    15a8:	10011201 	beq	zero,at,5db0 <__Size_Of_SDRAM-0x4a50>
    15ac:	02000006 	srlv	zero,zero,s0
    15b0:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
    15b4:	0e030b3e 	jal	80c2cf8 <__Size_Of_SDRAM+0x80b84f8>
    15b8:	01000000 	0x1000000
    15bc:	0e250111 	jal	8940444 <__Size_Of_SDRAM+0x8935c44>
    15c0:	0e030b13 	jal	80c2c4c <__Size_Of_SDRAM+0x80b844c>
    15c4:	01110e1b 	0x1110e1b
    15c8:	06100112 	bltzal	s0,1a14 <__Size_Of_SDRAM-0x8dec>
    15cc:	24020000 	li	v0,0
    15d0:	3e0b0b00 	0x3e0b0b00
    15d4:	000e030b 	0xe030b
    15d8:	11010000 	beq	t0,at,15dc <__Size_Of_SDRAM-0x9224>
    15dc:	130e2501 	beq	t8,t6,a9e4 <__Size_Of_SDRAM+0x1e4>
    15e0:	1b0e030b 	0x1b0e030b
    15e4:	1201110e 	beq	s0,at,5a20 <__Size_Of_SDRAM-0x4de0>
    15e8:	00061001 	0x61001
    15ec:	00240200 	0x240200
    15f0:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
    15f4:	00000e03 	sra	at,zero,0x18
    15f8:	01110100 	0x1110100
    15fc:	0b130e25 	j	c4c3894 <__Size_Of_SDRAM+0xc4b9094>
    1600:	0e1b0e03 	jal	86c380c <__Size_Of_SDRAM+0x86b900c>
    1604:	01120111 	0x1120111
    1608:	00000610 	0x610
    160c:	03001602 	0x3001602
    1610:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1614:	0013490b 	0x13490b
    1618:	00240300 	0x240300
    161c:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
    1620:	00000e03 	sra	at,zero,0x18
    1624:	0b002404 	j	c009010 <__Size_Of_SDRAM+0xbffe810>
    1628:	030b3e0b 	0x30b3e0b
    162c:	05000008 	bltz	t0,1650 <__Size_Of_SDRAM-0x91b0>
    1630:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
    1634:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1638:	0c270b3b 	jal	9c2cec <__Size_Of_SDRAM+0x9b84ec>
    163c:	13010b20 	beq	t8,at,42c0 <__Size_Of_SDRAM-0x6540>
    1640:	05060000 	0x5060000
    1644:	3a0e0300 	xori	t6,s0,0x300
    1648:	490b3b0b 	0x490b3b0b
    164c:	07000013 	bltz	t8,169c <__Size_Of_SDRAM-0x9164>
    1650:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
    1654:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1658:	13490b3b 	beq	k0,t1,4348 <__Size_Of_SDRAM-0x64b8>
    165c:	13010b20 	beq	t8,at,42e0 <__Size_Of_SDRAM-0x6520>
    1660:	34080000 	li	t0,0x0
    1664:	3a0e0300 	xori	t6,s0,0x300
    1668:	490b3b0b 	0x490b3b0b
    166c:	09000013 	j	400004c <__Size_Of_SDRAM+0x3ff584c>
    1670:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
    1674:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    1678:	0c27053b 	jal	9c14ec <__Size_Of_SDRAM+0x9b6cec>
    167c:	13010b20 	beq	t8,at,4300 <__Size_Of_SDRAM-0x6500>
    1680:	050a0000 	0x50a0000
    1684:	3a0e0300 	xori	t6,s0,0x300
    1688:	49053b0b 	0x49053b0b
    168c:	0b000013 	j	c00004c <__Size_Of_SDRAM+0xbff584c>
    1690:	13490035 	beq	k0,t1,1768 <__Size_Of_SDRAM-0x9098>
    1694:	2e0c0000 	sltiu	t4,s0,0
    1698:	11133101 	beq	t0,s3,daa0 <__Size_Of_SDRAM+0x32a0>
    169c:	40011201 	0x40011201
    16a0:	0013010a 	0x13010a
    16a4:	00050d00 	sll	at,a1,0x14
    16a8:	0a021331 	j	8084cc4 <__Size_Of_SDRAM+0x807a4c4>
    16ac:	340e0000 	li	t6,0x0
    16b0:	00133100 	sll	a2,s3,0x4
    16b4:	012e0f00 	0x12e0f00
    16b8:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
    16bc:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    16c0:	01110c27 	0x1110c27
    16c4:	0a400112 	j	9000448 <__Size_Of_SDRAM+0x8ff5c48>
    16c8:	00001301 	0x1301
    16cc:	03000510 	0x3000510
    16d0:	3b0b3a0e 	xori	t3,t8,0x3a0e
    16d4:	0213490b 	0x213490b
    16d8:	11000006 	beqz	t0,16f4 <__Size_Of_SDRAM-0x910c>
    16dc:	1331011d 	beq	t9,s1,1b54 <__Size_Of_SDRAM-0x8cac>
    16e0:	06550152 	0x6550152
    16e4:	0b590b58 	j	d642d60 <__Size_Of_SDRAM+0xd638560>
    16e8:	00001301 	0x1301
    16ec:	31000512 	andi	zero,t0,0x512
    16f0:	13000013 	beqz	t8,1740 <__Size_Of_SDRAM-0x90c0>
    16f4:	1331011d 	beq	t9,s1,1b6c <__Size_Of_SDRAM-0x8c94>
    16f8:	06550152 	0x6550152
    16fc:	0b590b58 	j	d642d60 <__Size_Of_SDRAM+0xd638560>
    1700:	0b140000 	j	c500000 <__Size_Of_SDRAM+0xc4f5800>
    1704:	00065501 	0x65501
    1708:	00261500 	0x261500
    170c:	00001349 	0x1349
    1710:	3f002e16 	0x3f002e16
    1714:	3a0e030c 	xori	t6,s0,0x30c
    1718:	110b3b0b 	beq	t0,t3,10348 <__Size_Of_SDRAM+0x5b48>
    171c:	40011201 	0x40011201
    1720:	17000006 	bnez	t8,173c <__Size_Of_SDRAM-0x90c4>
    1724:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
    1728:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    172c:	0c27053b 	jal	9c14ec <__Size_Of_SDRAM+0x9b6cec>
    1730:	01120111 	0x1120111
    1734:	13010a40 	beq	t8,at,4038 <__Size_Of_SDRAM-0x67c8>
    1738:	34180000 	li	t8,0x0
    173c:	3a080300 	xori	t0,s0,0x300
    1740:	49053b0b 	0x49053b0b
    1744:	000a0213 	0xa0213
    1748:	000f1900 	sll	v1,t7,0x4
    174c:	13490b0b 	beq	k0,t1,437c <__Size_Of_SDRAM-0x6484>
    1750:	051a0000 	0x51a0000
    1754:	02133100 	0x2133100
    1758:	1b000006 	blez	t8,1774 <__Size_Of_SDRAM-0x908c>
    175c:	0e030005 	jal	80c0014 <__Size_Of_SDRAM+0x80b5814>
    1760:	053b0b3a 	0x53b0b3a
    1764:	0a021349 	j	8084d24 <__Size_Of_SDRAM+0x807a524>
    1768:	051c0000 	0x51c0000
    176c:	3a0e0300 	xori	t6,s0,0x300
    1770:	49053b0b 	0x49053b0b
    1774:	00060213 	0x60213
    1778:	011d1d00 	0x11d1d00
    177c:	01111331 	0x1111331
    1780:	0b580112 	j	d600448 <__Size_Of_SDRAM+0xd5f5c48>
    1784:	00000559 	0x559
    1788:	3f002e1e 	0x3f002e1e
    178c:	3a0e030c 	xori	t6,s0,0x30c
    1790:	11053b0b 	beq	t0,a1,103c0 <__Size_Of_SDRAM+0x5bc0>
    1794:	40011201 	0x40011201
    1798:	1f00000a 	bgtz	t8,17c4 <__Size_Of_SDRAM-0x903c>
    179c:	0c3f012e 	jal	fc04b8 <__Size_Of_SDRAM+0xfb5cb8>
    17a0:	0b3a0e03 	j	ce8380c <__Size_Of_SDRAM+0xce7900c>
    17a4:	0111053b 	0x111053b
    17a8:	06400112 	bltz	s2,1bf4 <__Size_Of_SDRAM-0x8c0c>
    17ac:	00001301 	0x1301
    17b0:	03003420 	0x3003420
    17b4:	3b0b3a0e 	xori	t3,t8,0x3a0e
    17b8:	02134905 	0x2134905
    17bc:	2100000a 	addi	zero,t0,10
    17c0:	13490101 	beq	k0,t1,1bc8 <__Size_Of_SDRAM-0x8c38>
    17c4:	00001301 	0x1301
    17c8:	49002122 	bc2f	9c54 <__Size_Of_SDRAM-0xbac>
    17cc:	000b2f13 	0xb2f13
    17d0:	00242300 	0x242300
    17d4:	0b3e0b0b 	j	cf82c2c <__Size_Of_SDRAM+0xcf7842c>
    17d8:	34240000 	ori	a0,at,0x0
    17dc:	3a0e0300 	xori	t6,s0,0x300
    17e0:	490b3b0b 	0x490b3b0b
    17e4:	3c0c3f13 	lui	t4,0x3f13
    17e8:	2500000c 	addiu	zero,t0,12
    17ec:	0e030034 	jal	80c00d0 <__Size_Of_SDRAM+0x80b58d0>
    17f0:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    17f4:	0c3f1349 	jal	fc4d24 <__Size_Of_SDRAM+0xfba524>
    17f8:	00000a02 	srl	at,zero,0x8
    17fc:	03003426 	0x3003426
    1800:	3b0b3a0e 	xori	t3,t8,0x3a0e
    1804:	3f134905 	0x3f134905
    1808:	000c3c0c 	syscall	0x30f0
    180c:	11010000 	beq	t0,at,1810 <__Size_Of_SDRAM-0x8ff0>
    1810:	130e2501 	beq	t8,t6,ac18 <__Size_Of_SDRAM+0x418>
    1814:	1b0e030b 	0x1b0e030b
    1818:	1201110e 	beq	s0,at,5c54 <__Size_Of_SDRAM-0x4bac>
    181c:	00061001 	0x61001
    1820:	012e0200 	0x12e0200
    1824:	0e030c3f 	jal	80c30fc <__Size_Of_SDRAM+0x80b88fc>
    1828:	0b3b0b3a 	j	cec2ce8 <__Size_Of_SDRAM+0xceb84e8>
    182c:	13490c27 	beq	k0,t1,48cc <__Size_Of_SDRAM-0x5f34>
    1830:	01120111 	0x1120111
    1834:	13010a40 	beq	t8,at,4138 <__Size_Of_SDRAM-0x66c8>
    1838:	05030000 	0x5030000
    183c:	3a080300 	xori	t0,s0,0x300
    1840:	490b3b0b 	0x490b3b0b
    1844:	000a0213 	0xa0213
    1848:	00340400 	0x340400
    184c:	0b3a0803 	j	ce8200c <__Size_Of_SDRAM+0xce7780c>
    1850:	13490b3b 	beq	k0,t1,4540 <__Size_Of_SDRAM-0x62c0>
    1854:	00000602 	srl	zero,zero,0x18
    1858:	0b002405 	j	c009014 <__Size_Of_SDRAM+0xbffe814>
    185c:	030b3e0b 	0x30b3e0b
    1860:	06000008 	bltz	s0,1884 <__Size_Of_SDRAM-0x8f7c>
    1864:	0b0b000f 	j	c2c003c <__Size_Of_SDRAM+0xc2b583c>
    1868:	00001349 	0x1349
    186c:	49002607 	bc2f	b08c <__Size_Of_SDRAM+0x88c>
    1870:	08000013 	j	4c <__Size_Of_SDRAM-0xa7b4>
    1874:	0b0b0024 	j	c2c0090 <__Size_Of_SDRAM+0xc2b5890>
    1878:	0e030b3e 	jal	80c2cf8 <__Size_Of_SDRAM+0x80b84f8>
    187c:	Address 0x000000000000187c is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000ed 	0xed
       4:	00000002 	srl	zero,zero,0x0
       8:	01040000 	0x1040000
       c:	00000085 	0x85
      10:	00006c01 	0x6c01
      14:	00001c00 	sll	v1,zero,0x10
      18:	02015000 	0x2015000
      1c:	020214a0 	0x20214a0
      20:	000000a0 	0xa0
      24:	004f0200 	0x4f0200
      28:	09020000 	j	4080000 <__Size_Of_SDRAM+0x4075800>
      2c:	00000030 	0x30
      30:	77080103 	jalx	c20040c <__Size_Of_SDRAM+0xc1f5c0c>
      34:	03000000 	0x3000000
      38:	00090702 	srl	zero,t1,0x1c
      3c:	04030000 	0x4030000
      40:	00005f07 	0x5f07
      44:	07080300 	0x7080300
      48:	00000055 	0x55
      4c:	00000104 	0x104
      50:	d0010000 	0xd0010000
      54:	0000ac01 	0xac01
      58:	02015000 	0x2015000
      5c:	020214a0 	0x20214a0
      60:	000000a0 	0xa0
      64:	0000ac00 	sll	s5,zero,0x10
      68:	00910500 	0x910500
      6c:	d0010000 	0xd0010000
      70:	000000ac 	0xac
      74:	0000001f 	0x1f
      78:	0000b705 	0xb705
      7c:	b3d00100 	0xb3d00100
      80:	32000000 	andi	zero,s0,0x0
      84:	06000000 	bltz	s0,88 <__Size_Of_SDRAM-0xa778>
      88:	00746572 	0x746572
      8c:	00acd201 	0xacd201
      90:	69060000 	udi2i	a2,t0,0
      94:	acd20100 	sw	s2,256(a2)
      98:	07000000 	bltz	t8,9c <__Size_Of_SDRAM-0xa764>
      9c:	00000096 	0x96
      a0:	000000d9 	0xd9
      a4:	3c030501 	lui	v1,0x501
      a8:	00a00252 	0xa00252
      ac:	69050408 	udi2i	a1,t0,1032
      b0:	0900746e 	j	401d1b8 <__Size_Of_SDRAM+0x40129b8>
      b4:	0000b904 	0xb904
      b8:	bf040900 	cache	0x4,2304(t8)
      bc:	03000000 	0x3000000
      c0:	00800601 	0x800601
      c4:	bf0a0000 	cache	0xa,0(t8)
      c8:	d6000000 	ldc1	$f0,0(s0)
      cc:	0b000000 	j	c000000 <__Size_Of_SDRAM+0xbff5800>
      d0:	000000d6 	0xd6
      d4:	040c0008 	0x40c0008
      d8:	00c60d07 	0xc60d07
      dc:	9f0e0000 	0x9f0e0000
      e0:	01000000 	0x1000000
      e4:	00002528 	0x2528
      e8:	03050100 	0x3050100
      ec:	a0025ac0 	sb	v0,23232(zero)
      f0:	000fb200 	sll	s6,t7,0x8
      f4:	b5000200 	0xb5000200
      f8:	04000000 	bltz	zero,fc <__Size_Of_SDRAM-0xa704>
      fc:	00008501 	0x8501
     100:	015e0100 	0x15e0100
     104:	001c0000 	sll	zero,gp,0x0
     108:	02140000 	0x2140000
     10c:	17fca002 	bne	ra,gp,fffe8118 <__heap_start_addr+0x5ffbe4c8>
     110:	0099a002 	0x99a002
     114:	01020000 	0x1020000
     118:	00007708 	0x7708
     11c:	06010200 	bgez	s0,920 <__Size_Of_SDRAM-0x9ee0>
     120:	00000079 	0x79
     124:	09070202 	j	41c0808 <__Size_Of_SDRAM+0x41b6008>
     128:	02000000 	0x2000000
     12c:	01cd0502 	0x1cd0502
     130:	9d030000 	0x9d030000
     134:	03000001 	movf	zero,t8,$fcc0
     138:	00004cb4 	0x4cb4
     13c:	07040200 	0x7040200
     140:	0000005f 	0x5f
     144:	69050404 	udi2i	a1,t0,1028
     148:	0200746e 	0x200746e
     14c:	00550708 	0x550708
     150:	08020000 	j	80000 <__Size_Of_SDRAM+0x75800>
     154:	0000e905 	0xe905
     158:	07040200 	0x7040200
     15c:	0000005a 	0x5a
     160:	0001f105 	0x1f105
     164:	02020c00 	0x2020c00
     168:	0000a708 	0xa708
     16c:	018b0600 	0x18b0600
     170:	09020000 	j	4080000 <__Size_Of_SDRAM+0x4075800>
     174:	00000053 	0x53
     178:	06002302 	bltz	s0,8d84 <__Size_Of_SDRAM-0x1a7c>
     17c:	00000111 	0x111
     180:	00530a02 	0x530a02
     184:	23020000 	addi	v0,t8,0
     188:	012e0604 	0x12e0604
     18c:	0b020000 	j	c080000 <__Size_Of_SDRAM+0xc075800>
     190:	000000a7 	0xa7
     194:	00082302 	srl	a0,t0,0xc
     198:	00004c07 	0x4c07
     19c:	0000b700 	sll	s6,zero,0x1c
     1a0:	00b70800 	0xb70800
     1a4:	00800000 	0x800000
     1a8:	0a070409 	j	81c1024 <__Size_Of_SDRAM+0x81b6824>
     1ac:	02004942 	0x2004942
     1b0:	00006f0c 	syscall	0x1bc
     1b4:	43010b00 	c0	0x1010b00
     1b8:	0100706d 	0x100706d
     1bc:	005301cf 	0x5301cf
     1c0:	f2010000 	madh	s0,at
     1c4:	0c000000 	jal	0 <__Size_Of_SDRAM-0xa800>
     1c8:	cf010041 	lwc3	$1,65(t8)
     1cc:	000000f2 	0xf2
     1d0:	0100420c 	syscall	0x40108
     1d4:	0000f2cf 	0xf2cf
     1d8:	00690d00 	0x690d00
     1dc:	0053d101 	0x53d101
     1e0:	0e000000 	jal	8000000 <__Size_Of_SDRAM+0x7ff5800>
     1e4:	0000ba04 	0xba04
     1e8:	f7010f00 	sdc1	$f1,3840(t8)
     1ec:	01000000 	0x1000000
     1f0:	014a015f 	0x14a015f
     1f4:	4a010000 	c2	0x10000
     1f8:	0c000001 	jal	4 <__Size_Of_SDRAM-0xa7fc>
     1fc:	0074756f 	0x74756f
     200:	014a5f01 	0x14a5f01
     204:	690c0000 	udi2i	t4,t0,0
     208:	5f01006e 	0x5f01006e
     20c:	0000014c 	syscall	0x5
     210:	00039a10 	0x39a10
     214:	4c5f0100 	0x4c5f0100
     218:	0d000000 	jal	4000000 <__Size_Of_SDRAM+0x3ff5800>
     21c:	61010069 	udi0i	at,t0,105
     220:	0000004c 	syscall	0x1
     224:	7365640d 	0x7365640d
     228:	53620100 	0x53620100
     22c:	0d000001 	jal	4000004 <__Size_Of_SDRAM+0x3ff5804>
     230:	00636f73 	0x636f73
     234:	01536301 	0x1536301
     238:	11000000 	beqz	t0,23c <__Size_Of_SDRAM-0xa5c4>
     23c:	52040e04 	0x52040e04
     240:	12000001 	beqz	s0,248 <__Size_Of_SDRAM-0xa5b8>
     244:	0025040e 	0x25040e
     248:	f8130000 	0xf8130000
     24c:	14000000 	bnez	zero,250 <__Size_Of_SDRAM-0xa5b0>
     250:	44a00202 	0x44a00202
     254:	01a00202 	0x1a00202
     258:	0001956d 	0x1956d
     25c:	010a1400 	0x10a1400
     260:	00450000 	0x450000
     264:	15150000 	bne	t0,s5,268 <__Size_Of_SDRAM-0xa598>
     268:	01000001 	movf	zero,t0,$fcc0
     26c:	011f1555 	0x11f1555
     270:	56010000 	0x56010000
     274:	00012a16 	0x12a16
     278:	17530100 	bne	k0,s3,67c <__Size_Of_SDRAM-0xa184>
     27c:	00000133 	0x133
     280:	00013e17 	0x13e17
     284:	c4130000 	lwc1	$f19,0(zero)
     288:	44000000 	mfc1	zero,$f0
     28c:	f0a00202 	0xf0a00202
     290:	01a00202 	0x1a00202
     294:	0001c46d 	0x1c46d
     298:	00d61400 	0xd61400
     29c:	006e0000 	0x6e0000
     2a0:	df140000 	0xdf140000
     2a4:	8c000000 	lw	zero,0(zero)
     2a8:	18000000 	blez	zero,2ac <__Size_Of_SDRAM-0xa554>
     2ac:	000000e8 	0xe8
     2b0:	000000aa 	0xaa
     2b4:	0a011900 	j	8046400 <__Size_Of_SDRAM+0x803bc00>
     2b8:	01000001 	movf	zero,t0,$fcc0
     2bc:	005301dd 	0x5301dd
     2c0:	02f00000 	0x2f00000
     2c4:	0314a002 	0x314a002
     2c8:	6d01a002 	udi3i	at,t0,-24574
     2cc:	000001eb 	0x1eb
     2d0:	0100411a 	0x100411a
     2d4:	0000f2dd 	0xf2dd
     2d8:	00540100 	0x540100
     2dc:	01d7011b 	0x1d7011b
     2e0:	6a010000 	udi2i	at,s0,0
     2e4:	00f20101 	0xf20101
     2e8:	03140000 	0x3140000
     2ec:	03f0a002 	0x3f0a002
     2f0:	6d01a002 	udi3i	at,t0,-24574
     2f4:	00000248 	0x248
     2f8:	0100411c 	0x100411c
     2fc:	00f2016a 	0xf2016a
     300:	00c80000 	0xc80000
     304:	621c0000 	udi0i	gp,s0,0
     308:	016a0100 	0x16a0100
     30c:	00000053 	0x53
     310:	000000f1 	0xf1
     314:	0100691d 	0x100691d
     318:	0053016c 	0x53016c
     31c:	01250000 	0x1250000
     320:	701e0000 	mad	zero,s8
     324:	016d0100 	0x16d0100
     328:	000000f2 	0xf2
     32c:	6d756e1e 	udi3i	s5,t3,28190
     330:	016e0100 	0x16e0100
     334:	0000005a 	0x5a
     338:	10011b00 	beq	zero,at,6f3c <__Size_Of_SDRAM-0x38c4>
     33c:	01000002 	0x1000002
     340:	f201010b 	0xf201010b
     344:	f0000000 	madh	zero,zero
     348:	28a00203 	slti	zero,a1,515
     34c:	01a00204 	0x1a00204
     350:	0002a16d 	0x2a16d
     354:	00411c00 	0x411c00
     358:	f2010b01 	0xf2010b01
     35c:	43000000 	c0	0x1000000
     360:	1c000001 	bgtz	zero,368 <__Size_Of_SDRAM-0xa498>
     364:	0b010062 	j	c040188 <__Size_Of_SDRAM+0xc035988>
     368:	00005301 	0x5301
     36c:	00016100 	sll	t4,at,0x4
     370:	00691e00 	0x691e00
     374:	53010d01 	0x53010d01
     378:	1e000000 	bgtz	s0,37c <__Size_Of_SDRAM-0xa484>
     37c:	0e010070 	jal	80401c0 <__Size_Of_SDRAM+0x80359c0>
     380:	0000f201 	0xf201
     384:	75731e00 	jalx	5cc7800 <__Size_Of_SDRAM+0x5cbd000>
     388:	0f01006d 	jal	c0401b4 <__Size_Of_SDRAM+0xc0359b4>
     38c:	00005a01 	0x5a01
     390:	011b0000 	0x11b0000
     394:	0000017e 	0x17e
     398:	0101ec01 	0x101ec01
     39c:	000000f2 	0xf2
     3a0:	a0020428 	sb	v0,1064(zero)
     3a4:	a00204c8 	sb	v0,1224(zero)
     3a8:	030a6d01 	0x30a6d01
     3ac:	411c0000 	0x411c0000
     3b0:	01ec0100 	0x1ec0100
     3b4:	000000f2 	0xf2
     3b8:	0000017f 	0x17f
     3bc:	0100621f 	0x100621f
     3c0:	005301ec 	0x5301ec
     3c4:	55010000 	0x55010000
     3c8:	01006920 	0x1006920
     3cc:	005301ee 	0x5301ee
     3d0:	59010000 	0x59010000
     3d4:	0001bf21 	0x1bf21
     3d8:	01ef0100 	0x1ef0100
     3dc:	0000004c 	syscall	0x1
     3e0:	000001b3 	0x1b3
     3e4:	0100701e 	0x100701e
     3e8:	00f201f0 	0xf201f0
     3ec:	6d1e0000 	udi3i	s8,t0,0
     3f0:	01006c75 	0x1006c75
     3f4:	005a01f1 	0x5a01f1
     3f8:	22000000 	addi	zero,s0,0
     3fc:	0000bc01 	0xbc01
     400:	02410100 	0x2410100
     404:	0000f201 	0xf201
     408:	0204c800 	0x204c800
     40c:	0206a8a0 	0x206a8a0
     410:	0001d1a0 	0x1d1a0
     414:	00053000 	sll	a2,a1,0x0
     418:	00411c00 	0x411c00
     41c:	f2024101 	0xf2024101
     420:	f0000000 	madh	zero,zero
     424:	1c000001 	bgtz	zero,42c <__Size_Of_SDRAM-0xa3d4>
     428:	41010062 	bc0t	5b4 <__Size_Of_SDRAM-0xa24c>
     42c:	00005302 	srl	t2,zero,0xc
     430:	00022400 	sll	a0,v0,0x10
     434:	00691d00 	0x691d00
     438:	53024301 	0x53024301
     43c:	37000000 	ori	zero,t8,0x0
     440:	21000002 	addi	zero,t0,2
     444:	000001bf 	0x1bf
     448:	4c024401 	0x4c024401
     44c:	60000000 	udi0i	zero,zero,0
     450:	1e000002 	bgtz	s0,45c <__Size_Of_SDRAM-0xa3a4>
     454:	45010070 	bc1t	618 <__Size_Of_SDRAM-0xa1e8>
     458:	0000f202 	srl	s8,zero,0x8
     45c:	69641e00 	udi2i	a0,t3,7680
     460:	46010076 	c1	0x10076
     464:	00005a02 	srl	t3,zero,0x8
     468:	756d1e00 	jalx	5b47800 <__Size_Of_SDRAM+0x5b3d000>
     46c:	4601006c 	c1	0x1006c
     470:	00005a02 	srl	t3,zero,0x8
     474:	00002300 	sll	a0,zero,0xc
     478:	045b0000 	0x45b0000
     47c:	ce240000 	lwc3	$4,0(s1)
     480:	01000000 	0x1000000
     484:	005a0255 	0x5a0255
     488:	e4240000 	swc1	$f4,0(at)
     48c:	01000001 	movf	zero,t0,$fcc0
     490:	00680255 	0x680255
     494:	c8240000 	lwc2	$4,0(at)
     498:	01000000 	0x1000000
     49c:	005a0255 	0x5a0255
     4a0:	c5240000 	lwc1	$f4,0(t1)
     4a4:	01000001 	movf	zero,t0,$fcc0
     4a8:	00680255 	0x680255
     4ac:	c2240000 	ll	a0,0(s1)
     4b0:	01000000 	0x1000000
     4b4:	00680255 	0x680255
     4b8:	dd240000 	0xdd240000
     4bc:	01000001 	movf	zero,t0,$fcc0
     4c0:	00680255 	0x680255
     4c4:	84240000 	lh	a0,0(at)
     4c8:	01000001 	movf	zero,t0,$fcc0
     4cc:	00680255 	0x680255
     4d0:	38250000 	xori	a1,at,0x0
     4d4:	01000001 	movf	zero,t0,$fcc0
     4d8:	005a0255 	0x5a0255
     4dc:	5e060000 	0x5e060000
     4e0:	935f0493 	lbu	ra,1171(k0)
     4e4:	00282604 	0x282604
     4e8:	f9210000 	0xf9210000
     4ec:	01000001 	movf	zero,t0,$fcc0
     4f0:	00680255 	0x680255
     4f4:	027e0000 	0x27e0000
     4f8:	02210000 	0x2210000
     4fc:	01000001 	movf	zero,t0,$fcc0
     500:	00680255 	0x680255
     504:	029c0000 	0x29c0000
     508:	df210000 	0xdf210000
     50c:	01000000 	0x1000000
     510:	00680255 	0x680255
     514:	02ba0000 	0x2ba0000
     518:	38210000 	xori	at,at,0x0
     51c:	01000001 	movf	zero,t0,$fcc0
     520:	00680255 	0x680255
     524:	02d80000 	0x2d80000
     528:	ea210000 	swc2	$1,0(s1)
     52c:	01000001 	movf	zero,t0,$fcc0
     530:	00680255 	0x680255
     534:	03010000 	0x3010000
     538:	5f1d0000 	0x5f1d0000
     53c:	0100695f 	0x100695f
     540:	00680255 	0x680255
     544:	03350000 	0x3350000
     548:	00000000 	nop
     54c:	00005026 	xor	t2,zero,zero
     550:	00ce2400 	0xce2400
     554:	56010000 	0x56010000
     558:	00005a02 	srl	t3,zero,0x8
     55c:	01e42400 	0x1e42400
     560:	56010000 	0x56010000
     564:	00006802 	srl	t5,zero,0x0
     568:	00c82400 	0xc82400
     56c:	56010000 	0x56010000
     570:	00005a02 	srl	t3,zero,0x8
     574:	01c52100 	0x1c52100
     578:	56010000 	0x56010000
     57c:	00006802 	srl	t5,zero,0x0
     580:	00035e00 	sll	t3,v1,0x18
     584:	00c22400 	0xc22400
     588:	56010000 	0x56010000
     58c:	00006802 	srl	t5,zero,0x0
     590:	01dd2400 	0x1dd2400
     594:	56010000 	0x56010000
     598:	00006802 	srl	t5,zero,0x0
     59c:	01842400 	0x1842400
     5a0:	56010000 	0x56010000
     5a4:	00006802 	srl	t5,zero,0x0
     5a8:	01382400 	0x1382400
     5ac:	56010000 	0x56010000
     5b0:	00005a02 	srl	t3,zero,0x8
     5b4:	05602700 	bltz	t3,a1b8 <__Size_Of_SDRAM-0x648>
     5b8:	05b0a002 	bltzal	t5,fffe85c4 <__heap_start_addr+0x5ffbe974>
     5bc:	f921a002 	0xf921a002
     5c0:	01000001 	movf	zero,t0,$fcc0
     5c4:	00680256 	0x680256
     5c8:	037c0000 	0x37c0000
     5cc:	02210000 	0x2210000
     5d0:	01000001 	movf	zero,t0,$fcc0
     5d4:	00680256 	0x680256
     5d8:	03840000 	0x3840000
     5dc:	df210000 	0xdf210000
     5e0:	01000000 	0x1000000
     5e4:	00680256 	0x680256
     5e8:	03a20000 	0x3a20000
     5ec:	38210000 	xori	at,at,0x0
     5f0:	01000001 	movf	zero,t0,$fcc0
     5f4:	00680256 	0x680256
     5f8:	03c00000 	0x3c00000
     5fc:	ea210000 	swc2	$1,0(s1)
     600:	01000001 	movf	zero,t0,$fcc0
     604:	00680256 	0x680256
     608:	03e90000 	0x3e90000
     60c:	5f1d0000 	0x5f1d0000
     610:	0100695f 	0x100695f
     614:	00680256 	0x680256
     618:	04120000 	0x4120000
     61c:	00000000 	nop
     620:	28011b00 	slti	at,zero,6912
     624:	01000001 	movf	zero,t0,$fcc0
     628:	4c0102a9 	0x4c0102a9
     62c:	a8000000 	swl	zero,0(zero)
     630:	98a00206 	lwr	zero,518(a1)
     634:	01a00207 	0x1a00207
     638:	0006786d 	0x6786d
     63c:	00411c00 	0x411c00
     640:	f202a901 	0xf202a901
     644:	3b000000 	xori	zero,t8,0x0
     648:	1f000004 	bgtz	t8,65c <__Size_Of_SDRAM-0xa1a4>
     64c:	a9010062 	swl	at,98(t0)
     650:	00005302 	srl	t2,zero,0xc
     654:	1d550100 	0x1d550100
     658:	ab010069 	swl	at,105(t8)
     65c:	00005302 	srl	t2,zero,0xc
     660:	00045900 	sll	t3,a0,0x4
     664:	01bf2100 	0x1bf2100
     668:	ac010000 	sw	at,0(zero)
     66c:	00004c02 	srl	t1,zero,0x10
     670:	00047700 	sll	t6,a0,0x1c
     674:	69641e00 	udi2i	a0,t3,7680
     678:	ad010076 	sw	at,118(t0)
     67c:	00005a02 	srl	t3,zero,0x8
     680:	01592400 	0x1592400
     684:	ae010000 	sw	at,0(s0)
     688:	00005a02 	srl	t3,zero,0x8
     68c:	00702600 	0x702600
     690:	ce240000 	lwc3	$4,0(s1)
     694:	01000000 	0x1000000
     698:	005a02b7 	0x5a02b7
     69c:	e4240000 	swc1	$f4,0(at)
     6a0:	01000001 	movf	zero,t0,$fcc0
     6a4:	006802b7 	0x6802b7
     6a8:	c8240000 	lwc2	$4,0(at)
     6ac:	01000000 	0x1000000
     6b0:	005a02b7 	0x5a02b7
     6b4:	c5210000 	lwc1	$f1,0(t1)
     6b8:	01000001 	movf	zero,t0,$fcc0
     6bc:	006802b7 	0x6802b7
     6c0:	04ab0000 	0x4ab0000
     6c4:	c2240000 	ll	a0,0(s1)
     6c8:	01000000 	0x1000000
     6cc:	006802b7 	0x6802b7
     6d0:	dd240000 	0xdd240000
     6d4:	01000001 	movf	zero,t0,$fcc0
     6d8:	006802b7 	0x6802b7
     6dc:	84240000 	lh	a0,0(at)
     6e0:	01000001 	movf	zero,t0,$fcc0
     6e4:	006802b7 	0x6802b7
     6e8:	38250000 	xori	a1,at,0x0
     6ec:	01000001 	movf	zero,t0,$fcc0
     6f0:	005a02b7 	0x5a02b7
     6f4:	5a060000 	0x5a060000
     6f8:	935b0493 	lbu	k1,1171(k0)
     6fc:	06e42704 	0x6e42704
     700:	072ca002 	0x72ca002
     704:	f921a002 	0xf921a002
     708:	01000001 	movf	zero,t0,$fcc0
     70c:	006802b7 	0x6802b7
     710:	04c90000 	0x4c90000
     714:	02210000 	0x2210000
     718:	01000001 	movf	zero,t0,$fcc0
     71c:	006802b7 	0x6802b7
     720:	04dc0000 	0x4dc0000
     724:	df210000 	0xdf210000
     728:	01000000 	0x1000000
     72c:	006802b7 	0x6802b7
     730:	05050000 	0x5050000
     734:	38210000 	xori	at,at,0x0
     738:	01000001 	movf	zero,t0,$fcc0
     73c:	006802b7 	0x6802b7
     740:	05180000 	0x5180000
     744:	ea210000 	swc2	$1,0(s1)
     748:	01000001 	movf	zero,t0,$fcc0
     74c:	006802b7 	0x6802b7
     750:	05360000 	0x5360000
     754:	5f1d0000 	0x5f1d0000
     758:	0100695f 	0x100695f
     75c:	006802b7 	0x6802b7
     760:	05490000 	0x5490000
     764:	00000000 	nop
     768:	b2012800 	0xb2012800
     76c:	01000001 	movf	zero,t0,$fcc0
     770:	98010377 	lwr	at,887(zero)
     774:	5ca00207 	0x5ca00207
     778:	01a00208 	0x1a00208
     77c:	0006cb6d 	0x6cb6d
     780:	00411c00 	0x411c00
     784:	f2037701 	0xf2037701
     788:	5c000000 	0x5c000000
     78c:	29000005 	slti	zero,t0,5
     790:	00000cc1 	0xcc1
     794:	53037701 	0x53037701
     798:	01000001 	movf	zero,t0,$fcc0
     79c:	01682a55 	0x1682a55
     7a0:	77010000 	jalx	c040000 <__Size_Of_SDRAM+0xc035800>
     7a4:	0006cb03 	sra	t9,a2,0xc
     7a8:	00057a00 	sll	t7,a1,0x8
     7ac:	00691d00 	0x691d00
     7b0:	53037901 	0x53037901
     7b4:	a3000000 	sb	zero,0(t8)
     7b8:	00000005 	0x5
     7bc:	80060102 	lb	a2,258(zero)
     7c0:	28000000 	slti	zero,zero,0
     7c4:	0000d501 	0xd501
     7c8:	03a50100 	0x3a50100
     7cc:	02085c01 	0x2085c01
     7d0:	020890a0 	0x20890a0
     7d4:	066d01a0 	0x66d01a0
     7d8:	1f000007 	bgtz	t8,7f8 <__Size_Of_SDRAM-0xa008>
     7dc:	01006962 	0x1006962
     7e0:	00f203a5 	0xf203a5
     7e4:	54010000 	0x54010000
     7e8:	01006e1c 	0x1006e1c
     7ec:	005303a5 	0x5303a5
     7f0:	05c10000 	bgez	t6,7f4 <__Size_Of_SDRAM-0xa00c>
     7f4:	1b000000 	blez	t8,7f8 <__Size_Of_SDRAM-0xa008>
     7f8:	00011b01 	0x11b01
     7fc:	03b20100 	0x3b20100
     800:	00005301 	0x5301
     804:	02089000 	0x2089000
     808:	020914a0 	0x20914a0
     80c:	5e6d01a0 	0x5e6d01a0
     810:	1c000007 	bgtz	zero,830 <__Size_Of_SDRAM-0x9fd0>
     814:	01006962 	0x1006962
     818:	00f203b2 	0xf203b2
     81c:	05df0000 	0x5df0000
     820:	93210000 	lbu	at,0(t9)
     824:	01000001 	movf	zero,t0,$fcc0
     828:	004103b4 	0x4103b4
     82c:	05fd0000 	0x5fd0000
     830:	691d0000 	udi2i	sp,t0,0
     834:	03b50100 	0x3b50100
     838:	00000053 	0x53
     83c:	00000610 	0x610
     840:	01006a1d 	0x1006a1d
     844:	005303b5 	0x5303b5
     848:	06230000 	0x6230000
     84c:	1b000000 	blez	t8,850 <__Size_Of_SDRAM-0x9fb0>
     850:	0001a401 	0x1a401
     854:	03cc0100 	0x3cc0100
     858:	00005301 	0x5301
     85c:	02091400 	0x2091400
     860:	02094ca0 	0x2094ca0
     864:	966d01a0 	lhu	t5,416(s3)
     868:	1c000007 	bgtz	zero,888 <__Size_Of_SDRAM-0x9f78>
     86c:	01006962 	0x1006962
     870:	00f203cc 	syscall	0x3c80f
     874:	06410000 	bgez	s2,878 <__Size_Of_SDRAM-0x9f88>
     878:	6e1f0000 	udi3i	ra,s0,0
     87c:	03cc0100 	0x3cc0100
     880:	00000053 	0x53
     884:	2b005501 	slti	zero,t8,21761
     888:	62755301 	udi0i	s5,s3,21249
     88c:	01290100 	0x1290100
     890:	0000f201 	0xf201
     894:	02094c00 	0x2094c00
     898:	020af0a0 	0x20af0a0
     89c:	00065fa0 	0x65fa0
     8a0:	00086b00 	sll	t5,t0,0xc
     8a4:	00411c00 	0x411c00
     8a8:	f2012901 	0xf2012901
     8ac:	7e000000 	0x7e000000
     8b0:	1c000006 	bgtz	zero,8cc <__Size_Of_SDRAM-0x9f34>
     8b4:	29010042 	slti	at,t0,66
     8b8:	0000f201 	0xf201
     8bc:	0006c800 	sll	t9,a2,0x0
     8c0:	00691d00 	0x691d00
     8c4:	53012b01 	0x53012b01
     8c8:	07000000 	bltz	t8,8cc <__Size_Of_SDRAM-0x9f34>
     8cc:	1e000007 	bgtz	s0,8ec <__Size_Of_SDRAM-0x9f14>
     8d0:	00706d63 	0x706d63
     8d4:	53012b01 	0x53012b01
     8d8:	1d000000 	bgtz	t0,8dc <__Size_Of_SDRAM-0x9f24>
     8dc:	006e656c 	0x6e656c
     8e0:	53012b01 	0x53012b01
     8e4:	1a000000 	blez	s0,8e8 <__Size_Of_SDRAM-0x9f18>
     8e8:	21000007 	addi	zero,t0,7
     8ec:	000001bf 	0x1bf
     8f0:	53012b01 	0x53012b01
     8f4:	64000000 	udi1i	zero,zero,0
     8f8:	1e000007 	bgtz	s0,918 <__Size_Of_SDRAM-0x9ee8>
     8fc:	2c010070 	sltiu	at,zero,112
     900:	0000f201 	0xf201
     904:	756e1e00 	jalx	5b87800 <__Size_Of_SDRAM+0x5b7d000>
     908:	2d01006d 	sltiu	at,t0,109
     90c:	00005a01 	0x5a01
     910:	00731d00 	0x731d00
     914:	6b012e01 	udi2i	at,t8,11777
     918:	8d000008 	lw	zero,8(t0)
     91c:	1d000007 	bgtz	t0,93c <__Size_Of_SDRAM-0x9ec4>
     920:	2e010064 	sltiu	at,s0,100
     924:	00086b01 	0x86b01
     928:	0007c100 	sll	t8,a3,0x4
     92c:	00c42c00 	0xc42c00
     930:	09800000 	j	6000000 <__Size_Of_SDRAM+0x5ff5800>
     934:	0a14a002 	j	8528008 <__Size_Of_SDRAM+0x851d808>
     938:	3401a002 	li	at,0xa002
     93c:	01b12d01 	0x1b12d01
     940:	a82d0000 	swl	t5,0(at)
     944:	27000001 	addiu	zero,t8,1
     948:	a0020980 	sb	v0,2432(zero)
     94c:	a0020a14 	sb	v0,2580(zero)
     950:	0000e818 	0xe818
     954:	0007f500 	sll	s8,a3,0x14
     958:	00000000 	nop
     95c:	004c040e 	0x4c040e
     960:	012e0000 	0x12e0000
     964:	00646441 	0x646441
     968:	f201e501 	0xf201e501
     96c:	f0000000 	madh	zero,zero
     970:	c0a0020a 	ll	zero,522(a1)
     974:	01a0020b 	0x1a0020b
     978:	0008d76d 	0x8d76d
     97c:	00412f00 	0x412f00
     980:	00f2e501 	0xf2e501
     984:	08340000 	j	d00000 <__Size_Of_SDRAM+0xcf5800>
     988:	422f0000 	c0	0x2f0000
     98c:	f2e50100 	0xf2e50100
     990:	73000000 	mad	t8,zero
     994:	30000008 	andi	zero,zero,0x8
     998:	e7010069 	swc1	$f1,105(t8)
     99c:	00000053 	0x53
     9a0:	000008b2 	0x8b2
     9a4:	0001bf31 	0x1bf31
     9a8:	4ce80100 	0x4ce80100
     9ac:	c5000000 	lwc1	$f0,0(t0)
     9b0:	0d000008 	jal	4000020 <__Size_Of_SDRAM+0x3ff5820>
     9b4:	006d7573 	0x6d7573
     9b8:	005ae901 	0x5ae901
     9bc:	700d0000 	mad	zero,t5
     9c0:	f2ea0100 	0xf2ea0100
     9c4:	00000000 	nop
     9c8:	09ab0132 	j	6ac04c8 <__Size_Of_SDRAM+0x6ab5cc8>
     9cc:	6b010000 	udi2i	at,t8,0
     9d0:	000000f2 	0xf2
     9d4:	a0020bc0 	sb	v0,3008(zero)
     9d8:	a0020c08 	sb	v0,3080(zero)
     9dc:	000008f9 	0x8f9
     9e0:	00000901 	0x901
     9e4:	01007030 	0x1007030
     9e8:	0000f26d 	0xf26d
     9ec:	00091800 	sll	v1,t1,0x0
     9f0:	01220000 	0x1220000
     9f4:	0000013e 	0x13e
     9f8:	0102fd01 	0x102fd01
     9fc:	000000f2 	0xf2
     a00:	a0020c08 	sb	v0,3080(zero)
     a04:	a0020cd0 	sb	v0,3280(zero)
     a08:	00000936 	0x936
     a0c:	0000097c 	0x97c
     a10:	000cc12a 	0xcc12a
     a14:	02fd0100 	0x2fd0100
     a18:	00000153 	0x153
     a1c:	00000955 	0x955
     a20:	6e656c1c 	udi3i	a1,s3,27676
     a24:	02fd0100 	0x2fd0100
     a28:	00000053 	0x53
     a2c:	0000097e 	0x97e
     a30:	0100691d 	0x100691d
     a34:	005302ff 	0x5302ff
     a38:	099c0000 	j	6700000 <__Size_Of_SDRAM+0x66f5800>
     a3c:	70210000 	mad	at,at
     a40:	01000001 	movf	zero,t0,$fcc0
     a44:	005302ff 	0x5302ff
     a48:	09ba0000 	j	6e80000 <__Size_Of_SDRAM+0x6e75800>
     a4c:	9a210000 	lwr	at,0(s1)
     a50:	01000003 	0x1000003
     a54:	005302ff 	0x5302ff
     a58:	09e30000 	j	78c0000 <__Size_Of_SDRAM+0x78b5800>
     a5c:	701d0000 	mad	zero,sp
     a60:	03000100 	0x3000100
     a64:	000000f2 	0xf2
     a68:	00000a01 	0xa01
     a6c:	4c012200 	0x4c012200
     a70:	01000001 	movf	zero,t0,$fcc0
     a74:	f20102de 	0xf20102de
     a78:	d0000000 	0xd0000000
     a7c:	f4a0020c 	sdc1	$f0,524(a1)
     a80:	2aa0020d 	slti	zero,s5,525
     a84:	f500000a 	sdc1	$f0,10(t0)
     a88:	1c000009 	bgtz	zero,ab0 <__Size_Of_SDRAM-0x9d50>
     a8c:	00727473 	0x727473
     a90:	f502de01 	sdc1	$f2,-8703(t0)
     a94:	49000009 	bc2f	abc <__Size_Of_SDRAM-0x9d44>
     a98:	2a00000a 	slti	zero,s0,10
     a9c:	00000209 	0x209
     aa0:	fb02de01 	0xfb02de01
     aa4:	88000009 	lwl	zero,9(zero)
     aa8:	1d00000a 	bgtz	t0,ad4 <__Size_Of_SDRAM-0x9d2c>
     aac:	e0010069 	sc	at,105(zero)
     ab0:	00005302 	srl	t2,zero,0xc
     ab4:	000ab100 	sll	s6,t2,0x4
     ab8:	00631d00 	0x631d00
     abc:	5302e001 	0x5302e001
     ac0:	cf000000 	lwc3	$0,0(t8)
     ac4:	1d00000a 	bgtz	t0,af0 <__Size_Of_SDRAM-0x9d10>
     ac8:	006e656c 	0x6e656c
     acc:	5302e001 	0x5302e001
     ad0:	19000000 	blez	t0,ad4 <__Size_Of_SDRAM-0x9d2c>
     ad4:	1d00000b 	bgtz	t0,b04 <__Size_Of_SDRAM-0x9cfc>
     ad8:	e1010070 	sc	at,112(t0)
     adc:	0000f202 	srl	s8,zero,0x8
     ae0:	000b4d00 	sll	t1,t3,0x14
     ae4:	040e0000 	0x40e0000
     ae8:	000006cb 	0x6cb
     aec:	00004c33 	0x4c33
     af0:	4d012b00 	bc3t	b6f4 <__Size_Of_SDRAM+0xef4>
     af4:	01006c75 	0x1006c75
     af8:	f2010194 	0xf2010194
     afc:	f4000000 	sdc1	$f0,0(zero)
     b00:	e0a0020d 	sc	zero,525(a1)
     b04:	81a0020f 	lb	zero,527(t5)
     b08:	d600000b 	ldc1	$f0,11(s0)
     b0c:	1c00000a 	bgtz	zero,b38 <__Size_Of_SDRAM-0x9cc8>
     b10:	94010041 	lhu	at,65(zero)
     b14:	0000f201 	0xf201
     b18:	000ba000 	sll	s4,t3,0x0
     b1c:	00421c00 	0x421c00
     b20:	f2019401 	0xf2019401
     b24:	c9000000 	lwc2	$0,0(t0)
     b28:	1d00000b 	bgtz	t0,b58 <__Size_Of_SDRAM-0x9ca8>
     b2c:	96010069 	lhu	at,105(s0)
     b30:	00005301 	0x5301
     b34:	000bf200 	sll	s8,t3,0x8
     b38:	006a1d00 	0x6a1d00
     b3c:	53019601 	0x53019601
     b40:	10000000 	b	b44 <__Size_Of_SDRAM-0x9cbc>
     b44:	1d00000c 	bgtz	t0,b78 <__Size_Of_SDRAM-0x9c88>
     b48:	9601006b 	lhu	at,107(s0)
     b4c:	00005301 	0x5301
     b50:	000c4400 	sll	t0,t4,0x10
     b54:	00701d00 	0x701d00
     b58:	f2019701 	0xf2019701
     b5c:	57000000 	0x57000000
     b60:	1d00000c 	bgtz	t0,b94 <__Size_Of_SDRAM-0x9c6c>
     b64:	97010071 	lhu	at,113(t8)
     b68:	0000f201 	0xf201
     b6c:	000c8000 	sll	s0,t4,0x0
     b70:	756d1e00 	jalx	5b47800 <__Size_Of_SDRAM+0x5b3d000>
     b74:	9801006c 	lwr	at,108(zero)
     b78:	00005a01 	0x5a01
     b7c:	01bf2100 	0x1bf2100
     b80:	99010000 	lwr	at,0(t0)
     b84:	00004c01 	0x4c01
     b88:	000c9e00 	sll	s3,t4,0x18
     b8c:	00f83400 	0xf83400
     b90:	0f700000 	jal	dc00000 <__Size_Of_SDRAM+0xdbf5800>
     b94:	0088a002 	0x88a002
     b98:	e2010000 	sc	at,0(s0)
     b9c:	017c2d01 	0x17c2d01
     ba0:	752d0000 	jalx	4b40000 <__Size_Of_SDRAM+0x4b35800>
     ba4:	2d000001 	sltiu	zero,t0,1
     ba8:	0000016c 	0x16c
     bac:	0000a026 	xor	s4,zero,zero
     bb0:	012a1800 	0x12a1800
     bb4:	0cc70000 	jal	31c0000 <__Size_Of_SDRAM+0x31b5800>
     bb8:	33170000 	andi	s7,t8,0x0
     bbc:	17000001 	bnez	t8,bc4 <__Size_Of_SDRAM-0x9c3c>
     bc0:	0000013e 	0x13e
     bc4:	35000000 	ori	zero,t0,0x0
     bc8:	00020201 	0x20201
     bcc:	01990100 	0x1990100
     bd0:	000000f2 	0xf2
     bd4:	a0020fe0 	sb	v0,4064(zero)
     bd8:	a0021044 	sb	v0,4164(zero)
     bdc:	00000cda 	0xcda
     be0:	00000b0e 	0xb0e
     be4:	0100622f 	0x100622f
     be8:	00005a99 	0x5a99
     bec:	000cf900 	sll	ra,t4,0x4
     bf0:	00703000 	0x703000
     bf4:	00f29c01 	0xf29c01
     bf8:	0d310000 	jal	4c40000 <__Size_Of_SDRAM+0x4c35800>
     bfc:	2b000000 	slti	zero,t8,0
     c00:	646f4d01 	udi1i	t7,v1,19713
     c04:	02610100 	0x2610100
     c08:	0000f201 	0xf201
     c0c:	02104400 	0x2104400
     c10:	021350a0 	0x21350a0
     c14:	000d5aa0 	0xd5aa0
     c18:	000ce700 	sll	gp,t4,0x1c
     c1c:	00411c00 	0x411c00
     c20:	f2026101 	0xf2026101
     c24:	79000000 	0x79000000
     c28:	1c00000d 	bgtz	zero,c60 <__Size_Of_SDRAM-0x9ba0>
     c2c:	61010042 	udi0i	at,t0,66
     c30:	0000f202 	srl	s8,zero,0x8
     c34:	000dad00 	sll	s5,t5,0x14
     c38:	00691d00 	0x691d00
     c3c:	53026301 	0x53026301
     c40:	ec000000 	swc3	$0,0(zero)
     c44:	1d00000d 	bgtz	t0,c7c <__Size_Of_SDRAM-0x9b84>
     c48:	006e656c 	0x6e656c
     c4c:	53026301 	0x53026301
     c50:	ff000000 	0xff000000
     c54:	2400000d 	li	zero,13
     c58:	000001bf 	0x1bf
     c5c:	4c026401 	0x4c026401
     c60:	1d000000 	bgtz	t0,c64 <__Size_Of_SDRAM-0x9b9c>
     c64:	65010070 	udi1i	at,t0,112
     c68:	0000f202 	srl	s8,zero,0x8
     c6c:	000e3300 	sll	a2,t6,0xc
     c70:	00711d00 	0x711d00
     c74:	f2026501 	0xf2026501
     c78:	51000000 	0x51000000
     c7c:	1e00000e 	bgtz	s0,cb8 <__Size_Of_SDRAM-0x9b48>
     c80:	006d756e 	0x6d756e
     c84:	5a026601 	0x5a026601
     c88:	1d000000 	bgtz	t0,c8c <__Size_Of_SDRAM-0x9b74>
     c8c:	00766964 	0x766964
     c90:	5a026601 	0x5a026601
     c94:	64000000 	udi1i	zero,zero,0
     c98:	3600000e 	ori	zero,s0,0xe
     c9c:	000000c4 	0xc4
     ca0:	a0021070 	sb	v0,4208(zero)
     ca4:	000000b8 	0xb8
     ca8:	d8026c01 	0xd8026c01
     cac:	2d00000b 	sltiu	zero,t0,11
     cb0:	000001b1 	0x1b1
     cb4:	0001a82d 	0x1a82d
     cb8:	00d82600 	0xd82600
     cbc:	e8180000 	swc2	$24,0(zero)
     cc0:	8c000000 	lw	zero,0(zero)
     cc4:	0000000e 	0xe
     cc8:	00f82300 	0xf82300
     ccc:	0cb80000 	jal	2e00000 <__Size_Of_SDRAM+0x2df5800>
     cd0:	ce240000 	lwc3	$4,0(s1)
     cd4:	01000000 	0x1000000
     cd8:	005a0281 	0x5a0281
     cdc:	e4240000 	swc1	$f4,0(at)
     ce0:	01000001 	movf	zero,t0,$fcc0
     ce4:	00680281 	0x680281
     ce8:	c8240000 	lwc2	$4,0(at)
     cec:	01000000 	0x1000000
     cf0:	005a0281 	0x5a0281
     cf4:	c5210000 	lwc1	$f1,0(t1)
     cf8:	01000001 	movf	zero,t0,$fcc0
     cfc:	00680281 	0x680281
     d00:	0eec0000 	jal	bb00000 <__Size_Of_SDRAM+0xbaf5800>
     d04:	c2240000 	ll	a0,0(s1)
     d08:	01000000 	0x1000000
     d0c:	00680281 	0x680281
     d10:	dd240000 	0xdd240000
     d14:	01000001 	movf	zero,t0,$fcc0
     d18:	00680281 	0x680281
     d1c:	84210000 	lh	at,0(at)
     d20:	01000001 	movf	zero,t0,$fcc0
     d24:	00680281 	0x680281
     d28:	0f0a0000 	jal	c280000 <__Size_Of_SDRAM+0xc275800>
     d2c:	38210000 	xori	at,at,0x0
     d30:	01000001 	movf	zero,t0,$fcc0
     d34:	005a0281 	0x5a0281
     d38:	0f280000 	jal	ca00000 <__Size_Of_SDRAM+0xc9f5800>
     d3c:	d8270000 	0xd8270000
     d40:	1ca00211 	bgtz	a1,1588 <__Size_Of_SDRAM-0x9278>
     d44:	21a00212 	addi	zero,t5,530
     d48:	000001f9 	0x1f9
     d4c:	68028101 	udi2i	v0,zero,-32511
     d50:	52000000 	0x52000000
     d54:	2100000f 	addi	zero,t0,15
     d58:	00000102 	srl	zero,zero,0x4
     d5c:	68028101 	udi2i	v0,zero,-32511
     d60:	65000000 	udi1i	zero,t0,0
     d64:	2100000f 	addi	zero,t0,15
     d68:	000000df 	0xdf
     d6c:	68028101 	udi2i	v0,zero,-32511
     d70:	83000000 	lb	zero,0(t8)
     d74:	2100000f 	addi	zero,t0,15
     d78:	00000138 	0x138
     d7c:	68028101 	udi2i	v0,zero,-32511
     d80:	a1000000 	sb	zero,0(t0)
     d84:	2100000f 	addi	zero,t0,15
     d88:	000001ea 	0x1ea
     d8c:	68028101 	udi2i	v0,zero,-32511
     d90:	bf000000 	cache	0x0,0(t8)
     d94:	1d00000f 	bgtz	t0,dd4 <__Size_Of_SDRAM-0x9a2c>
     d98:	00695f5f 	0x695f5f
     d9c:	68028101 	udi2i	v0,zero,-32511
     da0:	dd000000 	0xdd000000
     da4:	0000000f 	sync
     da8:	00c42c00 	0xc42c00
     dac:	12dc0000 	beq	s6,gp,db0 <__Size_Of_SDRAM-0x9a50>
     db0:	1338a002 	beq	t9,t8,fffe8dbc <__heap_start_addr+0x5ffbf16c>
     db4:	a101a002 	sb	at,-24574(t0)
     db8:	01b12d02 	0x1b12d02
     dbc:	a82d0000 	swl	t5,0(at)
     dc0:	27000001 	addiu	zero,t8,1
     dc4:	a00212dc 	sb	v0,4828(zero)
     dc8:	a0021338 	sb	v0,4920(zero)
     dcc:	0000e818 	0xe818
     dd0:	000ffb00 	sll	ra,t7,0xc
     dd4:	00000000 	nop
     dd8:	6944012b 	udi2i	a0,t2,299
     ddc:	0a010076 	j	80401d8 <__Size_Of_SDRAM+0x80359d8>
     de0:	00f20102 	0xf20102
     de4:	13500000 	beq	k0,s0,de8 <__Size_Of_SDRAM-0x9a18>
     de8:	169ca002 	bne	s4,gp,fffe8df4 <__heap_start_addr+0x5ffbf1a4>
     dec:	1019a002 	beq	zero,t9,fffe8df8 <__heap_start_addr+0x5ffbf1a8>
     df0:	0ece0000 	jal	b380000 <__Size_Of_SDRAM+0xb375800>
     df4:	411c0000 	0x411c0000
     df8:	020a0100 	0x20a0100
     dfc:	000000f2 	0xf2
     e00:	00001038 	udi0	v0,zero,zero
     e04:	0100421c 	0x100421c
     e08:	00f2020a 	0xf2020a
     e0c:	10610000 	beq	v1,at,e10 <__Size_Of_SDRAM-0x99f0>
     e10:	691d0000 	udi2i	sp,t0,0
     e14:	020c0100 	0x20c0100
     e18:	00000053 	0x53
     e1c:	0000108a 	0x108a
     e20:	6e656c1d 	udi3i	a1,s3,27677
     e24:	020c0100 	0x20c0100
     e28:	00000053 	0x53
     e2c:	0000109d 	0x109d
     e30:	0100701d 	0x100701d
     e34:	00f2020d 	break	0xf2,0x8
     e38:	10d10000 	beq	a2,s1,e3c <__Size_Of_SDRAM-0x99c4>
     e3c:	711d0000 	mad	t0,sp
     e40:	020d0100 	0x20d0100
     e44:	000000f2 	0xf2
     e48:	000010ef 	0x10ef
     e4c:	0100721d 	0x100721d
     e50:	00f2020d 	break	0xf2,0x8
     e54:	11180000 	beq	t0,t8,e58 <__Size_Of_SDRAM-0x99a8>
     e58:	bf240000 	cache	0x4,0(t9)
     e5c:	01000001 	movf	zero,t0,$fcc0
     e60:	004c020e 	0x4c020e
     e64:	6e1e0000 	udi3i	s8,s0,0
     e68:	01006d75 	0x1006d75
     e6c:	005a020f 	0x5a020f
     e70:	641d0000 	udi1i	sp,zero,0
     e74:	01007669 	0x1007669
     e78:	005a020f 	0x5a020f
     e7c:	11360000 	beq	t1,s6,e80 <__Size_Of_SDRAM-0x9980>
     e80:	c4360000 	lwc1	$f22,0(at)
     e84:	98000000 	lwr	zero,0(zero)
     e88:	10a00213 	beqz	a1,16d8 <__Size_Of_SDRAM-0x9128>
     e8c:	01000001 	movf	zero,t0,$fcc0
     e90:	0dbf0216 	jal	6fc0858 <__Size_Of_SDRAM+0x6fb6058>
     e94:	b12d0000 	0xb12d0000
     e98:	2d000001 	sltiu	zero,t0,1
     e9c:	000001a8 	0x1a8
     ea0:	00013026 	xor	a2,zero,at
     ea4:	00e81800 	0xe81800
     ea8:	115e0000 	beq	t2,s8,eac <__Size_Of_SDRAM-0x9954>
     eac:	00000000 	nop
     eb0:	00015023 	negu	t2,at
     eb4:	000e9f00 	sll	s3,t6,0x1c
     eb8:	00ce2400 	0xce2400
     ebc:	26010000 	addiu	at,s0,0
     ec0:	00005a02 	srl	t3,zero,0x8
     ec4:	01e42400 	0x1e42400
     ec8:	26010000 	addiu	at,s0,0
     ecc:	00006802 	srl	t5,zero,0x0
     ed0:	00c82400 	0xc82400
     ed4:	26010000 	addiu	at,s0,0
     ed8:	00005a02 	srl	t3,zero,0x8
     edc:	01c52100 	0x1c52100
     ee0:	26010000 	addiu	at,s0,0
     ee4:	00006802 	srl	t5,zero,0x0
     ee8:	0011be00 	sll	s7,s1,0x18
     eec:	00c22400 	0xc22400
     ef0:	26010000 	addiu	at,s0,0
     ef4:	00006802 	srl	t5,zero,0x0
     ef8:	01dd2400 	0x1dd2400
     efc:	26010000 	addiu	at,s0,0
     f00:	00006802 	srl	t5,zero,0x0
     f04:	01842100 	0x1842100
     f08:	26010000 	addiu	at,s0,0
     f0c:	00006802 	srl	t5,zero,0x0
     f10:	0011dc00 	sll	k1,s1,0x10
     f14:	01382100 	0x1382100
     f18:	26010000 	addiu	at,s0,0
     f1c:	00005a02 	srl	t3,zero,0x8
     f20:	0011fa00 	sll	ra,s1,0x8
     f24:	15282700 	bne	t1,t0,ab28 <__Size_Of_SDRAM+0x328>
     f28:	156ca002 	bne	t3,t4,fffe8f34 <__heap_start_addr+0x5ffbf2e4>
     f2c:	f921a002 	0xf921a002
     f30:	01000001 	movf	zero,t0,$fcc0
     f34:	00680226 	0x680226
     f38:	12240000 	beq	s1,a0,f3c <__Size_Of_SDRAM-0x98c4>
     f3c:	02210000 	0x2210000
     f40:	01000001 	movf	zero,t0,$fcc0
     f44:	00680226 	0x680226
     f48:	12370000 	beq	s1,s7,f4c <__Size_Of_SDRAM-0x98b4>
     f4c:	df210000 	0xdf210000
     f50:	01000000 	0x1000000
     f54:	00680226 	0x680226
     f58:	12550000 	beq	s2,s5,f5c <__Size_Of_SDRAM-0x98a4>
     f5c:	38210000 	xori	at,at,0x0
     f60:	01000001 	movf	zero,t0,$fcc0
     f64:	00680226 	0x680226
     f68:	12730000 	beq	s3,s3,f6c <__Size_Of_SDRAM-0x9894>
     f6c:	ea210000 	swc2	$1,0(s1)
     f70:	01000001 	movf	zero,t0,$fcc0
     f74:	00680226 	0x680226
     f78:	12910000 	beq	s4,s1,f7c <__Size_Of_SDRAM-0x9884>
     f7c:	5f1d0000 	0x5f1d0000
     f80:	0100695f 	0x100695f
     f84:	00680226 	0x680226
     f88:	12af0000 	beq	s5,t7,f8c <__Size_Of_SDRAM-0x9874>
     f8c:	00000000 	nop
     f90:	0000c42c 	0xc42c
     f94:	02162c00 	0x2162c00
     f98:	021688a0 	0x21688a0
     f9c:	023a01a0 	0x23a01a0
     fa0:	0001b12d 	0x1b12d
     fa4:	01a82d00 	0x1a82d00
     fa8:	2c270000 	sltiu	a3,at,0
     fac:	88a00216 	lwl	zero,534(a1)
     fb0:	18a00216 	blez	a1,180c <__Size_Of_SDRAM-0x8ff4>
     fb4:	000000e8 	0xe8
     fb8:	000012cd 	break	0x0,0x4b
     fbc:	35000000 	ori	zero,t0,0x0
     fc0:	0000e401 	0xe401
     fc4:	017c0100 	0x17c0100
     fc8:	000000f2 	0xf2
     fcc:	a002169c 	sb	v0,5788(zero)
     fd0:	a00216e8 	sb	v0,5864(zero)
     fd4:	000012eb 	0x12eb
     fd8:	00000f40 	sll	at,zero,0x1d
     fdc:	0100412f 	0x100412f
     fe0:	0000f27c 	0xf27c
     fe4:	00130a00 	sll	at,s3,0x8
     fe8:	00703000 	0x703000
     fec:	00f27f01 	0xf27f01
     ff0:	13280000 	beq	t9,t0,ff4 <__Size_Of_SDRAM-0x980c>
     ff4:	f8370000 	0xf8370000
     ff8:	bc000000 	cache	0x0,0(zero)
     ffc:	d8a00216 	0xd8a00216
    1000:	01a00216 	0x1a00216
    1004:	017c2d86 	0x17c2d86
    1008:	752d0000 	jalx	4b40000 <__Size_Of_SDRAM+0x4b35800>
    100c:	2d000001 	sltiu	zero,t0,1
    1010:	0000016c 	0x16c
    1014:	0216bc27 	0x216bc27
    1018:	0216d8a0 	0x216d8a0
    101c:	012a16a0 	0x12a16a0
    1020:	53010000 	0x53010000
    1024:	00013317 	0x13317
    1028:	013e1700 	0x13e1700
    102c:	00000000 	nop
    1030:	76013800 	jalx	804e000 <__Size_Of_SDRAM+0x8043800>
    1034:	01000001 	movf	zero,t0,$fcc0
    1038:	f20102be 	0xf20102be
    103c:	e8000000 	swc2	$0,0(zero)
    1040:	fca00216 	0xfca00216
    1044:	3ba00217 	xori	zero,sp,0x217
    1048:	2a000013 	slti	zero,s0,19
    104c:	00000186 	0x186
    1050:	f202be01 	0xf202be01
    1054:	5a000000 	0x5a000000
    1058:	1c000013 	bgtz	zero,10a8 <__Size_Of_SDRAM-0x9758>
    105c:	00707865 	0x707865
    1060:	f202be01 	0xf202be01
    1064:	78000000 	0x78000000
    1068:	1c000013 	bgtz	zero,10b8 <__Size_Of_SDRAM-0x9748>
    106c:	00646f6d 	0x646f6d
    1070:	f202be01 	0xf202be01
    1074:	96000000 	lhu	zero,0(s0)
    1078:	1d000013 	bgtz	t0,10c8 <__Size_Of_SDRAM-0x9738>
    107c:	c0010078 	ll	at,120(zero)
    1080:	0000f202 	srl	s8,zero,0x8
    1084:	0013bf00 	sll	s7,s3,0x1c
    1088:	00791d00 	0x791d00
    108c:	f202c001 	0xf202c001
    1090:	dd000000 	0xdd000000
    1094:	1d000013 	bgtz	t0,10e4 <__Size_Of_SDRAM-0x971c>
    1098:	c001007a 	ll	at,122(zero)
    109c:	0000f202 	srl	s8,zero,0x8
    10a0:	00140600 	sll	zero,s4,0x18
    10a4:	1e000000 	bgtz	s0,10a8 <__Size_Of_SDRAM-0x9758>
    10a8:	02000009 	jalr	zero,s0
    10ac:	0003e000 	sll	gp,v1,0x0
    10b0:	85010400 	lh	at,1024(t0)
    10b4:	01000000 	0x1000000
    10b8:	0000036b 	0x36b
    10bc:	0000001c 	0x1c
    10c0:	a00217fc 	sb	v0,6140(zero)
    10c4:	a00221b4 	sb	v0,8628(zero)
    10c8:	00000467 	0x467
    10cc:	00038002 	srl	s0,v1,0x0
    10d0:	30b00200 	andi	s0,a1,0x200
    10d4:	03000000 	0x3000000
    10d8:	00770801 	0x770801
    10dc:	01030000 	0x1030000
    10e0:	00007906 	0x7906
    10e4:	07020300 	0x7020300
    10e8:	00000009 	jalr	zero,zero
    10ec:	cd050203 	lwc3	$5,515(t0)
    10f0:	02000001 	movf	zero,s0,$fcc0
    10f4:	0000019d 	0x19d
    10f8:	0057b402 	0x57b402
    10fc:	04030000 	0x4030000
    1100:	00005f07 	0x5f07
    1104:	05040400 	0x5040400
    1108:	00746e69 	0x746e69
    110c:	55070803 	0x55070803
    1110:	03000000 	0x3000000
    1114:	00e90508 	0xe90508
    1118:	04030000 	0x4030000
    111c:	00005a07 	0x5a07
    1120:	01f10500 	0x1f10500
    1124:	020c0000 	0x20c0000
    1128:	00b20803 	0xb20803
    112c:	8b060000 	lwl	a2,0(t8)
    1130:	03000001 	movf	zero,t8,$fcc0
    1134:	00005e09 	0x5e09
    1138:	00230200 	0x230200
    113c:	00011106 	0x11106
    1140:	5e0a0300 	0x5e0a0300
    1144:	02000000 	0x2000000
    1148:	2e060423 	sltiu	a2,s0,1059
    114c:	03000001 	movf	zero,t8,$fcc0
    1150:	0000b20b 	0xb20b
    1154:	08230200 	j	8c0800 <__Size_Of_SDRAM+0x8b6000>
    1158:	00570700 	0x570700
    115c:	00c20000 	0xc20000
    1160:	c2080000 	ll	t0,0(s0)
    1164:	80000000 	lb	zero,0(zero)
    1168:	07040900 	0x7040900
    116c:	0049420a 	0x49420a
    1170:	007a0c03 	0x7a0c03
    1174:	0d0b0000 	jal	42c0000 <__Size_Of_SDRAM+0x42b5800>
    1178:	01000003 	0x1000003
    117c:	0c0101e3 	jal	4078c <__Size_Of_SDRAM+0x35f8c>
    1180:	00000386 	0x386
    1184:	0101ca01 	0x101ca01
    1188:	00000125 	0x125
    118c:	000cc10d 	break	0xc,0x304
    1190:	25ca0100 	addiu	t2,t6,256
    1194:	0e000001 	jal	8000004 <__Size_Of_SDRAM+0x7ff5804>
    1198:	01006962 	0x1006962
    119c:	000127ca 	0x127ca
    11a0:	052d0d00 	0x52d0d00
    11a4:	ca010000 	lwc2	$1,0(s0)
    11a8:	00000025 	move	zero,zero
    11ac:	0100690f 	0x100690f
    11b0:	00005ecc 	syscall	0x17b
    11b4:	027a1000 	0x27a1000
    11b8:	cc010000 	lwc3	$1,0(zero)
    11bc:	0000005e 	0x5e
    11c0:	6765720f 	udi1i	a1,k1,29199
    11c4:	2dcd0100 	sltiu	t5,t6,256
    11c8:	00000001 	movf	zero,zero,$fcc0
    11cc:	04120411 	0x4120411
    11d0:	000000c5 	0xc5
    11d4:	00570412 	0x570412
    11d8:	560c0000 	0x560c0000
    11dc:	01000002 	0x1000002
    11e0:	4c0101de 	0x4c0101de
    11e4:	0d000001 	jal	4000004 <__Size_Of_SDRAM+0x3ff5804>
    11e8:	00000337 	0x337
    11ec:	0057de01 	0x57de01
    11f0:	0b000000 	j	c000000 <__Size_Of_SDRAM+0xbff5800>
    11f4:	00000292 	0x292
    11f8:	0101e801 	movt	sp,t0,$fcc0
    11fc:	0003a00c 	syscall	0xe80
    1200:	01af0100 	0x1af0100
    1204:	0001ab01 	0x1ab01
    1208:	0cc10d00 	jal	3043400 <__Size_Of_SDRAM+0x3038c00>
    120c:	af010000 	sw	at,0(t8)
    1210:	00000125 	0x125
    1214:	0069620e 	0x69620e
    1218:	0127af01 	0x127af01
    121c:	2d0d0000 	sltiu	t5,t0,0
    1220:	01000005 	0x1000005
    1224:	000025af 	0x25af
    1228:	00690f00 	0x690f00
    122c:	005eb101 	0x5eb101
    1230:	6a0f0000 	udi2i	t7,s0,0
    1234:	5eb10100 	0x5eb10100
    1238:	10000000 	b	123c <__Size_Of_SDRAM-0x95c4>
    123c:	0000027a 	0x27a
    1240:	005eb101 	0x5eb101
    1244:	720f0000 	mad	s0,t7
    1248:	01006765 	0x1006765
    124c:	00012db2 	0x12db2
    1250:	01130000 	0x1130000
    1254:	000003b9 	0x3b9
    1258:	01014d01 	0x1014d01
    125c:	000001e4 	0x1e4
    1260:	7473640e 	jalx	1cd9038 <__Size_Of_SDRAM+0x1cce838>
    1264:	254d0100 	addiu	t5,t2,256
    1268:	0e000001 	jal	8000004 <__Size_Of_SDRAM+0x7ff5804>
    126c:	00637273 	0x637273
    1270:	01254d01 	0x1254d01
    1274:	380d0000 	xori	t5,zero,0x0
    1278:	01000003 	0x1000003
    127c:	00004c4d 	break	0x0,0x131
    1280:	00690f00 	0x690f00
    1284:	004c4f01 	0x4c4f01
    1288:	14000000 	bnez	zero,128c <__Size_Of_SDRAM-0x9574>
    128c:	00024001 	0x24001
    1290:	01540100 	0x1540100
    1294:	0000005e 	0x5e
    1298:	00023301 	0x23301
    129c:	31730e00 	andi	s3,t3,0xe00
    12a0:	25540100 	addiu	s4,t2,256
    12a4:	0e000001 	jal	8000004 <__Size_Of_SDRAM+0x7ff5804>
    12a8:	01003273 	0x1003273
    12ac:	00012554 	0x12554
    12b0:	03380d00 	0x3380d00
    12b4:	54010000 	0x54010000
    12b8:	0000004c 	syscall	0x1
    12bc:	0100690f 	0x100690f
    12c0:	00004c56 	0x4c56
    12c4:	31700f00 	andi	s0,t3,0xf00
    12c8:	33570100 	andi	s7,k0,0x100
    12cc:	0f000002 	jal	c000008 <__Size_Of_SDRAM+0xbff5808>
    12d0:	01003270 	0x1003270
    12d4:	00023357 	0x23357
    12d8:	04120000 	0x4120000
    12dc:	00000239 	0x239
    12e0:	80060103 	lb	a2,259(zero)
    12e4:	15000000 	bnez	t0,12e8 <__Size_Of_SDRAM-0x9518>
    12e8:	000002f9 	0x2f9
    12ec:	01010101 	0x1010101
    12f0:	00029001 	0x29001
    12f4:	028d1600 	0x28d1600
    12f8:	01010000 	0x1010000
    12fc:	00012701 	0x12701
    1300:	32721700 	andi	s2,s3,0x1700
    1304:	01010100 	0x1010100
    1308:	00000127 	0x127
    130c:	01007817 	0x1007817
    1310:	01270101 	0x1270101
    1314:	79170000 	0x79170000
    1318:	01010100 	0x1010100
    131c:	00000127 	0x127
    1320:	01006d17 	0x1006d17
    1324:	01270101 	0x1270101
    1328:	37160000 	ori	s6,t8,0x0
    132c:	01000003 	0x1000003
    1330:	004c0101 	0x4c0101
    1334:	18000000 	blez	zero,1338 <__Size_Of_SDRAM-0x94c8>
    1338:	0003ae01 	0x3ae01
    133c:	01860100 	0x1860100
    1340:	022e0c01 	0x22e0c01
    1344:	ed010000 	swc3	$1,0(t0)
    1348:	02d90101 	0x2d90101
    134c:	8d0d0000 	lw	t5,0(t0)
    1350:	01000002 	0x1000002
    1354:	000127ed 	0x127ed
    1358:	00610e00 	0x610e00
    135c:	0127ed01 	0x127ed01
    1360:	620e0000 	udi0i	t6,s0,0
    1364:	27ed0100 	addiu	t5,ra,256
    1368:	0e000001 	jal	8000004 <__Size_Of_SDRAM+0x7ff5804>
    136c:	ed01006d 	swc3	$1,109(t0)
    1370:	00000127 	0x127
    1374:	0003370d 	break	0x3,0xdc
    1378:	4ced0100 	0x4ced0100
    137c:	00000000 	nop
    1380:	0001ab19 	0x1ab19
    1384:	0217fc00 	0x217fc00
    1388:	021830a0 	0x21830a0
    138c:	096d01a0 	j	5b40680 <__Size_Of_SDRAM+0x5b35e80>
    1390:	1a000003 	blez	s0,13a0 <__Size_Of_SDRAM-0x9460>
    1394:	000001b9 	0x1b9
    1398:	c41a5401 	lwc1	$f26,21505(zero)
    139c:	01000001 	movf	zero,t0,$fcc0
    13a0:	01cf1a55 	0x1cf1a55
    13a4:	56010000 	0x56010000
    13a8:	0001da1b 	0x1da1b
    13ac:	00520100 	0x520100
    13b0:	0001e419 	0x1e419
    13b4:	02183000 	0x2183000
    13b8:	021888a0 	0x21888a0
    13bc:	436d01a0 	c0	0x16d01a0
    13c0:	1a000003 	blez	s0,13d0 <__Size_Of_SDRAM-0x9430>
    13c4:	000001f6 	0x1f6
    13c8:	001a5401 	0x1a5401
    13cc:	01000002 	0x1000002
    13d0:	020a1a55 	0x20a1a55
    13d4:	56010000 	0x56010000
    13d8:	0002151b 	0x2151b
    13dc:	1c530100 	0x1c530100
    13e0:	0000021e 	0x21e
    13e4:	0002281c 	0x2281c
    13e8:	011d0000 	0x11d0000
    13ec:	00000347 	0x347
    13f0:	25016401 	addiu	at,t0,25601
    13f4:	88000001 	lwl	zero,1(zero)
    13f8:	fca00218 	0xfca00218
    13fc:	01a00218 	0x1a00218
    1400:	00037b6d 	0x37b6d
    1404:	03061e00 	0x3061e00
    1408:	64010000 	udi1i	at,zero,0
    140c:	0000004c 	syscall	0x1
    1410:	00001424 	0x1424
    1414:	0100701f 	0x100701f
    1418:	00012566 	0x12566
    141c:	00144d00 	sll	t1,s4,0x14
    1420:	01200000 	0x1200000
    1424:	0000032f 	0x32f
    1428:	fc017b01 	0xfc017b01
    142c:	34a00218 	ori	zero,a1,0x218
    1430:	01a00219 	0x1a00219
    1434:	0003a26d 	0x3a26d
    1438:	03061e00 	0x3061e00
    143c:	7b010000 	0x7b010000
    1440:	0000004c 	syscall	0x1
    1444:	00001460 	0x1460
    1448:	02902100 	0x2902100
    144c:	19340000 	0x19340000
    1450:	194ca002 	0x194ca002
    1454:	6d01a002 	udi3i	at,t0,-24574
    1458:	0282011d 	0x282011d
    145c:	8e010000 	lw	at,0(s0)
    1460:	00005e01 	0x5e01
    1464:	02194c00 	0x2194c00
    1468:	021984a0 	0x21984a0
    146c:	e96d01a0 	swc2	$13,416(t3)
    1470:	22000003 	addi	zero,s0,3
    1474:	00727473 	0x727473
    1478:	03e98e01 	0x3e98e01
    147c:	54010000 	0x54010000
    1480:	00039a23 	0x39a23
    1484:	5e900100 	0x5e900100
    1488:	7e000000 	0x7e000000
    148c:	00000014 	0x14
    1490:	03ef0412 	0x3ef0412
    1494:	39240000 	xori	a0,t1,0x0
    1498:	20000002 	addi	zero,zero,2
    149c:	00022301 	0x22301
    14a0:	01970100 	0x1970100
    14a4:	a0021984 	sb	v0,6532(zero)
    14a8:	a00219fc 	sb	v0,6652(zero)
    14ac:	04576d01 	0x4576d01
    14b0:	64220000 	udi1i	v0,at,0
    14b4:	01007473 	0x1007473
    14b8:	00012597 	0x12597
    14bc:	1e540100 	0x1e540100
    14c0:	000008ea 	0x8ea
    14c4:	00259701 	0x259701
    14c8:	14910000 	bne	a0,s1,14cc <__Size_Of_SDRAM-0x9334>
    14cc:	38250000 	xori	a1,at,0x0
    14d0:	01000003 	0x1000003
    14d4:	00004c97 	0x4c97
    14d8:	1f560100 	0x1f560100
    14dc:	99010069 	lwr	at,105(t0)
    14e0:	0000004c 	syscall	0x1
    14e4:	000014af 	0x14af
    14e8:	00016826 	xor	t5,zero,at
    14ec:	03592300 	0x3592300
    14f0:	9e010000 	0x9e010000
    14f4:	0000004c 	syscall	0x1
    14f8:	000014cd 	break	0x0,0x53
    14fc:	01270000 	0x1270000
    1500:	000002e2 	0x2e2
    1504:	01022a01 	0x1022a01
    1508:	00000057 	0x57
    150c:	a00219fc 	sb	v0,6652(zero)
    1510:	a0021ae4 	sb	v0,6884(zero)
    1514:	000014eb 	0x14eb
    1518:	0000052c 	0x52c
    151c:	72747028 	0x72747028
    1520:	022a0100 	0x22a0100
    1524:	00000233 	0x233
    1528:	0000150b 	0x150b
    152c:	0002a629 	0x2a629
    1530:	022c0100 	0x22c0100
    1534:	00000057 	0x57
    1538:	00001534 	0x1534
    153c:	0100692a 	0x100692a
    1540:	005e022d 	0x5e022d
    1544:	ae2b0000 	sw	t3,0(s1)
    1548:	01000002 	0x1000002
    154c:	053c022e 	0x53c022e
    1550:	91030000 	lbu	v1,0(t0)
    1554:	162b7e80 	bne	s1,t3,20f58 <__Size_Of_SDRAM+0x16758>
    1558:	01000002 	0x1000002
    155c:	05410232 	bgez	t2,1e28 <__Size_Of_SDRAM-0x89d8>
    1560:	91030000 	lbu	v1,0(t0)
    1564:	ab2c7e94 	swl	t4,32404(t9)
    1568:	70000001 	madu	zero,zero
    156c:	98a0021a 	lwr	zero,538(a1)
    1570:	01a0021a 	0x1a0021a
    1574:	04f2023a 	0x4f2023a
    1578:	fa2d0000 	0xfa2d0000
    157c:	2d000002 	sltiu	zero,t0,2
    1580:	000002f3 	0x2f3
    1584:	0002ec2d 	0x2ec2d
    1588:	1a702e00 	0x1a702e00
    158c:	1a98a002 	0x1a98a002
    1590:	da1ca002 	0xda1ca002
    1594:	00000001 	movf	zero,zero,$fcc0
    1598:	01e42f00 	0x1e42f00
    159c:	1a980000 	0x1a980000
    15a0:	0180a002 	0x180a002
    15a4:	3c010000 	lui	at,0x0
    15a8:	032a2d02 	0x32a2d02
    15ac:	232d0000 	addi	t5,t9,0
    15b0:	2d000003 	sltiu	zero,t0,3
    15b4:	0000031c 	0x31c
    15b8:	0001a026 	xor	s4,zero,at
    15bc:	02153000 	0x2153000
    15c0:	15520000 	bne	t2,s2,15c4 <__Size_Of_SDRAM-0x923c>
    15c4:	1e1c0000 	0x1e1c0000
    15c8:	1c000002 	bgtz	zero,15d4 <__Size_Of_SDRAM-0x922c>
    15cc:	00000228 	0x228
    15d0:	07000000 	bltz	t8,15d4 <__Size_Of_SDRAM-0x922c>
    15d4:	00000239 	0x239
    15d8:	0000053c 	0x53c
    15dc:	0000c208 	0xc208
    15e0:	24001200 	li	zero,4608
    15e4:	0000052c 	0x52c
    15e8:	00023907 	0x23907
    15ec:	00055100 	sll	t2,a1,0x4
    15f0:	00c20800 	0xc20800
    15f4:	00df0000 	0xdf0000
    15f8:	02660131 	0x2660131
    15fc:	45010000 	bc1t	1600 <__Size_Of_SDRAM-0x9200>
    1600:	01250102 	0x1250102
    1604:	1ae40000 	0x1ae40000
    1608:	1aeca002 	0x1aeca002
    160c:	6d01a002 	udi3i	at,t0,-24574
    1610:	033d0127 	0x33d0127
    1614:	13010000 	beq	t8,at,1618 <__Size_Of_SDRAM-0x91e8>
    1618:	01270101 	0x1270101
    161c:	1aec0000 	0x1aec0000
    1620:	1b38a002 	0x1b38a002
    1624:	1570a002 	bne	t3,s0,fffe9630 <__heap_start_addr+0x5ffbf9e0>
    1628:	05be0000 	0x5be0000
    162c:	6e280000 	udi3i	t0,s1,0
    1630:	01006d75 	0x1006d75
    1634:	00570113 	0x570113
    1638:	158f0000 	bne	t4,t7,163c <__Size_Of_SDRAM-0x91c4>
    163c:	69320000 	udi2i	s2,t1,0
    1640:	01150100 	0x1150100
    1644:	0000005e 	0x5e
    1648:	000015ad 	0x15ad
    164c:	01006a2a 	0x1006a2a
    1650:	005e0115 	0x5e0115
    1654:	70320000 	mad	at,s2
    1658:	01160100 	0x1160100
    165c:	00000127 	0x127
    1660:	000015c0 	sll	v0,zero,0x17
    1664:	029a1900 	0x29a1900
    1668:	1b380000 	0x1b380000
    166c:	1d60a002 	bgtz	t3,fffe9678 <__heap_start_addr+0x5ffbfa28>
    1670:	6d01a002 	udi3i	at,t0,-24574
    1674:	00000740 	sll	zero,zero,0x1d
    1678:	0002a733 	0x2a733
    167c:	0015d300 	sll	k0,s5,0xc
    1680:	02b23300 	0x2b23300
    1684:	15f10000 	bne	t7,s1,1688 <__Size_Of_SDRAM-0x9178>
    1688:	bb330000 	swr	s3,0(t9)
    168c:	25000002 	addiu	zero,t0,2
    1690:	1a000016 	blez	s0,16ec <__Size_Of_SDRAM-0x9114>
    1694:	000002c4 	0x2c4
    1698:	cd2d5701 	lwc3	$13,22273(t1)
    169c:	34000002 	li	zero,0x2
    16a0:	000000cf 	sync	0x3
    16a4:	a0021b38 	sb	v0,6968(zero)
    16a8:	a0021b54 	sb	v0,6996(zero)
    16ac:	d835ef01 	0xd835ef01
    16b0:	54000000 	0x54000000
    16b4:	c4a0021b 	lwc1	$f0,539(a1)
    16b8:	01a0021b 	0x1a0021b
    16bc:	000647f1 	0x647f1
    16c0:	00fa2d00 	0xfa2d00
    16c4:	f02d0000 	madh	at,t5
    16c8:	2d000000 	sltiu	zero,t0,0
    16cc:	000000e5 	0xe5
    16d0:	021b542e 	0x21b542e
    16d4:	021bc4a0 	0x21bc4a0
    16d8:	010530a0 	0x10530a0
    16dc:	164e0000 	bne	s2,t6,16e0 <__Size_Of_SDRAM-0x9120>
    16e0:	0e1c0000 	jal	8700000 <__Size_Of_SDRAM+0x86f5800>
    16e4:	1c000001 	bgtz	zero,16ec <__Size_Of_SDRAM-0x9114>
    16e8:	00000119 	0x119
    16ec:	d8350000 	0xd8350000
    16f0:	c4000000 	lwc1	$f0,0(zero)
    16f4:	34a0021b 	ori	zero,a1,0x21b
    16f8:	01a0021c 	0x1a0021c
    16fc:	000687f2 	0x687f2
    1700:	00fa2d00 	0xfa2d00
    1704:	f02d0000 	madh	at,t5
    1708:	2d000000 	sltiu	zero,t0,0
    170c:	000000e5 	0xe5
    1710:	021bc42e 	0x21bc42e
    1714:	021c34a0 	0x21c34a0
    1718:	010530a0 	0x10530a0
    171c:	16610000 	bne	s3,at,1720 <__Size_Of_SDRAM-0x90e0>
    1720:	0e1c0000 	jal	8700000 <__Size_Of_SDRAM+0x86f5800>
    1724:	1c000001 	bgtz	zero,172c <__Size_Of_SDRAM-0x90d4>
    1728:	00000119 	0x119
    172c:	d8350000 	0xd8350000
    1730:	34000000 	li	zero,0x0
    1734:	a4a0021c 	sh	zero,540(a1)
    1738:	01a0021c 	0x1a0021c
    173c:	0006c7f3 	0x6c7f3
    1740:	00fa2d00 	0xfa2d00
    1744:	f02d0000 	madh	at,t5
    1748:	2d000000 	sltiu	zero,t0,0
    174c:	000000e5 	0xe5
    1750:	021c342e 	0x21c342e
    1754:	021ca4a0 	0x21ca4a0
    1758:	010530a0 	0x10530a0
    175c:	167f0000 	bne	s3,ra,1760 <__Size_Of_SDRAM-0x90a0>
    1760:	0e1c0000 	jal	8700000 <__Size_Of_SDRAM+0x86f5800>
    1764:	1c000001 	bgtz	zero,176c <__Size_Of_SDRAM-0x9094>
    1768:	00000119 	0x119
    176c:	33360000 	andi	s6,t9,0x0
    1770:	a4000001 	sh	zero,1(zero)
    1774:	c0a0021c 	ll	zero,540(a1)
    1778:	01000001 	movf	zero,t0,$fcc0
    177c:	0006e0f5 	0x6e0f5
    1780:	01402d00 	0x1402d00
    1784:	37000000 	ori	zero,t8,0x0
    1788:	0000014c 	syscall	0x5
    178c:	a0021ca8 	sb	v0,7336(zero)
    1790:	000001d8 	0x1d8
    1794:	cf34f701 	lwc3	$20,-2303(t9)
    1798:	c0000000 	ll	zero,0(zero)
    179c:	e0a0021c 	sc	zero,540(a1)
    17a0:	01a0021c 	0x1a0021c
    17a4:	015538f9 	0x15538f9
    17a8:	1ce00000 	bgtz	a3,17ac <__Size_Of_SDRAM-0x9054>
    17ac:	1d60a002 	bgtz	t3,fffe97b8 <__heap_start_addr+0x5ffbfb68>
    17b0:	fb01a002 	0xfb01a002
    17b4:	0001772d 	0x1772d
    17b8:	01622d00 	0x1622d00
    17bc:	6d2d0000 	udi3i	t5,t1,0
    17c0:	2e000001 	sltiu	zero,s0,1
    17c4:	a0021ce0 	sb	v0,7392(zero)
    17c8:	a0021d60 	sb	v0,7520(zero)
    17cc:	00018230 	0x18230
    17d0:	00169d00 	sll	s3,s6,0x14
    17d4:	018b1c00 	0x18b1c00
    17d8:	9f1c0000 	0x9f1c0000
    17dc:	1c000001 	bgtz	zero,17e4 <__Size_Of_SDRAM-0x901c>
    17e0:	00000194 	0x194
    17e4:	27000000 	addiu	zero,t8,0
    17e8:	00024f01 	0x24f01
    17ec:	01280100 	0x1280100
    17f0:	00005701 	0x5701
    17f4:	021d6000 	0x21d6000
    17f8:	0221b4a0 	0x221b4a0
    17fc:	0016b0a0 	0x16b0a0
    1800:	0008e200 	sll	gp,t0,0x8
    1804:	706f2800 	0x706f2800
    1808:	01280100 	0x1280100
    180c:	00000030 	0x30
    1810:	000016d0 	0x16d0
    1814:	00037639 	0x37639
    1818:	01290100 	0x1290100
    181c:	000008e2 	0x8e2
    1820:	0000173b 	0x173b
    1824:	00035e39 	0x35e39
    1828:	012a0100 	0x12a0100
    182c:	000008e2 	0x8e2
    1830:	0000177a 	0x177a
    1834:	0002b639 	0x2b639
    1838:	012b0100 	0x12b0100
    183c:	000008e2 	0x8e2
    1840:	000017ae 	0x17ae
    1844:	67697332 	udi1i	t1,k1,29490
    1848:	012d0100 	0x12d0100
    184c:	00000127 	0x127
    1850:	000017d7 	0x17d7
    1854:	70786532 	0x70786532
    1858:	012d0100 	0x12d0100
    185c:	00000127 	0x127
    1860:	000017f5 	0x17f5
    1864:	646f6d32 	udi1i	t7,v1,27954
    1868:	012d0100 	0x12d0100
    186c:	00000127 	0x127
    1870:	0000181e 	0x181e
    1874:	00327232 	0x327232
    1878:	27012d01 	addiu	at,t8,11521
    187c:	47000001 	c1	0x1000001
    1880:	32000018 	andi	zero,s0,0x18
    1884:	00736572 	0x736572
    1888:	27012d01 	addiu	at,t8,11521
    188c:	70000001 	madu	zero,zero
    1890:	2a000018 	slti	zero,s0,24
    1894:	01003174 	0x1003174
    1898:	0057012e 	0x57012e
    189c:	742a0000 	jalx	a80000 <__Size_Of_SDRAM+0xa75800>
    18a0:	0100706d 	0x100706d
    18a4:	0057012e 	0x57012e
    18a8:	9a3a0000 	lwr	k0,0(s1)
    18ac:	01000003 	0x1000003
    18b0:	0057012e 	0x57012e
    18b4:	703a0000 	mad	at,k0
    18b8:	01000001 	movf	zero,t0,$fcc0
    18bc:	0057012e 	0x57012e
    18c0:	383a0000 	xori	k0,at,0x0
    18c4:	01000002 	0x1000002
    18c8:	08e7012f 	j	39c04bc <__Size_Of_SDRAM+0x39b5cbc>
    18cc:	da3a0000 	0xda3a0000
    18d0:	01000002 	0x1000002
    18d4:	08e70130 	j	39c04c0 <__Size_Of_SDRAM+0x39b5cc0>
    18d8:	51290000 	0x51290000
    18dc:	01000003 	0x1000003
    18e0:	08e70131 	j	39c04c4 <__Size_Of_SDRAM+0x39b5cc4>
    18e4:	188e0000 	0x188e0000
    18e8:	282b0000 	slti	t3,at,0
    18ec:	01000003 	0x1000003
    18f0:	08e70132 	j	39c04c8 <__Size_Of_SDRAM+0x39b5cc8>
    18f4:	8d020000 	lw	v0,0(t0)
    18f8:	02c22b14 	0x2c22b14
    18fc:	33010000 	andi	at,t8,0x0
    1900:	00003001 	movf	a2,zero,$fcc0
    1904:	108d0200 	beq	a0,t5,2108 <__Size_Of_SDRAM-0x86f8>
    1908:	01006932 	0x1006932
    190c:	005e0135 	0x5e0135
    1910:	18c20000 	0x18c20000
    1914:	402c0000 	0x402c0000
    1918:	5c000002 	0x5c000002
    191c:	84a0021f 	lh	zero,543(a1)
    1920:	01a0021f 	0x1a0021f
    1924:	08a20193 	j	288064c <__Size_Of_SDRAM+0x2875e4c>
    1928:	832d0000 	lb	t5,0(t9)
    192c:	2d000002 	sltiu	zero,t0,2
    1930:	00000279 	0x279
    1934:	00026f2d 	0x26f2d
    1938:	02652d00 	0x2652d00
    193c:	5a2d0000 	0x5a2d0000
    1940:	2d000002 	sltiu	zero,t0,2
    1944:	0000024e 	0x24e
    1948:	02903b00 	0x2903b00
    194c:	1fe40000 	0x1fe40000
    1950:	1ff8a002 	0x1ff8a002
    1954:	aa01a002 	swl	at,-24574(s0)
    1958:	02403c01 	0x2403c01
    195c:	20240000 	addi	a0,at,0
    1960:	204ca002 	addi	t4,v0,-24574
    1964:	9801a002 	lwr	at,-24574(zero)
    1968:	02832d01 	0x2832d01
    196c:	792d0000 	0x792d0000
    1970:	2d000002 	sltiu	zero,t0,2
    1974:	0000026f 	0x26f
    1978:	0002652d 	0x2652d
    197c:	025a2d00 	0x25a2d00
    1980:	4e2d0000 	c3	0x2d0000
    1984:	00000002 	srl	zero,zero,0x0
    1988:	00572400 	0x572400
    198c:	04120000 	0x4120000
    1990:	00000030 	0x30
    1994:	0003943d 	0x3943d
    1998:	4c3c0100 	0x4c3c0100
    199c:	05000000 	bltz	t0,19a0 <__Size_Of_SDRAM-0x8e60>
    19a0:	025bd003 	0x25bd003
    19a4:	02cc3da0 	0x2cc3da0
    19a8:	42010000 	c0	0x10000
    19ac:	0000004c 	syscall	0x1
    19b0:	5bd40305 	0x5bd40305
    19b4:	6e3ea002 	udi3i	s8,s1,-24574
    19b8:	01000002 	0x1000002
    19bc:	0008e730 	0x8e730
    19c0:	03050100 	0x3050100
    19c4:	a0025ac4 	sb	v0,23236(zero)
    19c8:	00004e00 	sll	t1,zero,0x18
    19cc:	47000200 	c1	0x1000200
    19d0:	04000007 	bltz	zero,19f0 <__Size_Of_SDRAM-0x8e10>
    19d4:	00008501 	0x8501
    19d8:	03c50100 	0x3c50100
    19dc:	001c0000 	sll	zero,gp,0x0
    19e0:	21b40000 	addi	s4,t5,0
    19e4:	21b4a002 	addi	s4,t5,-24574
    19e8:	0671a002 	bgezal	s3,fffe99f4 <__heap_start_addr+0x5ffbfda4>
    19ec:	38020000 	xori	v0,zero,0x0
    19f0:	35000000 	ori	zero,t0,0x0
    19f4:	03000000 	0x3000000
    19f8:	00000035 	0x35
    19fc:	040400ff 	0x40400ff
    1a00:	06010507 	bgez	s0,2e20 <__Size_Of_SDRAM-0x79e0>
    1a04:	00000080 	sll	zero,zero,0x2
    1a08:	0003cd06 	0x3cd06
    1a0c:	253f0100 	addiu	ra,t1,256
    1a10:	01000000 	0x1000000
    1a14:	5ac80305 	0x5ac80305
    1a18:	7a00a002 	0x7a00a002
    1a1c:	02000002 	0x2000002
    1a20:	00079200 	sll	s2,a3,0x8
    1a24:	85010400 	lh	at,1024(t0)
    1a28:	01000000 	0x1000000
    1a2c:	00000416 	0x416
    1a30:	0000001c 	0x1c
    1a34:	a00221b4 	sb	v0,8628(zero)
    1a38:	a0022a4c 	sb	v0,10828(zero)
    1a3c:	00000699 	0x699
    1a40:	00038002 	srl	s0,v1,0x0
    1a44:	30b00200 	andi	s0,a1,0x200
    1a48:	03000000 	0x3000000
    1a4c:	00770801 	0x770801
    1a50:	01030000 	0x1030000
    1a54:	00007906 	0x7906
    1a58:	07020300 	0x7020300
    1a5c:	00000009 	jalr	zero,zero
    1a60:	cd050203 	lwc3	$5,515(t0)
    1a64:	02000001 	movf	zero,s0,$fcc0
    1a68:	0000019d 	0x19d
    1a6c:	0057b402 	0x57b402
    1a70:	04030000 	0x4030000
    1a74:	00005f07 	0x5f07
    1a78:	05040400 	0x5040400
    1a7c:	00746e69 	0x746e69
    1a80:	55070803 	0x55070803
    1a84:	03000000 	0x3000000
    1a88:	00e90508 	0xe90508
    1a8c:	04030000 	0x4030000
    1a90:	00005a07 	0x5a07
    1a94:	04370200 	0x4370200
    1a98:	42030000 	c0	0x30000
    1a9c:	00000085 	0x85
    1aa0:	03db0405 	0x3db0405
    1aa4:	39020000 	xori	v0,t0,0x0
    1aa8:	03000004 	sllv	zero,zero,t8
    1aac:	00007a76 	0x7a76
    1ab0:	ed010600 	swc3	$1,1536(t0)
    1ab4:	01000003 	0x1000003
    1ab8:	005e0159 	0x5e0159
    1abc:	21b40000 	addi	s4,t5,0
    1ac0:	2a4ca002 	slti	t4,s2,-24574
    1ac4:	190ca002 	0x190ca002
    1ac8:	022c0000 	0x22c0000
    1acc:	20070000 	addi	a3,zero,0
    1ad0:	01000004 	sllv	zero,zero,t0
    1ad4:	00022c5a 	0x22c5a
    1ad8:	00192c00 	sll	a1,t9,0x10
    1adc:	04410700 	bgez	v0,36e0 <__Size_Of_SDRAM-0x7120>
    1ae0:	5b010000 	0x5b010000
    1ae4:	0000008b 	0x8b
    1ae8:	0000193f 	0x193f
    1aec:	000bb607 	0xbb607
    1af0:	405c0100 	0x405c0100
    1af4:	4f000002 	c3	0x1000002
    1af8:	0800001a 	j	68 <__Size_Of_SDRAM-0xa798>
    1afc:	00616370 	0x616370
    1b00:	02465d01 	0x2465d01
    1b04:	1ac50000 	0x1ac50000
    1b08:	66090000 	udi1i	t1,s0,0
    1b0c:	0100746d 	0x100746d
    1b10:	00024c5f 	0x24c5f
    1b14:	001b0f00 	sll	at,k1,0x1c
    1b18:	68630900 	udi2i	v1,v1,2304
    1b1c:	5e600100 	0x5e600100
    1b20:	dd000000 	0xdd000000
    1b24:	0900001b 	j	400006c <__Size_Of_SDRAM+0x3ff586c>
    1b28:	00746e63 	0x746e63
    1b2c:	005e6101 	0x5e6101
    1b30:	1c060000 	0x1c060000
    1b34:	6e090000 	udi3i	t1,s0,0
    1b38:	5e620100 	0x5e620100
    1b3c:	24000000 	li	zero,0
    1b40:	0900001c 	j	4000070 <__Size_Of_SDRAM+0x3ff5870>
    1b44:	63010074 	udi0i	at,t8,116
    1b48:	0000022c 	0x22c
    1b4c:	00001d76 	0x1d76
    1b50:	0004540a 	0x4540a
    1b54:	4c640100 	0x4c640100
    1b58:	f7000000 	sdc1	$f0,0(t8)
    1b5c:	0a00001d 	j	8000074 <__Size_Of_SDRAM+0x7ff5874>
    1b60:	00000186 	0x186
    1b64:	005e6501 	0x5e6501
    1b68:	1e8e0000 	0x1e8e0000
    1b6c:	2b0a0000 	slti	t2,t8,0
    1b70:	01000004 	sllv	zero,zero,t0
    1b74:	00005e66 	0x5e66
    1b78:	001f2500 	sll	a0,ra,0x14
    1b7c:	03f60b00 	0x3f60b00
    1b80:	67010000 	udi1i	at,t8,0
    1b84:	0000005e 	0x5e
    1b88:	0a308d02 	j	8c23408 <__Size_Of_SDRAM+0x8c18c08>
    1b8c:	00000425 	0x425
    1b90:	005e6801 	0x5e6801
    1b94:	1f380000 	0x1f380000
    1b98:	d40c0000 	ldc1	$f12,0(zero)
    1b9c:	01000003 	0x1000003
    1ba0:	00005e69 	0x5e69
    1ba4:	042c0a00 	0x42c0a00
    1ba8:	6a010000 	udi2i	at,s0,0
    1bac:	0000005e 	0x5e
    1bb0:	00001f6c 	0x1f6c
    1bb4:	0004030b 	0x4030b
    1bb8:	5e6b0100 	0x5e6b0100
    1bbc:	02000000 	0x2000000
    1bc0:	380a388d 	xori	t2,zero,0x388d
    1bc4:	01000003 	0x1000003
    1bc8:	00005e6c 	0x5e6c
    1bcc:	001fe200 	sll	gp,ra,0x8
    1bd0:	040a0a00 	0x40a0a00
    1bd4:	6d010000 	udi3i	at,t0,0
    1bd8:	0000005e 	0x5e
    1bdc:	00002016 	0x2016
    1be0:	00044f0b 	0x44f0b
    1be4:	326e0100 	andi	t6,s3,0x100
    1be8:	02000002 	0x2000002
    1bec:	fe0a348d 	0xfe0a348d
    1bf0:	01000003 	0x1000003
    1bf4:	00022c6f 	0x22c6f
    1bf8:	00205500 	0x205500
    1bfc:	75620d00 	jalx	5883400 <__Size_Of_SDRAM+0x5878c00>
    1c00:	70010066 	0x70010066
    1c04:	00000252 	0x252
    1c08:	7f809103 	0x7f809103
    1c0c:	0004310e 	0x4310e
    1c10:	0f8c0100 	jal	e300400 <__Size_Of_SDRAM+0xe2f5c00>
    1c14:	00000410 	0x410
    1c18:	3c013301 	lui	at,0x3301
    1c1c:	0fa00223 	jal	e80088c <__Size_Of_SDRAM+0xe7f608c>
    1c20:	00000446 	0x446
    1c24:	24011f01 	li	at,7937
    1c28:	10a00225 	beqz	a1,24c0 <__Size_Of_SDRAM-0x8340>
    1c2c:	0000044d 	break	0x0,0x11
    1c30:	11011901 	beq	t0,at,8038 <__Size_Of_SDRAM-0x27c8>
    1c34:	a0022590 	sb	v0,9616(zero)
    1c38:	a00225b8 	sb	v0,9656(zero)
    1c3c:	01007012 	0x1007012
    1c40:	00022cfb 	0x22cfb
    1c44:	13000000 	beqz	t8,1c48 <__Size_Of_SDRAM-0x8bb8>
    1c48:	00023204 	0x23204
    1c4c:	06010300 	bgez	s0,2850 <__Size_Of_SDRAM-0x7fb0>
    1c50:	00000080 	sll	zero,zero,0x2
    1c54:	00024014 	0x24014
    1c58:	13001500 	beqz	t8,705c <__Size_Of_SDRAM-0x37a4>
    1c5c:	00023904 	0x23904
    1c60:	2c041300 	sltiu	a0,zero,4864
    1c64:	13000002 	beqz	t8,1c70 <__Size_Of_SDRAM-0x8b90>
    1c68:	00002504 	0x2504
    1c6c:	02321600 	0x2321600
    1c70:	02620000 	0x2620000
    1c74:	62170000 	udi0i	s7,s0,0
    1c78:	1f000002 	bgtz	t8,1c84 <__Size_Of_SDRAM-0x8b7c>
    1c7c:	07041800 	0x7041800
    1c80:	00023216 	0x23216
    1c84:	00027000 	sll	t6,v0,0x0
    1c88:	1a001900 	blez	s0,808c <__Size_Of_SDRAM-0x2774>
    1c8c:	000003cd 	break	0x0,0xf
    1c90:	02654804 	sllv	t1,a1,s3
    1c94:	01010000 	0x1010000
    1c98:	00006100 	sll	t4,zero,0x4
    1c9c:	d1000200 	0xd1000200
    1ca0:	04000008 	bltz	zero,1cc4 <__Size_Of_SDRAM-0x8b3c>
    1ca4:	00089101 	0x89101
    1ca8:	02000000 	0x2000000
    1cac:	020148a0 	0x20148a0
    1cb0:	616f6ca0 	udi0i	t7,t3,27808
    1cb4:	2e726564 	sltiu	s2,s3,25956
    1cb8:	682f0053 	udi2i	t7,at,83
    1cbc:	2f656d6f 	sltiu	a1,k1,28015
    1cc0:	78656c61 	0x78656c61
    1cc4:	6e2f686b 	udi3i	t7,s1,26731
    1cc8:	6b2f7366 	udi2i	t7,t9,29542
    1ccc:	656e7265 	udi1i	t6,t3,29285
    1cd0:	69732f6c 	udi2i	s3,t3,12140
    1cd4:	73756972 	0x73756972
    1cd8:	6f6f622f 	udi3i	t7,k1,25135
    1cdc:	646f6374 	udi1i	t7,v1,25460
    1ce0:	69522f65 	udi2i	s2,t2,12133
    1ce4:	70704173 	0x70704173
    1ce8:	6372732f 	udi0i	s2,k1,29487
    1cec:	554e4700 	0x554e4700
    1cf0:	20534120 	addi	s3,v0,16672
    1cf4:	39312e32 	xori	s1,t1,0x2e32
    1cf8:	0032392e 	0x32392e
    1cfc:	00ce8001 	0xce8001
    1d00:	00020000 	sll	zero,v0,0x0
    1d04:	000008e5 	0x8e5
    1d08:	00850104 	0x850104
    1d0c:	62010000 	udi0i	at,s0,0
    1d10:	1c000004 	bgtz	zero,1d24 <__Size_Of_SDRAM-0x8adc>
    1d14:	4c000000 	mfc3	zero,$0
    1d18:	80a0022a 	lb	zero,554(a1)
    1d1c:	ffa0022a 	0xffa0022a
    1d20:	02000008 	jr	s0
    1d24:	00770801 	0x770801
    1d28:	01020000 	0x1020000
    1d2c:	00007906 	0x7906
    1d30:	07020200 	0x7020200
    1d34:	00000009 	jalr	zero,zero
    1d38:	cd050202 	lwc3	$5,514(t0)
    1d3c:	02000001 	movf	zero,s0,$fcc0
    1d40:	005f0704 	0x5f0704
    1d44:	04030000 	0x4030000
    1d48:	746e6905 	jalx	1b9a414 <__Size_Of_SDRAM+0x1b8fc14>
    1d4c:	07080200 	0x7080200
    1d50:	00000055 	0x55
    1d54:	e9050802 	swc2	$5,2050(t0)
    1d58:	02000000 	0x2000000
    1d5c:	005a0704 	0x5a0704
    1d60:	5b040000 	0x5b040000
    1d64:	02000004 	sllv	zero,zero,s0
    1d68:	00005de2 	0x5de2
    1d6c:	6b010500 	udi2i	at,t8,1280
    1d70:	01000004 	sllv	zero,zero,t0
    1d74:	00bb013c 	0xbb013c
    1d78:	2a4c0000 	slti	t4,s2,0
    1d7c:	2a80a002 	slti	zero,s4,-24574
    1d80:	6d01a002 	udi3i	at,t0,-24574
    1d84:	000000bb 	0xbb
    1d88:	01007306 	0x1007306
    1d8c:	0000bd3d 	0xbd3d
    1d90:	00207300 	0x207300
    1d94:	00630700 	0x630700
    1d98:	00483e01 	0x483e01
    1d9c:	55010000 	0x55010000
    1da0:	01006e07 	0x1006e07
    1da4:	0000643f 	0x643f
    1da8:	08560100 	j	1580400 <__Size_Of_SDRAM+0x1575c00>
    1dac:	0073796d 	0x73796d
    1db0:	00c44101 	0xc44101
    1db4:	54010000 	0x54010000
    1db8:	0a040900 	j	8102400 <__Size_Of_SDRAM+0x80f7c00>
    1dbc:	0000c304 	0xc304
    1dc0:	040a0b00 	0x40a0b00
    1dc4:	000000ca 	0xca
    1dc8:	80060102 	lb	a2,258(zero)
    1dcc:	00000000 	nop
    1dd0:	00000299 	0x299
    1dd4:	09770002 	j	5dc0008 <__Size_Of_SDRAM+0x5db5808>
    1dd8:	01040000 	0x1040000
    1ddc:	00000085 	0x85
    1de0:	00047701 	0x47701
    1de4:	00001c00 	sll	v1,zero,0x10
    1de8:	022a8000 	0x22a8000
    1dec:	022d70a0 	0x22d70a0
    1df0:	000981a0 	0x981a0
    1df4:	08010200 	j	40800 <__Size_Of_SDRAM+0x36000>
    1df8:	00000077 	0x77
    1dfc:	79060102 	0x79060102
    1e00:	02000000 	0x2000000
    1e04:	00090702 	srl	zero,t1,0x1c
    1e08:	02020000 	0x2020000
    1e0c:	0001cd05 	0x1cd05
    1e10:	07040200 	0x7040200
    1e14:	0000005f 	0x5f
    1e18:	69050403 	udi2i	a1,t0,1027
    1e1c:	0200746e 	0x200746e
    1e20:	00550708 	0x550708
    1e24:	08020000 	j	80000 <__Size_Of_SDRAM+0x75800>
    1e28:	0000e905 	0xe905
    1e2c:	07040200 	0x7040200
    1e30:	0000005a 	0x5a
    1e34:	04960104 	0x4960104
    1e38:	32010000 	andi	at,s0,0x0
    1e3c:	00004801 	movf	t1,zero,$fcc0
    1e40:	00980100 	0x980100
    1e44:	72050000 	mad	s0,a1
    1e48:	01000004 	sllv	zero,zero,t0
    1e4c:	00009832 	0x9832
    1e50:	736d0600 	0x736d0600
    1e54:	32010062 	andi	at,s0,0x62
    1e58:	00000025 	move	zero,zero
    1e5c:	62736c06 	udi0i	s3,s3,27654
    1e60:	25320100 	addiu	s2,t1,256
    1e64:	00000000 	nop
    1e68:	00410407 	0x410407
    1e6c:	01080000 	0x1080000
    1e70:	000004ae 	0x4ae
    1e74:	80011c01 	lb	at,7169(zero)
    1e78:	88a0022a 	lwl	zero,554(a1)
    1e7c:	01a0022a 	0x1a0022a
    1e80:	0000cb6d 	0xcb6d
    1e84:	73750900 	0x73750900
    1e88:	411c0100 	0x411c0100
    1e8c:	01000000 	0x1000000
    1e90:	00690a54 	0x690a54
    1e94:	00481e01 	0x481e01
    1e98:	0b000000 	j	c000000 <__Size_Of_SDRAM+0xbff5800>
    1e9c:	00000064 	0x64
    1ea0:	a0022a88 	sb	v0,10888(zero)
    1ea4:	a0022ae0 	sb	v0,10976(zero)
    1ea8:	00f86d01 	0xf86d01
    1eac:	760c0000 	jalx	8300000 <__Size_Of_SDRAM+0x82f5800>
    1eb0:	01000000 	0x1000000
    1eb4:	00810d54 	0x810d54
    1eb8:	20910000 	addi	s1,a0,0
    1ebc:	8c0d0000 	lw	t5,0(zero)
    1ec0:	a4000000 	sh	zero,0(zero)
    1ec4:	00000020 	add	zero,zero,zero
    1ec8:	04b9010e 	0x4b9010e
    1ecc:	48010000 	mfc2	at,$0
    1ed0:	00004801 	movf	t1,zero,$fcc0
    1ed4:	022ae000 	0x22ae000
    1ed8:	022b34a0 	0x22b34a0
    1edc:	0020b7a0 	0x20b7a0
    1ee0:	00013400 	sll	a2,at,0x10
    1ee4:	04d10f00 	bgezal	a2,5ae8 <__Size_Of_SDRAM-0x4d18>
    1ee8:	49010000 	bc2t	1eec <__Size_Of_SDRAM-0x8914>
    1eec:	00000041 	0x41
    1ef0:	000020d6 	0x20d6
    1ef4:	0004720f 	0x4720f
    1ef8:	984a0100 	lwr	t2,256(v0)
    1efc:	0a000000 	j	8000000 <__Size_Of_SDRAM+0x7ff5800>
    1f00:	00000021 	move	zero,zero
    1f04:	0488010e 	0x488010e
    1f08:	63010000 	udi0i	at,t8,0
    1f0c:	00004801 	movf	t1,zero,$fcc0
    1f10:	022b3400 	0x22b3400
    1f14:	022bc0a0 	0x22bc0a0
    1f18:	00211da0 	0x211da0
    1f1c:	0001bc00 	sll	s7,at,0x10
    1f20:	04d10f00 	bgezal	a2,5b24 <__Size_Of_SDRAM-0x4cdc>
    1f24:	64010000 	udi1i	at,zero,0
    1f28:	00000041 	0x41
    1f2c:	0000213c 	0x213c
    1f30:	62736d10 	udi0i	s3,s3,27920
    1f34:	25650100 	addiu	a1,t3,256
    1f38:	4f000000 	c3	0x1000000
    1f3c:	10000021 	b	1fc4 <__Size_Of_SDRAM-0x883c>
    1f40:	0062736c 	0x62736c
    1f44:	00256601 	0x256601
    1f48:	21780000 	addi	t8,t3,0
    1f4c:	720f0000 	mad	s0,t7
    1f50:	01000004 	sllv	zero,zero,t0
    1f54:	00009867 	0x9867
    1f58:	0021a100 	0x21a100
    1f5c:	65721100 	udi1i	s2,t3,4352
    1f60:	6a010074 	udi2i	at,s0,116
    1f64:	00000048 	0x48
    1f68:	000021ca 	0x21ca
    1f6c:	00006412 	0x6412
    1f70:	022b6400 	0x22b6400
    1f74:	0001f0a0 	0x1f0a0
    1f78:	136d0100 	beq	k1,t5,237c <__Size_Of_SDRAM-0x8484>
    1f7c:	000000ee 	0xee
    1f80:	0000e513 	0xe513
    1f84:	00de1300 	0xde1300
    1f88:	00000000 	nop
    1f8c:	04a4010e 	0x4a4010e
    1f90:	80010000 	lb	at,0(zero)
    1f94:	00004801 	movf	t1,zero,$fcc0
    1f98:	022bc000 	0x22bc000
    1f9c:	022d1ca0 	0x22d1ca0
    1fa0:	0021e8a0 	0x21e8a0
    1fa4:	00024800 	sll	t1,v0,0x0
    1fa8:	04d10f00 	bgezal	a2,5bac <__Size_Of_SDRAM-0x4c54>
    1fac:	81010000 	lb	at,0(t0)
    1fb0:	00000041 	0x41
    1fb4:	00002207 	0x2207
    1fb8:	6c617610 	udi3i	at,v1,30224
    1fbc:	41820100 	0x41820100
    1fc0:	67000000 	udi1i	zero,t8,0
    1fc4:	11000022 	beqz	t0,2050 <__Size_Of_SDRAM-0x87b0>
    1fc8:	0067726f 	0x67726f
    1fcc:	00418501 	0x418501
    1fd0:	22900000 	addi	s0,s4,0
    1fd4:	db140000 	0xdb140000
    1fd8:	01000005 	0x1000005
    1fdc:	00004186 	0x4186
    1fe0:	0022bb00 	0x22bb00
    1fe4:	0cc11500 	jal	3045400 <__Size_Of_SDRAM+0x303ac00>
    1fe8:	87010000 	lh	at,0(t8)
    1fec:	00000041 	0x41
    1ff0:	01006911 	0x1006911
    1ff4:	00004888 	0x4888
    1ff8:	0022d900 	0x22d900
    1ffc:	65721100 	udi1i	s2,t3,4352
    2000:	8a010074 	lwl	at,116(s0)
    2004:	00000048 	0x48
    2008:	000022ec 	0x22ec
    200c:	00048216 	0x48216
    2010:	b0da0100 	0xb0da0100
    2014:	00a0022c 	0xa0022c
    2018:	04c20117 	0x4c20117
    201c:	ee010000 	swc3	$1,0(s0)
    2020:	00004801 	movf	t1,zero,$fcc0
    2024:	022d1c00 	0x22d1c00
    2028:	022d70a0 	0x22d70a0
    202c:	0f6d01a0 	jal	db40680 <__Size_Of_SDRAM+0xdb35e80>
    2030:	000004d1 	0x4d1
    2034:	0041ef01 	0x41ef01
    2038:	23200000 	addi	zero,t9,0
    203c:	6d100000 	udi3i	s0,t0,0
    2040:	01006273 	0x1006273
    2044:	000025f0 	0x25f0
    2048:	00233300 	0x233300
    204c:	736c1000 	0x736c1000
    2050:	f1010062 	0xf1010062
    2054:	00000025 	move	zero,zero
    2058:	00002346 	0x2346
    205c:	6c617610 	udi3i	at,v1,30224
    2060:	41f20100 	0x41f20100
    2064:	59000000 	0x59000000
    2068:	00000023 	negu	zero,zero
    206c:	00019100 	sll	s2,at,0x4
    2070:	c9000200 	lwc2	$0,512(t0)
    2074:	0400000a 	bltz	zero,20a0 <__Size_Of_SDRAM-0x8760>
    2078:	00008501 	0x8501
    207c:	04dc0100 	0x4dc0100
    2080:	001c0000 	sll	zero,gp,0x0
    2084:	2d700000 	sltiu	s0,t3,0
    2088:	2e38a002 	sltiu	t8,s1,-24574
    208c:	0a56a002 	j	95a8008 <__Size_Of_SDRAM+0x959d808>
    2090:	37020000 	ori	v0,t8,0x0
    2094:	02000004 	sllv	zero,zero,s0
    2098:	00003042 	srl	a2,zero,0x1
    209c:	db040300 	0xdb040300
    20a0:	02000003 	0x2000003
    20a4:	00000439 	0x439
    20a8:	00257602 	0x257602
    20ac:	01040000 	0x1040000
    20b0:	00007708 	0x7708
    20b4:	06010400 	bgez	s0,30b8 <__Size_Of_SDRAM-0x7748>
    20b8:	00000079 	0x79
    20bc:	09070204 	j	41c0810 <__Size_Of_SDRAM+0x41b6010>
    20c0:	04000000 	bltz	zero,20c4 <__Size_Of_SDRAM-0x873c>
    20c4:	01cd0502 	0x1cd0502
    20c8:	04040000 	0x4040000
    20cc:	00005f07 	0x5f07
    20d0:	05040500 	0x5040500
    20d4:	00746e69 	0x746e69
    20d8:	55070804 	0x55070804
    20dc:	04000000 	bltz	zero,20e0 <__Size_Of_SDRAM-0x8720>
    20e0:	00e90508 	0xe90508
    20e4:	04040000 	0x4040000
    20e8:	00005a07 	0x5a07
    20ec:	06010400 	bgez	s0,30f0 <__Size_Of_SDRAM-0x7710>
    20f0:	00000080 	sll	zero,zero,0x2
    20f4:	008d0406 	0x8d0406
    20f8:	04060000 	0x4060000
    20fc:	00000080 	sll	zero,zero,0x2
    2100:	04ec0107 	0x4ec0107
    2104:	5c010000 	0x5c010000
    2108:	00006401 	0x6401
    210c:	022d7000 	0x22d7000
    2110:	022db0a0 	0x22db0a0
    2114:	002377a0 	0x2377a0
    2118:	0000da00 	sll	k1,zero,0x8
    211c:	6d660800 	udi3i	a2,t3,2048
    2120:	5c010074 	0x5c010074
    2124:	000000da 	0xda
    2128:	00002396 	0x2396
    212c:	65720a09 	udi1i	s2,t3,2569
    2130:	5e010074 	0x5e010074
    2134:	00000064 	0x64
    2138:	0004fb0b 	0x4fb0b
    213c:	365f0100 	ori	ra,s2,0x100
    2140:	02000000 	0x2000000
    2144:	0600108d 	bltz	s0,637c <__Size_Of_SDRAM-0x4484>
    2148:	0000e004 	sllv	gp,zero,zero
    214c:	00800c00 	0x800c00
    2150:	01070000 	0x1070000
    2154:	000004f4 	0x4f4
    2158:	64014c01 	udi1i	at,zero,19457
    215c:	b0000000 	0xb0000000
    2160:	f0a0022d 	0xf0a0022d
    2164:	a9a0022d 	swl	zero,557(t5)
    2168:	2c000023 	sltiu	zero,zero,35
    216c:	08000001 	j	4 <__Size_Of_SDRAM-0xa7fc>
    2170:	00746d66 	0x746d66
    2174:	00da4c01 	0xda4c01
    2178:	23c80000 	addi	t0,s8,0
    217c:	0a090000 	j	8240000 <__Size_Of_SDRAM+0x8235800>
    2180:	00746572 	0x746572
    2184:	00644e01 	0x644e01
    2188:	fb0b0000 	0xfb0b0000
    218c:	01000004 	sllv	zero,zero,t0
    2190:	0000364f 	0x364f
    2194:	108d0200 	beq	a0,t5,2998 <__Size_Of_SDRAM-0x7e68>
    2198:	04e50d00 	0x4e50d00
    219c:	56010000 	0x56010000
    21a0:	022df001 	movt	s8,s1,$fcc3
    21a4:	022e14a0 	0x22e14a0
    21a8:	0023dba0 	0x23dba0
    21ac:	00016200 	sll	t4,at,0x8
    21b0:	68630800 	udi2i	v1,v1,2048
    21b4:	80560100 	lb	s6,256(v0)
    21b8:	fa000000 	0xfa000000
    21bc:	08000023 	j	8c <__Size_Of_SDRAM-0xa774>
    21c0:	00616370 	0x616370
    21c4:	00875601 	0x875601
    21c8:	24190000 	li	t9,0
    21cc:	0e000000 	jal	8000000 <__Size_Of_SDRAM+0x7ff5800>
    21d0:	000004d6 	0x4d6
    21d4:	14014601 	bne	zero,at,139dc <__Size_Of_SDRAM+0x91dc>
    21d8:	38a0022e 	xori	zero,a1,0x22e
    21dc:	2ca0022e 	sltiu	zero,a1,558
    21e0:	08000024 	j	90 <__Size_Of_SDRAM-0xa770>
    21e4:	01006863 	0x1006863
    21e8:	00008046 	0x8046
    21ec:	00244b00 	0x244b00
    21f0:	63700800 	udi0i	s0,k1,2048
    21f4:	46010061 	c1	0x10061
    21f8:	00000087 	0x87
    21fc:	0000246a 	0x246a
    2200:	0a170000 	j	85c0000 <__Size_Of_SDRAM+0x85b5800>
    2204:	00020000 	sll	zero,v0,0x0
    2208:	00000b8a 	0xb8a
    220c:	00850104 	0x850104
    2210:	b3010000 	0xb3010000
    2214:	1c000006 	bgtz	zero,2230 <__Size_Of_SDRAM-0x85d0>
    2218:	38000000 	xori	zero,zero,0x0
    221c:	90a0022e 	lbu	zero,558(a1)
    2220:	eda00235 	swc3	$0,565(t5)
    2224:	0200000a 	movz	zero,s0,zero
    2228:	00770801 	0x770801
    222c:	02020000 	0x2020000
    2230:	00000907 	0x907
    2234:	07040200 	0x7040200
    2238:	0000005f 	0x5f
    223c:	55070802 	0x55070802
    2240:	03000000 	0x3000000
    2244:	0000055d 	0x55d
    2248:	00250e02 	0x250e02
    224c:	de030000 	0xde030000
    2250:	02000006 	srlv	zero,zero,s0
    2254:	00002c0f 	0x2c0f
    2258:	05ee0300 	0x5ee0300
    225c:	10020000 	beq	zero,v0,2260 <__Size_Of_SDRAM-0x85a0>
    2260:	00000033 	0x33
    2264:	05060104 	0x5060104
    2268:	4c010000 	mfc3	at,$0
    226c:	00410104 	0x410104
    2270:	2e380000 	sltiu	t8,s1,0
    2274:	2ed8a002 	sltiu	t8,s6,-24574
    2278:	247da002 	addiu	sp,v1,-24574
    227c:	00d30000 	0xd30000
    2280:	6b050000 	udi2i	a1,t8,0
    2284:	01007965 	0x1007965
    2288:	00d3044c 	syscall	0x34c11
    228c:	249c0000 	addiu	gp,a0,0
    2290:	39060000 	xori	a2,t0,0x0
    2294:	01000007 	srav	zero,zero,t0
    2298:	004c044c 	syscall	0x13011
    229c:	24ba0000 	addiu	k0,a1,0
    22a0:	3d070000 	0x3d070000
    22a4:	01000005 	0x1000005
    22a8:	0041044e 	0x41044e
    22ac:	69080000 	udi2i	t0,t0,0
    22b0:	044f0100 	0x44f0100
    22b4:	0000004c 	syscall	0x1
    22b8:	00050007 	srav	zero,a1,zero
    22bc:	04500100 	bltzal	v0,26c0 <__Size_Of_SDRAM-0x8140>
    22c0:	000000d3 	0xd3
    22c4:	00009609 	0x9609
    22c8:	0000f300 	sll	s8,zero,0xc
    22cc:	03050100 	0x3050100
    22d0:	a00256ec 	sb	v0,22252(zero)
    22d4:	41040a00 	0x41040a00
    22d8:	0b000000 	j	c000000 <__Size_Of_SDRAM+0xbff5800>
    22dc:	000000ec 	0xec
    22e0:	000000e9 	0xe9
    22e4:	0000e90c 	syscall	0x3a4
    22e8:	0d000900 	jal	4002400 <__Size_Of_SDRAM+0x3ff7c00>
    22ec:	01020704 	0x1020704
    22f0:	00008006 	srlv	s0,zero,zero
    22f4:	00d90e00 	0xd90e00
    22f8:	01040000 	0x1040000
    22fc:	0000065b 	0x65b
    2300:	01043001 	movf	a2,t0,$fcc1
    2304:	00000041 	0x41
    2308:	a0022ed8 	sb	v0,11992(zero)
    230c:	a0022f74 	sb	v0,12148(zero)
    2310:	000024d8 	0x24d8
    2314:	00000169 	0x169
    2318:	0003a906 	0x3a906
    231c:	04300100 	bltzal	at,2720 <__Size_Of_SDRAM-0x80e0>
    2320:	000000d3 	0xd3
    2324:	000024f7 	0x24f7
    2328:	00073906 	0x73906
    232c:	04300100 	bltzal	at,2730 <__Size_Of_SDRAM-0x80d0>
    2330:	0000004c 	syscall	0x1
    2334:	00002515 	0x2515
    2338:	01006908 	0x1006908
    233c:	004c0432 	0x4c0432
    2340:	3d070000 	0x3d070000
    2344:	01000005 	0x1000005
    2348:	00410433 	0x410433
    234c:	ab070000 	swl	a3,0(t8)
    2350:	01000006 	srlv	zero,zero,t0
    2354:	00d30434 	0xd30434
    2358:	96090000 	lhu	t1,0(s0)
    235c:	79000000 	0x79000000
    2360:	01000001 	movf	zero,t0,$fcc0
    2364:	56f80305 	0x56f80305
    2368:	0b00a002 	j	c028008 <__Size_Of_SDRAM+0xc01d808>
    236c:	000000ec 	0xec
    2370:	00000179 	0x179
    2374:	0000e90c 	syscall	0x3a4
    2378:	0e000a00 	jal	8002800 <__Size_Of_SDRAM+0x7ff8000>
    237c:	00000169 	0x169
    2380:	05450104 	0x5450104
    2384:	11010000 	beq	t0,at,2388 <__Size_Of_SDRAM-0x8478>
    2388:	00410104 	0x410104
    238c:	2f740000 	sltiu	s4,k1,0
    2390:	2fa0a002 	sltiu	zero,sp,-24574
    2394:	2533a002 	addiu	s3,t1,-24574
    2398:	01d90000 	0x1d90000
    239c:	72060000 	mad	s0,a2
    23a0:	01000006 	srlv	zero,zero,t0
    23a4:	00d30411 	0xd30411
    23a8:	25520000 	addiu	s2,t2,0
    23ac:	39060000 	xori	a2,t0,0x0
    23b0:	01000007 	srav	zero,zero,t0
    23b4:	01d90411 	0x1d90411
    23b8:	25650000 	addiu	a1,t3,0
    23bc:	3d070000 	0x3d070000
    23c0:	01000005 	0x1000005
    23c4:	00410422 	0x410422
    23c8:	96090000 	lhu	t1,0(s0)
    23cc:	df000000 	0xdf000000
    23d0:	01000001 	movf	zero,t0,$fcc0
    23d4:	57040305 	0x57040305
    23d8:	0a00a002 	j	8028008 <__Size_Of_SDRAM+0x801d808>
    23dc:	00004c04 	0x4c04
    23e0:	01690e00 	0x1690e00
    23e4:	01040000 	0x1040000
    23e8:	00000532 	0x532
    23ec:	0103f101 	0x103f101
    23f0:	00000041 	0x41
    23f4:	a0022fa0 	sb	v0,12192(zero)
    23f8:	a0022fcc 	sb	v0,12236(zero)
    23fc:	00002578 	0x2578
    2400:	0000023f 	0x23f
    2404:	00067206 	0x67206
    2408:	03f10100 	0x3f10100
    240c:	000000d3 	0xd3
    2410:	00002597 	0x2597
    2414:	00073906 	0x73906
    2418:	03f10100 	0x3f10100
    241c:	000001d9 	0x1d9
    2420:	000025aa 	0x25aa
    2424:	00053d07 	0x53d07
    2428:	04030100 	0x4030100
    242c:	00000041 	0x41
    2430:	00009609 	0x9609
    2434:	00023f00 	sll	a3,v0,0x1c
    2438:	03050100 	0x3050100
    243c:	a0025710 	sb	v0,22288(zero)
    2440:	01690e00 	0x1690e00
    2444:	01040000 	0x1040000
    2448:	00000692 	0x692
    244c:	0103c601 	0x103c601
    2450:	00000041 	0x41
    2454:	a0022fcc 	sb	v0,12236(zero)
    2458:	a0022ff8 	sb	v0,12280(zero)
    245c:	000025bd 	0x25bd
    2460:	0000029f 	0x29f
    2464:	79656b05 	0x79656b05
    2468:	03c60100 	0x3c60100
    246c:	000000d3 	0xd3
    2470:	000025dc 	0x25dc
    2474:	00073906 	0x73906
    2478:	03c60100 	0x3c60100
    247c:	0000004c 	syscall	0x1
    2480:	000025ef 	0x25ef
    2484:	00053d07 	0x53d07
    2488:	03e30100 	0x3e30100
    248c:	00000041 	0x41
    2490:	00009609 	0x9609
    2494:	00029f00 	sll	s3,v0,0x1c
    2498:	03050100 	0x3050100
    249c:	a002571c 	sb	v0,22300(zero)
    24a0:	00d90e00 	0xd90e00
    24a4:	01040000 	0x1040000
    24a8:	00000603 	sra	zero,zero,0x18
    24ac:	01039601 	0x1039601
    24b0:	00000041 	0x41
    24b4:	a0022ff8 	sb	v0,12280(zero)
    24b8:	a0023024 	sb	v0,12324(zero)
    24bc:	00002602 	srl	a0,zero,0x18
    24c0:	000002ff 	0x2ff
    24c4:	0003a906 	0x3a906
    24c8:	03960100 	0x3960100
    24cc:	000000d3 	0xd3
    24d0:	00002621 	0x2621
    24d4:	00073906 	0x73906
    24d8:	03960100 	0x3960100
    24dc:	0000004c 	syscall	0x1
    24e0:	00002634 	0x2634
    24e4:	00053d07 	0x53d07
    24e8:	03b80100 	0x3b80100
    24ec:	00000041 	0x41
    24f0:	00009609 	0x9609
    24f4:	0002ff00 	sll	ra,v0,0x1c
    24f8:	03050100 	0x3050100
    24fc:	a0025728 	sb	v0,22312(zero)
    2500:	01690e00 	0x1690e00
    2504:	01040000 	0x1040000
    2508:	00000510 	0x510
    250c:	01037701 	0x1037701
    2510:	00000041 	0x41
    2514:	a0023024 	sb	v0,12324(zero)
    2518:	a0023050 	sb	v0,12368(zero)
    251c:	00002647 	0x2647
    2520:	0000035f 	0x35f
    2524:	00067206 	0x67206
    2528:	03770100 	0x3770100
    252c:	000000d3 	0xd3
    2530:	00002666 	0x2666
    2534:	00073906 	0x73906
    2538:	03770100 	0x3770100
    253c:	000001d9 	0x1d9
    2540:	00002679 	0x2679
    2544:	00053d07 	0x53d07
    2548:	03880100 	0x3880100
    254c:	00000041 	0x41
    2550:	00009609 	0x9609
    2554:	00036f00 	sll	t5,v1,0x1c
    2558:	03050100 	0x3050100
    255c:	a0025734 	sb	v0,22324(zero)
    2560:	00ec0b00 	0xec0b00
    2564:	036f0000 	0x36f0000
    2568:	e90c0000 	swc2	$12,0(t0)
    256c:	0b000000 	j	c000000 <__Size_Of_SDRAM+0xbff5800>
    2570:	035f0e00 	0x35f0e00
    2574:	01040000 	0x1040000
    2578:	000005f7 	0x5f7
    257c:	01035701 	0x1035701
    2580:	00000041 	0x41
    2584:	a0023050 	sb	v0,12368(zero)
    2588:	a002307c 	sb	v0,12412(zero)
    258c:	0000268c 	syscall	0x9a
    2590:	000003cf 	sync	0xf
    2594:	00067206 	0x67206
    2598:	03570100 	0x3570100
    259c:	000000d3 	0xd3
    25a0:	000026ab 	0x26ab
    25a4:	00073906 	0x73906
    25a8:	03570100 	0x3570100
    25ac:	000001d9 	0x1d9
    25b0:	000026be 	0x26be
    25b4:	00053d07 	0x53d07
    25b8:	03670100 	0x3670100
    25bc:	00000041 	0x41
    25c0:	00009609 	0x9609
    25c4:	0003cf00 	sll	t9,v1,0x1c
    25c8:	03050100 	0x3050100
    25cc:	a0025740 	sb	v0,22336(zero)
    25d0:	035f0e00 	0x35f0e00
    25d4:	01040000 	0x1040000
    25d8:	00000617 	0x617
    25dc:	01032b01 	0x1032b01
    25e0:	00000041 	0x41
    25e4:	a002307c 	sb	v0,12412(zero)
    25e8:	a00230a8 	sb	v0,12456(zero)
    25ec:	000026d1 	0x26d1
    25f0:	0000042f 	0x42f
    25f4:	79656b05 	0x79656b05
    25f8:	032b0100 	0x32b0100
    25fc:	000000d3 	0xd3
    2600:	000026f0 	0x26f0
    2604:	00073906 	0x73906
    2608:	032b0100 	0x32b0100
    260c:	0000004c 	syscall	0x1
    2610:	00002703 	sra	a0,zero,0x1c
    2614:	00053d07 	0x53d07
    2618:	03470100 	0x3470100
    261c:	00000041 	0x41
    2620:	00009609 	0x9609
    2624:	00042f00 	sll	a1,a0,0x1c
    2628:	03050100 	0x3050100
    262c:	a002574c 	sb	v0,22348(zero)
    2630:	01690e00 	0x1690e00
    2634:	01040000 	0x1040000
    2638:	000005e2 	0x5e2
    263c:	0102fb01 	0x102fb01
    2640:	00000041 	0x41
    2644:	a00230a8 	sb	v0,12456(zero)
    2648:	a00230d4 	sb	v0,12500(zero)
    264c:	00002716 	0x2716
    2650:	0000048f 	sync	0x12
    2654:	0003a906 	0x3a906
    2658:	02fb0100 	0x2fb0100
    265c:	000000d3 	0xd3
    2660:	00002735 	0x2735
    2664:	00073906 	0x73906
    2668:	02fb0100 	0x2fb0100
    266c:	0000004c 	syscall	0x1
    2670:	00002748 	0x2748
    2674:	00053d07 	0x53d07
    2678:	031d0100 	0x31d0100
    267c:	00000041 	0x41
    2680:	00009609 	0x9609
    2684:	00048f00 	sll	s1,a0,0x1c
    2688:	03050100 	0x3050100
    268c:	a0025758 	sb	v0,22360(zero)
    2690:	035f0e00 	0x35f0e00
    2694:	01040000 	0x1040000
    2698:	00000511 	0x511
    269c:	0102da01 	0x102da01
    26a0:	00000041 	0x41
    26a4:	a00230d4 	sb	v0,12500(zero)
    26a8:	a0023100 	sb	v0,12544(zero)
    26ac:	0000275b 	0x275b
    26b0:	000004ef 	0x4ef
    26b4:	00067206 	0x67206
    26b8:	02da0100 	0x2da0100
    26bc:	000000d3 	0xd3
    26c0:	0000277a 	0x277a
    26c4:	00073906 	0x73906
    26c8:	02da0100 	0x2da0100
    26cc:	000001d9 	0x1d9
    26d0:	0000278d 	break	0x0,0x9e
    26d4:	00053d07 	0x53d07
    26d8:	02ec0100 	0x2ec0100
    26dc:	00000041 	0x41
    26e0:	00009609 	0x9609
    26e4:	0004ef00 	sll	sp,a0,0x1c
    26e8:	03050100 	0x3050100
    26ec:	a0025764 	sb	v0,22372(zero)
    26f0:	01690e00 	0x1690e00
    26f4:	01040000 	0x1040000
    26f8:	000005f8 	0x5f8
    26fc:	0102ba01 	0x102ba01
    2700:	00000041 	0x41
    2704:	a0023100 	sb	v0,12544(zero)
    2708:	a002312c 	sb	v0,12588(zero)
    270c:	000027a0 	0x27a0
    2710:	0000054f 	sync	0x15
    2714:	00067206 	0x67206
    2718:	02ba0100 	0x2ba0100
    271c:	000000d3 	0xd3
    2720:	000027bf 	0x27bf
    2724:	00073906 	0x73906
    2728:	02ba0100 	0x2ba0100
    272c:	000001d9 	0x1d9
    2730:	000027d2 	0x27d2
    2734:	00053d07 	0x53d07
    2738:	02cc0100 	0x2cc0100
    273c:	00000041 	0x41
    2740:	00009609 	0x9609
    2744:	00054f00 	sll	t1,a1,0x1c
    2748:	03050100 	0x3050100
    274c:	a0025770 	sb	v0,22384(zero)
    2750:	01690e00 	0x1690e00
    2754:	01040000 	0x1040000
    2758:	00000618 	0x618
    275c:	01028801 	0x1028801
    2760:	00000041 	0x41
    2764:	a002312c 	sb	v0,12588(zero)
    2768:	a0023158 	sb	v0,12632(zero)
    276c:	000027e5 	0x27e5
    2770:	000005af 	0x5af
    2774:	79656b05 	0x79656b05
    2778:	02880100 	0x2880100
    277c:	000000d3 	0xd3
    2780:	00002804 	sllv	a1,zero,zero
    2784:	00073906 	0x73906
    2788:	02880100 	0x2880100
    278c:	0000004c 	syscall	0x1
    2790:	00002817 	0x2817
    2794:	00053d07 	0x53d07
    2798:	02ac0100 	0x2ac0100
    279c:	00000041 	0x41
    27a0:	00009609 	0x9609
    27a4:	0005af00 	sll	s5,a1,0x1c
    27a8:	03050100 	0x3050100
    27ac:	a002577c 	sb	v0,22396(zero)
    27b0:	00d90e00 	0xd90e00
    27b4:	01040000 	0x1040000
    27b8:	000005e3 	0x5e3
    27bc:	01025901 	0x1025901
    27c0:	00000041 	0x41
    27c4:	a0023158 	sb	v0,12632(zero)
    27c8:	a0023184 	sb	v0,12676(zero)
    27cc:	0000282a 	slt	a1,zero,zero
    27d0:	0000060f 	sync	0x18
    27d4:	0003a906 	0x3a906
    27d8:	02590100 	0x2590100
    27dc:	000000d3 	0xd3
    27e0:	00002849 	0x2849
    27e4:	00073906 	0x73906
    27e8:	02590100 	0x2590100
    27ec:	0000004c 	syscall	0x1
    27f0:	0000285c 	0x285c
    27f4:	00053d07 	0x53d07
    27f8:	027a0100 	0x27a0100
    27fc:	00000041 	0x41
    2800:	00009609 	0x9609
    2804:	00060f00 	sll	at,a2,0x1c
    2808:	03050100 	0x3050100
    280c:	a0025788 	sb	v0,22408(zero)
    2810:	01690e00 	0x1690e00
    2814:	01040000 	0x1040000
    2818:	0000060e 	0x60e
    281c:	01015301 	0x1015301
    2820:	00000041 	0x41
    2824:	a0023184 	sb	v0,12676(zero)
    2828:	a00231b0 	sb	v0,12720(zero)
    282c:	0000286f 	0x286f
    2830:	0000068f 	sync	0x1a
    2834:	0005b506 	0x5b506
    2838:	01530100 	0x1530100
    283c:	000001d9 	0x1d9
    2840:	0000288e 	0x288e
    2844:	0005c806 	srlv	t9,a1,zero
    2848:	01540100 	0x1540100
    284c:	0000004c 	syscall	0x1
    2850:	000028a1 	0x28a1
    2854:	0003a906 	0x3a906
    2858:	01550100 	0x1550100
    285c:	000000d3 	0xd3
    2860:	000028b4 	0x28b4
    2864:	00056506 	0x56506
    2868:	01560100 	0x1560100
    286c:	000001d9 	0x1d9
    2870:	000028c7 	0x28c7
    2874:	00053d07 	0x53d07
    2878:	01850100 	0x1850100
    287c:	00000041 	0x41
    2880:	00009609 	0x9609
    2884:	00069f00 	sll	s3,a2,0x1c
    2888:	03050100 	0x3050100
    288c:	a0025794 	sb	v0,22420(zero)
    2890:	00ec0b00 	0xec0b00
    2894:	069f0000 	0x69f0000
    2898:	e90c0000 	swc2	$12,0(t0)
    289c:	08000000 	j	0 <__Size_Of_SDRAM-0xa800>
    28a0:	068f0e00 	0x68f0e00
    28a4:	01040000 	0x1040000
    28a8:	00000639 	0x639
    28ac:	01010e01 	0x1010e01
    28b0:	00000041 	0x41
    28b4:	a00231b0 	sb	v0,12720(zero)
    28b8:	a00231dc 	sb	v0,12764(zero)
    28bc:	000028da 	0x28da
    28c0:	0000071f 	0x71f
    28c4:	0005b506 	0x5b506
    28c8:	010e0100 	0x10e0100
    28cc:	000001d9 	0x1d9
    28d0:	000028f9 	0x28f9
    28d4:	0005c806 	srlv	t9,a1,zero
    28d8:	010f0100 	0x10f0100
    28dc:	0000004c 	syscall	0x1
    28e0:	0000290c 	syscall	0xa4
    28e4:	0003a906 	0x3a906
    28e8:	01100100 	0x1100100
    28ec:	000000d3 	0xd3
    28f0:	0000291f 	0x291f
    28f4:	00056506 	0x56506
    28f8:	01110100 	0x1110100
    28fc:	000001d9 	0x1d9
    2900:	00002932 	0x2932
    2904:	00053d07 	0x53d07
    2908:	01440100 	0x1440100
    290c:	00000041 	0x41
    2910:	00009609 	0x9609
    2914:	00072f00 	sll	a1,a3,0x1c
    2918:	03050100 	0x3050100
    291c:	a00257a0 	sb	v0,22432(zero)
    2920:	00ec0b00 	0xec0b00
    2924:	072f0000 	0x72f0000
    2928:	e90c0000 	swc2	$12,0(t0)
    292c:	07000000 	bltz	t8,2930 <__Size_Of_SDRAM-0x7ed0>
    2930:	071f0e00 	0x71f0e00
    2934:	010f0000 	0x10f0000
    2938:	0000062f 	0x62f
    293c:	dc01b601 	0xdc01b601
    2940:	50a00231 	0x50a00231
    2944:	45a00232 	0x45a00232
    2948:	5e000029 	0x5e000029
    294c:	09000007 	j	400001c <__Size_Of_SDRAM+0x3ff581c>
    2950:	00000096 	0x96
    2954:	0000075e 	0x75e
    2958:	c8030501 	lwc2	$3,1281(zero)
    295c:	00a00257 	0xa00257
    2960:	0000d90e 	0xd90e
    2964:	bd011000 	cache	0x1,4096(t0)
    2968:	01000005 	0x1000005
    296c:	3250019e 	andi	s0,s2,0x19e
    2970:	326ca002 	andi	t4,s3,0xa002
    2974:	6d01a002 	udi3i	at,t0,-24574
    2978:	0000078b 	0x78b
    297c:	00009609 	0x9609
    2980:	00078b00 	sll	s1,a3,0xc
    2984:	03050100 	0x3050100
    2988:	a00257d4 	sb	v0,22484(zero)
    298c:	01690e00 	0x1690e00
    2990:	01040000 	0x1040000
    2994:	00000579 	0x579
    2998:	01045f01 	0x1045f01
    299c:	00000041 	0x41
    29a0:	a002326c 	sb	v0,12908(zero)
    29a4:	a00234c0 	sb	v0,13504(zero)
    29a8:	00002964 	0x2964
    29ac:	00000814 	0x814
    29b0:	00706f05 	0x706f05
    29b4:	41045f01 	0x41045f01
    29b8:	83000000 	lb	zero,0(t8)
    29bc:	06000029 	bltz	s0,2a64 <__Size_Of_SDRAM-0x7d9c>
    29c0:	00000672 	0x672
    29c4:	d3045f01 	0xd3045f01
    29c8:	ac000000 	sw	zero,0(zero)
    29cc:	06000029 	bltz	s0,2a74 <__Size_Of_SDRAM-0x7d8c>
    29d0:	00000739 	0x739
    29d4:	d9045f01 	0xd9045f01
    29d8:	d5000001 	ldc1	$f0,1(t0)
    29dc:	11000029 	beqz	t0,2a84 <__Size_Of_SDRAM-0x7d7c>
    29e0:	61010069 	udi0i	at,t0,105
    29e4:	00004c04 	0x4c04
    29e8:	0029fe00 	0x29fe00
    29ec:	053d0700 	0x53d0700
    29f0:	62010000 	udi0i	at,s0,0
    29f4:	00004104 	0x4104
    29f8:	00960900 	0x960900
    29fc:	08140000 	j	500000 <__Size_Of_SDRAM+0x4f5800>
    2a00:	05010000 	bgez	t0,2a04 <__Size_Of_SDRAM-0x7dfc>
    2a04:	0256e003 	0x256e003
    2a08:	058412a0 	0x58412a0
    2a0c:	8b010000 	lwl	at,0(t8)
    2a10:	02341c04 	0x2341c04
    2a14:	690e00a0 	udi2i	t6,t0,160
    2a18:	13000001 	beqz	t8,2a20 <__Size_Of_SDRAM-0x7de0>
    2a1c:	00059b01 	0x59b01
    2a20:	04a50100 	0x4a50100
    2a24:	00004101 	0x4101
    2a28:	0234c000 	0x234c000
    2a2c:	0234d4a0 	0x234d4a0
    2a30:	566d01a0 	0x566d01a0
    2a34:	06000008 	bltz	s0,2a58 <__Size_Of_SDRAM-0x7da8>
    2a38:	00000672 	0x672
    2a3c:	d304a501 	0xd304a501
    2a40:	3d000000 	0x3d000000
    2a44:	0600002a 	bltz	s0,2af0 <__Size_Of_SDRAM-0x7d10>
    2a48:	00000739 	0x739
    2a4c:	d904a501 	0xd904a501
    2a50:	50000001 	0x50000001
    2a54:	0000002a 	slt	zero,zero,zero
    2a58:	067b0113 	0x67b0113
    2a5c:	98010000 	lwr	at,0(zero)
    2a60:	00410104 	0x410104
    2a64:	34d40000 	ori	s4,a2,0x0
    2a68:	34e8a002 	ori	t0,a3,0xa002
    2a6c:	6d01a002 	udi3i	at,t0,-24574
    2a70:	00000893 	0x893
    2a74:	00067206 	0x67206
    2a78:	04980100 	0x4980100
    2a7c:	000000d3 	0xd3
    2a80:	00002a63 	0x2a63
    2a84:	00073906 	0x73906
    2a88:	04980100 	0x4980100
    2a8c:	000001d9 	0x1d9
    2a90:	00002a76 	0x2a76
    2a94:	a6010f00 	sh	at,3840(s0)
    2a98:	01000005 	0x1000005
    2a9c:	34e801f8 	ori	t0,a3,0x1f8
    2aa0:	3514a002 	ori	s4,t0,0xa002
    2aa4:	2a89a002 	slti	t1,s4,-24574
    2aa8:	08bd0000 	j	2f40000 <__Size_Of_SDRAM+0x2f35800>
    2aac:	96090000 	lhu	t1,0(s0)
    2ab0:	cd000000 	lwc3	$0,0(t0)
    2ab4:	01000008 	jr	t0
    2ab8:	57a80305 	0x57a80305
    2abc:	0b00a002 	j	c028008 <__Size_Of_SDRAM+0xc01d808>
    2ac0:	000000ec 	0xec
    2ac4:	000008cd 	break	0x0,0x23
    2ac8:	0000e90c 	syscall	0x3a4
    2acc:	0e000e00 	jal	8003800 <__Size_Of_SDRAM+0x7ff9000>
    2ad0:	000008bd 	0x8bd
    2ad4:	0641010f 	bgez	s2,2f14 <__Size_Of_SDRAM-0x78ec>
    2ad8:	ee010000 	swc3	$1,0(s0)
    2adc:	02351401 	0x2351401
    2ae0:	023540a0 	0x23540a0
    2ae4:	002aa8a0 	0x2aa8a0
    2ae8:	0008fc00 	sll	ra,t0,0x10
    2aec:	00960900 	0x960900
    2af0:	090c0000 	j	4300000 <__Size_Of_SDRAM+0x42f5800>
    2af4:	05010000 	bgez	t0,2af8 <__Size_Of_SDRAM-0x7d08>
    2af8:	0257b803 	0x257b803
    2afc:	ec0b00a0 	swc3	$11,160(zero)
    2b00:	0c000000 	jal	0 <__Size_Of_SDRAM-0xa800>
    2b04:	0c000009 	jal	24 <__Size_Of_SDRAM-0xa7dc>
    2b08:	000000e9 	0xe9
    2b0c:	fc0e000d 	0xfc0e000d
    2b10:	14000008 	bnez	zero,2b34 <__Size_Of_SDRAM-0x7ccc>
    2b14:	00064f01 	0x64f01
    2b18:	01dd0100 	0x1dd0100
    2b1c:	00000041 	0x41
    2b20:	a0023540 	sb	v0,13632(zero)
    2b24:	a0023564 	sb	v0,13668(zero)
    2b28:	00002ac7 	0x2ac7
    2b2c:	00000949 	0x949
    2b30:	0003a915 	0x3a915
    2b34:	d3dd0100 	0xd3dd0100
    2b38:	e6000000 	swc1	$f0,0(s0)
    2b3c:	1600002a 	bnez	s0,2be8 <__Size_Of_SDRAM-0x7c18>
    2b40:	0000053d 	0x53d
    2b44:	0041df01 	0x41df01
    2b48:	14000000 	bnez	zero,2b4c <__Size_Of_SDRAM-0x7cb4>
    2b4c:	00068601 	0x68601
    2b50:	01ce0100 	0x1ce0100
    2b54:	00000041 	0x41
    2b58:	a0023564 	sb	v0,13668(zero)
    2b5c:	a0023590 	sb	v0,13712(zero)
    2b60:	00002af9 	0x2af9
    2b64:	00000981 	0x981
    2b68:	0003a915 	0x3a915
    2b6c:	41ce0100 	0x41ce0100
    2b70:	18000000 	blez	zero,2b74 <__Size_Of_SDRAM-0x7c8c>
    2b74:	1600002b 	bnez	s0,2c24 <__Size_Of_SDRAM-0x7bdc>
    2b78:	0000053d 	0x53d
    2b7c:	0041d001 	movt	k0,v0,$fcc0
    2b80:	17000000 	bnez	t8,2b84 <__Size_Of_SDRAM-0x7c7c>
    2b84:	0000069c 	0x69c
    2b88:	00575501 	0x575501
    2b8c:	03050000 	0x3050000
    2b90:	a0029c10 	sb	v0,-25584(zero)
    2b94:	00058c17 	0x58c17
    2b98:	57560100 	0x57560100
    2b9c:	05000000 	bltz	t0,2ba0 <__Size_Of_SDRAM-0x7c60>
    2ba0:	029c1403 	0x29c1403
    2ba4:	057017a0 	bltzal	t3,8a28 <__Size_Of_SDRAM-0x1dd8>
    2ba8:	57010000 	0x57010000
    2bac:	00000057 	0x57
    2bb0:	9c180305 	0x9c180305
    2bb4:	2a17a002 	slti	s7,s0,-24574
    2bb8:	01000005 	0x1000005
    2bbc:	00005758 	0x5758
    2bc0:	1c030500 	0x1c030500
    2bc4:	17a0029c 	bnez	sp,3638 <__Size_Of_SDRAM-0x71c8>
    2bc8:	0000051c 	0x51c
    2bcc:	004c5a01 	0x4c5a01
    2bd0:	03050000 	0x3050000
    2bd4:	a0029c20 	sb	v0,-25568(zero)
    2bd8:	00062217 	0x62217
    2bdc:	4c5b0100 	0x4c5b0100
    2be0:	05000000 	bltz	t0,2be4 <__Size_Of_SDRAM-0x7c1c>
    2be4:	029c2203 	0x29c2203
    2be8:	055017a0 	bltzal	t2,8a6c <__Size_Of_SDRAM-0x1d94>
    2bec:	5c010000 	0x5c010000
    2bf0:	0000004c 	syscall	0x1
    2bf4:	9c240305 	0x9c240305
    2bf8:	6617a002 	udi1i	s7,s0,-24574
    2bfc:	01000006 	srlv	zero,zero,t0
    2c00:	00004c5d 	0x4c5d
    2c04:	26030500 	addiu	v1,s0,1280
    2c08:	17a0029c 	bnez	sp,367c <__Size_Of_SDRAM-0x7184>
    2c0c:	000005d6 	0x5d6
    2c10:	00575f01 	0x575f01
    2c14:	03050000 	0x3050000
    2c18:	a0029c28 	sb	v0,-25560(zero)
    2c1c:	0004ed00 	sll	sp,a0,0x14
    2c20:	e6000200 	swc1	$f0,512(s0)
    2c24:	0400000c 	bltz	zero,2c58 <__Size_Of_SDRAM-0x7ba8>
    2c28:	00008501 	0x8501
    2c2c:	077a0100 	0x77a0100
    2c30:	001c0000 	sll	zero,gp,0x0
    2c34:	35900000 	ori	s0,t4,0x0
    2c38:	3e94a002 	0x3e94a002
    2c3c:	0ca1a002 	jal	2868008 <__Size_Of_SDRAM+0x285d808>
    2c40:	01020000 	0x1020000
    2c44:	00007708 	0x7708
    2c48:	07020200 	0x7020200
    2c4c:	00000009 	jalr	zero,zero
    2c50:	5f070402 	0x5f070402
    2c54:	02000000 	0x2000000
    2c58:	00550708 	0x550708
    2c5c:	5d030000 	0x5d030000
    2c60:	02000005 	0x2000005
    2c64:	0000250e 	0x250e
    2c68:	06de0300 	0x6de0300
    2c6c:	0f020000 	jal	c080000 <__Size_Of_SDRAM+0xc075800>
    2c70:	0000002c 	0x2c
    2c74:	0005ee03 	sra	sp,a1,0x18
    2c78:	33100200 	andi	s0,t8,0x200
    2c7c:	04000000 	bltz	zero,2c80 <__Size_Of_SDRAM-0x7b80>
    2c80:	00000747 	0x747
    2c84:	57012001 	0x57012001
    2c88:	01000000 	0x1000000
    2c8c:	0000007f 	0x7f
    2c90:	0007b405 	0x7b405
    2c94:	7f200100 	0x7f200100
    2c98:	00000000 	nop
    2c9c:	00410406 	0x410406
    2ca0:	aa070000 	swl	a3,0(s0)
    2ca4:	01000007 	srav	zero,zero,t0
    2ca8:	a9010125 	swl	at,293(t0)
    2cac:	05000000 	bltz	t0,2cb0 <__Size_Of_SDRAM-0x7b50>
    2cb0:	00000446 	0x446
    2cb4:	00572501 	0x572501
    2cb8:	b4050000 	0xb4050000
    2cbc:	01000007 	srav	zero,zero,t0
    2cc0:	00007f25 	0x7f25
    2cc4:	e7040000 	swc1	$f4,0(t8)
    2cc8:	01000006 	srlv	zero,zero,t0
    2ccc:	00410165 	0x410165
    2cd0:	f2010000 	madh	s0,at
    2cd4:	05000000 	bltz	t0,2cd8 <__Size_Of_SDRAM-0x7b28>
    2cd8:	000008ea 	0x8ea
    2cdc:	00f26501 	0xf26501
    2ce0:	db080000 	0xdb080000
    2ce4:	01000005 	0x1000005
    2ce8:	00004166 	0x4166
    2cec:	6d740900 	udi3i	s4,t3,2304
    2cf0:	67010070 	udi1i	at,t8,112
    2cf4:	00000041 	0x41
    2cf8:	746e6309 	jalx	1b98c24 <__Size_Of_SDRAM+0x1b8e424>
    2cfc:	41680100 	0x41680100
    2d00:	08000000 	j	0 <__Size_Of_SDRAM-0xa800>
    2d04:	00000d1a 	0xd1a
    2d08:	00576901 	0x576901
    2d0c:	06000000 	bltz	s0,2d10 <__Size_Of_SDRAM-0x7af0>
    2d10:	00004c04 	0x4c04
    2d14:	07260400 	0x7260400
    2d18:	97010000 	lhu	at,0(t8)
    2d1c:	00004101 	0x4101
    2d20:	014c0100 	0x14c0100
    2d24:	8a050000 	lwl	a1,0(s0)
    2d28:	01000007 	srav	zero,zero,t0
    2d2c:	00007f97 	0x7f97
    2d30:	07360500 	0x7360500
    2d34:	98010000 	lwr	at,0(zero)
    2d38:	0000004c 	syscall	0x1
    2d3c:	00076705 	0x76705
    2d40:	7f990100 	0x7f990100
    2d44:	05000000 	bltz	t0,2d48 <__Size_Of_SDRAM-0x7ab8>
    2d48:	0000076f 	0x76f
    2d4c:	00f29a01 	0xf29a01
    2d50:	57080000 	0x57080000
    2d54:	01000007 	srav	zero,zero,t0
    2d58:	00014c9c 	0x14c9c
    2d5c:	07ba0800 	0x7ba0800
    2d60:	9d010000 	0x9d010000
    2d64:	0000014c 	syscall	0x5
    2d68:	00570a00 	0x570a00
    2d6c:	d2040000 	0xd2040000
    2d70:	01000006 	srlv	zero,zero,t0
    2d74:	0041018e 	0x41018e
    2d78:	79010000 	0x79010000
    2d7c:	05000001 	bltz	t0,2d84 <__Size_Of_SDRAM-0x7a7c>
    2d80:	000008ea 	0x8ea
    2d84:	004c8e01 	0x4c8e01
    2d88:	91080000 	lbu	t0,0(t0)
    2d8c:	01000007 	srav	zero,zero,t0
    2d90:	0000418f 	0x418f
    2d94:	fc040000 	0xfc040000
    2d98:	01000006 	srlv	zero,zero,t0
    2d9c:	0041015a 	0x41015a
    2da0:	b5010000 	0xb5010000
    2da4:	05000001 	bltz	t0,2dac <__Size_Of_SDRAM-0x7a54>
    2da8:	00000708 	0x708
    2dac:	007f5a01 	0x7f5a01
    2db0:	39050000 	xori	a1,t0,0x0
    2db4:	01000007 	srav	zero,zero,t0
    2db8:	0001b55a 	0x1b55a
    2dbc:	07910800 	bgezal	gp,4dc0 <__Size_Of_SDRAM-0x5a40>
    2dc0:	5b010000 	0x5b010000
    2dc4:	00000041 	0x41
    2dc8:	01006909 	0x1006909
    2dcc:	0001b55c 	0x1b55c
    2dd0:	040b0000 	0x40b0000
    2dd4:	746e6905 	jalx	1b9a414 <__Size_Of_SDRAM+0x1b8fc14>
    2dd8:	06bf0400 	0x6bf0400
    2ddc:	2c010000 	sltiu	at,zero,0
    2de0:	00004101 	0x4101
    2de4:	02260100 	0x2260100
    2de8:	08050000 	j	140000 <__Size_Of_SDRAM+0x135800>
    2dec:	01000007 	srav	zero,zero,t0
    2df0:	00007f2c 	0x7f2c
    2df4:	07390500 	0x7390500
    2df8:	2c010000 	sltiu	at,zero,0
    2dfc:	000001b5 	0x1b5
    2e00:	01006909 	0x1006909
    2e04:	0001b52d 	0x1b52d
    2e08:	6e630900 	udi3i	v1,s3,2304
    2e0c:	2e010074 	sltiu	at,s0,116
    2e10:	000001b5 	0x1b5
    2e14:	00686309 	0x686309
    2e18:	00252f01 	0x252f01
    2e1c:	1a080000 	0x1a080000
    2e20:	0100000d 	break	0x100
    2e24:	00005730 	0x5730
    2e28:	05db0800 	0x5db0800
    2e2c:	31010000 	andi	at,t0,0x0
    2e30:	00000041 	0x41
    2e34:	0000960c 	syscall	0x258
    2e38:	00024000 	sll	t0,v0,0x0
    2e3c:	06bf0100 	0x6bf0100
    2e40:	0d000000 	jal	4000000 <__Size_Of_SDRAM+0x3ff5800>
    2e44:	00000239 	0x239
    2e48:	00000236 	0x236
    2e4c:	0002360e 	0x2360e
    2e50:	0f001200 	jal	c004800 <__Size_Of_SDRAM+0xbffa000>
    2e54:	01020704 	0x1020704
    2e58:	00008006 	srlv	s0,zero,zero
    2e5c:	02261000 	0x2261000
    2e60:	bc110000 	cache	0x11,0(zero)
    2e64:	90000001 	lbu	zero,1(zero)
    2e68:	10a00235 	beqz	a1,3740 <__Size_Of_SDRAM-0x70c0>
    2e6c:	2ba00237 	slti	zero,sp,567
    2e70:	9d00002b 	0x9d00002b
    2e74:	12000002 	beqz	s0,2e80 <__Size_Of_SDRAM-0x7980>
    2e78:	000001d8 	0x1d8
    2e7c:	00002b4b 	0x2b4b
    2e80:	0001e313 	0x1e313
    2e84:	002b9500 	0x2b9500
    2e88:	01ec1400 	0x1ec1400
    2e8c:	f7130000 	sdc1	$f19,0(t8)
    2e90:	a8000001 	swl	zero,1(zero)
    2e94:	1300002b 	beqz	t8,2f44 <__Size_Of_SDRAM-0x78bc>
    2e98:	00000201 	0x201
    2e9c:	00002be9 	0x2be9
    2ea0:	00020c13 	0x20c13
    2ea4:	002c1200 	0x2c1200
    2ea8:	01cd1500 	0x1cd1500
    2eac:	17160000 	bne	t8,s6,2eb0 <__Size_Of_SDRAM-0x7950>
    2eb0:	05000002 	bltz	t0,2ebc <__Size_Of_SDRAM-0x7944>
    2eb4:	025a7003 	0x25a7003
    2eb8:	011700a0 	0x11700a0
    2ebc:	0000079b 	0x79b
    2ec0:	1001c101 	beq	zero,at,ffff32c8 <__heap_start_addr+0x5ffc9678>
    2ec4:	94a00237 	lhu	zero,567(a1)
    2ec8:	30a0023e 	andi	zero,a1,0x23e
    2ecc:	c700002c 	lwc1	$f0,44(t8)
    2ed0:	09000004 	j	4000010 <__Size_Of_SDRAM+0x3ff5810>
    2ed4:	c2010069 	ll	at,105(s0)
    2ed8:	0000004c 	syscall	0x1
    2edc:	646d6318 	udi1i	t5,v1,25368
    2ee0:	41c30100 	0x41c30100
    2ee4:	50000000 	0x50000000
    2ee8:	1900002c 	blez	t0,2f9c <__Size_Of_SDRAM-0x7864>
    2eec:	000007a3 	0x7a3
    2ef0:	004cc401 	0x4cc401
    2ef4:	2c7d0000 	sltiu	sp,v1,0
    2ef8:	c2190000 	ll	t9,0(s0)
    2efc:	01000007 	srav	zero,zero,t0
    2f00:	00004cc5 	0x4cc5
    2f04:	002cbc00 	0x2cbc00
    2f08:	072f0800 	0x72f0800
    2f0c:	c8010000 	lwc2	$1,0(zero)
    2f10:	0000007f 	0x7f
    2f14:	00074008 	0x74008
    2f18:	7fc90100 	0x7fc90100
    2f1c:	08000000 	j	0 <__Size_Of_SDRAM-0xa800>
    2f20:	000005db 	0x5db
    2f24:	0041ca01 	0x41ca01
    2f28:	961a0000 	lhu	k0,0(s0)
    2f2c:	d7000000 	ldc1	$f0,0(t8)
    2f30:	01000004 	sllv	zero,zero,t0
    2f34:	5a680305 	0x5a680305
    2f38:	8c1ba002 	lw	k1,-24574(zero)
    2f3c:	94a00237 	lhu	zero,567(a1)
    2f40:	19a0023e 	blez	t5,383c <__Size_Of_SDRAM-0x6fc4>
    2f44:	00000716 	0x716
    2f48:	0041e901 	0x41e901
    2f4c:	2d1c0000 	sltiu	gp,t0,0
    2f50:	791c0000 	0x791c0000
    2f54:	8c000001 	lw	zero,1(zero)
    2f58:	08a00237 	j	28008dc <__Size_Of_SDRAM+0x27f60dc>
    2f5c:	01000002 	0x1000002
    2f60:	036801b7 	0x36801b7
    2f64:	95150000 	lhu	s5,0(t0)
    2f68:	15000001 	bnez	t0,2f70 <__Size_Of_SDRAM-0x7890>
    2f6c:	0000018a 	0x18a
    2f70:	0002201d 	0x2201d
    2f74:	01a01400 	0x1a01400
    2f78:	ab130000 	swl	s3,0(t8)
    2f7c:	5b000001 	0x5b000001
    2f80:	0000002d 	0x2d
    2f84:	00a91e00 	0xa91e00
    2f88:	37a00000 	ori	zero,sp,0x0
    2f8c:	0238a002 	0x238a002
    2f90:	ed010000 	swc3	$1,0(t0)
    2f94:	000003a7 	0x3a7
    2f98:	0000ba15 	0xba15
    2f9c:	02501d00 	0x2501d00
    2fa0:	c5140000 	lwc1	$f20,0(t0)
    2fa4:	13000000 	beqz	t8,2fa8 <__Size_Of_SDRAM-0x7858>
    2fa8:	000000d0 	0xd0
    2fac:	00002d79 	0x2d79
    2fb0:	0000db13 	0xdb13
    2fb4:	002da600 	0x2da600
    2fb8:	00e61300 	0xe61300
    2fbc:	2dcf0000 	sltiu	t7,t6,0
    2fc0:	00000000 	nop
    2fc4:	0001511f 	0x1511f
    2fc8:	02385000 	0x2385000
    2fcc:	023864a0 	0x23864a0
    2fd0:	01b501a0 	0x1b501a0
    2fd4:	000003d0 	0x3d0
    2fd8:	00016215 	0x16215
    2fdc:	38501b00 	xori	s0,v0,0x1b00
    2fe0:	3864a002 	xori	a0,v1,0xa002
    2fe4:	6d14a002 	udi3i	s4,t0,-24574
    2fe8:	00000001 	movf	zero,zero,$fcc0
    2fec:	02682000 	0x2682000
    2ff0:	04050000 	0x4050000
    2ff4:	70210000 	mad	at,at
    2ff8:	01007274 	0x1007274
    2ffc:	007f0140 	0x7f0140
    3000:	2f0b0000 	sltiu	t3,t8,0
    3004:	21220000 	addi	v0,t1,0
    3008:	01000007 	srav	zero,zero,t0
    300c:	004c0142 	0x4c0142
    3010:	8d020000 	lw	v0,0(t0)
    3014:	075f2328 	0x75f2328
    3018:	43010000 	c0	0x1010000
    301c:	0000f201 	0xf201
    3020:	80200000 	lb	zero,0(at)
    3024:	37000002 	ori	zero,t8,0x2
    3028:	24000004 	li	zero,4
    302c:	00727470 	0x727470
    3030:	7f011501 	0x7f011501
    3034:	25000000 	addiu	zero,t0,0
    3038:	00000721 	0x721
    303c:	4c011601 	0x4c011601
    3040:	34000000 	li	zero,0x0
    3044:	2300002f 	addi	zero,t8,47
    3048:	0000075f 	0x75f
    304c:	f2011701 	0xf2011701
    3050:	00000000 	nop
    3054:	0000f826 	xor	ra,zero,zero
    3058:	0239d400 	0x239d400
    305c:	000298a0 	0x298a0
    3060:	01020100 	0x1020100
    3064:	00012a15 	0x12a15
    3068:	011f1500 	0x11f1500
    306c:	14150000 	bne	zero,s5,3070 <__Size_Of_SDRAM-0x7790>
    3070:	15000001 	bnez	t0,3078 <__Size_Of_SDRAM-0x7788>
    3074:	00000109 	0x109
    3078:	0002b01d 	0x2b01d
    307c:	01351300 	0x1351300
    3080:	2f680000 	sltiu	t0,k1,0
    3084:	40130000 	mfc0	s3,$0
    3088:	96000001 	lhu	zero,1(s0)
    308c:	2700002f 	addiu	zero,t8,47
    3090:	00000062 	0x62
    3094:	a0023d68 	sb	v0,15720(zero)
    3098:	a0023da8 	sb	v0,15784(zero)
    309c:	048ba401 	0x48ba401
    30a0:	73150000 	mad	t8,s5
    30a4:	00000000 	nop
    30a8:	0000851e 	0x851e
    30ac:	023e0400 	0x23e0400
    30b0:	0002c8a0 	0x2c8a0
    30b4:	a9ae0100 	swl	t6,256(t5)
    30b8:	15000004 	bnez	t0,30cc <__Size_Of_SDRAM-0x7734>
    30bc:	0000009d 	0x9d
    30c0:	00009215 	0x9215
    30c4:	85280000 	lh	t0,0(t1)
    30c8:	40000000 	mfc0	zero,$0
    30cc:	94a0023e 	lhu	zero,574(a1)
    30d0:	01a0023e 	0x1a0023e
    30d4:	009d15af 	0x9d15af
    30d8:	92150000 	lbu	s5,0(s0)
	...
    30e4:	0002390d 	break	0x2,0xe4
    30e8:	0004d700 	sll	k0,a0,0x1c
    30ec:	02360e00 	0x2360e00
    30f0:	00070000 	sll	zero,a3,0x0
    30f4:	0004c710 	0x4c710
    30f8:	070f2900 	0x70f2900
    30fc:	1e010000 	0x1e010000
    3100:	000004eb 	0x4eb
    3104:	00010000 	sll	zero,at,0x0
    3108:	0001b510 	0x1b510
    310c:	003e0000 	0x3e0000
    3110:	00020000 	sll	zero,v0,0x0
    3114:	00000ef2 	0xef2
    3118:	00850104 	0x850104
    311c:	c9010000 	lwc2	$1,0(t0)
    3120:	1c000007 	bgtz	zero,3140 <__Size_Of_SDRAM-0x76c0>
    3124:	94000000 	lhu	zero,0(zero)
    3128:	94a0023e 	lhu	zero,574(a1)
    312c:	75a0023e 	jalx	68008f8 <__Size_Of_SDRAM+0x67f60f8>
    3130:	0200000e 	0x200000e
    3134:	00770801 	0x770801
    3138:	02020000 	0x2020000
    313c:	00000907 	0x907
    3140:	07040200 	0x7040200
    3144:	0000005f 	0x5f
    3148:	55070802 	0x55070802
    314c:	00000000 	nop
    3150:	0000003e 	udi4	zero,zero,zero
    3154:	0f110002 	jal	c440008 <__Size_Of_SDRAM+0xc435808>
    3158:	01040000 	0x1040000
    315c:	00000085 	0x85
    3160:	0007d401 	0x7d401
    3164:	00001c00 	sll	v1,zero,0x10
    3168:	023e9400 	0x23e9400
    316c:	023e94a0 	0x23e94a0
    3170:	000e92a0 	0xe92a0
    3174:	08010200 	j	40800 <__Size_Of_SDRAM+0x36000>
    3178:	00000077 	0x77
    317c:	09070202 	j	41c0808 <__Size_Of_SDRAM+0x41b6008>
    3180:	02000000 	0x2000000
    3184:	005f0704 	0x5f0704
    3188:	08020000 	j	80000 <__Size_Of_SDRAM+0x75800>
    318c:	00005507 	0x5507
    3190:	02a00000 	0x2a00000
    3194:	00020000 	sll	zero,v0,0x0
    3198:	00000f30 	0xf30
    319c:	00850104 	0x850104
    31a0:	45010000 	bc1t	31a4 <__Size_Of_SDRAM-0x765c>
    31a4:	1c000008 	bgtz	zero,31c8 <__Size_Of_SDRAM-0x7638>
    31a8:	94000000 	lhu	zero,0(zero)
    31ac:	c8a0023e 	lwc2	$0,574(a1)
    31b0:	afa0023f 	sw	zero,575(sp)
    31b4:	0200000e 	0x200000e
    31b8:	0000004f 	sync	0x1
    31bc:	00300902 	0x300902
    31c0:	01030000 	0x1030000
    31c4:	00007708 	0x7708
    31c8:	088b0200 	j	22c0800 <__Size_Of_SDRAM+0x22b6000>
    31cc:	0a020000 	j	8080000 <__Size_Of_SDRAM+0x8075800>
    31d0:	00000042 	srl	zero,zero,0x1
    31d4:	09070203 	j	41c080c <__Size_Of_SDRAM+0x41b600c>
    31d8:	02000000 	0x2000000
    31dc:	000007ec 	0x7ec
    31e0:	00540b02 	0x540b02
    31e4:	04030000 	0x4030000
    31e8:	00005f07 	0x5f07
    31ec:	085f0200 	j	17c0800 <__Size_Of_SDRAM+0x17b6000>
    31f0:	0c020000 	jal	80000 <__Size_Of_SDRAM+0x75800>
    31f4:	00000066 	0x66
    31f8:	55070803 	0x55070803
    31fc:	04000000 	bltz	zero,3200 <__Size_Of_SDRAM-0x7600>
    3200:	00083301 	0x83301
    3204:	01040100 	0x1040100
    3208:	a0023e94 	sb	v0,16020(zero)
    320c:	a0023e9c 	sb	v0,16028(zero)
    3210:	009f6d01 	0x9f6d01
    3214:	04050000 	0x4050000
    3218:	01000008 	jr	t0
    321c:	00009f04 	0x9f04
    3220:	06540100 	0x6540100
    3224:	006e656c 	0x6e656c
    3228:	00370401 	0x370401
    322c:	55010000 	0x55010000
    3230:	25040700 	addiu	a0,t0,1792
    3234:	08000000 	j	0 <__Size_Of_SDRAM-0xa800>
    3238:	00086601 	0x86601
    323c:	01120100 	0x1120100
    3240:	00000114 	0x114
    3244:	a0023e9c 	sb	v0,16028(zero)
    3248:	a0023eac 	sb	v0,16044(zero)
    324c:	01146d01 	0x1146d01
    3250:	04050000 	0x4050000
    3254:	01000008 	jr	t0
    3258:	00009f12 	0x9f12
    325c:	06540100 	0x6540100
    3260:	006b6361 	0x6b6361
    3264:	00251201 	0x251201
    3268:	55010000 	0x55010000
    326c:	00072105 	0x72105
    3270:	37120100 	ori	s2,t8,0x100
    3274:	01000000 	0x1000000
    3278:	74730656 	jalx	1cc1958 <__Size_Of_SDRAM+0x1cb7158>
    327c:	12010073 	beq	s0,at,344c <__Size_Of_SDRAM-0x73b4>
    3280:	00000025 	move	zero,zero
    3284:	76095701 	jalx	8255c04 <__Size_Of_SDRAM+0x824b404>
    3288:	01006c61 	0x1006c61
    328c:	00002515 	0x2515
    3290:	656c0900 	udi1i	t4,t3,2304
    3294:	1601006e 	bne	s0,at,3450 <__Size_Of_SDRAM-0x73b0>
    3298:	00000037 	0x37
    329c:	01006909 	0x1006909
    32a0:	00003716 	0x3716
    32a4:	040a0000 	0x40a0000
    32a8:	746e6905 	jalx	1b9a414 <__Size_Of_SDRAM+0x1b8fc14>
    32ac:	f3010400 	0xf3010400
    32b0:	01000007 	srav	zero,zero,t0
    32b4:	3eac0128 	0x3eac0128
    32b8:	3eb4a002 	0x3eb4a002
    32bc:	6d01a002 	udi3i	at,t0,-24574
    32c0:	0000014d 	break	0x0,0x5
    32c4:	66756206 	udi1i	s5,s3,25094
    32c8:	9f280100 	0x9f280100
    32cc:	01000000 	0x1000000
    32d0:	656c0654 	udi1i	t4,t3,1620
    32d4:	2801006e 	slti	at,zero,110
    32d8:	00000037 	0x37
    32dc:	08005501 	j	15404 <__Size_Of_SDRAM+0xac04>
    32e0:	00089201 	0x89201
    32e4:	013a0100 	0x13a0100
    32e8:	00000037 	0x37
    32ec:	a0023eb4 	sb	v0,16052(zero)
    32f0:	a0023ec8 	sb	v0,16072(zero)
    32f4:	01766d01 	0x1766d01
    32f8:	2e050000 	sltiu	a1,s0,0
    32fc:	01000008 	jr	t0
    3300:	00009f3a 	0x9f3a
    3304:	00540100 	0x540100
    3308:	07df0108 	0x7df0108
    330c:	3f010000 	0x3f010000
    3310:	00004901 	0x4901
    3314:	023ec800 	0x23ec800
    3318:	023ef8a0 	0x23ef8a0
    331c:	b06d01a0 	0xb06d01a0
    3320:	0b000001 	j	c000004 <__Size_Of_SDRAM+0xbff5804>
    3324:	0000082e 	0x82e
    3328:	009f3f01 	0x9f3f01
    332c:	2fc20000 	sltiu	v0,s8,0
    3330:	6f0c0000 	udi3i	t4,t8,0
    3334:	01007366 	0x1007366
    3338:	0000493f 	0x493f
    333c:	002fd500 	0x2fd500
    3340:	01080000 	0x1080000
    3344:	00000852 	0x852
    3348:	5b014501 	0x5b014501
    334c:	f8000000 	0xf8000000
    3350:	50a0023e 	0x50a0023e
    3354:	01a0023f 	0x1a0023f
    3358:	0001ea6d 	0x1ea6d
    335c:	082e0b00 	j	b82c00 <__Size_Of_SDRAM+0xb78400>
    3360:	45010000 	bc1t	3364 <__Size_Of_SDRAM-0x749c>
    3364:	0000009f 	0x9f
    3368:	00002fe8 	0x2fe8
    336c:	73666f0c 	0x73666f0c
    3370:	49450100 	0x49450100
    3374:	fb000000 	0xfb000000
    3378:	0000002f 	0x2f
    337c:	081d0104 	j	740410 <__Size_Of_SDRAM+0x735c10>
    3380:	4d010000 	bc3t	3384 <__Size_Of_SDRAM-0x747c>
    3384:	023f5001 	0x23f5001
    3388:	023f64a0 	0x23f64a0
    338c:	1c6d01a0 	0x1c6d01a0
    3390:	05000002 	bltz	t0,339c <__Size_Of_SDRAM-0x7464>
    3394:	00000804 	sllv	at,zero,zero
    3398:	009f4d01 	0x9f4d01
    339c:	54010000 	0x54010000
    33a0:	6e656c06 	udi3i	a1,s3,27654
    33a4:	374d0100 	ori	t5,k0,0x100
    33a8:	01000000 	0x1000000
    33ac:	01040055 	0x1040055
    33b0:	00000877 	0x877
    33b4:	64015301 	udi1i	at,zero,21249
    33b8:	88a0023f 	lwl	zero,575(a1)
    33bc:	01a0023f 	0x1a0023f
    33c0:	00025f6d 	0x25f6d
    33c4:	08040b00 	j	102c00 <__Size_Of_SDRAM+0xf8400>
    33c8:	53010000 	0x53010000
    33cc:	0000009f 	0x9f
    33d0:	0000300e 	0x300e
    33d4:	73666f0c 	0x73666f0c
    33d8:	49530100 	0x49530100
    33dc:	21000000 	addi	zero,t0,0
    33e0:	06000030 	bltz	s0,34a4 <__Size_Of_SDRAM-0x735c>
    33e4:	006c6176 	0x6c6176
    33e8:	00495301 	0x495301
    33ec:	56010000 	0x56010000
    33f0:	09010d00 	j	4043400 <__Size_Of_SDRAM+0x4038c00>
    33f4:	01000008 	jr	t0
    33f8:	3f88015b 	0x3f88015b
    33fc:	3fc8a002 	0x3fc8a002
    3400:	6d01a002 	udi3i	at,t0,-24574
    3404:	0008040b 	0x8040b
    3408:	9f5b0100 	0x9f5b0100
    340c:	34000000 	li	zero,0x0
    3410:	0c000030 	jal	c0 <__Size_Of_SDRAM-0xa740>
    3414:	0073666f 	0x73666f
    3418:	00495b01 	0x495b01
    341c:	30470000 	andi	a3,v0,0x0
    3420:	76060000 	jalx	8180000 <__Size_Of_SDRAM+0x8175800>
    3424:	01006c61 	0x1006c61
    3428:	00005b5b 	0x5b5b
    342c:	93560600 	lbu	s6,1536(k0)
    3430:	04935704 	0x4935704
    3434:	00d30000 	0xd30000
    3438:	00020000 	sll	zero,v0,0x0
    343c:	00000ffe 	0xffe
    3440:	00850104 	0x850104
    3444:	d7010000 	ldc1	$f1,0(t8)
    3448:	1c000008 	bgtz	zero,346c <__Size_Of_SDRAM-0x7394>
    344c:	c8000000 	lwc2	$0,0(zero)
    3450:	dca0023f 	0xdca0023f
    3454:	67a00240 	udi1i	zero,sp,576
    3458:	0200000f 	0x200000f
    345c:	0000004f 	sync	0x1
    3460:	00300902 	0x300902
    3464:	01030000 	0x1030000
    3468:	00007708 	0x7708
    346c:	07020300 	0x7020300
    3470:	00000009 	jalr	zero,zero
    3474:	0007ec02 	srl	sp,a3,0x10
    3478:	490b0200 	0x490b0200
    347c:	03000000 	0x3000000
    3480:	005f0704 	0x5f0704
    3484:	08030000 	j	c0000 <__Size_Of_SDRAM+0xb5800>
    3488:	00005507 	0x5507
    348c:	c4010400 	lwc1	$f1,1024(zero)
    3490:	01000008 	jr	t0
    3494:	3fc8010e 	0x3fc8010e
    3498:	3ffca002 	0x3ffca002
    349c:	6d01a002 	udi3i	at,t0,-24574
    34a0:	08a30104 	j	28c0410 <__Size_Of_SDRAM+0x28b5c10>
    34a4:	19010000 	0x19010000
    34a8:	023ffc01 	0x23ffc01
    34ac:	024024a0 	0x24024a0
    34b0:	046d01a0 	0x46d01a0
    34b4:	0008ae01 	0x8ae01
    34b8:	01250100 	0x1250100
    34bc:	a0024024 	sb	v0,16420(zero)
    34c0:	a0024080 	sb	v0,16512(zero)
    34c4:	01056d01 	0x1056d01
    34c8:	000008f0 	0x8f0
    34cc:	80013601 	lb	at,13825(zero)
    34d0:	dca00240 	0xdca00240
    34d4:	01a00240 	0x1a00240
    34d8:	0000c46d 	0xc46d
    34dc:	08ba0600 	j	2e81800 <__Size_Of_SDRAM+0x2e77000>
    34e0:	39010000 	xori	at,t0,0x0
    34e4:	0000003e 	udi4	zero,zero,zero
    34e8:	0000305a 	0x305a
    34ec:	0008e607 	0x8e607
    34f0:	3e390100 	0x3e390100
    34f4:	01000000 	0x1000000
    34f8:	d2080053 	0xd2080053
    34fc:	01000008 	jr	t0
    3500:	00002504 	0x2504
    3504:	03050100 	0x3050100
    3508:	a0029c2c 	sb	v0,-25556(zero)
    350c:	00007b00 	sll	t7,zero,0xc
    3510:	85000200 	lh	zero,512(t0)
    3514:	04000010 	bltz	zero,3558 <__Size_Of_SDRAM-0x72a8>
    3518:	00008501 	0x8501
    351c:	09120100 	j	4480400 <__Size_Of_SDRAM+0x4475c00>
    3520:	001c0000 	sll	zero,gp,0x0
    3524:	40dc0000 	ctc0	gp,$0
    3528:	41b0a002 	0x41b0a002
    352c:	1014a002 	beq	zero,s4,fffeb538 <__heap_start_addr+0x5ffc18e8>
    3530:	01020000 	0x1020000
    3534:	00007708 	0x7708
    3538:	07020200 	0x7020200
    353c:	00000009 	jalr	zero,zero
    3540:	0007ec03 	sra	sp,a3,0x10
    3544:	3e0b0200 	0x3e0b0200
    3548:	02000000 	0x2000000
    354c:	005f0704 	0x5f0704
    3550:	08020000 	j	80000 <__Size_Of_SDRAM+0x75800>
    3554:	00005507 	0x5507
    3558:	fb010400 	0xfb010400
    355c:	01000008 	jr	t0
    3560:	40dc0105 	0x40dc0105
    3564:	4108a002 	0x4108a002
    3568:	6d01a002 	udi3i	at,t0,-24574
    356c:	09230105 	j	48c0414 <__Size_Of_SDRAM+0x48b5c14>
    3570:	0c010000 	jal	40000 <__Size_Of_SDRAM+0x35800>
    3574:	02410801 	movt	at,s2,$fcc0
    3578:	0241b0a0 	0x241b0a0
    357c:	066d01a0 	0x66d01a0
    3580:	0000090a 	0x90a
    3584:	00330f01 	0x330f01
    3588:	00000000 	nop
    358c:	00000087 	0x87
    3590:	10e80002 	beq	a3,t0,359c <__Size_Of_SDRAM-0x7264>
    3594:	01040000 	0x1040000
    3598:	00000085 	0x85
    359c:	00094501 	0x94501
    35a0:	00001c00 	sll	v1,zero,0x10
    35a4:	0241b000 	0x241b000
    35a8:	024208a0 	0x24208a0
    35ac:	0010b0a0 	0x10b0a0
    35b0:	08010200 	j	40800 <__Size_Of_SDRAM+0x36000>
    35b4:	00000077 	0x77
    35b8:	09070202 	j	41c0808 <__Size_Of_SDRAM+0x41b6008>
    35bc:	03000000 	0x3000000
    35c0:	000007ec 	0x7ec
    35c4:	003e0b02 	0x3e0b02
    35c8:	04020000 	0x4020000
    35cc:	00005f07 	0x5f07
    35d0:	07080200 	0x7080200
    35d4:	00000055 	0x55
    35d8:	09330104 	j	4cc0410 <__Size_Of_SDRAM+0x4cb5c10>
    35dc:	04010000 	b	35e0 <__Size_Of_SDRAM-0x7220>
    35e0:	0241b001 	movt	s6,s2,$fcc0
    35e4:	0241e8a0 	0x241e8a0
    35e8:	056d01a0 	0x56d01a0
    35ec:	00095301 	0x95301
    35f0:	010f0100 	0x10f0100
    35f4:	a00241e8 	sb	v0,16872(zero)
    35f8:	a0024208 	sb	v0,16904(zero)
    35fc:	00846d01 	0x846d01
    3600:	40060000 	mfc0	a2,$0
    3604:	01000009 	jalr	zero,t0
    3608:	0000840f 	0x840f
    360c:	00540100 	0x540100
    3610:	00330407 	0x330407
    3614:	97000000 	lhu	zero,0(t8)
    3618:	02000002 	0x2000002
    361c:	00115800 	sll	t3,s1,0x0
    3620:	85010400 	lh	at,1024(t0)
    3624:	01000000 	0x1000000
    3628:	00000973 	0x973
    362c:	0000001c 	0x1c
    3630:	a0024208 	sb	v0,16904(zero)
    3634:	a0024680 	sb	v0,18048(zero)
    3638:	0000113a 	0x113a
    363c:	00004f02 	srl	t1,zero,0x1c
    3640:	30090200 	andi	t1,zero,0x200
    3644:	03000000 	0x3000000
    3648:	00770801 	0x770801
    364c:	02030000 	0x2030000
    3650:	00000907 	0x907
    3654:	07ec0200 	0x7ec0200
    3658:	0b020000 	j	c080000 <__Size_Of_SDRAM+0xc075800>
    365c:	00000049 	0x49
    3660:	5f070403 	0x5f070403
    3664:	03000000 	0x3000000
    3668:	00550708 	0x550708
    366c:	18040000 	0x18040000
    3670:	00dd0701 	0xdd0701
    3674:	69050000 	udi2i	a1,t0,0
    3678:	08010064 	j	40190 <__Size_Of_SDRAM+0x35990>
    367c:	00000049 	0x49
    3680:	06002302 	bltz	s0,c28c <__Size_Of_SDRAM+0x1a8c>
    3684:	00000997 	0x997
    3688:	00490901 	0x490901
    368c:	23020000 	addi	v0,t8,0
    3690:	09bd0604 	j	6f41810 <__Size_Of_SDRAM+0x6f37010>
    3694:	0a010000 	j	8040000 <__Size_Of_SDRAM+0x8035800>
    3698:	00000030 	0x30
    369c:	06082302 	0x6082302
    36a0:	00000981 	0x981
    36a4:	00300b01 	0x300b01
    36a8:	23020000 	addi	v0,t8,0
    36ac:	098c0609 	j	6301824 <__Size_Of_SDRAM+0x62f7024>
    36b0:	0c010000 	jal	40000 <__Size_Of_SDRAM+0x35800>
    36b4:	00000030 	0x30
    36b8:	060a2302 	0x60a2302
    36bc:	000009c9 	0x9c9
    36c0:	00300d01 	0x300d01
    36c4:	23020000 	addi	v0,t8,0
    36c8:	0966060b 	j	598182c <__Size_Of_SDRAM+0x597702c>
    36cc:	0e010000 	jal	8040000 <__Size_Of_SDRAM+0x8035800>
    36d0:	00000030 	0x30
    36d4:	060c2302 	0x60c2302
    36d8:	0000095f 	0x95f
    36dc:	00dd0f01 	0xdd0f01
    36e0:	23020000 	addi	v0,t8,0
    36e4:	03380610 	0x3380610
    36e8:	10010000 	beq	zero,at,36ec <__Size_Of_SDRAM-0x7114>
    36ec:	00000049 	0x49
    36f0:	00142302 	srl	a0,s4,0xc
    36f4:	00e30407 	0xe30407
    36f8:	e8080000 	swc2	$8,0(zero)
    36fc:	03000000 	0x3000000
    3700:	00800601 	0x800601
    3704:	01020000 	0x1020000
    3708:	0100000a 	movz	zero,t0,zero
    370c:	00005711 	0x5711
    3710:	b0010900 	0xb0010900
    3714:	01000009 	jalr	zero,t0
    3718:	014c01c6 	0x14c01c6
    371c:	42080000 	c0	0x80000
    3720:	4250a002 	c0	0x50a002
    3724:	6d01a002 	udi3i	at,t0,-24574
    3728:	0000014c 	syscall	0x5
    372c:	00099c0a 	0x99c0a
    3730:	3ec60100 	0x3ec60100
    3734:	78000000 	0x78000000
    3738:	0b000030 	j	c0000c0 <__Size_Of_SDRAM+0xbff58c0>
    373c:	00667562 	0x667562
    3740:	0153c601 	0x153c601
    3744:	55010000 	0x55010000
    3748:	6e656c0b 	udi3i	a1,s3,27659
    374c:	3ec60100 	0x3ec60100
    3750:	01000000 	0x1000000
    3754:	00690c56 	0x690c56
    3758:	003ec901 	0x3ec901
    375c:	308b0000 	andi	t3,a0,0x0
    3760:	0d000000 	jal	4000000 <__Size_Of_SDRAM+0x3ff5800>
    3764:	6e690504 	udi3i	t1,s3,1284
    3768:	04070074 	0x4070074
    376c:	00000025 	move	zero,zero
    3770:	09d3010e 	j	74c0438 <__Size_Of_SDRAM+0x74b5c38>
    3774:	d4010000 	ldc1	$f1,0(zero)
    3778:	00014c01 	0x14c01
    377c:	02425000 	0x2425000
    3780:	024354a0 	0x24354a0
    3784:	00309ea0 	0x309ea0
    3788:	0001c500 	sll	t8,at,0x14
    378c:	099c0a00 	j	6702800 <__Size_Of_SDRAM+0x66f8000>
    3790:	d4010000 	ldc1	$f1,0(zero)
    3794:	0000003e 	udi4	zero,zero,zero
    3798:	000030bd 	0x30bd
    379c:	6675620b 	udi1i	s5,s3,25099
    37a0:	53d40100 	0x53d40100
    37a4:	01000001 	movf	zero,t0,$fcc0
    37a8:	656c0b55 	udi1i	t4,t3,2901
    37ac:	d401006e 	ldc1	$f1,110(zero)
    37b0:	0000003e 	udi4	zero,zero,zero
    37b4:	ea0f5601 	swc2	$15,22017(s0)
    37b8:	01000008 	jr	t0
    37bc:	00003ed7 	0x3ed7
    37c0:	72731000 	0x72731000
    37c4:	d8010063 	0xd8010063
    37c8:	0000003e 	udi4	zero,zero,zero
    37cc:	7473640c 	jalx	1cd9030 <__Size_Of_SDRAM+0x1cce830>
    37d0:	3ed90100 	0x3ed90100
    37d4:	d0000000 	0xd0000000
    37d8:	00000030 	0x30
    37dc:	09e10111 	j	7840444 <__Size_Of_SDRAM+0x7835c44>
    37e0:	17010000 	bne	t8,at,37e4 <__Size_Of_SDRAM-0x701c>
    37e4:	014c0101 	0x14c0101
    37e8:	43540000 	c0	0x1540000
    37ec:	45e0a002 	0x45e0a002
    37f0:	30eea002 	andi	t6,a3,0xa002
    37f4:	022c0000 	0x22c0000
    37f8:	9c120000 	0x9c120000
    37fc:	01000009 	jalr	zero,t0
    3800:	003e0117 	0x3e0117
    3804:	310d0000 	andi	t5,t0,0x0
    3808:	6c130000 	udi3i	s3,zero,0
    380c:	01006e65 	0x1006e65
    3810:	003e0117 	0x3e0117
    3814:	55010000 	0x55010000
    3818:	00033814 	0x33814
    381c:	011a0100 	0x11a0100
    3820:	0000003e 	udi4	zero,zero,zero
    3824:	0000312b 	0x312b
    3828:	0008ea15 	0x8ea15
    382c:	011a0100 	0x11a0100
    3830:	0000003e 	udi4	zero,zero,zero
    3834:	74736416 	jalx	1cd9058 <__Size_Of_SDRAM+0x1cce858>
    3838:	011b0100 	0x11b0100
    383c:	0000003e 	udi4	zero,zero,zero
    3840:	0e005401 	jal	8015004 <__Size_Of_SDRAM+0x800a804>
    3844:	0009a301 	0x9a301
    3848:	01820100 	0x1820100
    384c:	0000014c 	syscall	0x5
    3850:	a00245e0 	sb	v0,17888(zero)
    3854:	a0024680 	sb	v0,18048(zero)
    3858:	000031ac 	0x31ac
    385c:	00000260 	0x260
    3860:	0008ea0f 	0x8ea0f
    3864:	3e850100 	0x3e850100
    3868:	10000000 	b	386c <__Size_Of_SDRAM-0x6f94>
    386c:	00747364 	0x747364
    3870:	003e8601 	0x3e8601
    3874:	17000000 	bnez	t8,3878 <__Size_Of_SDRAM-0x6f88>
    3878:	000000ef 	0xef
    387c:	00000270 	0x270
    3880:	00027018 	0x27018
    3884:	19000000 	blez	t0,3888 <__Size_Of_SDRAM-0x6f78>
    3888:	ef1a0704 	swc3	$26,1796(t8)
    388c:	01000009 	jalr	zero,t0
    3890:	0002844d 	break	0x2,0x211
    3894:	90030500 	lbu	v1,1280(zero)
    3898:	08a0025a 	j	2800968 <__Size_Of_SDRAM+0x27f6168>
    389c:	00000260 	0x260
    38a0:	0009f61a 	0x9f61a
    38a4:	ef7f0100 	swc3	$31,256(k1)
    38a8:	05000000 	bltz	t0,38ac <__Size_Of_SDRAM-0x6f54>
    38ac:	029c3003 	0x29c3003
    38b0:	00fc00a0 	0xfc00a0
    38b4:	00020000 	sll	zero,v0,0x0
    38b8:	000012cf 	0x12cf
    38bc:	00850104 	0x850104
    38c0:	4d010000 	bc3t	38c4 <__Size_Of_SDRAM-0x6f3c>
    38c4:	1c00000a 	bgtz	zero,38f0 <__Size_Of_SDRAM-0x6f10>
    38c8:	80000000 	lb	zero,0(zero)
    38cc:	34a00246 	ori	zero,a1,0x246
    38d0:	dea00247 	0xdea00247
    38d4:	02000012 	0x2000012
    38d8:	00770801 	0x770801
    38dc:	02020000 	0x2020000
    38e0:	00000907 	0x907
    38e4:	07ec0300 	0x7ec0300
    38e8:	0b020000 	j	c080000 <__Size_Of_SDRAM+0xc075800>
    38ec:	0000003e 	udi4	zero,zero,zero
    38f0:	5f070402 	0x5f070402
    38f4:	02000000 	0x2000000
    38f8:	00550708 	0x550708
    38fc:	01040000 	0x1040000
    3900:	00000a0f 	0xa0f
    3904:	05010401 	bgez	t0,490c <__Size_Of_SDRAM-0x5ef4>
    3908:	000a3a01 	0xa3a01
    390c:	330e0100 	andi	t6,t8,0x100
    3910:	01000000 	0x1000000
    3914:	00004c06 	0x4c06
    3918:	02468000 	0x2468000
    391c:	0246a4a0 	0x246a4a0
    3920:	066d01a0 	0x66d01a0
    3924:	00000055 	0x55
    3928:	a00246a4 	sb	v0,18084(zero)
    392c:	a00246b8 	sb	v0,18104(zero)
    3930:	01076d01 	0x1076d01
    3934:	00000a69 	0xa69
    3938:	46b81301 	c1	0xb81301
    393c:	46cca002 	c1	0xcca002
    3940:	6d01a002 	udi3i	at,t0,-24574
    3944:	0a1f0108 	j	87c0420 <__Size_Of_SDRAM+0x87b5c20>
    3948:	18010000 	0x18010000
    394c:	a00246cc 	sb	v0,18124(zero)
    3950:	a0024734 	sb	v0,18228(zero)
    3954:	5d096d01 	0x5d096d01
    3958:	0100000a 	movz	zero,t0,zero
    395c:	0000331a 	0x331a
    3960:	0031cb00 	0x31cb00
    3964:	0a630900 	j	98c2400 <__Size_Of_SDRAM+0x98b7c00>
    3968:	1a010000 	0x1a010000
    396c:	00000033 	0x33
    3970:	000031de 	0x31de
    3974:	00004c0a 	0x4c0a
    3978:	0246cc00 	0x246cc00
    397c:	0246e8a0 	0x246e8a0
    3980:	0a1b01a0 	j	86c0680 <__Size_Of_SDRAM+0x86b5e80>
    3984:	00000055 	0x55
    3988:	a00246e8 	sb	v0,18152(zero)
    398c:	a00246f0 	sb	v0,18160(zero)
    3990:	550a1c01 	0x550a1c01
    3994:	f0000000 	madh	zero,zero
    3998:	f4a00246 	sdc1	$f0,582(a1)
    399c:	01a00246 	0x1a00246
    39a0:	00550a1e 	0x550a1e
    39a4:	470c0000 	c1	0x10c0000
    39a8:	4714a002 	c1	0x114a002
    39ac:	2201a002 	addi	at,s0,-24574
    39b0:	088b0000 	j	22c0000 <__Size_Of_SDRAM+0x22b5800>
    39b4:	00020000 	sll	zero,v0,0x0
    39b8:	0000136c 	0x136c
    39bc:	00850104 	0x850104
    39c0:	1d010000 	0x1d010000
    39c4:	1c00000c 	bgtz	zero,39f8 <__Size_Of_SDRAM-0x6e08>
    39c8:	34000000 	li	zero,0x0
    39cc:	f8a00247 	0xf8a00247
    39d0:	7fa00248 	0x7fa00248
    39d4:	02000013 	mtlo	s0
    39d8:	0000004f 	sync	0x1
    39dc:	00300902 	0x300902
    39e0:	01030000 	0x1030000
    39e4:	00007708 	0x7708
    39e8:	07020300 	0x7020300
    39ec:	00000009 	jalr	zero,zero
    39f0:	0007ec02 	srl	sp,a3,0x10
    39f4:	490b0200 	0x490b0200
    39f8:	03000000 	0x3000000
    39fc:	005f0704 	0x5f0704
    3a00:	08030000 	j	c0000 <__Size_Of_SDRAM+0xb5800>
    3a04:	00005507 	0x5507
    3a08:	03040400 	0x3040400
    3a0c:	00008260 	0x8260
    3a10:	0a880500 	j	a201400 <__Size_Of_SDRAM+0xa1f6c00>
    3a14:	61030000 	udi0i	v1,t0,0
    3a18:	0000003e 	udi4	zero,zero,zero
    3a1c:	02081804 	sllv	v1,t0,s0
    3a20:	44060023 	mfc1	a2,$0,35
    3a24:	03004c4c 	syscall	0xc0131
    3a28:	00003e62 	0x3e62
    3a2c:	00080400 	sll	zero,t0,0x10
    3a30:	00002302 	srl	a0,zero,0xc
    3a34:	65030404 	udi1i	v1,t0,1028
    3a38:	000000ad 	0xad
    3a3c:	000a8805 	0xa8805
    3a40:	3e660300 	0x3e660300
    3a44:	04000000 	bltz	zero,3a48 <__Size_Of_SDRAM-0x6db8>
    3a48:	23020818 	addi	v0,t8,2072
    3a4c:	42520600 	c0	0x520600
    3a50:	67030044 	udi1i	v1,t8,68
    3a54:	0000003e 	udi4	zero,zero,zero
    3a58:	02000804 	sllv	at,zero,s0
    3a5c:	04000023 	bltz	zero,3aec <__Size_Of_SDRAM-0x6d14>
    3a60:	d86a0304 	0xd86a0304
    3a64:	05000000 	bltz	t0,3a68 <__Size_Of_SDRAM-0x6d98>
    3a68:	00000a88 	0xa88
    3a6c:	003e6b03 	0x3e6b03
    3a70:	18040000 	0x18040000
    3a74:	00230208 	0x230208
    3a78:	44485406 	0x44485406
    3a7c:	3e6c0300 	0x3e6c0300
    3a80:	04000000 	bltz	zero,3a84 <__Size_Of_SDRAM-0x6d7c>
    3a84:	23020008 	addi	v0,t8,8
    3a88:	08070000 	j	1c0000 <__Size_Of_SDRAM+0x1b5800>
    3a8c:	0400000c 	bltz	zero,3ac0 <__Size_Of_SDRAM-0x6d40>
    3a90:	01115d03 	0x1115d03
    3a94:	32080000 	andi	t0,s0,0x0
    3a98:	03000001 	movf	zero,t8,$fcc0
    3a9c:	00003e5e 	0x3e5e
    3aa0:	0c530800 	jal	14c2000 <__Size_Of_SDRAM+0x14b7800>
    3aa4:	63030000 	udi0i	v1,t8,0
    3aa8:	00000057 	0x57
    3aac:	000a7808 	0xa7808
    3ab0:	82680300 	lb	t0,768(s3)
    3ab4:	08000000 	j	0 <__Size_Of_SDRAM-0xa800>
    3ab8:	00000a80 	sll	at,zero,0xa
    3abc:	00ad6d03 	0xad6d03
    3ac0:	02000000 	0x2000000
    3ac4:	00000c09 	0xc09
    3ac8:	00d86e03 	0xd86e03
    3acc:	04040000 	0x4040000
    3ad0:	01477403 	0x1477403
    3ad4:	88050000 	lwl	a1,0(zero)
    3ad8:	0300000a 	movz	zero,t8,zero
    3adc:	00003e75 	0x3e75
    3ae0:	08180400 	j	601000 <__Size_Of_SDRAM+0x5f6800>
    3ae4:	06002302 	bltz	s0,c6f0 <__Size_Of_SDRAM+0x1ef0>
    3ae8:	004d4c44 	0x4d4c44
    3aec:	003e7603 	0x3e7603
    3af0:	08040000 	j	100000 <__Size_Of_SDRAM+0xf5800>
    3af4:	00230200 	0x230200
    3af8:	03040400 	0x3040400
    3afc:	0001a579 	0x1a579
    3b00:	0a880500 	j	a201400 <__Size_Of_SDRAM+0xa1f6c00>
    3b04:	7a030000 	0x7a030000
    3b08:	0000003e 	udi4	zero,zero,zero
    3b0c:	02041c04 	0x2041c04
    3b10:	ac050023 	sw	a1,35(zero)
    3b14:	0300000b 	movn	zero,t8,zero
    3b18:	00003e7b 	0x3e7b
    3b1c:	03010400 	0x3010400
    3b20:	05002302 	bltz	t0,c72c <__Size_Of_SDRAM+0x1f2c>
    3b24:	00000ae7 	0xae7
    3b28:	003e7c03 	0x3e7c03
    3b2c:	01040000 	0x1040000
    3b30:	00230202 	0x230202
    3b34:	000aa105 	0xaa105
    3b38:	3e7d0300 	0x3e7d0300
    3b3c:	04000000 	bltz	zero,3b40 <__Size_Of_SDRAM-0x6cc0>
    3b40:	23020101 	addi	v0,t8,257
    3b44:	0c470500 	jal	11c1400 <__Size_Of_SDRAM+0x11b6c00>
    3b48:	7e030000 	0x7e030000
    3b4c:	0000003e 	udi4	zero,zero,zero
    3b50:	02000104 	0x2000104
    3b54:	07000023 	bltz	t8,3be4 <__Size_Of_SDRAM-0x6c1c>
    3b58:	00000be2 	0xbe2
    3b5c:	d3710304 	0xd3710304
    3b60:	08000001 	j	4 <__Size_Of_SDRAM-0xa7fc>
    3b64:	00000132 	0x132
    3b68:	003e7203 	0x3e7203
    3b6c:	53080000 	0x53080000
    3b70:	0300000c 	syscall	0xc0000
    3b74:	00011c77 	0x11c77
    3b78:	0a780800 	j	9e02000 <__Size_Of_SDRAM+0x9df7800>
    3b7c:	7f030000 	0x7f030000
    3b80:	00000147 	0x147
    3b84:	0be30200 	j	f8c0800 <__Size_Of_SDRAM+0xf8b6000>
    3b88:	80030000 	lb	v1,0(zero)
    3b8c:	000001a5 	0x1a5
    3b90:	86030404 	lh	v1,1028(s0)
    3b94:	0000023c 	0x23c
    3b98:	000af605 	0xaf605
    3b9c:	3e870300 	0x3e870300
    3ba0:	04000000 	bltz	zero,3ba4 <__Size_Of_SDRAM-0x6c5c>
    3ba4:	23020818 	addi	v0,t8,2072
    3ba8:	0b000500 	j	c001400 <__Size_Of_SDRAM+0xbff6c00>
    3bac:	88030000 	lwl	v1,0(zero)
    3bb0:	0000003e 	udi4	zero,zero,zero
    3bb4:	02060204 	0x2060204
    3bb8:	ec050023 	swc3	$5,35(zero)
    3bbc:	0300000a 	movz	zero,t8,zero
    3bc0:	00003e8b 	0x3e8b
    3bc4:	04020400 	0x4020400
    3bc8:	06002302 	bltz	s0,c7d4 <__Size_Of_SDRAM+0x1fd4>
    3bcc:	00444949 	0x444949
    3bd0:	003e8c03 	0x3e8c03
    3bd4:	03040000 	0x3040000
    3bd8:	00230201 	0x230201
    3bdc:	000b6d05 	0xb6d05
    3be0:	3e920300 	0x3e920300
    3be4:	04000000 	bltz	zero,3be8 <__Size_Of_SDRAM-0x6c18>
    3be8:	23020001 	addi	v0,t8,1
    3bec:	04040000 	0x4040000
    3bf0:	02bc9603 	0x2bc9603
    3bf4:	f6050000 	sdc1	$f5,0(s0)
    3bf8:	0300000a 	movz	zero,t8,zero
    3bfc:	00003e97 	0x3e97
    3c00:	08180400 	j	601000 <__Size_Of_SDRAM+0x5f6800>
    3c04:	05002302 	bltz	t0,c810 <__Size_Of_SDRAM+0x2010>
    3c08:	00000b4b 	0xb4b
    3c0c:	003e9803 	0x3e9803
    3c10:	02040000 	0x2040000
    3c14:	00230206 	0x230206
    3c18:	000aec05 	0xaec05
    3c1c:	3e9e0300 	0x3e9e0300
    3c20:	04000000 	bltz	zero,3c24 <__Size_Of_SDRAM-0x6bdc>
    3c24:	23020402 	addi	v0,t8,1026
    3c28:	0a910500 	j	a441400 <__Size_Of_SDRAM+0xa436c00>
    3c2c:	9f030000 	0x9f030000
    3c30:	0000003e 	udi4	zero,zero,zero
    3c34:	02030104 	0x2030104
    3c38:	95050023 	lhu	a1,35(t0)
    3c3c:	0300000b 	movn	zero,t8,zero
    3c40:	00003ea0 	0x3ea0
    3c44:	02010400 	0x2010400
    3c48:	05002302 	bltz	t0,c854 <__Size_Of_SDRAM+0x2054>
    3c4c:	00000c32 	0xc32
    3c50:	003ea203 	0x3ea203
    3c54:	01040000 	0x1040000
    3c58:	00230201 	0x230201
    3c5c:	000c2c05 	0xc2c05
    3c60:	3ea40300 	0x3ea40300
    3c64:	04000000 	bltz	zero,3c68 <__Size_Of_SDRAM-0x6b98>
    3c68:	23020001 	addi	v0,t8,1
    3c6c:	9b070000 	lwr	a3,0(t8)
    3c70:	0400000b 	bltz	zero,3ca0 <__Size_Of_SDRAM-0x6b60>
    3c74:	02ea8303 	0x2ea8303
    3c78:	32080000 	andi	t0,s0,0x0
    3c7c:	03000001 	movf	zero,t8,$fcc0
    3c80:	00003e84 	0x3e84
    3c84:	0c530800 	jal	14c2000 <__Size_Of_SDRAM+0x14b7800>
    3c88:	94030000 	lhu	v1,0(zero)
    3c8c:	000001de 	0x1de
    3c90:	000a7808 	0xa7808
    3c94:	3ca80300 	0x3ca80300
    3c98:	00000002 	srl	zero,zero,0x0
    3c9c:	000b9c02 	srl	s3,t3,0x10
    3ca0:	bca90300 	cache	0x9,768(a1)
    3ca4:	04000002 	bltz	zero,3cb0 <__Size_Of_SDRAM-0x6b50>
    3ca8:	75ae0304 	jalx	6b80c10 <__Size_Of_SDRAM+0x6b76410>
    3cac:	05000003 	bltz	t0,3cbc <__Size_Of_SDRAM-0x6b44>
    3cb0:	00000a88 	0xa88
    3cb4:	003eaf03 	0x3eaf03
    3cb8:	18040000 	0x18040000
    3cbc:	00230208 	0x230208
    3cc0:	000aaf05 	0xaaf05
    3cc4:	3eb00300 	0x3eb00300
    3cc8:	04000000 	bltz	zero,3ccc <__Size_Of_SDRAM-0x6b34>
    3ccc:	23020701 	addi	v0,t8,1793
    3cd0:	52420600 	0x52420600
    3cd4:	b103004b 	0xb103004b
    3cd8:	0000003e 	udi4	zero,zero,zero
    3cdc:	02060104 	0x2060104
    3ce0:	45060023 	0x45060023
    3ce4:	03005350 	0x3005350
    3ce8:	00003eb4 	0x3eb4
    3cec:	04020400 	0x4020400
    3cf0:	06002302 	bltz	s0,c8fc <__Size_Of_SDRAM+0x20fc>
    3cf4:	004e4550 	0x4e4550
    3cf8:	003eb903 	0x3eb903
    3cfc:	01040000 	0x1040000
    3d00:	00230203 	0x230203
    3d04:	50545306 	0x50545306
    3d08:	3eba0300 	0x3eba0300
    3d0c:	04000000 	bltz	zero,3d10 <__Size_Of_SDRAM-0x6af0>
    3d10:	23020201 	addi	v0,t8,513
    3d14:	4c570600 	0x4c570600
    3d18:	bd030053 	cache	0x3,83(t0)
    3d1c:	0000003e 	udi4	zero,zero,zero
    3d20:	02000204 	0x2000204
    3d24:	07000023 	bltz	t8,3db4 <__Size_Of_SDRAM-0x6a4c>
    3d28:	00000ada 	0xada
    3d2c:	98ac0304 	lwr	t4,772(a1)
    3d30:	08000003 	j	c <__Size_Of_SDRAM-0xa7f4>
    3d34:	00000132 	0x132
    3d38:	003ead03 	0x3ead03
    3d3c:	4c080000 	mfc3	t0,$0
    3d40:	0300000c 	syscall	0xc0000
    3d44:	0002f5c2 	srl	s8,v0,0x17
    3d48:	db020000 	0xdb020000
    3d4c:	0300000a 	movz	zero,t8,zero
    3d50:	000375c3 	sra	t6,v1,0x17
    3d54:	03040400 	0x3040400
    3d58:	000401c8 	0x401c8
    3d5c:	0af60500 	j	bd81400 <__Size_Of_SDRAM+0xbd76c00>
    3d60:	c9030000 	lwc2	$3,0(t0)
    3d64:	0000003e 	udi4	zero,zero,zero
    3d68:	02051b04 	0x2051b04
    3d6c:	90050023 	lbu	a1,35(zero)
    3d70:	0300000b 	movn	zero,t8,zero
    3d74:	00003eca 	0x3eca
    3d78:	04010400 	b	4d7c <__Size_Of_SDRAM-0x5a84>
    3d7c:	05002302 	bltz	t0,c988 <__Size_Of_SDRAM+0x2188>
    3d80:	00000aec 	0xaec
    3d84:	003ecb03 	0x3ecb03
    3d88:	02040000 	0x2040000
    3d8c:	00230202 	0x230202
    3d90:	53545206 	0x53545206
    3d94:	3ecc0300 	0x3ecc0300
    3d98:	04000000 	bltz	zero,3d9c <__Size_Of_SDRAM-0x6a64>
    3d9c:	23020101 	addi	v0,t8,257
    3da0:	54440600 	0x54440600
    3da4:	cf030052 	lwc3	$3,82(t8)
    3da8:	0000003e 	udi4	zero,zero,zero
    3dac:	02000104 	0x2000104
    3db0:	07000023 	bltz	t8,3e40 <__Size_Of_SDRAM-0x69c0>
    3db4:	00000bf3 	0xbf3
    3db8:	24c60304 	addiu	a2,a2,772
    3dbc:	08000004 	j	10 <__Size_Of_SDRAM-0xa7f0>
    3dc0:	00000132 	0x132
    3dc4:	003ec703 	0x3ec703
    3dc8:	4c080000 	mfc3	t0,$0
    3dcc:	0300000c 	syscall	0xc0000
    3dd0:	0003a3d2 	0x3a3d2
    3dd4:	f4020000 	sdc1	$f2,0(zero)
    3dd8:	0300000b 	movn	zero,t8,zero
    3ddc:	000401d3 	0x401d3
    3de0:	03040400 	0x3040400
    3de4:	0004ccd8 	0x4ccd8
    3de8:	0a880500 	j	a201400 <__Size_Of_SDRAM+0xa1f6c00>
    3dec:	d9030000 	0xd9030000
    3df0:	0000003e 	udi4	zero,zero,zero
    3df4:	02081804 	sllv	v1,t0,s0
    3df8:	52060023 	0x52060023
    3dfc:	03004546 	0x3004546
    3e00:	00003eda 	0x3eda
    3e04:	07010400 	bgez	t8,4e08 <__Size_Of_SDRAM-0x59f8>
    3e08:	05002302 	bltz	t0,ca14 <__Size_Of_SDRAM+0x2214>
    3e0c:	00000b3e 	0xb3e
    3e10:	003edc03 	0x3edc03
    3e14:	01040000 	0x1040000
    3e18:	00230206 	0x230206
    3e1c:	000b1e05 	0xb1e05
    3e20:	3edf0300 	0x3edf0300
    3e24:	04000000 	bltz	zero,3e28 <__Size_Of_SDRAM-0x69d8>
    3e28:	23020501 	addi	v0,t8,1281
    3e2c:	49420600 	0x49420600
    3e30:	3ee20300 	0x3ee20300
    3e34:	04000000 	bltz	zero,3e38 <__Size_Of_SDRAM-0x69c8>
    3e38:	23020401 	addi	v0,t8,1025
    3e3c:	45460600 	0x45460600
    3e40:	3ee30300 	0x3ee30300
    3e44:	04000000 	bltz	zero,3e48 <__Size_Of_SDRAM-0x69b8>
    3e48:	23020301 	addi	v0,t8,769
    3e4c:	45500600 	0x45500600
    3e50:	3ee40300 	0x3ee40300
    3e54:	04000000 	bltz	zero,3e58 <__Size_Of_SDRAM-0x69a8>
    3e58:	23020201 	addi	v0,t8,513
    3e5c:	454f0600 	0x454f0600
    3e60:	3ee50300 	0x3ee50300
    3e64:	04000000 	bltz	zero,3e68 <__Size_Of_SDRAM-0x6998>
    3e68:	23020101 	addi	v0,t8,257
    3e6c:	52440600 	0x52440600
    3e70:	3eea0300 	0x3eea0300
    3e74:	04000000 	bltz	zero,3e78 <__Size_Of_SDRAM-0x6988>
    3e78:	23020001 	addi	v0,t8,1
    3e7c:	bf070000 	cache	0x7,0(t8)
    3e80:	0400000a 	bltz	zero,3eac <__Size_Of_SDRAM-0x6954>
    3e84:	04efd603 	0x4efd603
    3e88:	32080000 	andi	t0,s0,0x0
    3e8c:	03000001 	movf	zero,t8,$fcc0
    3e90:	00003ed7 	0x3ed7
    3e94:	0c4c0800 	jal	1302000 <__Size_Of_SDRAM+0x12f7800>
    3e98:	ed030000 	swc3	$3,0(t0)
    3e9c:	0000042f 	0x42f
    3ea0:	0ac00200 	j	b000800 <__Size_Of_SDRAM+0xaff6000>
    3ea4:	ee030000 	swc3	$3,0(s0)
    3ea8:	000004cc 	syscall	0x13
    3eac:	f3030404 	0xf3030404
    3eb0:	0000057b 	0x57b
    3eb4:	000af605 	0xaf605
    3eb8:	3ef40300 	0x3ef40300
    3ebc:	04000000 	bltz	zero,3ec0 <__Size_Of_SDRAM-0x6940>
    3ec0:	23020818 	addi	v0,t8,2072
    3ec4:	43440600 	c0	0x1440600
    3ec8:	f5030044 	sdc1	$f3,68(t0)
    3ecc:	0000003e 	udi4	zero,zero,zero
    3ed0:	02070104 	0x2070104
    3ed4:	52060023 	0x52060023
    3ed8:	f8030049 	0xf8030049
    3edc:	0000003e 	udi4	zero,zero,zero
    3ee0:	02060104 	0x2060104
    3ee4:	44060023 	mfc1	a2,$0,35
    3ee8:	03005253 	0x3005253
    3eec:	00003efb 	0x3efb
    3ef0:	05010400 	bgez	t0,4ef4 <__Size_Of_SDRAM-0x590c>
    3ef4:	06002302 	bltz	s0,cb00 <__Size_Of_SDRAM+0x2300>
    3ef8:	00535443 	0x535443
    3efc:	003efe03 	0x3efe03
    3f00:	01040000 	0x1040000
    3f04:	00230204 	0x230204
    3f08:	000aec09 	0xaec09
    3f0c:	01010300 	0x1010300
    3f10:	0000003e 	udi4	zero,zero,zero
    3f14:	02010304 	0x2010304
    3f18:	2b090023 	slti	t1,t8,35
    3f1c:	0300000b 	movn	zero,t8,zero
    3f20:	003e0102 	0x3e0102
    3f24:	01040000 	0x1040000
    3f28:	00230200 	0x230200
    3f2c:	0bcd0700 	j	f341c00 <__Size_Of_SDRAM+0xf337400>
    3f30:	03040000 	0x3040000
    3f34:	00059ff1 	0x59ff1
    3f38:	01320800 	0x1320800
    3f3c:	f2030000 	madh	s0,v1
    3f40:	0000003e 	udi4	zero,zero,zero
    3f44:	000c4c0a 	0xc4c0a
    3f48:	01040300 	0x1040300
    3f4c:	000004fa 	0x4fa
    3f50:	0bce0b00 	j	f382c00 <__Size_Of_SDRAM+0xf378400>
    3f54:	05030000 	0x5030000
    3f58:	00057b01 	0x57b01
    3f5c:	03040c00 	0x3040c00
    3f60:	05d9010a 	0x5d9010a
    3f64:	88090000 	lwl	t1,0(zero)
    3f68:	0300000a 	movz	zero,t8,zero
    3f6c:	003e010b 	0x3e010b
    3f70:	18040000 	0x18040000
    3f74:	00230208 	0x230208
    3f78:	5243530d 	0x5243530d
    3f7c:	010c0300 	0x10c0300
    3f80:	0000003e 	udi4	zero,zero,zero
    3f84:	02000804 	sllv	at,zero,s0
    3f88:	0e000023 	jal	800008c <__Size_Of_SDRAM+0x7ff588c>
    3f8c:	00000b60 	0xb60
    3f90:	01080304 	0x1080304
    3f94:	000005ff 	0x5ff
    3f98:	0001320a 	0x1320a
    3f9c:	01090300 	0x1090300
    3fa0:	0000003e 	udi4	zero,zero,zero
    3fa4:	000c4c0a 	0xc4c0a
    3fa8:	010d0300 	0x10d0300
    3fac:	000005ab 	0x5ab
    3fb0:	0b610b00 	j	d842c00 <__Size_Of_SDRAM+0xd838400>
    3fb4:	0e030000 	jal	80c0000 <__Size_Of_SDRAM+0x80b5800>
    3fb8:	0005d901 	0x5d901
    3fbc:	0b790f00 	j	de43c00 <__Size_Of_SDRAM+0xde39400>
    3fc0:	03200000 	0x3200000
    3fc4:	06910112 	bgezal	s4,4410 <__Size_Of_SDRAM-0x63f0>
    3fc8:	82100000 	lb	s0,0(s0)
    3fcc:	0300000b 	movn	zero,t8,zero
    3fd0:	01110113 	0x1110113
    3fd4:	23020000 	addi	v0,t8,0
    3fd8:	0a961000 	j	a584000 <__Size_Of_SDRAM+0xa579800>
    3fdc:	14030000 	bne	zero,v1,3fe0 <__Size_Of_SDRAM-0x6820>
    3fe0:	0001d301 	0x1d301
    3fe4:	04230200 	0x4230200
    3fe8:	000ab410 	0xab410
    3fec:	01150300 	0x1150300
    3ff0:	000002ea 	0x2ea
    3ff4:	10082302 	beq	zero,t0,cc00 <__Size_Of_SDRAM+0x2400>
    3ff8:	00000aa7 	0xaa7
    3ffc:	98011603 	lwr	at,5635(zero)
    4000:	02000003 	0x2000003
    4004:	da100c23 	0xda100c23
    4008:	0300000b 	movn	zero,t8,zero
    400c:	04240117 	0x4240117
    4010:	23020000 	addi	v0,t8,0
    4014:	0b431010 	j	d0c4040 <__Size_Of_SDRAM+0xd0b9840>
    4018:	18030000 	0x18030000
    401c:	0004ef01 	0x4ef01
    4020:	14230200 	bne	at,v1,4824 <__Size_Of_SDRAM-0x5fdc>
    4024:	000b0710 	0xb0710
    4028:	01190300 	0x1190300
    402c:	0000059f 	0x59f
    4030:	10182302 	beq	zero,t8,cc3c <__Size_Of_SDRAM+0x243c>
    4034:	00000b23 	0xb23
    4038:	ff011a03 	0xff011a03
    403c:	02000005 	0x2000005
    4040:	0b001c23 	j	c00708c <__Size_Of_SDRAM+0xbffc88c>
    4044:	00000b7a 	0xb7a
    4048:	0b011b03 	j	c046c0c <__Size_Of_SDRAM+0xc03c40c>
    404c:	11000006 	beqz	t0,4068 <__Size_Of_SDRAM-0x6798>
    4050:	000bb201 	0xbb201
    4054:	01140100 	0x1140100
    4058:	0006c001 	0x6c001
    405c:	00631200 	0x631200
    4060:	06c01401 	bltz	s6,9068 <__Size_Of_SDRAM-0x1798>
    4064:	72130000 	mad	s0,s3
    4068:	0100000b 	movn	zero,t0,zero
    406c:	00004914 	0x4914
    4070:	01030000 	0x1030000
    4074:	00008006 	srlv	s0,zero,zero
    4078:	bb011400 	swr	at,5120(t8)
    407c:	0100000b 	movn	zero,t0,zero
    4080:	0030010b 	0x30010b
    4084:	ef010000 	swc3	$1,0(t8)
    4088:	12000006 	beqz	s0,40a4 <__Size_Of_SDRAM-0x675c>
    408c:	01006863 	0x1006863
    4090:	0006ef0b 	0x6ef0b
    4094:	0b721300 	j	dc84c00 <__Size_Of_SDRAM+0xdc7a400>
    4098:	0b010000 	j	c040000 <__Size_Of_SDRAM+0xc035800>
    409c:	00000049 	0x49
    40a0:	30041500 	andi	a0,zero,0x1500
    40a4:	16000000 	bnez	s0,40a8 <__Size_Of_SDRAM-0x6758>
    40a8:	000006c7 	0x6c7
    40ac:	a0024734 	sb	v0,18228(zero)
    40b0:	a0024760 	sb	v0,18272(zero)
    40b4:	07176d01 	0x7176d01
    40b8:	d9170000 	0xd9170000
    40bc:	01000006 	srlv	zero,zero,t0
    40c0:	06e31754 	0x6e31754
    40c4:	55010000 	0x55010000
    40c8:	069d1600 	0x69d1600
    40cc:	47600000 	c1	0x1600000
    40d0:	478ca002 	c1	0x18ca002
    40d4:	6d01a002 	udi3i	at,t0,-24574
    40d8:	00000739 	0x739
    40dc:	0006ab17 	0x6ab17
    40e0:	17540100 	bne	k0,s4,44e4 <__Size_Of_SDRAM-0x631c>
    40e4:	000006b4 	0x6b4
    40e8:	18005501 	blez	zero,194f0 <__Size_Of_SDRAM+0xecf0>
    40ec:	000c3801 	movf	a3,zero,$fcc3
    40f0:	013d0100 	0x13d0100
    40f4:	a002478c 	sb	v0,18316(zero)
    40f8:	a00247c4 	sb	v0,18372(zero)
    40fc:	07796d01 	0x7796d01
    4100:	63190000 	udi0i	t9,t8,0
    4104:	3d010068 	0x3d010068
    4108:	00000779 	0x779
    410c:	000031fc 	0x31fc
    4110:	00069d1a 	0x69d1a
    4114:	02479000 	0x2479000
    4118:	0247bca0 	0x247bca0
    411c:	1b4201a0 	0x1b4201a0
    4120:	00000731 	0x731
    4124:	00072a1b 	0x72a1b
    4128:	15000000 	bnez	t0,412c <__Size_Of_SDRAM-0x66d4>
    412c:	00002504 	0x2504
    4130:	30011c00 	andi	at,zero,0x1c00
    4134:	0100000b 	movn	zero,t0,zero
    4138:	07c10145 	bgez	s8,4650 <__Size_Of_SDRAM-0x61b0>
    413c:	47c40000 	c1	0x1c40000
    4140:	47fca002 	c1	0x1fca002
    4144:	6d01a002 	udi3i	at,t0,-24574
    4148:	000007c1 	0x7c1
    414c:	0068631d 	0x68631d
    4150:	07794501 	0x7794501
    4154:	54010000 	0x54010000
    4158:	0006c71a 	0x6c71a
    415c:	0247c400 	0x247c400
    4160:	0247eca0 	0x247eca0
    4164:	1b4c01a0 	0x1b4c01a0
    4168:	0000070f 	sync	0x1c
    416c:	0007081b 	0x7081b
    4170:	1e000000 	bgtz	s0,4174 <__Size_Of_SDRAM-0x668c>
    4174:	6e690504 	udi3i	t1,s3,1284
    4178:	01180074 	0x1180074
    417c:	00000b50 	0xb50
    4180:	fc015501 	0xfc015501
    4184:	34a00247 	ori	zero,a1,0x247
    4188:	01a00248 	0x1a00248
    418c:	0008086d 	0x8086d
    4190:	68631900 	udi2i	v1,v1,6400
    4194:	79550100 	0x79550100
    4198:	0f000007 	jal	c00001c <__Size_Of_SDRAM+0xbff581c>
    419c:	1a000032 	blez	s0,4268 <__Size_Of_SDRAM-0x6598>
    41a0:	0000069d 	0x69d
    41a4:	a0024800 	sb	v0,18432(zero)
    41a8:	a002482c 	sb	v0,18476(zero)
    41ac:	311b5801 	andi	k1,t0,0x5801
    41b0:	1b000007 	blez	t8,41d0 <__Size_Of_SDRAM-0x6630>
    41b4:	0000072a 	0x72a
    41b8:	011c0000 	0x11c0000
    41bc:	00000b0f 	0xb0f
    41c0:	c1015b01 	ll	at,23297(t0)
    41c4:	34000007 	li	zero,0x7
    41c8:	6ca00248 	udi3i	zero,a1,584
    41cc:	01a00248 	0x1a00248
    41d0:	00084a6d 	0x84a6d
    41d4:	68631d00 	udi2i	v1,v1,7424
    41d8:	795b0100 	0x795b0100
    41dc:	01000007 	srav	zero,zero,t0
    41e0:	06c71a54 	0x6c71a54
    41e4:	48340000 	0x48340000
    41e8:	485ca002 	cfc2	gp,$20,2
    41ec:	6201a002 	udi0i	at,s0,-24574
    41f0:	00070f1b 	0x70f1b
    41f4:	07081b00 	0x7081b00
    41f8:	00000000 	nop
    41fc:	0acc011f 	j	b30047c <__Size_Of_SDRAM+0xb2f5c7c>
    4200:	1a010000 	0x1a010000
    4204:	02486c01 	0x2486c01
    4208:	0248f8a0 	0x248f8a0
    420c:	003222a0 	0x3222a0
    4210:	0c002000 	jal	8000 <__Size_Of_SDRAM-0x2800>
    4214:	05010000 	bgez	t0,4218 <__Size_Of_SDRAM-0x65e8>
    4218:	00000871 	0x871
    421c:	c8030501 	lwc2	$3,1281(zero)
    4220:	15a0025b 	bnez	t5,4b90 <__Size_Of_SDRAM-0x5c70>
    4224:	00087704 	0x87704
    4228:	06912100 	bgezal	s4,c62c <__Size_Of_SDRAM+0x1e2c>
    422c:	c4200000 	lwc1	$f0,0(at)
    4230:	0100000b 	movn	zero,t0,zero
    4234:	00087106 	0x87106
    4238:	03050100 	0x3050100
    423c:	a0025bcc 	sb	v0,23500(zero)
    4240:	00005100 	sll	t2,zero,0x4
    4244:	68000200 	udi2i	zero,zero,512
    4248:	04000015 	bltz	zero,42a0 <__Size_Of_SDRAM-0x6560>
    424c:	00008501 	0x8501
    4250:	0c6a0100 	jal	1a80400 <__Size_Of_SDRAM+0x1a75c00>
    4254:	001c0000 	sll	zero,gp,0x0
    4258:	48f80000 	0x48f80000
    425c:	491ca002 	0x491ca002
    4260:	1486a002 	bne	a0,a2,fffec26c <__heap_start_addr+0x5ffc261c>
    4264:	01020000 	0x1020000
    4268:	00007708 	0x7708
    426c:	07020200 	0x7020200
    4270:	00000009 	jalr	zero,zero
    4274:	5f070402 	0x5f070402
    4278:	02000000 	0x2000000
    427c:	00550708 	0x550708
    4280:	01030000 	0x1030000
    4284:	00000c5b 	0xc5b
    4288:	f8010501 	0xf8010501
    428c:	1ca00248 	bgtz	a1,4bb0 <__Size_Of_SDRAM-0x5c50>
    4290:	01a00249 	0x1a00249
    4294:	003e006d 	0x3e006d
    4298:	00020000 	sll	zero,v0,0x0
    429c:	0000159c 	0x159c
    42a0:	00850104 	0x850104
    42a4:	79010000 	0x79010000
    42a8:	1c00000c 	bgtz	zero,42dc <__Size_Of_SDRAM-0x6524>
    42ac:	1c000000 	bgtz	zero,42b0 <__Size_Of_SDRAM-0x6550>
    42b0:	1ca00249 	bgtz	a1,4bd8 <__Size_Of_SDRAM-0x5c28>
    42b4:	c7a00249 	lwc1	$f0,585(sp)
    42b8:	02000014 	0x2000014
    42bc:	00770801 	0x770801
    42c0:	02020000 	0x2020000
    42c4:	00000907 	0x907
    42c8:	07040200 	0x7040200
    42cc:	0000005f 	0x5f
    42d0:	55070802 	0x55070802
    42d4:	00000000 	nop
    42d8:	0000003e 	udi4	zero,zero,zero
    42dc:	15bb0002 	bne	t5,k1,42e8 <__Size_Of_SDRAM-0x6518>
    42e0:	01040000 	0x1040000
    42e4:	00000085 	0x85
    42e8:	000c8301 	0xc8301
    42ec:	00001c00 	sll	v1,zero,0x10
    42f0:	02491c00 	0x2491c00
    42f4:	02491ca0 	0x2491ca0
    42f8:	0014e4a0 	0x14e4a0
    42fc:	08010200 	j	40800 <__Size_Of_SDRAM+0x36000>
    4300:	00000077 	0x77
    4304:	09070202 	j	41c0808 <__Size_Of_SDRAM+0x41b6008>
    4308:	02000000 	0x2000000
    430c:	005f0704 	0x5f0704
    4310:	08020000 	j	80000 <__Size_Of_SDRAM+0x75800>
    4314:	00005507 	0x5507
    4318:	003e0000 	0x3e0000
    431c:	00020000 	sll	zero,v0,0x0
    4320:	000015da 	0x15da
    4324:	00850104 	0x850104
    4328:	8d010000 	lw	at,0(t0)
    432c:	1c00000c 	bgtz	zero,4360 <__Size_Of_SDRAM-0x64a0>
    4330:	1c000000 	bgtz	zero,4334 <__Size_Of_SDRAM-0x64cc>
    4334:	1ca00249 	bgtz	a1,4c5c <__Size_Of_SDRAM-0x5ba4>
    4338:	01a00249 	0x1a00249
    433c:	02000015 	0x2000015
    4340:	00770801 	0x770801
    4344:	02020000 	0x2020000
    4348:	00000907 	0x907
    434c:	07040200 	0x7040200
    4350:	0000005f 	0x5f
    4354:	55070802 	0x55070802
    4358:	00000000 	nop
    435c:	00000340 	sll	zero,zero,0xd
    4360:	15f90002 	bne	t7,t9,436c <__Size_Of_SDRAM-0x6494>
    4364:	01040000 	0x1040000
    4368:	00000085 	0x85
    436c:	000d6b01 	0xd6b01
    4370:	00001c00 	sll	v1,zero,0x10
    4374:	02491c00 	0x2491c00
    4378:	0251b4a0 	0x251b4a0
    437c:	00151ea0 	0x151ea0
    4380:	004f0200 	0x4f0200
    4384:	09020000 	j	4080000 <__Size_Of_SDRAM+0x4075800>
    4388:	00000030 	0x30
    438c:	77080103 	jalx	c20040c <__Size_Of_SDRAM+0xc1f5c0c>
    4390:	03000000 	0x3000000
    4394:	00090702 	srl	zero,t1,0x1c
    4398:	ec020000 	swc3	$2,0(zero)
    439c:	02000007 	srav	zero,zero,s0
    43a0:	0000490b 	0x490b
    43a4:	07040300 	0x7040300
    43a8:	0000005f 	0x5f
    43ac:	55070803 	0x55070803
    43b0:	02000000 	0x2000000
    43b4:	00000380 	sll	zero,zero,0xe
    43b8:	0030b003 	0x30b003
    43bc:	01030000 	0x1030000
    43c0:	00007906 	0x7906
    43c4:	05020300 	0x5020300
    43c8:	000001cd 	break	0x0,0x7
    43cc:	00019d02 	srl	s3,at,0x14
    43d0:	49b40300 	0x49b40300
    43d4:	04000000 	bltz	zero,43d8 <__Size_Of_SDRAM-0x6428>
    43d8:	6e690504 	udi3i	t1,s3,1284
    43dc:	08030074 	j	c01d0 <__Size_Of_SDRAM+0xb59d0>
    43e0:	0000e905 	0xe905
    43e4:	0c970200 	jal	25c0800 <__Size_Of_SDRAM+0x25b6000>
    43e8:	b8030000 	swr	v1,0(zero)
    43ec:	00000057 	0x57
    43f0:	5a070403 	0x5a070403
    43f4:	05000000 	bltz	t0,43f8 <__Size_Of_SDRAM-0x6408>
    43f8:	000db001 	movt	s6,zero,$fcc3
    43fc:	011e0100 	0x11e0100
    4400:	0000b501 	0xb501
    4404:	0d770600 	jal	5dc1800 <__Size_Of_SDRAM+0x5db7000>
    4408:	1e010000 	0x1e010000
    440c:	00000049 	0x49
    4410:	af010700 	sw	at,1792(t8)
    4414:	0100000c 	syscall	0x40000
    4418:	00008931 	0x8931
    441c:	00dd0100 	0xdd0100
    4420:	1f080000 	0x1f080000
    4424:	0100000d 	break	0x100
    4428:	00008933 	0x8933
    442c:	0d8b0800 	jal	62c2000 <__Size_Of_SDRAM+0x62b7800>
    4430:	34010000 	li	at,0x0
    4434:	00000070 	0x70
    4438:	15010900 	bne	t0,at,683c <__Size_Of_SDRAM-0x3fc4>
    443c:	0100000d 	break	0x100
    4440:	010101ec 	0x10101ec
    4444:	000000f9 	0xf9
    4448:	00039a0a 	0x39a0a
    444c:	01ec0100 	0x1ec0100
    4450:	000000f9 	0xf9
    4454:	00490b00 	0x490b00
    4458:	9b0c0000 	lwr	t4,0(t8)
    445c:	1c000000 	bgtz	zero,4460 <__Size_Of_SDRAM-0x63a0>
    4460:	54a00249 	0x54a00249
    4464:	01a00249 	0x1a00249
    4468:	0001196d 	0x1196d
    446c:	00a90d00 	0xa90d00
    4470:	54010000 	0x54010000
    4474:	00b50c00 	0xb50c00
    4478:	49540000 	0x49540000
    447c:	4970a002 	0x4970a002
    4480:	6d01a002 	udi3i	at,t0,-24574
    4484:	00000137 	0x137
    4488:	0000c60e 	0xc60e
    448c:	00d10e00 	0xd10e00
    4490:	0f000000 	jal	c000000 <__Size_Of_SDRAM+0xbff5800>
    4494:	000d4601 	0xd4601
    4498:	01400100 	0x1400100
    449c:	a0024970 	sb	v0,18800(zero)
    44a0:	a00249f0 	sb	v0,18928(zero)
    44a4:	01976d01 	0x1976d01
    44a8:	39100000 	xori	s0,t0,0x0
    44ac:	0100000d 	break	0x100
    44b0:	00004940 	sll	t1,zero,0x5
    44b4:	00324100 	0x324100
    44b8:	009b1100 	0x9b1100
    44bc:	49840000 	0x49840000
    44c0:	02e0a002 	0x2e0a002
    44c4:	42010000 	c0	0x10000
    44c8:	00000176 	0x176
    44cc:	00011112 	0x11112
    44d0:	b5130000 	0xb5130000
    44d4:	a0000000 	sb	zero,0(zero)
    44d8:	f8a00249 	0xf8a00249
    44dc:	01000002 	0x1000002
    44e0:	03101444 	0x3101444
    44e4:	c60e0000 	lwc1	$f14,0(s0)
    44e8:	0e000000 	jal	8000000 <__Size_Of_SDRAM+0x7ff5800>
    44ec:	000000d1 	0xd1
    44f0:	0f000000 	jal	c000000 <__Size_Of_SDRAM+0xbff5800>
    44f4:	000c9c01 	0xc9c01
    44f8:	01160100 	0x1160100
    44fc:	a00249f0 	sb	v0,18928(zero)
    4500:	a0024a10 	sb	v0,18960(zero)
    4504:	01dc6d01 	0x1dc6d01
    4508:	bd100000 	cache	0x10,0(t0)
    450c:	0100000c 	syscall	0x40000
    4510:	0001dc16 	0x1dc16
    4514:	00325400 	0x325400
    4518:	0cf81000 	jal	3e04000 <__Size_Of_SDRAM+0x3df9800>
    451c:	16010000 	bne	s0,at,4520 <__Size_Of_SDRAM-0x62e0>
    4520:	000001dc 	0x1dc
    4524:	00003272 	0x3272
    4528:	000d2f10 	0xd2f10
    452c:	dc170100 	0xdc170100
    4530:	85000001 	lh	zero,1(t0)
    4534:	00000032 	0x32
    4538:	00004915 	0x4915
    453c:	93011600 	lbu	at,5632(t8)
    4540:	0100000d 	break	0x100
    4544:	024a1047 	0x24a1047
    4548:	024fe4a0 	0x24fe4a0
    454c:	003298a0 	0x3298a0
    4550:	e2011700 	sc	at,5888(s0)
    4554:	0100000c 	syscall	0x40000
    4558:	e401015d 	swc1	$f1,349(zero)
    455c:	1ca0024f 	bgtz	a1,4e9c <__Size_Of_SDRAM-0x5964>
    4560:	01a00250 	0x1a00250
    4564:	00021c6d 	0x21c6d
    4568:	74701800 	jalx	1c06000 <__Size_Of_SDRAM+0x1bfb800>
    456c:	5f010072 	0x5f010072
    4570:	00021c01 	0x21c01
    4574:	00520100 	0x520100
    4578:	003e0419 	0x3e0419
    457c:	dd0c0000 	0xdd0c0000
    4580:	1c000000 	bgtz	zero,4584 <__Size_Of_SDRAM-0x627c>
    4584:	40a00250 	0x40a00250
    4588:	01a00250 	0x1a00250
    458c:	00023f6d 	0x23f6d
    4590:	00ec1a00 	0xec1a00
    4594:	32b70000 	andi	s7,s5,0x0
    4598:	17000000 	bnez	t8,459c <__Size_Of_SDRAM-0x6264>
    459c:	000d7e01 	0xd7e01
    45a0:	01f30100 	0x1f30100
    45a4:	02504001 	movf	t0,s2,$fcc4
    45a8:	0250b8a0 	0x250b8a0
    45ac:	ae6d01a0 	sw	t5,416(s3)
    45b0:	1b000002 	blez	t8,45bc <__Size_Of_SDRAM-0x6244>
    45b4:	00000cc6 	0xcc6
    45b8:	4901f301 	bc2t	11c0 <__Size_Of_SDRAM-0x9640>
    45bc:	01000000 	0x1000000
    45c0:	0dba1c54 	jal	6e87150 <__Size_Of_SDRAM+0x6e7c950>
    45c4:	f3010000 	madh	t8,at
    45c8:	00004901 	0x4901
    45cc:	0032ed00 	0x32ed00
    45d0:	0d611b00 	jal	5846c00 <__Size_Of_SDRAM+0x583c400>
    45d4:	f4010000 	sdc1	$f1,0(zero)
    45d8:	00004901 	0x4901
    45dc:	1c560100 	0x1c560100
    45e0:	00000cd0 	0xcd0
    45e4:	4901f401 	bc2t	15ec <__Size_Of_SDRAM-0x9214>
    45e8:	00000000 	nop
    45ec:	1d000033 	bgtz	t0,46bc <__Size_Of_SDRAM-0x6144>
    45f0:	000000dd 	0xdd
    45f4:	a0025074 	sb	v0,20596(zero)
    45f8:	a0025080 	sb	v0,20608(zero)
    45fc:	1a020601 	0x1a020601
    4600:	00000235 	0x235
    4604:	00003313 	0x3313
    4608:	011e0000 	0x11e0000
    460c:	00000d52 	0xd52
    4610:	b8021901 	swr	v0,6401(zero)
    4614:	d4a00250 	ldc1	$f0,592(a1)
    4618:	01a00250 	0x1a00250
    461c:	a0011f6d 	sb	at,8045(zero)
    4620:	0100000d 	break	0x100
    4624:	50d401d2 	0x50d401d2
    4628:	51b4a002 	0x51b4a002
    462c:	3326a002 	andi	a2,t9,0xa002
    4630:	02ea0000 	0x2ea0000
    4634:	59200000 	0x59200000
    4638:	01000001 	movf	zero,t0,$fcc0
    463c:	02ea01d4 	0x2ea01d4
    4640:	91020000 	lbu	v0,0(t0)
    4644:	25210068 	addiu	at,t1,104
    4648:	fa000000 	0xfa000000
    464c:	22000002 	addi	zero,s0,2
    4650:	000002fa 	0x2fa
    4654:	0423000f 	0x423000f
    4658:	009f2407 	0x9f2407
    465c:	0a010000 	j	8040000 <__Size_Of_SDRAM+0x8035800>
    4660:	00000025 	move	zero,zero
    4664:	db250101 	0xdb250101
    4668:	0100000c 	syscall	0x40000
    466c:	00002511 	0x2511
    4670:	03050100 	0x3050100
    4674:	a0029c48 	sb	v0,-25528(zero)
    4678:	000d2925 	0xd2925
    467c:	25120100 	addiu	s2,t0,256
    4680:	01000000 	0x1000000
    4684:	9c490305 	0x9c490305
    4688:	0326a002 	0x326a002
    468c:	0100000d 	break	0x100
    4690:	033c015a 	0x33c015a
    4694:	01010000 	0x1010000
    4698:	80060103 	lb	a2,259(zero)
    469c:	00000000 	nop
    46a0:	0000006f 	0x6f
    46a4:	180e0002 	0x180e0002
    46a8:	01040000 	0x1040000
    46ac:	00000085 	0x85
    46b0:	000dc501 	0xdc501
    46b4:	00001c00 	sll	v1,zero,0x10
    46b8:	0251b400 	0x251b400
    46bc:	0251eca0 	0x251eca0
    46c0:	001776a0 	0x1776a0
    46c4:	86010200 	lh	at,512(s0)
    46c8:	01000002 	0x1000002
    46cc:	0059013a 	0x59013a
    46d0:	51b40000 	0x51b40000
    46d4:	51eca002 	0x51eca002
    46d8:	6d01a002 	udi3i	at,t0,-24574
    46dc:	00000059 	0x59
    46e0:	01007303 	0x1007303
    46e4:	0000603a 	udi1	t4,zero,zero
    46e8:	04540100 	0x4540100
    46ec:	3c01006c 	lui	at,0x6c
    46f0:	00000059 	0x59
    46f4:	00003345 	0x3345
    46f8:	05040500 	0x5040500
    46fc:	00746e69 	0x746e69
    4700:	00660406 	0x660406
    4704:	6b070000 	udi2i	a3,t8,0
    4708:	08000000 	j	0 <__Size_Of_SDRAM-0xa800>
    470c:	00800601 	0x800601
    4710:	Address 0x0000000000004710 is out of bounds.


Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000095 	0x95
       4:	00670002 	0x670002
       8:	01010000 	0x1010000
       c:	000d0efb 	0xd0efb
      10:	01010101 	0x1010101
      14:	01000000 	0x1000000
      18:	2f010000 	sltiu	at,t8,0
      1c:	656d6f68 	udi1i	t5,t3,28520
      20:	656c612f 	udi1i	t4,t3,24879
      24:	2f686b78 	sltiu	t0,k1,27512
      28:	2f73666e 	sltiu	s3,k1,26222
      2c:	6e72656b 	udi3i	s2,s3,25963
      30:	732f6c65 	0x732f6c65
      34:	75697269 	jalx	5a5c9a4 <__Size_Of_SDRAM+0x5a521a4>
      38:	6f622f73 	udi3i	v0,k1,12147
      3c:	6f63746f 	udi3i	v1,k1,29807
      40:	522f6564 	0x522f6564
      44:	70417369 	0x70417369
      48:	6e692f70 	udi3i	t1,s3,12144
      4c:	64756c63 	udi1i	s5,v1,27747
      50:	61000065 	udi0i	zero,t0,101
      54:	6d5f7070 	udi3i	ra,t2,28784
      58:	2e6e6961 	sltiu	t6,s3,26977
      5c:	00000063 	0x63
      60:	64657300 	udi1i	a1,v1,29440
      64:	7079745f 	0x7079745f
      68:	682e7365 	udi2i	t6,at,29541
      6c:	00000100 	sll	zero,zero,0x4
      70:	02050000 	0x2050000
      74:	a0020150 	sb	v0,336(zero)
      78:	0101d003 	0x101d003
      7c:	f43d08f4 	sdc1	$f29,2292(at)
      80:	03ba0c03 	0x3ba0c03
      84:	0c034a74 	jal	d29d0 <__Size_Of_SDRAM+0xc81d0>
      88:	464ebb4a 	c1	0x4ebb4a
      8c:	83f4f7f6 	lb	s4,-2058(ra)
      90:	821703f3 	lb	s7,1011(s0)
      94:	01001802 	0x1001802
      98:	0003ca01 	0x3ca01
      9c:	71000200 	0x71000200
      a0:	01000000 	0x1000000
      a4:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
      a8:	01010100 	0x1010100
      ac:	00000001 	movf	zero,zero,$fcc0
      b0:	01000001 	movf	zero,t0,$fcc0
      b4:	6d6f682f 	udi3i	t7,t3,26671
      b8:	6c612f65 	udi3i	at,v1,12133
      bc:	686b7865 	udi2i	t3,v1,30821
      c0:	73666e2f 	0x73666e2f
      c4:	72656b2f 	0x72656b2f
      c8:	2f6c656e 	sltiu	t4,k1,25966
      cc:	69726973 	udi2i	s2,t3,26995
      d0:	622f7375 	udi0i	t7,s1,29557
      d4:	63746f6f 	udi0i	s4,k1,28527
      d8:	2f65646f 	sltiu	a1,k1,25711
      dc:	41736952 	0x41736952
      e0:	692f7070 	udi2i	t7,t1,28784
      e4:	756c636e 	jalx	5b18db8 <__Size_Of_SDRAM+0x5b0e5b8>
      e8:	00006564 	0x6564
      ec:	5f676962 	0x5f676962
      f0:	2e746e69 	sltiu	s4,s3,28265
      f4:	00000063 	0x63
      f8:	67696200 	udi1i	t1,k1,25088
      fc:	746e695f 	jalx	1b9a57c <__Size_Of_SDRAM+0x1b8fd7c>
     100:	0000682e 	0x682e
     104:	79730000 	0x79730000
     108:	66656473 	udi1i	a1,s3,25715
     10c:	00682e73 	0x682e73
     110:	00000001 	movf	zero,zero,$fcc0
     114:	14020500 	bne	zero,v0,1518 <__Size_Of_SDRAM-0x92e8>
     118:	03a00202 	0x3a00202
     11c:	170100df 	bne	t8,at,49c <__Size_Of_SDRAM-0xa364>
     120:	03f6b9bb 	0x3f6b9bb
     124:	158200e7 	bne	t4,v0,4c4 <__Size_Of_SDRAM-0xa33c>
     128:	83817608 	lb	at,30216(gp)
     12c:	13240284 	beq	t9,a0,b40 <__Size_Of_SDRAM-0x9cc0>
     130:	49ad0881 	0x49ad0881
     134:	03c07fbb 	0x3c07fbb
     138:	0903827a 	j	40e09e8 <__Size_Of_SDRAM+0x40d61e8>
     13c:	b0081382 	0xb0081382
     140:	82018803 	lb	at,-30717(s0)
     144:	08780817 	j	1e0205c <__Size_Of_SDRAM+0x1df785c>
     148:	f20a0342 	0xf20a0342
     14c:	48f44c48 	0x48f44c48
     150:	88474b4c 	lwl	a3,19276(v0)
     154:	7508f4bb 	jalx	423d2ec <__Size_Of_SDRAM+0x4232aec>
     158:	4b826803 	c2	0x1826803
     15c:	4c494b87 	0x4c494b87
     160:	4b821303 	c2	0x1821303
     164:	82730311 	lb	s3,785(s3)
     168:	827f8803 	lb	ra,-30717(s3)
     16c:	03790817 	0x3790817
     170:	6f034a11 	udi3i	v1,t8,18961
     174:	4a11034a 	c2	0x11034a
     178:	03114b81 	0x3114b81
     17c:	038201c7 	0x38201c7
     180:	af080109 	sw	t0,265(t8)
     184:	3d088547 	0x3d088547
     188:	8ab74d46 	lwl	s7,19782(s5)
     18c:	4d8381f5 	0x4d8381f5
     190:	03bd7f86 	0x3bd7f86
     194:	038a823a 	0x38a823a
     198:	c1524a78 	ll	s2,19064(t2)
     19c:	3c087003 	lui	t0,0x7003
     1a0:	f3821403 	0xf3821403
     1a4:	13440249 	beq	k0,a0,acc <__Size_Of_SDRAM-0x9d34>
     1a8:	50024b49 	0x50024b49
     1ac:	4bb7880d 	c2	0x1b7880d
     1b0:	bd146002 	cache	0x14,24578(t0)
     1b4:	f483ae08 	sdc1	$f3,-20984(a0)
     1b8:	827103b6 	lb	s1,950(s3)
     1bc:	034a1303 	0x34a1303
     1c0:	13034a6d 	beq	t8,v1,12b78 <__Size_Of_SDRAM+0x8378>
     1c4:	cb037408 	lwc2	$3,29704(t8)
     1c8:	f618ba00 	sdc1	$f24,-17920(s0)
     1cc:	74087503 	jalx	21d40c <__Size_Of_SDRAM+0x212c0c>
     1d0:	02ba0e03 	0x2ba0e03
     1d4:	38081350 	xori	t0,zero,0x1350
     1d8:	b0084b84 	0xb0084b84
     1dc:	08827603 	j	209d80c <__Size_Of_SDRAM+0x209300c>
     1e0:	01c403e7 	0x1c403e7
     1e4:	03850182 	0x3850182
     1e8:	7403820d 	jalx	e0834 <__Size_Of_SDRAM+0xd6034>
     1ec:	820d03f2 	lb	t5,1010(s0)
     1f0:	03498349 	0x3498349
     1f4:	08ac0874 	j	2b021d0 <__Size_Of_SDRAM+0x2af79d0>
     1f8:	7a0350df 	0x7a0350df
     1fc:	bc4c504a 	cache	0xc,20554(v0)
     200:	4a7403f4 	c2	0x7403f4
     204:	034a0c03 	0x34a0c03
     208:	2a034a79 	slti	v1,s0,19065
     20c:	86137408 	lh	s3,29704(s0)
     210:	843a084c 	lh	k0,2124(at)
     214:	088516c0 	j	2145b00 <__Size_Of_SDRAM+0x213b300>
     218:	84f646e8 	lh	s6,18152(a3)
     21c:	087803f4 	j	1e00fd0 <__Size_Of_SDRAM+0x1df67d0>
     220:	ba10033c 	swr	s0,828(s0)
     224:	03826d03 	0x3826d03
     228:	02138216 	0x2138216
     22c:	79031928 	0x79031928
     230:	7adc0382 	0x7adc0382
     234:	7a038882 	0x7a038882
     238:	33035082 	andi	v1,t8,0x5082
     23c:	0346bf82 	0x346bf82
     240:	08827eef 	j	209fbbc <__Size_Of_SDRAM+0x20953bc>
     244:	02bc8375 	0x2bc8375
     248:	08811324 	j	2044c90 <__Size_Of_SDRAM+0x203a490>
     24c:	7fbb4975 	lhpu.c1	k1,(sp)146
     250:	ba00e303 	swr	zero,-7421(s0)
     254:	81c03d08 	lb	zero,15624(t6)
     258:	084a0d03 	j	128340c <__Size_Of_SDRAM+0x1278c0c>
     25c:	bcf44678 	cache	0x14,18040(a3)
     260:	0a03b848 	j	80ee120 <__Size_Of_SDRAM+0x80e3920>
     264:	8276034a 	lb	s6,842(s3)
     268:	ac080f03 	sw	t0,3843(zero)
     26c:	0b033f08 	j	c0cfc20 <__Size_Of_SDRAM+0xc0c5420>
     270:	f25f034a 	0xf25f034a
     274:	03484d7f 	0x3484d7f
     278:	18827fa1 	0x18827fa1
     27c:	50827a03 	0x50827a03
     280:	bd821a03 	cache	0x2,6659(t4)
     284:	826b0310 	lb	t3,784(s3)
     288:	3f08af08 	0x3f08af08
     28c:	3d08857f 	0x3d08857f
     290:	89454f46 	lwl	a1,20294(t2)
     294:	0a03f3bc 	j	80fcef0 <__Size_Of_SDRAM+0x80f26f0>
     298:	6a033c08 	udi2i	v1,s0,15368
     29c:	7ef90382 	0x7ef90382
     2a0:	86838682 	lh	v1,-31102(s4)
     2a4:	494b49f4 	0x494b49f4
     2a8:	0584034e 	0x584034e
     2ac:	03bb86f2 	0x3bb86f2
     2b0:	4c03f23a 	0x4c03f23a
     2b4:	4c4c48f2 	0x4c4c48f2
     2b8:	89ba1c03 	lwl	k0,7171(t5)
     2bc:	0a033d08 	j	80cf420 <__Size_Of_SDRAM+0x80c4c20>
     2c0:	4a75034a 	c2	0x75034a
     2c4:	03484b4b 	0x3484b4b
     2c8:	6c03820f 	udi3i	v1,zero,-32241
     2cc:	037508f2 	0x37508f2
     2d0:	4e03ba13 	c3	0x3ba13
     2d4:	4a32034a 	c2	0x32034a
     2d8:	827fa203 	lb	ra,-24061(s3)
     2dc:	4f122802 	c3	0x1122802
     2e0:	f5838583 	sdc1	$f3,-31357(t4)
     2e4:	7303fa4c 	0x7303fa4c
     2e8:	4a0d03ba 	c2	0xd03ba
     2ec:	bb4a7303 	swr	t2,29443(k0)
     2f0:	4e4683bc 	c3	0x4683bc
     2f4:	034a0903 	0x34a0903
     2f8:	1103ba73 	beq	t0,v1,fffeecc8 <__heap_start_addr+0x5ffc5078>
     2fc:	027503ba 	0x27503ba
     300:	3d080130 	0x3d080130
     304:	03848383 	0x3848383
     308:	08827da1 	j	209f684 <__Size_Of_SDRAM+0x2094e84>
     30c:	bc8350e4 	cache	0x3,20708(a0)
     310:	74081103 	jalx	20440c <__Size_Of_SDRAM+0x1f9c0c>
     314:	bc4a7103 	cache	0xa,28931(v0)
     318:	857faf08 	lh	ra,-20728(t3)
     31c:	844d46bb 	lh	t5,18107(v0)
     320:	81f5c145 	lb	s5,-16059(t7)
     324:	02f54d83 	0x2f54d83
     328:	8349132c 	lb	t1,4908(k0)
     32c:	49f3bc49 	0x49f3bc49
     330:	ba670385 	swr	a3,901(s3)
     334:	3c081c03 	lui	t0,0x1c03
     338:	ba7dab03 	swr	sp,-21757(s3)
     33c:	4a02d503 	c2	0x2d503
     340:	f27dac03 	0xf27dac03
     344:	02fe03b9 	0x2fe03b9
     348:	038883ba 	0x38883ba
     34c:	28027fbf 	slti	v0,zero,32703
     350:	eb035001 	swc2	$3,20481(t8)
     354:	bb86827d 	swr	a2,-32131(gp)
     358:	504b8af5 	0x504b8af5
     35c:	83f27303 	lb	s2,29443(ra)
     360:	4a0b034b 	c2	0xb034b
     364:	f203b103 	0xf203b103
     368:	e4081c03 	swc1	$f8,7171(zero)
     36c:	034a6403 	0x34a6403
     370:	08827cf1 	j	209f3c4 <__Size_Of_SDRAM+0x2094bc4>
     374:	03d30375 	0x3d30375
     378:	7cae03ba 	stp.c2	t6,(a1)24
     37c:	03012802 	0x3012802
     380:	08f2039c 	j	3c80e70 <__Size_Of_SDRAM+0x3c76670>
     384:	4b3b08e7 	c2	0x13b08e7
     388:	834a1703 	lb	t2,5891(k0)
     38c:	2c02bcbc 	sltiu	v0,zero,-17220
     390:	49834913 	0x49834913
     394:	8649f3be 	lh	t1,-3138(s2)
     398:	085b03be 	j	16c0ef8 <__Size_Of_SDRAM+0x16b66f8>
     39c:	8584873c 	lh	a0,-30916(t4)
     3a0:	027cd403 	0x27cd403
     3a4:	02840164 	0x2840164
     3a8:	08811324 	j	2044c90 <__Size_Of_SDRAM+0x203a490>
     3ac:	7fbb49ad 	0x7fbb49ad
     3b0:	0803ac03 	j	eb00c <__Size_Of_SDRAM+0xe080c>
     3b4:	8972083c 	lwl	s2,2108(t3)
     3b8:	087cce03 	j	1f3380c <__Size_Of_SDRAM+0x1f2900c>
     3bc:	02848374 	0x2848374
     3c0:	037f1338 	0x37f1338
     3c4:	f6ba03ce 	sdc1	$f26,974(s5)
     3c8:	827ee403 	lb	s8,-7165(s3)
     3cc:	88122c02 	lwl	s2,11266(zero)
     3d0:	03821203 	0x3821203
     3d4:	bf034a71 	cache	0x3,19057(t8)
     3d8:	7508827d 	jalx	42209f4 <__Size_Of_SDRAM+0x42161f4>
     3dc:	ba02e903 	swr	v0,-5885(s0)
     3e0:	03f44884 	0x3f44884
     3e4:	30027d96 	andi	v0,zero,0x7d96
     3e8:	02c40301 	0x2c40301
     3ec:	08e708f2 	j	39c23c8 <__Size_Of_SDRAM+0x39b7bc8>
     3f0:	12034b3b 	beq	s0,v1,130e0 <__Size_Of_SDRAM+0x88e0>
     3f4:	4b49834a 	c2	0x149834a
     3f8:	132c024b 	beq	t9,t4,d28 <__Size_Of_SDRAM-0x9ad8>
     3fc:	bc498349 	cache	0x9,-31927(v0)
     400:	bb8549f3 	swr	a1,18931(gp)
     404:	086703f3 	j	19c0fcc <__Size_Of_SDRAM+0x19b67cc>
     408:	8583863c 	lh	v1,-31172(t4)
     40c:	027daf03 	0x27daf03
     410:	02840164 	0x2840164
     414:	08811324 	j	2044c90 <__Size_Of_SDRAM+0x203a490>
     418:	7fbb49ad 	0x7fbb49ad
     41c:	0802d103 	j	b440c <__Size_Of_SDRAM+0xa9c0c>
     420:	8872083c 	lwl	s2,2108(v1)
     424:	087daa03 	j	1f6a80c <__Size_Of_SDRAM+0x1f6000c>
     428:	02848374 	0x2848374
     42c:	037f1338 	0x37f1338
     430:	03ba02e6 	0x3ba02e6
     434:	3c087cc2 	lui	t0,0x7cc2
     438:	63038386 	udi0i	v1,t8,-31866
     43c:	03b94bf2 	0x3b94bf2
     440:	b503ba25 	0xb503ba25
     444:	ac08f204 	sw	t0,-3580(zero)
     448:	f4bbf385 	sdc1	$f27,-3195(a1)
     44c:	bcf44686 	cache	0x14,18054(a3)
     450:	7803f484 	0x7803f484
     454:	03464ef2 	0x3464ef2
     458:	03740815 	0x3740815
     45c:	01240277 	0x1240277
     460:	1402f4bc 	bne	zero,v0,ffffd754 <__heap_start_addr+0x5ffd3b04>
     464:	06010100 	bgez	s0,868 <__Size_Of_SDRAM-0x9f98>
     468:	02000002 	0x2000002
     46c:	00007200 	sll	t6,zero,0x8
     470:	fb010100 	0xfb010100
     474:	01000d0e 	0x1000d0e
     478:	00010101 	0x10101
     47c:	00010000 	sll	zero,at,0x0
     480:	682f0100 	udi2i	t7,at,256
     484:	2f656d6f 	sltiu	a1,k1,28015
     488:	78656c61 	0x78656c61
     48c:	6e2f686b 	udi3i	t7,s1,26731
     490:	6b2f7366 	udi2i	t7,t9,29542
     494:	656e7265 	udi1i	t6,t3,29285
     498:	69732f6c 	udi2i	s3,t3,12140
     49c:	73756972 	0x73756972
     4a0:	6f6f622f 	udi3i	t7,k1,25135
     4a4:	646f6374 	udi1i	t7,v1,25460
     4a8:	69522f65 	udi2i	s2,t2,12133
     4ac:	70704173 	0x70704173
     4b0:	636e692f 	udi0i	t6,k1,26927
     4b4:	6564756c 	udi1i	a0,t3,30060
     4b8:	69620000 	udi2i	v0,t3,0
     4bc:	74755f67 	jalx	1d57d9c <__Size_Of_SDRAM+0x1d4d59c>
     4c0:	632e6c69 	udi0i	t6,t9,27753
     4c4:	00000000 	nop
     4c8:	64737973 	udi1i	s3,v1,31091
     4cc:	2e736665 	sltiu	s3,s3,26213
     4d0:	00010068 	0x10068
     4d4:	67696200 	udi1i	t1,k1,25088
     4d8:	746e695f 	jalx	1b9a57c <__Size_Of_SDRAM+0x1b8fd7c>
     4dc:	0000682e 	0x682e
     4e0:	00000000 	nop
     4e4:	17fc0205 	bne	ra,gp,cfc <__Size_Of_SDRAM-0x9b04>
     4e8:	cd03a002 	lwc3	$3,-24574(t0)
     4ec:	bb140100 	swr	s4,256(t8)
     4f0:	4b498349 	c2	0x1498349
     4f4:	8418f749 	lh	t8,-2231(zero)
     4f8:	08843a08 	j	210e820 <__Size_Of_SDRAM+0x2104020>
     4fc:	89484c3a 	lwl	t0,19514(t2)
     500:	0814897e 	j	5225f8 <__Size_Of_SDRAM+0x517df8>
     504:	bb4108e9 	swr	at,2281(k0)
     508:	034d83f4 	0x34d83f4
     50c:	0f038275 	jal	c0e09d4 <__Size_Of_SDRAM+0xc0d61d4>
     510:	84bb14f2 	lh	k1,5362(a1)
     514:	494b494b 	0x494b494b
     518:	864c494b 	lh	t4,18763(s2)
     51c:	864cb915 	lh	t4,-18155(s2)
     520:	493d0814 	0x493d0814
     524:	16857808 	bne	s4,a1,1e548 <__Size_Of_SDRAM+0x13d48>
     528:	7eba0903 	0x7eba0903
     52c:	0349834e 	0x349834e
     530:	84bcf277 	lh	gp,-3465(a1)
     534:	4975084b 	0x4975084b
     538:	f2038a03 	0xf2038a03
     53c:	03eb08c0 	0x3eb08c0
     540:	7a034a79 	0x7a034a79
     544:	4a0b034a 	c2	0xb034a
     548:	8279034c 	lb	t9,844(s3)
     54c:	83f9454f 	lb	t9,17743(ra)
     550:	03ba7103 	0x3ba7103
     554:	f14a7ca7 	0xf14a7ca7
     558:	f4f20b03 	sdc1	$f18,2819(a3)
     55c:	0803e503 	j	f940c <__Size_Of_SDRAM+0xeec0c>
     560:	7c9b03ac 	0x7c9b03ac
     564:	03e50382 	0x3e50382
     568:	7c99034a 	0x7c99034a
     56c:	03e703f2 	0x3e703f2
     570:	0314864a 	0x314864a
     574:	86827dcc 	lh	v0,32204(s4)
     578:	3e08c083 	0x3e08c083
     57c:	034d4c48 	0x34d4c48
     580:	7803f249 	0x7803f249
     584:	086f0301 	j	1bc0c04 <__Size_Of_SDRAM+0x1bb6404>
     588:	49ad08ac 	0x49ad08ac
     58c:	40084983 	0x40084983
     590:	4983f6b6 	0x4983f6b6
     594:	49ad087e 	0x49ad087e
     598:	40084983 	0x40084983
     59c:	4983f6b6 	0x4983f6b6
     5a0:	49ad087e 	0x49ad087e
     5a4:	40084983 	0x40084983
     5a8:	4983f6b6 	0x4983f6b6
     5ac:	4a0a038a 	c2	0xa038a
     5b0:	034a7603 	0x34a7603
     5b4:	037dba0a 	0x37dba0a
     5b8:	49e40857 	0x49e40857
     5bc:	804c7908 	lb	t4,30984(v0)
     5c0:	8349af08 	lb	t1,-20728(k0)
     5c4:	1403f049 	bne	zero,v1,ffffc6ec <__heap_start_addr+0x5ffd2a9c>
     5c8:	00d803ba 	0xd803ba
     5cc:	122c02f2 	beq	s1,t4,1198 <__Size_Of_SDRAM-0x9668>
     5d0:	484a0f03 	0x484a0f03
     5d4:	4a71034c 	c2	0x71034c
     5d8:	c1ba0f03 	ll	k0,3843(t5)
     5dc:	46be4208 	c1	0xbe4208
     5e0:	4785474e 	c1	0x185474e
     5e4:	bb837f4d 	swr	v1,32589(gp)
     5e8:	7f4d7fbb 	swp.c2	t5,(k0)508
     5ec:	4785f388 	c1	0x185f388
     5f0:	bb837f4d 	swr	v1,32589(gp)
     5f4:	7f4d7fbb 	swp.c2	t5,(k0)508
     5f8:	0903bc87 	j	40ef21c <__Size_Of_SDRAM+0x40e4a1c>
     5fc:	822203f2 	lb	v0,1010(s1)
     600:	f6f43f08 	sdc1	$f20,16136(s7)
     604:	f3e508bc 	0xf3e508bc
     608:	4008bbbb 	0x4008bbbb
     60c:	4a7eee03 	c2	0x7eee03
     610:	91033d08 	lbu	v1,15624(t0)
     614:	083c0801 	j	f02004 <__Size_Of_SDRAM+0xef7804>
     618:	82110338 	lb	s1,824(s0)
     61c:	dc0389f7 	0xdc0389f7
     620:	012c027d 	0x12c027d
     624:	02a503b9 	0x2a503b9
     628:	826f0382 	lb	t7,898(s3)
     62c:	7ee403bc 	0x7ee403bc
     630:	3d087408 	0x3d087408
     634:	08018d03 	j	6340c <__Size_Of_SDRAM+0x58c0c>
     638:	8211033c 	lb	s1,828(s0)
     63c:	bd826603 	cache	0x2,26115(t4)
     640:	4b033e08 	c2	0x1033e08
     644:	85f33c08 	lh	s3,15368(t7)
     648:	837f4d47 	lb	ra,19783(k1)
     64c:	4d7fbbbb 	0x4d7fbbbb
     650:	bbbc877f 	swr	gp,-30849(sp)
     654:	854b7e86 	lh	t3,32390(t2)
     658:	837f4d47 	lb	ra,19783(k1)
     65c:	4d7fbbbb 	0x4d7fbbbb
     660:	0f03877f 	jal	c0e1dfc <__Size_Of_SDRAM+0xc0d75fc>
     664:	084d03ba 	j	1340ee8 <__Size_Of_SDRAM+0x13366e8>
     668:	f27a033c 	0xf27a033c
     66c:	01001002 	0x1001002
     670:	00002401 	0x2401
     674:	1e000200 	bgtz	s0,e78 <__Size_Of_SDRAM-0x9988>
     678:	01000000 	0x1000000
     67c:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
     680:	01010100 	0x1010100
     684:	00000001 	movf	zero,zero,$fcc0
     688:	01000001 	movf	zero,t0,$fcc0
     68c:	79746300 	0x79746300
     690:	632e6570 	udi0i	t6,t9,25968
     694:	00000000 	nop
     698:	0001f400 	sll	s8,at,0x10
     69c:	7b000200 	0x7b000200
     6a0:	01000000 	0x1000000
     6a4:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
     6a8:	01010100 	0x1010100
     6ac:	00000001 	movf	zero,zero,$fcc0
     6b0:	01000001 	movf	zero,t0,$fcc0
     6b4:	6d6f682f 	udi3i	t7,t3,26671
     6b8:	6c612f65 	udi3i	at,v1,12133
     6bc:	686b7865 	udi2i	t3,v1,30821
     6c0:	73666e2f 	0x73666e2f
     6c4:	72656b2f 	0x72656b2f
     6c8:	2f6c656e 	sltiu	t4,k1,25966
     6cc:	69726973 	udi2i	s2,t3,26995
     6d0:	622f7375 	udi0i	t7,s1,29557
     6d4:	63746f6f 	udi0i	s4,k1,28527
     6d8:	2f65646f 	sltiu	a1,k1,25711
     6dc:	41736952 	0x41736952
     6e0:	692f7070 	udi2i	t7,t1,28784
     6e4:	756c636e 	jalx	5b18db8 <__Size_Of_SDRAM+0x5b0e5b8>
     6e8:	00006564 	0x6564
     6ec:	72706f64 	0x72706f64
     6f0:	2e78746e 	sltiu	t8,s3,29806
     6f4:	00000063 	0x63
     6f8:	73797300 	0x73797300
     6fc:	73666564 	0x73666564
     700:	0100682e 	0x100682e
     704:	74730000 	jalx	1cc0000 <__Size_Of_SDRAM+0x1cb5800>
     708:	67726164 	udi1i	s2,k1,24932
     70c:	0100682e 	0x100682e
     710:	74630000 	jalx	18c0000 <__Size_Of_SDRAM+0x18b5800>
     714:	2e657079 	sltiu	a1,s3,28793
     718:	00010068 	0x10068
     71c:	05000000 	bltz	t0,720 <__Size_Of_SDRAM-0xa0e0>
     720:	0221b402 	0x221b402
     724:	00dd03a0 	0xdd03a0
     728:	02140301 	0x2140301
     72c:	b503012c 	0xb503012c
     730:	b7034a01 	0xb7034a01
     734:	14034a7e 	bne	zero,v1,13130 <__Size_Of_SDRAM+0x8930>
     738:	01b503ba 	0x1b503ba
     73c:	7ecf03ba 	stp.c2	t6,(s6)24
     740:	0280034a 	0x280034a
     744:	7e8003f2 	ltp	zero,(s4)24
     748:	84013402 	lh	at,13314(zero)
     74c:	03f1b883 	0x3f1b883
     750:	0374082d 	0x374082d
     754:	ee034a60 	swc3	$3,19040(s0)
     758:	3d08ba01 	0x3d08ba01
     75c:	827e8303 	lb	s8,-31997(s3)
     760:	03820e03 	0x3820e03
     764:	ac080188 	sw	t0,392(zero)
     768:	08770889 	j	1dc2224 <__Size_Of_SDRAM+0x1db7a24>
     76c:	ba09033d 	swr	t1,829(s0)
     770:	1f035283 	0x1f035283
     774:	08f33c08 	j	3ccf020 <__Size_Of_SDRAM+0x3cc4820>
     778:	4b484b3e 	c2	0x1484b3e
     77c:	4d4b494b 	0x4d4b494b
     780:	4b4b4847 	c2	0x14b4847
     784:	f440084d 	sdc1	$f0,2125(v0)
     788:	08eff6f7 	j	3bfdbdc <__Size_Of_SDRAM+0x3bf33dc>
     78c:	08b94baf 	j	2e52ebc <__Size_Of_SDRAM+0x2e486bc>
     790:	88f183b1 	lwl	s1,-31823(a3)
     794:	b9ad08bb 	swr	t5,2235(t5)
     798:	7e8903f5 	lhpu	t1,(s4)6
     79c:	01f703ba 	0x1f703ba
     7a0:	7f9c034a 	0x7f9c034a
     7a4:	41034dba 	0x41034dba
     7a8:	4e012402 	c3	0x12402
     7ac:	03833d08 	0x3833d08
     7b0:	034d820e 	0x34d820e
     7b4:	01240233 	0x1240233
     7b8:	ba7f8103 	swr	ra,-32509(s3)
     7bc:	03834df4 	0x3834df4
     7c0:	7e838227 	0x7e838227
     7c4:	82310383 	lb	s1,899(s1)
     7c8:	088a3e08 	j	228f820 <__Size_Of_SDRAM+0x2285020>
     7cc:	f5034b75 	sdc1	$f3,19317(t0)
     7d0:	fb03ba00 	0xfb03ba00
     7d4:	03f4ba7e 	0x3f4ba7e
     7d8:	03bf8267 	0x3bf8267
     7dc:	03827f98 	0x3827f98
     7e0:	034a00e8 	0x34a00e8
     7e4:	03827fa6 	0x3827fa6
     7e8:	833c082f 	lb	gp,2095(t9)
     7ec:	f6826f03 	sdc1	$f2,28419(s4)
     7f0:	850f2c02 	lh	t7,11266(t0)
     7f4:	49132402 	0x49132402
     7f8:	494bb94b 	0x494bb94b
     7fc:	03857608 	0x3857608
     800:	6c03825f 	udi3i	v1,zero,-32161
     804:	ba1803f2 	swr	t8,1010(s0)
     808:	82380383 	lb	t8,899(s1)
     80c:	0801ad03 	j	6b40c <__Size_Of_SDRAM+0x60c0c>
     810:	7eca03ac 	0x7eca03ac
     814:	740383f2 	jalx	e0fc8 <__Size_Of_SDRAM+0xd67c8>
     818:	49bb4f82 	0x49bb4f82
     81c:	00f1034b 	0xf1034b
     820:	02014002 	0x2014002
     824:	03841424 	0x3841424
     828:	6703f219 	udi1i	v1,t8,-3559
     82c:	ba19034a 	swr	t9,842(s0)
     830:	f3be7b08 	0xf3be7b08
     834:	bd83f3bb 	cache	0x3,-3141(t4)
     838:	4beff5f3 	c2	0x1eff5f3
     83c:	085403b9 	j	1500ee4 <__Size_Of_SDRAM+0x14f66e4>
     840:	082103e4 	j	840f90 <__Size_Of_SDRAM+0x836790>
     844:	132802ac 	beq	t9,t0,12f8 <__Size_Of_SDRAM-0x9508>
     848:	7eac03b9 	shp.c2	t4,(s5)6
     84c:	e008e408 	sc	t0,-7160(zero)
     850:	d903464e 	0xd903464e
     854:	83838200 	lb	v1,-32256(gp)
     858:	08823903 	j	208e40c <__Size_Of_SDRAM+0x2083c0c>
     85c:	f251037b 	0xf251037b
     860:	0800cb03 	j	32c0c <__Size_Of_SDRAM+0x2840c>
     864:	a303bb74 	sb	v1,-17548(t8)
     868:	08e4087f 	j	39021fc <__Size_Of_SDRAM+0x38f79fc>
     86c:	9a03bb44 	lwr	v1,-17596(s0)
     870:	e6034a7f 	swc1	$f3,19071(s0)
     874:	af034a00 	sw	v1,18944(t8)
     878:	fa03ba7f 	0xfa03ba7f
     87c:	9f03f200 	0x9f03f200
     880:	8b03f27f 	lwl	v1,-3457(t8)
     884:	03740801 	movf	at,k1,$fcc5
     888:	74087ef8 	jalx	21fbe0 <__Size_Of_SDRAM+0x2153e0>
     88c:	01000802 	0x1000802
     890:	00006a01 	0x6a01
     894:	1f000200 	bgtz	t8,1098 <__Size_Of_SDRAM-0x9768>
     898:	01000000 	0x1000000
     89c:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
     8a0:	01010100 	0x1010100
     8a4:	00000001 	movf	zero,zero,$fcc0
     8a8:	01000001 	movf	zero,t0,$fcc0
     8ac:	616f6c00 	udi0i	t7,t3,27648
     8b0:	2e726564 	sltiu	s2,s3,25956
     8b4:	00000053 	0x53
     8b8:	05000000 	bltz	t0,8bc <__Size_Of_SDRAM-0x9f44>
     8bc:	02000002 	0x2000002
     8c0:	00e703a0 	0xe703a0
     8c4:	4b848301 	c2	0x1848301
     8c8:	83834d4b 	lb	v1,19787(gp)
     8cc:	83838383 	lb	v1,-31869(gp)
     8d0:	87838383 	lh	v1,-31869(gp)
     8d4:	83820903 	lb	v0,2307(gp)
     8d8:	834b4b4b 	lb	t3,19275(k0)
     8dc:	4b834b83 	c2	0x1834b83
     8e0:	4b838585 	c2	0x1838585
     8e4:	834b834d 	lb	t3,-31923(k0)
     8e8:	834b834b 	lb	t3,-31925(k0)
     8ec:	834b834b 	lb	t3,-31925(k0)
     8f0:	834b834b 	lb	t3,-31925(k0)
     8f4:	834b834b 	lb	t3,-31925(k0)
     8f8:	04024b4b 	0x4024b4b
     8fc:	7e010100 	0x7e010100
     900:	02000000 	0x2000000
     904:	00006300 	sll	t4,zero,0xc
     908:	fb010100 	0xfb010100
     90c:	01000d0e 	0x1000d0e
     910:	00010101 	0x10101
     914:	00010000 	sll	zero,at,0x0
     918:	682f0100 	udi2i	t7,at,256
     91c:	2f656d6f 	sltiu	a1,k1,28015
     920:	78656c61 	0x78656c61
     924:	6e2f686b 	udi3i	t7,s1,26731
     928:	6b2f7366 	udi2i	t7,t9,29542
     92c:	656e7265 	udi1i	t6,t3,29285
     930:	69732f6c 	udi2i	s3,t3,12140
     934:	73756972 	0x73756972
     938:	6f6f622f 	udi3i	t7,k1,25135
     93c:	646f6374 	udi1i	t7,v1,25460
     940:	69522f65 	udi2i	s2,t2,12133
     944:	70704173 	0x70704173
     948:	636e692f 	udi0i	t6,k1,26927
     94c:	6564756c 	udi1i	a0,t3,30060
     950:	656d0000 	udi1i	t5,t3,0
     954:	7268636d 	0x7268636d
     958:	0000632e 	0x632e
     95c:	79730000 	0x79730000
     960:	66656473 	udi1i	a1,s3,25715
     964:	00682e73 	0x682e73
     968:	00000001 	movf	zero,zero,$fcc0
     96c:	4c020500 	0x4c020500
     970:	03a0022a 	0x3a0022a
     974:	8314013f 	lb	s4,319(t8)
     978:	77088349 	jalx	c220d24 <__Size_Of_SDRAM+0xc216524>
     97c:	01000802 	0x1000802
     980:	0000d101 	0xd101
     984:	21000200 	addi	zero,t0,512
     988:	01000000 	0x1000000
     98c:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
     990:	01010100 	0x1010100
     994:	00000001 	movf	zero,zero,$fcc0
     998:	01000001 	movf	zero,t0,$fcc0
     99c:	70746f00 	0x70746f00
     9a0:	6974755f 	udi2i	s4,t3,30047
     9a4:	00632e6c 	0x632e6c
     9a8:	00000000 	nop
     9ac:	80020500 	lb	v0,1280(zero)
     9b0:	03a0022a 	0x3a0022a
     9b4:	0316011c 	0x316011c
     9b8:	83018212 	lb	at,-32238(t8)
     9bc:	827903c1 	lb	t9,961(s3)
     9c0:	ae087808 	sw	t0,30728(s0)
     9c4:	83821203 	lb	v0,4611(gp)
     9c8:	037708c0 	0x37708c0
     9cc:	03f3f279 	0x3f3f279
     9d0:	4bf28219 	c2	0x1f28219
     9d4:	ba4c03f4 	swr	t4,1012(s2)
     9d8:	034a3a03 	0x34a3a03
     9dc:	033c087a 	0x33c087a
     9e0:	7808f248 	0x7808f248
     9e4:	0800cc03 	j	3300c <__Size_Of_SDRAM+0x2880c>
     9e8:	7803faac 	0x7803faac
     9ec:	c188524a 	ll	t0,21066(t4)
     9f0:	84410884 	lh	at,2180(v0)
     9f4:	0f034c80 	jal	c0d3200 <__Size_Of_SDRAM+0xc0c8a00>
     9f8:	1e03524a 	0x1e03524a
     9fc:	4a4b034a 	c2	0x4b034a
     a00:	034a1703 	0x34a1703
     a04:	5a03821e 	0x5a03821e
     a08:	4a7a034a 	c2	0x7a034a
     a0c:	034a1a03 	0x34a1a03
     a10:	6f034a0e 	udi3i	v1,t8,18958
     a14:	4a65034a 	c2	0x65034a
     a18:	038af84e 	0x38af84e
     a1c:	0385ba09 	0x385ba09
     a20:	0386ba0e 	0x386ba0e
     a24:	35034a50 	ori	v1,t0,0x4a50
     a28:	826903ba 	lb	t1,954(s3)
     a2c:	4b4a1703 	c2	0x14a1703
     a30:	034d8349 	0x34d8349
     a34:	3c087fbd 	lui	t0,0x7fbd
     a38:	827603bb 	lb	s6,955(s3)
     a3c:	827903f3 	lb	t9,1011(s3)
     a40:	00e503f3 	0xe503f3
     a44:	c1830182 	ll	v1,386(t4)
     a48:	08827903 	j	209e40c <__Size_Of_SDRAM+0x2093c0c>
     a4c:	4b3f0877 	c2	0x13f0877
     a50:	00080211 	0x80211
     a54:	00930101 	0x930101
     a58:	00020000 	sll	zero,v0,0x0
     a5c:	00000062 	0x62
     a60:	0efb0101 	jal	bec0404 <__Size_Of_SDRAM+0xbeb5c04>
     a64:	0101000d 	break	0x101
     a68:	00000101 	0x101
     a6c:	00000100 	sll	zero,zero,0x4
     a70:	6f682f01 	udi3i	t0,k1,12033
     a74:	612f656d 	udi0i	t7,t1,25965
     a78:	6b78656c 	udi2i	t8,k1,25964
     a7c:	666e2f68 	udi1i	t6,s3,12136
     a80:	656b2f73 	udi1i	t3,t3,12147
     a84:	6c656e72 	udi3i	a1,v1,28274
     a88:	7269732f 	0x7269732f
     a8c:	2f737569 	sltiu	s3,k1,30057
     a90:	746f6f62 	jalx	1bdbd88 <__Size_Of_SDRAM+0x1bd1588>
     a94:	65646f63 	udi1i	a0,t3,28515
     a98:	7369522f 	0x7369522f
     a9c:	2f707041 	sltiu	s0,k1,28737
     aa0:	6c636e69 	udi3i	v1,v1,28265
     aa4:	00656475 	0x656475
     aa8:	69727000 	udi2i	s2,t3,28672
     aac:	2e66746e 	sltiu	a2,s3,29806
     ab0:	00000063 	0x63
     ab4:	64747300 	udi1i	s4,v1,29440
     ab8:	2e677261 	sltiu	a3,s3,29281
     abc:	00010068 	0x10068
     ac0:	05000000 	bltz	t0,ac4 <__Size_Of_SDRAM-0x9d3c>
     ac4:	022d7002 	0x22d7002
     ac8:	00dc03a0 	0xdc03a0
     acc:	4e478501 	c3	0x478501
     ad0:	3f088646 	0x3f088646
     ad4:	85f26903 	lh	s2,26883(t7)
     ad8:	86464e47 	lh	a2,20039(s2)
     adc:	82f53f08 	lb	s5,16136(s7)
     ae0:	6e03834b 	udi3i	v1,s0,-31925
     ae4:	834b82f2 	lb	t3,-32014(k0)
     ae8:	01001002 	0x1001002
     aec:	0001b001 	movt	s6,zero,$fcc0
     af0:	68000200 	udi2i	zero,zero,512
     af4:	01000000 	0x1000000
     af8:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
     afc:	01010100 	0x1010100
     b00:	00000001 	movf	zero,zero,$fcc0
     b04:	01000001 	movf	zero,t0,$fcc0
     b08:	6d6f682f 	udi3i	t7,t3,26671
     b0c:	6c612f65 	udi3i	at,v1,12133
     b10:	686b7865 	udi2i	t3,v1,30821
     b14:	73666e2f 	0x73666e2f
     b18:	72656b2f 	0x72656b2f
     b1c:	2f6c656e 	sltiu	t4,k1,25966
     b20:	69726973 	udi2i	s2,t3,26995
     b24:	622f7375 	udi0i	t7,s1,29557
     b28:	63746f6f 	udi0i	s4,k1,28527
     b2c:	2f65646f 	sltiu	a1,k1,25711
     b30:	41736952 	0x41736952
     b34:	692f7070 	udi2i	t7,t1,28784
     b38:	756c636e 	jalx	5b18db8 <__Size_Of_SDRAM+0x5b0e5b8>
     b3c:	00006564 	0x6564
     b40:	65617472 	udi1i	at,t3,29810
     b44:	74725f73 	jalx	1c97dcc <__Size_Of_SDRAM+0x1c8d5cc>
     b48:	00632e6b 	0x632e6b
     b4c:	73000000 	mad	t8,zero
     b50:	745f6465 	jalx	17d9194 <__Size_Of_SDRAM+0x17ce994>
     b54:	73657079 	0x73657079
     b58:	0100682e 	0x100682e
     b5c:	00000000 	nop
     b60:	2e380205 	sltiu	t8,s1,517
     b64:	cc03a002 	lwc3	$3,-24574(zero)
     b68:	87f20108 	lh	s2,264(ra)
     b6c:	81837708 	lb	v1,30472(t4)
     b70:	844d4783 	lh	t5,18307(v0)
     b74:	f6730883 	sdc1	$f19,2179(s3)
     b78:	74085503 	jalx	21540c <__Size_Of_SDRAM+0x20ac0c>
     b7c:	780887f2 	0x780887f2
     b80:	49857f85 	0x49857f85
     b84:	0883844b 	j	20e112c <__Size_Of_SDRAM+0x20d692c>
     b88:	4f03f63b 	c3	0x103f63b
     b8c:	11037408 	beq	t0,v1,1dbb0 <__Size_Of_SDRAM+0x133b0>
     b90:	03400882 	0x3400882
     b94:	1203f24b 	beq	s0,v1,ffffd4c4 <__heap_start_addr+0x5ffd3874>
     b98:	03400882 	0x3400882
     b9c:	03f27fbf 	0x3f27fbf
     ba0:	4008821d 	0x4008821d
     ba4:	f27faf03 	0xf27faf03
     ba8:	08822203 	j	208880c <__Size_Of_SDRAM+0x207e00c>
     bac:	7fbb0340 	0x7fbb0340
     bb0:	821103f2 	lb	s1,1010(s0)
     bb4:	4b034008 	c2	0x1034008
     bb8:	821003f2 	lb	s0,1010(s0)
     bbc:	40034008 	mfc0	v1,$8,8
     bc0:	821c03f2 	lb	gp,1010(s0)
     bc4:	b0034008 	0xb0034008
     bc8:	2203f27f 	addi	v1,s0,-3457
     bcc:	03400882 	0x3400882
     bd0:	03f27fb9 	0x3f27fb9
     bd4:	40088212 	0x40088212
     bd8:	03f24a03 	0x3f24a03
     bdc:	40088212 	0x40088212
     be0:	f27fb803 	0xf27fb803
     be4:	08822403 	j	208900c <__Size_Of_SDRAM+0x207e80c>
     be8:	7fa90340 	0x7fa90340
     bec:	822103f2 	lb	at,1010(s1)
     bf0:	d8034008 	0xd8034008
     bf4:	2f03f27d 	sltiu	v1,t8,-3459
     bf8:	03400882 	0x3400882
     bfc:	03f27f88 	0x3f27f88
     c00:	40088233 	0x40088233
     c04:	f27eee03 	0xf27eee03
     c08:	83760883 	lb	s6,2179(k1)
     c0c:	83848383 	lb	a0,-31869(gp)
     c10:	85834588 	lh	v1,17800(t4)
     c14:	82590383 	lb	t9,899(s2)
     c18:	113d0814 	beq	t1,sp,2c6c <__Size_Of_SDRAM-0x7b94>
     c1c:	8207bf03 	lb	a3,-16637(s0)
     c20:	7e162402 	qmadda	reserved,s0,s6
     c24:	f54e7e86 	sdc1	$f14,32390(t2)
     c28:	ac080f03 	sw	t0,3843(zero)
     c2c:	034a7403 	0x34a7403
     c30:	74034a0c 	jalx	d2830 <__Size_Of_SDRAM+0xc8030>
     c34:	4a0c034a 	c2	0xc034a
     c38:	bbbc3d08 	swr	gp,15624(sp)
     c3c:	4b494bf4 	c2	0x1494bf4
     c40:	08ef8547 	j	3be151c <__Size_Of_SDRAM+0x3bd6d1c>
     c44:	0883bb3d 	j	20eecf4 <__Size_Of_SDRAM+0x20e44f4>
     c48:	08420839 	j	10820e4 <__Size_Of_SDRAM+0x10778e4>
     c4c:	4b49f3e5 	c2	0x149f3e5
     c50:	3f083b08 	0x3f083b08
     c54:	192402bb 	0x192402bb
     c58:	03844884 	0x3844884
     c5c:	01280259 	0x1280259
     c60:	3c080f03 	lui	t0,0xf03
     c64:	034a7403 	0x34a7403
     c68:	74034a0c 	jalx	d2830 <__Size_Of_SDRAM+0xc8030>
     c6c:	4a0c034a 	c2	0xc034a
     c70:	0e033d08 	jal	80cf420 <__Size_Of_SDRAM+0x80c4c20>
     c74:	26037df2 	addiu	v1,s0,32242
     c78:	11bb1382 	beq	t5,k1,5a84 <__Size_Of_SDRAM-0x4d7c>
     c7c:	13827203 	beq	gp,v0,1d48c <__Size_Of_SDRAM+0x12c8c>
     c80:	df0310bc 	0xdf0310bc
     c84:	08838278 	j	20e09e0 <__Size_Of_SDRAM+0x20d61e0>
     c88:	74034877 	jalx	d21dc <__Size_Of_SDRAM+0xc79dc>
     c8c:	77088382 	jalx	c220e08 <__Size_Of_SDRAM+0xc216608>
     c90:	826d0348 	lb	t5,840(s3)
     c94:	6903c084 	udi2i	v1,t0,-16252
     c98:	3f0885f2 	0x3f0885f2
     c9c:	01001002 	0x1001002
     ca0:	0001d001 	movt	k0,zero,$fcc0
     ca4:	6c000200 	udi3i	zero,zero,512
     ca8:	01000000 	0x1000000
     cac:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
     cb0:	01010100 	0x1010100
     cb4:	00000001 	movf	zero,zero,$fcc0
     cb8:	01000001 	movf	zero,t0,$fcc0
     cbc:	6d6f682f 	udi3i	t7,t3,26671
     cc0:	6c612f65 	udi3i	at,v1,12133
     cc4:	686b7865 	udi2i	t3,v1,30821
     cc8:	73666e2f 	0x73666e2f
     ccc:	72656b2f 	0x72656b2f
     cd0:	2f6c656e 	sltiu	t4,k1,25966
     cd4:	69726973 	udi2i	s2,t3,26995
     cd8:	622f7375 	udi0i	t7,s1,29557
     cdc:	63746f6f 	udi0i	s4,k1,28527
     ce0:	2f65646f 	sltiu	a1,k1,25711
     ce4:	41736952 	0x41736952
     ce8:	692f7070 	udi2i	t7,t1,28784
     cec:	756c636e 	jalx	5b18db8 <__Size_Of_SDRAM+0x5b0e5b8>
     cf0:	00006564 	0x6564
     cf4:	65617472 	udi1i	at,t3,29810
     cf8:	65745f73 	udi1i	s4,t3,24435
     cfc:	70617473 	0x70617473
     d00:	00632e70 	0x632e70
     d04:	73000000 	mad	t8,zero
     d08:	745f6465 	jalx	17d9194 <__Size_Of_SDRAM+0x17ce994>
     d0c:	73657079 	0x73657079
     d10:	0100682e 	0x100682e
     d14:	00000000 	nop
     d18:	35900205 	ori	s0,t4,0x205
     d1c:	2b03a002 	slti	v1,t8,-24574
     d20:	16280201 	bne	s1,t0,1528 <__Size_Of_SDRAM-0x92d8>
     d24:	084c4e46 	j	1313918 <__Size_Of_SDRAM+0x1309118>
     d28:	454f4678 	0x454f4678
     d2c:	4cf38385 	0x4cf38385
     d30:	1503b54b 	bne	t0,v1,fffee260 <__heap_start_addr+0x5ffc4610>
     d34:	4c48bff2 	0x4c48bff2
     d38:	b54d4c45 	0xb54d4c45
     d3c:	bbbb7d4f 	swr	k1,32079(sp)
     d40:	4f7df483 	c3	0x17df483
     d44:	8384c17d 	lb	a0,-16003(gp)
     d48:	026203be 	0x26203be
     d4c:	87030130 	lh	v1,304(t8)
     d50:	0b03f201 	j	c0fc804 <__Size_Of_SDRAM+0xc0f2004>
     d54:	08012c02 	j	4b008 <__Size_Of_SDRAM+0x40808>
     d58:	f21703ad 	0xf21703ad
     d5c:	f8038483 	0xf8038483
     d60:	033c087e 	0x33c087e
     d64:	033c080e 	0x33c080e
     d68:	834a00fe 	lb	t2,254(k0)
     d6c:	087f8503 	j	1fe140c <__Size_Of_SDRAM+0x1fd6c0c>
     d70:	83bbee3c 	lb	k1,-4548(sp)
     d74:	03c0bf83 	0x3c0bf83
     d78:	088200f6 	j	20803d8 <__Size_Of_SDRAM+0x2075bd8>
     d7c:	7f9a03b2 	ltp.c2	k0,(gp)24
     d80:	83012802 	lb	at,10242(t8)
     d84:	ba02a403 	swr	v0,-23549(s0)
     d88:	7da70383 	0x7da70383
     d8c:	03f1f382 	0x3f1f382
     d90:	74080199 	jalx	200664 <__Size_Of_SDRAM+0x1f5e64>
     d94:	49847608 	0x49847608
     d98:	4b498383 	c2	0x1498383
     d9c:	084b4983 	j	12d260c <__Size_Of_SDRAM+0x12c7e0c>
     da0:	8231033d 	lb	s1,829(s1)
     da4:	08f21603 	j	3c8580c <__Size_Of_SDRAM+0x3c7b00c>
     da8:	e403bbae 	swc1	$f3,-17490(zero)
     dac:	3d08f200 	0x3d08f200
     db0:	827edc03 	lb	s8,-9213(s3)
     db4:	08f21003 	j	3c8400c <__Size_Of_SDRAM+0x3c7980c>
     db8:	6603bbad 	udi1i	v1,s0,-17491
     dbc:	9e033c08 	0x9e033c08
     dc0:	4b47f27f 	c2	0x147f27f
     dc4:	8c03834c 	lw	v1,-31924(zero)
     dc8:	3908f202 	xori	t0,t0,0xf202
     dcc:	827703bd 	lb	s7,957(s3)
     dd0:	74087a03 	jalx	21e80c <__Size_Of_SDRAM+0x21400c>
     dd4:	087a03f3 	j	1e80fcc <__Size_Of_SDRAM+0x1e767cc>
     dd8:	0339083c 	udi3	at,t9,t9
     ddc:	f33c087a 	0xf33c087a
     de0:	3c087903 	lui	t0,0x7903
     de4:	087a03f3 	j	1e80fcc <__Size_Of_SDRAM+0x1e767cc>
     de8:	0339083c 	udi3	at,t9,t9
     dec:	f33c087a 	0xf33c087a
     df0:	3c087903 	lui	t0,0x7903
     df4:	087703f3 	j	1dc0fcc <__Size_Of_SDRAM+0x1db67cc>
     df8:	033f083c 	udi3	at,t9,ra
     dfc:	f33c0871 	0xf33c0871
     e00:	03f34108 	0x3f34108
     e04:	033c083c 	udi3	at,t9,gp
     e08:	74087ecc 	jalx	21fb30 <__Size_Of_SDRAM+0x215330>
     e0c:	f200db03 	0xf200db03
     e10:	08ad08f5 	j	2b423d4 <__Size_Of_SDRAM+0x2b37bd4>
     e14:	08e208e5 	j	3882394 <__Size_Of_SDRAM+0x3877b94>
     e18:	083e0878 	j	f821e0 <__Size_Of_SDRAM+0xf779e0>
     e1c:	08494be3 	j	1252f8c <__Size_Of_SDRAM+0x124878c>
     e20:	08470340 	j	11c0d00 <__Size_Of_SDRAM+0x11b6500>
     e24:	ad08f5ac 	sw	t0,-2644(t0)
     e28:	2402e508 	li	v0,-6904
     e2c:	03790810 	0x3790810
     e30:	3c080186 	lui	t0,0x186
     e34:	827cf503 	lb	gp,-2813(s3)
     e38:	02018303 	0x2018303
     e3c:	834c0140 	lb	t4,320(k0)
     e40:	08f17508 	j	3c5d420 <__Size_Of_SDRAM+0x3c52c20>
     e44:	03488677 	0x3488677
     e48:	4b4a7efb 	c2	0x14a7efb
     e4c:	4a018403 	c2	0x18403
     e50:	4a7efa03 	c2	0x7efa03
     e54:	4b494b4b 	c2	0x1494b4b
     e58:	4b4b4b48 	c2	0x14b4b48
     e5c:	ba018603 	swr	at,-31229(s0)
     e60:	4a7ef703 	c2	0x7ef703
     e64:	83814bf3 	lb	at,19443(gp)
     e68:	034b4b49 	0x34b4b49
     e6c:	ac0802a9 	sw	t0,681(zero)
     e70:	01000802 	0x1000802
     e74:	00001901 	0x1901
     e78:	13000200 	beqz	t8,167c <__Size_Of_SDRAM-0x9184>
     e7c:	01000000 	0x1000000
     e80:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
     e84:	01010100 	0x1010100
     e88:	00000001 	movf	zero,zero,$fcc0
     e8c:	01000001 	movf	zero,t0,$fcc0
     e90:	00190000 	sll	zero,t9,0x0
     e94:	00020000 	sll	zero,v0,0x0
     e98:	00000013 	mtlo	zero
     e9c:	0efb0101 	jal	bec0404 <__Size_Of_SDRAM+0xbeb5c04>
     ea0:	0101000d 	break	0x101
     ea4:	00000101 	0x101
     ea8:	00000100 	sll	zero,zero,0x4
     eac:	b4000001 	0xb4000001
     eb0:	02000000 	0x2000000
     eb4:	00006900 	sll	t5,zero,0x4
     eb8:	fb010100 	0xfb010100
     ebc:	01000d0e 	0x1000d0e
     ec0:	00010101 	0x10101
     ec4:	00010000 	sll	zero,at,0x0
     ec8:	682f0100 	udi2i	t7,at,256
     ecc:	2f656d6f 	sltiu	a1,k1,28015
     ed0:	78656c61 	0x78656c61
     ed4:	6e2f686b 	udi3i	t7,s1,26731
     ed8:	6b2f7366 	udi2i	t7,t9,29542
     edc:	656e7265 	udi1i	t6,t3,29285
     ee0:	69732f6c 	udi2i	s3,t3,12140
     ee4:	73756972 	0x73756972
     ee8:	6f6f622f 	udi3i	t7,k1,25135
     eec:	646f6374 	udi1i	t7,v1,25460
     ef0:	69522f65 	udi2i	s2,t2,12133
     ef4:	70704173 	0x70704173
     ef8:	636e692f 	udi0i	t6,k1,26927
     efc:	6564756c 	udi1i	a0,t3,30060
     f00:	65730000 	udi1i	s3,t3,0
     f04:	6f635f64 	udi3i	v1,k1,24420
     f08:	6e6f6d6d 	udi3i	t7,s3,28013
     f0c:	0000632e 	0x632e
     f10:	65730000 	udi1i	s3,t3,0
     f14:	79745f64 	0x79745f64
     f18:	2e736570 	sltiu	s3,s3,25968
     f1c:	00010068 	0x10068
     f20:	05000000 	bltz	t0,f24 <__Size_Of_SDRAM-0x98dc>
     f24:	023e9402 	0x23e9402
     f28:	0b0316a0 	j	c0c5a80 <__Size_Of_SDRAM+0xc0bb280>
     f2c:	03018501 	0x3018501
     f30:	03858213 	0x3858213
     f34:	0186010e 	0x186010e
     f38:	020185bc 	0x20185bc
     f3c:	01851528 	0x1851528
     f40:	85175002 	lh	s7,20482(t0)
     f44:	4b4b4b01 	c2	0x14b4b01
     f48:	494b1385 	0x494b1385
     f4c:	4b474b4c 	c2	0x1474b4c
     f50:	8313854d 	lb	s3,-31411(t8)
     f54:	4b4b4c4b 	c2	0x14b4c4b
     f58:	4a79034b 	c2	0x79034b
     f5c:	4b4b4b4b 	c2	0x14b4b4b
     f60:	08024d4b 	j	9352c <__Size_Of_SDRAM+0x88d2c>
     f64:	a9010100 	swl	at,256(t0)
     f68:	02000000 	0x2000000
     f6c:	00006b00 	sll	t5,zero,0xc
     f70:	fb010100 	0xfb010100
     f74:	01000d0e 	0x1000d0e
     f78:	00010101 	0x10101
     f7c:	00010000 	sll	zero,at,0x0
     f80:	682f0100 	udi2i	t7,at,256
     f84:	2f656d6f 	sltiu	a1,k1,28015
     f88:	78656c61 	0x78656c61
     f8c:	6e2f686b 	udi3i	t7,s1,26731
     f90:	6b2f7366 	udi2i	t7,t9,29542
     f94:	656e7265 	udi1i	t6,t3,29285
     f98:	69732f6c 	udi2i	s3,t3,12140
     f9c:	73756972 	0x73756972
     fa0:	6f6f622f 	udi3i	t7,k1,25135
     fa4:	646f6374 	udi1i	t7,v1,25460
     fa8:	69522f65 	udi2i	s2,t2,12133
     fac:	70704173 	0x70704173
     fb0:	636e692f 	udi0i	t6,k1,26927
     fb4:	6564756c 	udi1i	a0,t3,30060
     fb8:	65730000 	udi1i	s3,t3,0
     fbc:	72645f64 	0x72645f64
     fc0:	70675f76 	0x70675f76
     fc4:	632e6f69 	udi0i	t6,t9,28521
     fc8:	00000000 	nop
     fcc:	5f646573 	0x5f646573
     fd0:	65707974 	udi1i	s0,t3,31092
     fd4:	00682e73 	0x682e73
     fd8:	00000001 	movf	zero,zero,$fcc0
     fdc:	c8020500 	lwc2	$2,1280(zero)
     fe0:	03a0023f 	0x3a0023f
     fe4:	f316010e 	0xf316010e
     fe8:	87f38349 	lh	s3,-31927(ra)
     fec:	52aa0815 	0x52aa0815
     ff0:	85f61385 	lh	s6,4997(t7)
     ff4:	03102402 	0x3102402
     ff8:	16e4080b 	bne	s7,a0,3028 <__Size_Of_SDRAM-0x77d8>
     ffc:	7f88bc80 	0x7f88bc80
    1000:	34034b4d 	li	v1,0x4b4d
    1004:	8246034a 	lb	a2,842(s2)
    1008:	4b4f7d87 	c2	0x14f7d87
    100c:	024a3403 	0x24a3403
    1010:	01010008 	0x1010008
    1014:	00000098 	0x98
    1018:	006d0002 	0x6d0002
    101c:	01010000 	0x1010000
    1020:	000d0efb 	0xd0efb
    1024:	01010101 	0x1010101
    1028:	01000000 	0x1000000
    102c:	2f010000 	sltiu	at,t8,0
    1030:	656d6f68 	udi1i	t5,t3,28520
    1034:	656c612f 	udi1i	t4,t3,24879
    1038:	2f686b78 	sltiu	t0,k1,27512
    103c:	2f73666e 	sltiu	s3,k1,26222
    1040:	6e72656b 	udi3i	s2,s3,25963
    1044:	732f6c65 	0x732f6c65
    1048:	75697269 	jalx	5a5c9a4 <__Size_Of_SDRAM+0x5a521a4>
    104c:	6f622f73 	udi3i	v0,k1,12147
    1050:	6f63746f 	udi3i	v1,k1,29807
    1054:	522f6564 	0x522f6564
    1058:	70417369 	0x70417369
    105c:	6e692f70 	udi3i	t1,s3,12144
    1060:	64756c63 	udi1i	s5,v1,27747
    1064:	73000065 	0x73000065
    1068:	645f6465 	udi1i	ra,v0,25701
    106c:	705f7672 	0x705f7672
    1070:	756d6e69 	jalx	5b5b9a4 <__Size_Of_SDRAM+0x5b511a4>
    1074:	00632e78 	0x632e78
    1078:	73000000 	mad	t8,zero
    107c:	745f6465 	jalx	17d9194 <__Size_Of_SDRAM+0x17ce994>
    1080:	73657079 	0x73657079
    1084:	0100682e 	0x100682e
    1088:	00000000 	nop
    108c:	40dc0205 	0x40dc0205
    1090:	1417a002 	bne	zero,s7,fffe909c <__heap_start_addr+0x5ffbf44c>
    1094:	bbbb4983 	swr	k1,18819(sp)
    1098:	b1081a85 	0xb1081a85
    109c:	08bf45bf 	j	2fd16fc <__Size_Of_SDRAM+0x2fc6efc>
    10a0:	034e8879 	0x34e8879
    10a4:	08c04a76 	j	30129d8 <__Size_Of_SDRAM+0x30081d8>
    10a8:	027608b0 	0x27608b0
    10ac:	01010008 	0x1010008
    10b0:	00000086 	0x86
    10b4:	006a0002 	0x6a0002
    10b8:	01010000 	0x1010000
    10bc:	000d0efb 	0xd0efb
    10c0:	01010101 	0x1010101
    10c4:	01000000 	0x1000000
    10c8:	2f010000 	sltiu	at,t8,0
    10cc:	656d6f68 	udi1i	t5,t3,28520
    10d0:	656c612f 	udi1i	t4,t3,24879
    10d4:	2f686b78 	sltiu	t0,k1,27512
    10d8:	2f73666e 	sltiu	s3,k1,26222
    10dc:	6e72656b 	udi3i	s2,s3,25963
    10e0:	732f6c65 	0x732f6c65
    10e4:	75697269 	jalx	5a5c9a4 <__Size_Of_SDRAM+0x5a521a4>
    10e8:	6f622f73 	udi3i	v0,k1,12147
    10ec:	6f63746f 	udi3i	v1,k1,29807
    10f0:	522f6564 	0x522f6564
    10f4:	70417369 	0x70417369
    10f8:	6e692f70 	udi3i	t1,s3,12144
    10fc:	64756c63 	udi1i	s5,v1,27747
    1100:	73000065 	0x73000065
    1104:	645f6465 	udi1i	ra,v0,25701
    1108:	725f7672 	0x725f7672
    110c:	632e676e 	udi0i	t6,t9,26478
    1110:	00000000 	nop
    1114:	5f646573 	0x5f646573
    1118:	65707974 	udi1i	s0,t3,31092
    111c:	00682e73 	0x682e73
    1120:	00000001 	movf	zero,zero,$fcc0
    1124:	b0020500 	0xb0020500
    1128:	16a00241 	bnez	s5,1a30 <__Size_Of_SDRAM-0x8dd0>
    112c:	08400814 	j	1002050 <__Size_Of_SDRAM+0xff7850>
    1130:	f31585ae 	0xf31585ae
    1134:	00080285 	0x80285
    1138:	01a00101 	0x1a00101
    113c:	00020000 	sll	zero,v0,0x0
    1140:	0000006a 	0x6a
    1144:	0efb0101 	jal	bec0404 <__Size_Of_SDRAM+0xbeb5c04>
    1148:	0101000d 	break	0x101
    114c:	00000101 	0x101
    1150:	00000100 	sll	zero,zero,0x4
    1154:	6f682f01 	udi3i	t0,k1,12033
    1158:	612f656d 	udi0i	t7,t1,25965
    115c:	6b78656c 	udi2i	t8,k1,25964
    1160:	666e2f68 	udi1i	t6,s3,12136
    1164:	656b2f73 	udi1i	t3,t3,12147
    1168:	6c656e72 	udi3i	a1,v1,28274
    116c:	7269732f 	0x7269732f
    1170:	2f737569 	sltiu	s3,k1,30057
    1174:	746f6f62 	jalx	1bdbd88 <__Size_Of_SDRAM+0x1bd1588>
    1178:	65646f63 	udi1i	a0,t3,28515
    117c:	7369522f 	0x7369522f
    1180:	2f707041 	sltiu	s0,k1,28737
    1184:	6c636e69 	udi3i	v1,v1,28265
    1188:	00656475 	0x656475
    118c:	64657300 	udi1i	a1,v1,29440
    1190:	7672645f 	jalx	9c9917c <__Size_Of_SDRAM+0x9c8e97c>
    1194:	6366735f 	udi0i	a2,k1,29535
    1198:	0000632e 	0x632e
    119c:	65730000 	udi1i	s3,t3,0
    11a0:	79745f64 	0x79745f64
    11a4:	2e736570 	sltiu	s3,s3,25968
    11a8:	00010068 	0x10068
    11ac:	05000000 	bltz	t0,11b0 <__Size_Of_SDRAM-0x9650>
    11b0:	02420802 	0x2420802
    11b4:	01c603a0 	0x1c603a0
    11b8:	03891601 	0x3891601
    11bc:	40088279 	0x40088279
    11c0:	f9498381 	0xf9498381
    11c4:	823603c0 	lb	s6,960(s1)
    11c8:	f246034e 	0xf246034e
    11cc:	47820a03 	c1	0x1820a03
    11d0:	034a7703 	0x34a7703
    11d4:	76034a0a 	jalx	80d2828 <__Size_Of_SDRAM+0x80c8028>
    11d8:	820a034a 	lb	t2,842(s0)
    11dc:	4b4f4c51 	c2	0x14f4c51
    11e0:	68038884 	udi2i	v1,zero,-30588
    11e4:	4b4b4b4a 	c2	0x14b4b4a
    11e8:	4b47504b 	c2	0x147504b
    11ec:	f64b4b4b 	sdc1	$f11,19275(s2)
    11f0:	4b4b4b4b 	c2	0x14b4b4b
    11f4:	4b4b4008 	c2	0x14b4008
    11f8:	4a0f034b 	c2	0xf034b
    11fc:	3c085503 	lui	t0,0x5503
    1200:	03823103 	0x3823103
    1204:	3803824f 	xori	v1,zero,0x824f
    1208:	19280282 	0x19280282
    120c:	03820b03 	0x3820b03
    1210:	13034a77 	beq	t8,v1,13bf0 <__Size_Of_SDRAM+0x93f0>
    1214:	7703494a 	jalx	c0d2528 <__Size_Of_SDRAM+0xc0c7d28>
    1218:	034d4d4a 	0x34d4d4a
    121c:	03474a74 	0x3474a74
    1220:	89514a7a 	lwl	s1,19066(t2)
    1224:	034a7803 	0x34a7803
    1228:	51514a7a 	0x51514a7a
    122c:	4b4a7a03 	c2	0x14a7a03
    1230:	4a0f034b 	c2	0xf034b
    1234:	82230350 	lb	v1,848(s1)
    1238:	4b4a1703 	c2	0x14a1703
    123c:	034c8884 	0x34c8884
    1240:	4b4a7fa9 	c2	0x14a7fa9
    1244:	85858583 	lh	a1,-31357(t4)
    1248:	49823c03 	0x49823c03
    124c:	4b4e4b4b 	c2	0x14e4b4b
    1250:	034b4b4b 	0x34b4b4b
    1254:	833c081c 	lb	gp,2076(t9)
    1258:	4b4a6703 	c2	0x14a6703
    125c:	a0034b4b 	sb	v1,19275(zero)
    1260:	03844a7f 	0x3844a7f
    1264:	034a00f2 	0x34a00f2
    1268:	514a7f8f 	0x514a7f8f
    126c:	4b4a7a03 	c2	0x14a7a03
    1270:	4a00ef03 	c2	0xef03
    1274:	4a7f9203 	c2	0x7f9203
    1278:	11034b4d 	beq	t0,v1,13fb0 <__Size_Of_SDRAM+0x97b0>
    127c:	8585bb82 	lh	a1,-17534(t4)
    1280:	83822803 	lb	v0,10243(gp)
    1284:	03f26603 	0x3f26603
    1288:	6a03f211 	udi2i	v1,s0,-3567
    128c:	f21203f2 	0xf21203f2
    1290:	03838588 	0x3838588
    1294:	8885f265 	lwl	a1,-3483(a0)
    1298:	ba0e0383 	swr	t6,899(s0)
    129c:	83f27403 	lb	s2,29699(ra)
    12a0:	f200c003 	0xf200c003
    12a4:	30024503 	andi	v0,zero,0x4503
    12a8:	a403f301 	sh	v1,-3327(zero)
    12ac:	0389f27e 	0x389f27e
    12b0:	7803820a 	0x7803820a
    12b4:	4f455282 	c3	0x1455282
    12b8:	49f27903 	0x49f27903
    12bc:	0352494b 	0x352494b
    12c0:	03514a79 	0x3514a79
    12c4:	874b4a7a 	lh	t3,19066(k0)
    12c8:	8212037e 	lb	s2,894(s0)
    12cc:	82700384 	lb	s0,900(s3)
    12d0:	03f23003 	0x3f23003
    12d4:	30038250 	andi	v1,zero,0x8250
    12d8:	0008024a 	0x8024a
    12dc:	009d0101 	0x9d0101
    12e0:	00020000 	sll	zero,v0,0x0
    12e4:	0000006c 	0x6c
    12e8:	0efb0101 	jal	bec0404 <__Size_Of_SDRAM+0xbeb5c04>
    12ec:	0101000d 	break	0x101
    12f0:	00000101 	0x101
    12f4:	00000100 	sll	zero,zero,0x4
    12f8:	6f682f01 	udi3i	t0,k1,12033
    12fc:	612f656d 	udi0i	t7,t1,25965
    1300:	6b78656c 	udi2i	t8,k1,25964
    1304:	666e2f68 	udi1i	t6,s3,12136
    1308:	656b2f73 	udi1i	t3,t3,12147
    130c:	6c656e72 	udi3i	a1,v1,28274
    1310:	7269732f 	0x7269732f
    1314:	2f737569 	sltiu	s3,k1,30057
    1318:	746f6f62 	jalx	1bdbd88 <__Size_Of_SDRAM+0x1bd1588>
    131c:	65646f63 	udi1i	a0,t3,28515
    1320:	7369522f 	0x7369522f
    1324:	2f707041 	sltiu	s0,k1,28737
    1328:	6c636e69 	udi3i	v1,v1,28265
    132c:	00656475 	0x656475
    1330:	64657300 	udi1i	a1,v1,29440
    1334:	7672645f 	jalx	9c9917c <__Size_Of_SDRAM+0x9c8e97c>
    1338:	6d69745f 	udi3i	t1,t3,29791
    133c:	632e7265 	udi0i	t6,t9,29285
    1340:	00000000 	nop
    1344:	5f646573 	0x5f646573
    1348:	65707974 	udi1i	s0,t3,31092
    134c:	00682e73 	0x682e73
    1350:	00000001 	movf	zero,zero,$fcc0
    1354:	80020500 	lb	v0,1280(zero)
    1358:	16a00246 	bnez	s5,1c74 <__Size_Of_SDRAM-0x8b8c>
    135c:	bb494b15 	swr	t1,19221(k0)
    1360:	bb138783 	swr	s3,-30845(t8)
    1364:	85bb1385 	lh	k1,4997(t5)
    1368:	f3016f03 	0xf3016f03
    136c:	ba1003c1 	swr	s0,961(s0)
    1370:	74087003 	jalx	21c00c <__Size_Of_SDRAM+0x21180c>
    1374:	f6821003 	sdc1	$f2,4099(s4)
    1378:	08021183 	j	8460c <__Size_Of_SDRAM+0x79e0c>
    137c:	03010100 	0x3010100
    1380:	02000001 	movf	zero,s0,$fcc0
    1384:	00007d00 	sll	t7,zero,0x14
    1388:	fb010100 	0xfb010100
    138c:	01000d0e 	0x1000d0e
    1390:	00010101 	0x10101
    1394:	00010000 	sll	zero,at,0x0
    1398:	682f0100 	udi2i	t7,at,256
    139c:	2f656d6f 	sltiu	a1,k1,28015
    13a0:	78656c61 	0x78656c61
    13a4:	6e2f686b 	udi3i	t7,s1,26731
    13a8:	6b2f7366 	udi2i	t7,t9,29542
    13ac:	656e7265 	udi1i	t6,t3,29285
    13b0:	69732f6c 	udi2i	s3,t3,12140
    13b4:	73756972 	0x73756972
    13b8:	6f6f622f 	udi3i	t7,k1,25135
    13bc:	646f6374 	udi1i	t7,v1,25460
    13c0:	69522f65 	udi2i	s2,t2,12133
    13c4:	70704173 	0x70704173
    13c8:	636e692f 	udi0i	t6,k1,26927
    13cc:	6564756c 	udi1i	a0,t3,30060
    13d0:	65730000 	udi1i	s3,t3,0
    13d4:	72645f64 	0x72645f64
    13d8:	61755f76 	udi0i	s5,t3,24438
    13dc:	632e7472 	udi0i	t6,t9,29810
    13e0:	00000000 	nop
    13e4:	5f646573 	0x5f646573
    13e8:	65707974 	udi1i	s0,t3,31092
    13ec:	00682e73 	0x682e73
    13f0:	73000001 	madu	t8,zero
    13f4:	645f6465 	udi1i	ra,v0,25701
    13f8:	755f7672 	jalx	57dd9c8 <__Size_Of_SDRAM+0x57d31c8>
    13fc:	2e747261 	sltiu	s4,s3,29281
    1400:	00010068 	0x10068
    1404:	05000000 	bltz	t0,1408 <__Size_Of_SDRAM-0x93f8>
    1408:	02473402 	0x2473402
    140c:	010b03a0 	0x10b03a0
    1410:	843f0813 	lh	ra,2067(at)
    1414:	bb018a7d 	swr	at,-30083(t8)
    1418:	034b3d08 	0x34b3d08
    141c:	03168226 	0x3168226
    1420:	ad084a54 	sw	t0,19028(t0)
    1424:	85f22c03 	lh	s2,11267(t7)
    1428:	08014703 	j	51c0c <__Size_Of_SDRAM+0x4740c>
    142c:	ba3d03af 	swr	sp,943(s1)
    1430:	03824003 	0x3824003
    1434:	148200c9 	bne	a0,v0,175c <__Size_Of_SDRAM-0x90a4>
    1438:	4a7fbe03 	c2	0x7fbe03
    143c:	c203ad08 	ll	v1,-21240(s0)
    1440:	0385f200 	0x385f200
    1444:	08017fb1 	j	5fec4 <__Size_Of_SDRAM+0x556c4>
    1448:	00d303af 	0xd303af
    144c:	7faa03ba 	stp.c2	t2,(sp)24
    1450:	820e0382 	lb	t6,898(s0)
    1454:	0d038883 	jal	40e220c <__Size_Of_SDRAM+0x40d7a0c>
    1458:	4a73034a 	c2	0x73034a
    145c:	78034c50 	0x78034c50
    1460:	037e4e4a 	0x37e4e4a
    1464:	77034a0d 	jalx	c0d2834 <__Size_Of_SDRAM+0xc0c8034>
    1468:	4a0f034a 	c2	0xf034a
    146c:	4a72034c 	c2	0x72034c
    1470:	4a09034b 	c2	0x9034b
    1474:	4b827503 	c2	0x1827503
    1478:	4e4e4b4b 	c3	0x4e4b4b
    147c:	4b4b4b4c 	c2	0x14b4b4c
    1480:	0010024d 	break	0x10,0x9
    1484:	003d0101 	0x3d0101
    1488:	00020000 	sll	zero,v0,0x0
    148c:	00000025 	move	zero,zero
    1490:	0efb0101 	jal	bec0404 <__Size_Of_SDRAM+0xbeb5c04>
    1494:	0101000d 	break	0x101
    1498:	00000101 	0x101
    149c:	00000100 	sll	zero,zero,0x4
    14a0:	65730001 	udi1i	s3,t3,1
    14a4:	72645f64 	0x72645f64
    14a8:	64775f76 	udi1i	s7,v1,24438
    14ac:	632e676f 	udi0i	t6,t9,26479
    14b0:	00000000 	nop
    14b4:	02050000 	0x2050000
    14b8:	a00248f8 	sb	v0,18680(zero)
    14bc:	010d0317 	0x10d0317
    14c0:	0802f6bb 	j	bdaec <__Size_Of_SDRAM+0xb32ec>
    14c4:	19010100 	0x19010100
    14c8:	02000000 	0x2000000
    14cc:	00001300 	sll	v0,zero,0xc
    14d0:	fb010100 	0xfb010100
    14d4:	01000d0e 	0x1000d0e
    14d8:	00010101 	0x10101
    14dc:	00010000 	sll	zero,at,0x0
    14e0:	00000100 	sll	zero,zero,0x4
    14e4:	00000019 	multu	zero,zero
    14e8:	00130002 	srl	zero,s3,0x0
    14ec:	01010000 	0x1010000
    14f0:	000d0efb 	0xd0efb
    14f4:	01010101 	0x1010101
    14f8:	01000000 	0x1000000
    14fc:	00010000 	sll	zero,at,0x0
    1500:	00001900 	sll	v1,zero,0x4
    1504:	13000200 	beqz	t8,1d08 <__Size_Of_SDRAM-0x8af8>
    1508:	01000000 	0x1000000
    150c:	0d0efb01 	jal	43bec04 <__Size_Of_SDRAM+0x43b4404>
    1510:	01010100 	0x1010100
    1514:	00000001 	movf	zero,zero,$fcc0
    1518:	01000001 	movf	zero,t0,$fcc0
    151c:	02540000 	0x2540000
    1520:	00020000 	sll	zero,v0,0x0
    1524:	00000075 	0x75
    1528:	0efb0101 	jal	bec0404 <__Size_Of_SDRAM+0xbeb5c04>
    152c:	0101000d 	break	0x101
    1530:	00000101 	0x101
    1534:	00000100 	sll	zero,zero,0x4
    1538:	6f682f01 	udi3i	t0,k1,12033
    153c:	612f656d 	udi0i	t7,t1,25965
    1540:	6b78656c 	udi2i	t8,k1,25964
    1544:	666e2f68 	udi1i	t6,s3,12136
    1548:	656b2f73 	udi1i	t3,t3,12147
    154c:	6c656e72 	udi3i	a1,v1,28274
    1550:	7269732f 	0x7269732f
    1554:	2f737569 	sltiu	s3,k1,30057
    1558:	746f6f62 	jalx	1bdbd88 <__Size_Of_SDRAM+0x1bd1588>
    155c:	65646f63 	udi1i	a0,t3,28515
    1560:	7369522f 	0x7369522f
    1564:	2f707041 	sltiu	s0,k1,28737
    1568:	6c636e69 	udi3i	v1,v1,28265
    156c:	00656475 	0x656475
    1570:	64657300 	udi1i	a1,v1,29440
    1574:	7465735f 	jalx	195cd7c <__Size_Of_SDRAM+0x195257c>
    1578:	632e7075 	udi0i	t6,t9,28789
    157c:	00000000 	nop
    1580:	5f646573 	0x5f646573
    1584:	65707974 	udi1i	s0,t3,31092
    1588:	00682e73 	0x682e73
    158c:	73000001 	madu	t8,zero
    1590:	65647379 	udi1i	a0,t3,29561
    1594:	682e7366 	udi2i	t6,at,29542
    1598:	00000100 	sll	zero,zero,0x4
    159c:	02050000 	0x2050000
    15a0:	a002491c 	sb	v0,18716(zero)
    15a4:	15011e03 	bne	t0,at,8db4 <__Size_Of_SDRAM-0x1a4c>
    15a8:	4a09034d 	c2	0x9034d
    15ac:	504a7403 	0x504a7403
    15b0:	4d4a7a03 	0x4d4a7a03
    15b4:	83854d4d 	lb	a1,19789(gp)
    15b8:	42081685 	c0	0x81685
    15bc:	60031387 	udi0i	v1,zero,4999
    15c0:	0c033c08 	jal	cf020 <__Size_Of_SDRAM+0xc4820>
    15c4:	4a77034a 	c2	0x77034a
    15c8:	7a035047 	0x7a035047
    15cc:	11034d4a 	beq	t0,v1,14af8 <__Size_Of_SDRAM+0xa2f8>
    15d0:	4a0c034a 	c2	0xc034a
    15d4:	ac086903 	sw	t0,26883(zero)
    15d8:	8a4d4d47 	lwl	t5,19783(s2)
    15dc:	3c080f03 	lui	t0,0xf03
    15e0:	13825303 	beq	gp,v0,161f0 <__Size_Of_SDRAM+0xb9f0>
    15e4:	bd494c49 	cache	0x9,19529(t2)
    15e8:	822e0310 	lb	t6,784(s1)
    15ec:	08172c02 	j	5cb008 <__Size_Of_SDRAM+0x5c0808>
    15f0:	f3f3493e 	0xf3f3493e
    15f4:	83f383f3 	lb	s3,-31757(ra)
    15f8:	f3f7454f 	0xf3f7454f
    15fc:	83f3f3f3 	lb	s3,-3085(ra)
    1600:	400883f3 	0x400883f3
    1604:	4d478847 	0x4d478847
    1608:	834b484c 	lb	t3,18508(k0)
    160c:	7303524f 	0x7303524f
    1610:	4a0e034a 	c2	0xe034a
    1614:	034a7703 	0x34a7703
    1618:	4b48820a 	c2	0x148820a
    161c:	46be874b 	c1	0xbe874b
    1620:	0883f34e 	j	20fcd38 <__Size_Of_SDRAM+0x20f2538>
    1624:	7903513e 	0x7903513e
    1628:	ba0b034a 	swr	t3,842(s0)
    162c:	804c4e46 	lb	t4,20038(v0)
    1630:	4b494d4c 	c2	0x1494d4c
    1634:	03820e03 	0x3820e03
    1638:	4f4b827a 	c3	0x14b827a
    163c:	4a79034b 	c2	0x79034b
    1640:	4b4b4f83 	c2	0x14b4f83
    1644:	474d494b 	c1	0x14d494b
    1648:	834b4c83 	lb	t3,19587(k0)
    164c:	0e034b49 	jal	80d2d24 <__Size_Of_SDRAM+0x80c8524>
    1650:	4a720382 	c2	0x720382
    1654:	820d034b 	lb	t5,843(s0)
    1658:	03827303 	0x3827303
    165c:	78034a15 	0x78034a15
    1660:	08f3524a 	j	3cd4928 <__Size_Of_SDRAM+0x3cca128>
    1664:	083d083d 	j	f420f4 <__Size_Of_SDRAM+0xf378f4>
    1668:	083d083d 	j	f420f4 <__Size_Of_SDRAM+0xf378f4>
    166c:	4b49f33d 	c2	0x149f33d
    1670:	834b4983 	lb	t3,18819(k0)
    1674:	13034b49 	beq	t8,v1,1439c <__Size_Of_SDRAM+0x9b9c>
    1678:	4a6d0382 	c2	0x6d0382
    167c:	bb4a1303 	swr	t2,4867(k0)
    1680:	494b494b 	0x494b494b
    1684:	0352494c 	syscall	0xd4925
    1688:	03514a79 	0x3514a79
    168c:	4d518279 	0x4d518279
    1690:	484b4bf3 	0x484b4bf3
    1694:	4b484b4b 	c2	0x1484b4b
    1698:	fa4b494c 	0xfa4b494c
    169c:	4a09034b 	c2	0x9034b
    16a0:	4b827603 	c2	0x1827603
    16a4:	034a0903 	0x34a0903
    16a8:	20038276 	addi	v1,zero,-32138
    16ac:	4a61034a 	c2	0x61034a
    16b0:	034a1f03 	0x34a1f03
    16b4:	17034a6a 	bne	t8,v1,14060 <__Size_Of_SDRAM+0x9860>
    16b8:	474b4b4a 	c1	0x14b4b4a
    16bc:	474b4b83 	c1	0x14b4b83
    16c0:	4e474e4b 	c3	0x474e4b
    16c4:	474b4e47 	c1	0x14b4e47
    16c8:	474b4b4b 	c1	0x14b4b4b
    16cc:	4e474e4b 	c3	0x474e4b
    16d0:	474b4e47 	c1	0x14b4e47
    16d4:	474b4b4b 	c1	0x14b4b4b
    16d8:	4e474e4b 	c3	0x474e4b
    16dc:	474b4e47 	c1	0x14b4e47
    16e0:	474b4b4b 	c1	0x14b4b4b
    16e4:	4b474e4b 	c2	0x1474e4b
    16e8:	494bf34c 	0x494bf34c
    16ec:	0351494b 	0x351494b
    16f0:	874b4a7a 	lh	t3,19066(k0)
    16f4:	514b47be 	0x514b47be
    16f8:	78034c4b 	0x78034c4b
    16fc:	4b83474a 	c2	0x183474a
    1700:	4b4b4b4b 	c2	0x14b4b4b
    1704:	76034d4c 	jalx	80d3530 <__Size_Of_SDRAM+0x80c8d30>
    1708:	4a09034a 	c2	0x9034a
    170c:	4a770349 	c2	0x770349
    1710:	034a1003 	0x34a1003
    1714:	4b4b4a71 	c2	0x14b4a71
    1718:	4c4b4b4b 	0x4c4b4b4b
    171c:	4e4b4b4b 	c3	0x4b4b4b
    1720:	8383834b 	lb	v1,-31925(gp)
    1724:	0e280287 	jal	8a00a1c <__Size_Of_SDRAM+0x89f621c>
    1728:	18030e4e 	0x18030e4e
    172c:	010d0382 	0x10d0382
    1730:	f34d474d 	0xf34d474d
    1734:	00ff0381 	0xff0381
    1738:	084b3c08 	j	12cf020 <__Size_Of_SDRAM+0x12c4820>
    173c:	851a8776 	lh	k0,-30858(t0)
    1740:	03f58547 	0x3f58547
    1744:	1b03f26b 	0x1b03f26b
    1748:	f3f8f5ba 	0xf3f8f5ba
    174c:	3e081489 	0x3e081489
    1750:	7fb70310 	0x7fb70310
    1754:	08b78682 	j	2de1a08 <__Size_Of_SDRAM+0x2dd7208>
    1758:	4b4b833f 	c2	0x14b833f
    175c:	4f4b4b48 	c3	0x14b4b48
    1760:	08514845 	j	1452114 <__Size_Of_SDRAM+0x1447914>
    1764:	804b4b3d 	lb	t3,19261(v0)
    1768:	e608864c 	swc1	$f8,-31156(s0)
    176c:	7503ae08 	jalx	40eb820 <__Size_Of_SDRAM+0x40e1020>
    1770:	001002f2 	0x1002f2
    1774:	003a0101 	0x3a0101
    1778:	00020000 	sll	zero,v0,0x0
    177c:	0000001f 	0x1f
    1780:	0efb0101 	jal	bec0404 <__Size_Of_SDRAM+0xbeb5c04>
    1784:	0101000d 	break	0x101
    1788:	00000101 	0x101
    178c:	00000100 	sll	zero,zero,0x4
    1790:	74730001 	jalx	1cc0004 <__Size_Of_SDRAM+0x1cb5804>
    1794:	6e656c72 	udi3i	a1,s3,27762
    1798:	0000632e 	0x632e
    179c:	00000000 	nop
    17a0:	51b40205 	0x51b40205
    17a4:	3a03a002 	xori	v1,s0,0xa002
    17a8:	3f081501 	0x3f081501
    17ac:	027a0847 	0x27a0847
    17b0:	01010008 	0x1010008

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	syscall
   4:	ffffffff 	0xffffffff
   8:	7c010001 	cmveqz	zero,zero,at
   c:	001d0c1f 	0x1d0c1f
  10:	0000001c 	0x1c
  14:	00000000 	nop
  18:	a0020150 	sb	v0,336(zero)
  1c:	000000c4 	0xc4
  20:	4c200e44 	0x4c200e44
  24:	11031011 	beq	t0,v1,406c <__Size_Of_SDRAM-0x6794>
  28:	1f110211 	0x1f110211
  2c:	00000001 	movf	zero,zero,$fcc0
  30:	0000000c 	syscall
  34:	ffffffff 	0xffffffff
  38:	7c010001 	cmveqz	zero,zero,at
  3c:	001d0c1f 	0x1d0c1f
  40:	0000000c 	syscall
  44:	00000030 	0x30
  48:	a0020214 	sb	v0,532(zero)
  4c:	00000030 	0x30
  50:	0000000c 	syscall
  54:	00000030 	0x30
  58:	a0020244 	sb	v0,580(zero)
  5c:	000000ac 	0xac
  60:	0000000c 	syscall
  64:	00000030 	0x30
  68:	a00202f0 	sb	v0,752(zero)
  6c:	00000024 	and	zero,zero,zero
  70:	0000000c 	syscall
  74:	00000030 	0x30
  78:	a0020314 	sb	v0,788(zero)
  7c:	000000dc 	0xdc
  80:	0000000c 	syscall
  84:	00000030 	0x30
  88:	a00203f0 	sb	v0,1008(zero)
  8c:	00000038 	udi0	zero,zero,zero
  90:	0000000c 	syscall
  94:	00000030 	0x30
  98:	a0020428 	sb	v0,1064(zero)
  9c:	000000a0 	0xa0
  a0:	00000014 	0x14
  a4:	00000030 	0x30
  a8:	a00204c8 	sb	v0,1224(zero)
  ac:	000001e0 	0x1e0
  b0:	44080e44 	0x44080e44
  b4:	00011011 	0x11011
  b8:	0000000c 	syscall
  bc:	00000030 	0x30
  c0:	a00206a8 	sb	v0,1704(zero)
  c4:	000000f0 	0xf0
  c8:	0000000c 	syscall
  cc:	00000030 	0x30
  d0:	a0020798 	sb	v0,1944(zero)
  d4:	000000c4 	0xc4
  d8:	0000000c 	syscall
  dc:	00000030 	0x30
  e0:	a002085c 	sb	v0,2140(zero)
  e4:	00000034 	0x34
  e8:	0000000c 	syscall
  ec:	00000030 	0x30
  f0:	a0020890 	sb	v0,2192(zero)
  f4:	00000084 	0x84
  f8:	0000000c 	syscall
  fc:	00000030 	0x30
 100:	a0020914 	sb	v0,2324(zero)
 104:	00000038 	udi0	zero,zero,zero
 108:	00000014 	0x14
 10c:	00000030 	0x30
 110:	a002094c 	sb	v0,2380(zero)
 114:	000001a4 	0x1a4
 118:	44200e44 	0x44200e44
 11c:	00011f11 	0x11f11
 120:	0000000c 	syscall
 124:	00000030 	0x30
 128:	a0020af0 	sb	v0,2800(zero)
 12c:	000000d0 	0xd0
 130:	00000014 	0x14
 134:	00000030 	0x30
 138:	a0020bc0 	sb	v0,3008(zero)
 13c:	00000048 	0x48
 140:	44200e44 	0x44200e44
 144:	00011f11 	0x11f11
 148:	00000014 	0x14
 14c:	00000030 	0x30
 150:	a0020c08 	sb	v0,3080(zero)
 154:	000000c8 	0xc8
 158:	44200e44 	0x44200e44
 15c:	00011f11 	0x11f11
 160:	0000002c 	0x2c
 164:	00000030 	0x30
 168:	a0020cd0 	sb	v0,3280(zero)
 16c:	00000124 	0x124
 170:	64380e44 	udi1i	t8,at,3652
 174:	11091011 	beq	t0,t1,41bc <__Size_Of_SDRAM-0x6644>
 178:	12110811 	beq	s0,s1,21c0 <__Size_Of_SDRAM-0x8640>
 17c:	06131107 	0x6131107
 180:	11051411 	beq	t0,a1,51c8 <__Size_Of_SDRAM-0x5638>
 184:	16110415 	bne	s0,s1,11dc <__Size_Of_SDRAM-0x9624>
 188:	02171103 	0x2171103
 18c:	00011f11 	0x11f11
 190:	00000028 	0x28
 194:	00000030 	0x30
 198:	a0020df4 	sb	v0,3572(zero)
 19c:	000001ec 	0x1ec
 1a0:	5c380e44 	0x5c380e44
 1a4:	11071011 	beq	t0,a3,41ec <__Size_Of_SDRAM-0x6614>
 1a8:	12110611 	beq	s0,s1,19f0 <__Size_Of_SDRAM-0x8e10>
 1ac:	04131105 	0x4131105
 1b0:	11031411 	beq	t0,v1,51f8 <__Size_Of_SDRAM-0x5608>
 1b4:	1f110215 	0x1f110215
 1b8:	00000001 	movf	zero,zero,$fcc0
 1bc:	00000014 	0x14
 1c0:	00000030 	0x30
 1c4:	a0020fe0 	sb	v0,4064(zero)
 1c8:	00000064 	0x64
 1cc:	44200e44 	0x44200e44
 1d0:	00011f11 	0x11f11
 1d4:	00000028 	0x28
 1d8:	00000030 	0x30
 1dc:	a0021044 	sb	v0,4164(zero)
 1e0:	0000030c 	syscall	0xc
 1e4:	5c300e44 	0x5c300e44
 1e8:	11071011 	beq	t0,a3,4230 <__Size_Of_SDRAM-0x65d0>
 1ec:	12110611 	beq	s0,s1,1a34 <__Size_Of_SDRAM-0x8dcc>
 1f0:	04131105 	0x4131105
 1f4:	11031411 	beq	t0,v1,523c <__Size_Of_SDRAM-0x55c4>
 1f8:	1f110215 	0x1f110215
 1fc:	00000001 	movf	zero,zero,$fcc0
 200:	00000030 	0x30
 204:	00000030 	0x30
 208:	a0021350 	sb	v0,4944(zero)
 20c:	0000034c 	syscall	0xd
 210:	68380e44 	udi2i	t8,at,3652
 214:	110a1011 	beq	t0,t2,425c <__Size_Of_SDRAM-0x65a4>
 218:	12110911 	beq	s0,s1,2660 <__Size_Of_SDRAM-0x81a0>
 21c:	07131108 	0x7131108
 220:	11061411 	beq	t0,a2,5268 <__Size_Of_SDRAM-0x5598>
 224:	16110515 	bne	s0,s1,167c <__Size_Of_SDRAM-0x9184>
 228:	03171104 	0x3171104
 22c:	11021e11 	beq	t0,v0,7a74 <__Size_Of_SDRAM-0x2d8c>
 230:	0000011f 	0x11f
 234:	00000014 	0x14
 238:	00000030 	0x30
 23c:	a002169c 	sb	v0,5788(zero)
 240:	0000004c 	syscall	0x1
 244:	44200e44 	0x44200e44
 248:	00011f11 	0x11f11
 24c:	00000024 	and	zero,zero,zero
 250:	00000030 	0x30
 254:	a00216e8 	sb	v0,5864(zero)
 258:	00000114 	0x114
 25c:	58280e44 	0x58280e44
 260:	11061011 	beq	t0,a2,42a8 <__Size_Of_SDRAM-0x6558>
 264:	12110511 	beq	s0,s1,16ac <__Size_Of_SDRAM-0x9154>
 268:	03131104 	0x3131104
 26c:	11021411 	beq	t0,v0,52b4 <__Size_Of_SDRAM-0x554c>
 270:	0000011f 	0x11f
 274:	0000000c 	syscall
 278:	ffffffff 	0xffffffff
 27c:	7c010001 	cmveqz	zero,zero,at
 280:	001d0c1f 	0x1d0c1f
 284:	0000000c 	syscall
 288:	00000274 	0x274
 28c:	a00217fc 	sb	v0,6140(zero)
 290:	00000034 	0x34
 294:	0000000c 	syscall
 298:	00000274 	0x274
 29c:	a0021830 	sb	v0,6192(zero)
 2a0:	00000058 	0x58
 2a4:	0000000c 	syscall
 2a8:	00000274 	0x274
 2ac:	a0021888 	sb	v0,6280(zero)
 2b0:	00000074 	0x74
 2b4:	0000000c 	syscall
 2b8:	00000274 	0x274
 2bc:	a00218fc 	sb	v0,6396(zero)
 2c0:	00000038 	udi0	zero,zero,zero
 2c4:	0000000c 	syscall
 2c8:	00000274 	0x274
 2cc:	a0021934 	sb	v0,6452(zero)
 2d0:	00000018 	mult	zero,zero
 2d4:	0000000c 	syscall
 2d8:	00000274 	0x274
 2dc:	a002194c 	sb	v0,6476(zero)
 2e0:	00000038 	udi0	zero,zero,zero
 2e4:	0000000c 	syscall
 2e8:	00000274 	0x274
 2ec:	a0021984 	sb	v0,6532(zero)
 2f0:	00000078 	0x78
 2f4:	00000018 	mult	zero,zero
 2f8:	00000274 	0x274
 2fc:	a00219fc 	sb	v0,6652(zero)
 300:	000000e8 	0xe8
 304:	02900e44 	0x2900e44
 308:	02101148 	0x2101148
 30c:	00011f11 	0x11f11
 310:	0000000c 	syscall
 314:	00000274 	0x274
 318:	a0021ae4 	sb	v0,6884(zero)
 31c:	00000008 	jr	zero
 320:	00000014 	0x14
 324:	00000274 	0x274
 328:	a0021aec 	sb	v0,6892(zero)
 32c:	0000004c 	syscall	0x1
 330:	44200e44 	0x44200e44
 334:	00011f11 	0x11f11
 338:	0000000c 	syscall
 33c:	00000274 	0x274
 340:	a0021b38 	sb	v0,6968(zero)
 344:	00000228 	0x228
 348:	00000030 	0x30
 34c:	00000274 	0x274
 350:	a0021d60 	sb	v0,7520(zero)
 354:	00000454 	0x454
 358:	68400e44 	udi2i	zero,v0,3652
 35c:	110a1011 	beq	t0,t2,43a4 <__Size_Of_SDRAM-0x645c>
 360:	12110911 	beq	s0,s1,27a8 <__Size_Of_SDRAM-0x8058>
 364:	07131108 	0x7131108
 368:	11061411 	beq	t0,a2,53b0 <__Size_Of_SDRAM-0x5450>
 36c:	16110515 	bne	s0,s1,17c4 <__Size_Of_SDRAM-0x903c>
 370:	03171104 	0x3171104
 374:	11021e11 	beq	t0,v0,7bbc <__Size_Of_SDRAM-0x2c44>
 378:	0000011f 	0x11f
 37c:	0000000c 	syscall
 380:	ffffffff 	0xffffffff
 384:	7c010001 	cmveqz	zero,zero,at
 388:	001d0c1f 	0x1d0c1f
 38c:	00000030 	0x30
 390:	0000037c 	0x37c
 394:	a00221b4 	sb	v0,8628(zero)
 398:	00000898 	0x898
 39c:	01900e44 	0x1900e44
 3a0:	0a101168 	j	84045a0 <__Size_Of_SDRAM+0x83f9da0>
 3a4:	11091111 	beq	t0,t1,47ec <__Size_Of_SDRAM-0x6014>
 3a8:	13110812 	beq	t8,s1,23f4 <__Size_Of_SDRAM-0x840c>
 3ac:	06141107 	0x6141107
 3b0:	11051511 	beq	t0,a1,57f8 <__Size_Of_SDRAM-0x5008>
 3b4:	17110416 	bne	t8,s1,1410 <__Size_Of_SDRAM-0x93f0>
 3b8:	021e1103 	0x21e1103
 3bc:	00011f11 	0x11f11
 3c0:	0000000c 	syscall
 3c4:	ffffffff 	0xffffffff
 3c8:	7c010001 	cmveqz	zero,zero,at
 3cc:	001d0c1f 	0x1d0c1f
 3d0:	0000000c 	syscall
 3d4:	000003c0 	sll	zero,zero,0xf
 3d8:	a0022a4c 	sb	v0,10828(zero)
 3dc:	00000034 	0x34
 3e0:	0000000c 	syscall
 3e4:	ffffffff 	0xffffffff
 3e8:	7c010001 	cmveqz	zero,zero,at
 3ec:	001d0c1f 	0x1d0c1f
 3f0:	0000000c 	syscall
 3f4:	000003e0 	0x3e0
 3f8:	a0022a80 	sb	v0,10880(zero)
 3fc:	00000008 	jr	zero
 400:	0000000c 	syscall
 404:	000003e0 	0x3e0
 408:	a0022a88 	sb	v0,10888(zero)
 40c:	00000058 	0x58
 410:	00000014 	0x14
 414:	000003e0 	0x3e0
 418:	a0022ae0 	sb	v0,10976(zero)
 41c:	00000054 	0x54
 420:	44180e44 	0x44180e44
 424:	00011f11 	0x11f11
 428:	0000001c 	0x1c
 42c:	000003e0 	0x3e0
 430:	a0022b34 	sb	v0,11060(zero)
 434:	0000008c 	syscall	0x2
 438:	4c280e44 	0x4c280e44
 43c:	11031011 	beq	t0,v1,4484 <__Size_Of_SDRAM-0x637c>
 440:	1f110211 	0x1f110211
 444:	00000001 	movf	zero,zero,$fcc0
 448:	0000001c 	0x1c
 44c:	000003e0 	0x3e0
 450:	a0022bc0 	sb	v0,11200(zero)
 454:	0000015c 	0x15c
 458:	4c280e44 	0x4c280e44
 45c:	11031011 	beq	t0,v1,44a4 <__Size_Of_SDRAM-0x635c>
 460:	1f110211 	0x1f110211
 464:	00000001 	movf	zero,zero,$fcc0
 468:	0000000c 	syscall
 46c:	000003e0 	0x3e0
 470:	a0022d1c 	sb	v0,11548(zero)
 474:	00000054 	0x54
 478:	0000000c 	syscall
 47c:	ffffffff 	0xffffffff
 480:	7c010001 	cmveqz	zero,zero,at
 484:	001d0c1f 	0x1d0c1f
 488:	00000014 	0x14
 48c:	00000478 	0x478
 490:	a0022d70 	sb	v0,11632(zero)
 494:	00000040 	ssnop
 498:	44200e44 	0x44200e44
 49c:	00011f11 	0x11f11
 4a0:	00000014 	0x14
 4a4:	00000478 	0x478
 4a8:	a0022db0 	sb	v0,11696(zero)
 4ac:	00000040 	ssnop
 4b0:	44200e44 	0x44200e44
 4b4:	00011f11 	0x11f11
 4b8:	00000014 	0x14
 4bc:	00000478 	0x478
 4c0:	a0022df0 	sb	v0,11760(zero)
 4c4:	00000024 	and	zero,zero,zero
 4c8:	44180e44 	0x44180e44
 4cc:	00011f11 	0x11f11
 4d0:	00000014 	0x14
 4d4:	00000478 	0x478
 4d8:	a0022e14 	sb	v0,11796(zero)
 4dc:	00000024 	and	zero,zero,zero
 4e0:	44180e44 	0x44180e44
 4e4:	00011f11 	0x11f11
 4e8:	0000000c 	syscall
 4ec:	ffffffff 	0xffffffff
 4f0:	7c010001 	cmveqz	zero,zero,at
 4f4:	001d0c1f 	0x1d0c1f
 4f8:	0000001c 	0x1c
 4fc:	000004e8 	0x4e8
 500:	a0022e38 	sb	v0,11832(zero)
 504:	000000a0 	0xa0
 508:	4c200e44 	0x4c200e44
 50c:	11031011 	beq	t0,v1,4554 <__Size_Of_SDRAM-0x62ac>
 510:	1f110211 	0x1f110211
 514:	00000001 	movf	zero,zero,$fcc0
 518:	0000001c 	0x1c
 51c:	000004e8 	0x4e8
 520:	a0022ed8 	sb	v0,11992(zero)
 524:	0000009c 	0x9c
 528:	4c200e44 	0x4c200e44
 52c:	11031011 	beq	t0,v1,4574 <__Size_Of_SDRAM-0x628c>
 530:	1f110211 	0x1f110211
 534:	00000001 	movf	zero,zero,$fcc0
 538:	00000014 	0x14
 53c:	000004e8 	0x4e8
 540:	a0022f74 	sb	v0,12148(zero)
 544:	0000002c 	0x2c
 548:	44180e44 	0x44180e44
 54c:	00011f11 	0x11f11
 550:	00000014 	0x14
 554:	000004e8 	0x4e8
 558:	a0022fa0 	sb	v0,12192(zero)
 55c:	0000002c 	0x2c
 560:	44180e44 	0x44180e44
 564:	00011f11 	0x11f11
 568:	00000014 	0x14
 56c:	000004e8 	0x4e8
 570:	a0022fcc 	sb	v0,12236(zero)
 574:	0000002c 	0x2c
 578:	44180e44 	0x44180e44
 57c:	00011f11 	0x11f11
 580:	00000014 	0x14
 584:	000004e8 	0x4e8
 588:	a0022ff8 	sb	v0,12280(zero)
 58c:	0000002c 	0x2c
 590:	44180e44 	0x44180e44
 594:	00011f11 	0x11f11
 598:	00000014 	0x14
 59c:	000004e8 	0x4e8
 5a0:	a0023024 	sb	v0,12324(zero)
 5a4:	0000002c 	0x2c
 5a8:	44180e44 	0x44180e44
 5ac:	00011f11 	0x11f11
 5b0:	00000014 	0x14
 5b4:	000004e8 	0x4e8
 5b8:	a0023050 	sb	v0,12368(zero)
 5bc:	0000002c 	0x2c
 5c0:	44180e44 	0x44180e44
 5c4:	00011f11 	0x11f11
 5c8:	00000014 	0x14
 5cc:	000004e8 	0x4e8
 5d0:	a002307c 	sb	v0,12412(zero)
 5d4:	0000002c 	0x2c
 5d8:	44180e44 	0x44180e44
 5dc:	00011f11 	0x11f11
 5e0:	00000014 	0x14
 5e4:	000004e8 	0x4e8
 5e8:	a00230a8 	sb	v0,12456(zero)
 5ec:	0000002c 	0x2c
 5f0:	44180e44 	0x44180e44
 5f4:	00011f11 	0x11f11
 5f8:	00000014 	0x14
 5fc:	000004e8 	0x4e8
 600:	a00230d4 	sb	v0,12500(zero)
 604:	0000002c 	0x2c
 608:	44180e44 	0x44180e44
 60c:	00011f11 	0x11f11
 610:	00000014 	0x14
 614:	000004e8 	0x4e8
 618:	a0023100 	sb	v0,12544(zero)
 61c:	0000002c 	0x2c
 620:	44180e44 	0x44180e44
 624:	00011f11 	0x11f11
 628:	00000014 	0x14
 62c:	000004e8 	0x4e8
 630:	a002312c 	sb	v0,12588(zero)
 634:	0000002c 	0x2c
 638:	44180e44 	0x44180e44
 63c:	00011f11 	0x11f11
 640:	00000014 	0x14
 644:	000004e8 	0x4e8
 648:	a0023158 	sb	v0,12632(zero)
 64c:	0000002c 	0x2c
 650:	44180e44 	0x44180e44
 654:	00011f11 	0x11f11
 658:	00000014 	0x14
 65c:	000004e8 	0x4e8
 660:	a0023184 	sb	v0,12676(zero)
 664:	0000002c 	0x2c
 668:	44180e44 	0x44180e44
 66c:	00011f11 	0x11f11
 670:	00000014 	0x14
 674:	000004e8 	0x4e8
 678:	a00231b0 	sb	v0,12720(zero)
 67c:	0000002c 	0x2c
 680:	44180e44 	0x44180e44
 684:	00011f11 	0x11f11
 688:	00000014 	0x14
 68c:	000004e8 	0x4e8
 690:	a00231dc 	sb	v0,12764(zero)
 694:	00000074 	0x74
 698:	44180e44 	0x44180e44
 69c:	00011f11 	0x11f11
 6a0:	0000000c 	syscall
 6a4:	000004e8 	0x4e8
 6a8:	a0023250 	sb	v0,12880(zero)
 6ac:	0000001c 	0x1c
 6b0:	00000028 	0x28
 6b4:	000004e8 	0x4e8
 6b8:	a002326c 	sb	v0,12908(zero)
 6bc:	00000254 	0x254
 6c0:	60300e44 	udi0i	s0,at,3652
 6c4:	11081011 	beq	t0,t0,470c <__Size_Of_SDRAM-0x60f4>
 6c8:	12110711 	beq	s0,s1,2310 <__Size_Of_SDRAM-0x84f0>
 6cc:	05131106 	0x5131106
 6d0:	11041411 	beq	t0,a0,5718 <__Size_Of_SDRAM-0x50e8>
 6d4:	16110315 	bne	s0,s1,132c <__Size_Of_SDRAM-0x94d4>
 6d8:	011f1102 	0x11f1102
 6dc:	0000000c 	syscall
 6e0:	000004e8 	0x4e8
 6e4:	a00234c0 	sb	v0,13504(zero)
 6e8:	00000014 	0x14
 6ec:	0000000c 	syscall
 6f0:	000004e8 	0x4e8
 6f4:	a00234d4 	sb	v0,13524(zero)
 6f8:	00000014 	0x14
 6fc:	00000014 	0x14
 700:	000004e8 	0x4e8
 704:	a00234e8 	sb	v0,13544(zero)
 708:	0000002c 	0x2c
 70c:	44180e44 	0x44180e44
 710:	00011f11 	0x11f11
 714:	00000014 	0x14
 718:	000004e8 	0x4e8
 71c:	a0023514 	sb	v0,13588(zero)
 720:	0000002c 	0x2c
 724:	44180e44 	0x44180e44
 728:	00011f11 	0x11f11
 72c:	00000014 	0x14
 730:	000004e8 	0x4e8
 734:	a0023540 	sb	v0,13632(zero)
 738:	00000024 	and	zero,zero,zero
 73c:	44180e44 	0x44180e44
 740:	00011f11 	0x11f11
 744:	00000014 	0x14
 748:	000004e8 	0x4e8
 74c:	a0023564 	sb	v0,13668(zero)
 750:	0000002c 	0x2c
 754:	44180e44 	0x44180e44
 758:	00011f11 	0x11f11
 75c:	0000000c 	syscall
 760:	ffffffff 	0xffffffff
 764:	7c010001 	cmveqz	zero,zero,at
 768:	001d0c1f 	0x1d0c1f
 76c:	0000002c 	0x2c
 770:	0000075c 	0x75c
 774:	a0023590 	sb	v0,13712(zero)
 778:	00000180 	sll	zero,zero,0x6
 77c:	64400e44 	udi1i	zero,v0,3652
 780:	11091011 	beq	t0,t1,47c8 <__Size_Of_SDRAM-0x6038>
 784:	12110811 	beq	s0,s1,27cc <__Size_Of_SDRAM-0x8034>
 788:	06131107 	0x6131107
 78c:	11051411 	beq	t0,a1,57d4 <__Size_Of_SDRAM-0x502c>
 790:	16110415 	bne	s0,s1,17e8 <__Size_Of_SDRAM-0x9018>
 794:	02171103 	0x2171103
 798:	00011f11 	0x11f11
 79c:	00000030 	0x30
 7a0:	0000075c 	0x75c
 7a4:	a0023710 	sb	v0,14096(zero)
 7a8:	00000784 	0x784
 7ac:	68600e44 	udi2i	zero,v1,3652
 7b0:	110a1011 	beq	t0,t2,47f8 <__Size_Of_SDRAM-0x6008>
 7b4:	12110911 	beq	s0,s1,2bfc <__Size_Of_SDRAM-0x7c04>
 7b8:	07131108 	0x7131108
 7bc:	11061411 	beq	t0,a2,5804 <__Size_Of_SDRAM-0x4ffc>
 7c0:	16110515 	bne	s0,s1,1c18 <__Size_Of_SDRAM-0x8be8>
 7c4:	03171104 	0x3171104
 7c8:	11021e11 	beq	t0,v0,8010 <__Size_Of_SDRAM-0x27f0>
 7cc:	0000011f 	0x11f
 7d0:	0000000c 	syscall
 7d4:	ffffffff 	0xffffffff
 7d8:	7c010001 	cmveqz	zero,zero,at
 7dc:	001d0c1f 	0x1d0c1f
 7e0:	0000000c 	syscall
 7e4:	000007d0 	0x7d0
 7e8:	a0023e94 	sb	v0,16020(zero)
 7ec:	00000008 	jr	zero
 7f0:	0000000c 	syscall
 7f4:	000007d0 	0x7d0
 7f8:	a0023e9c 	sb	v0,16028(zero)
 7fc:	00000010 	mfhi	zero
 800:	0000000c 	syscall
 804:	000007d0 	0x7d0
 808:	a0023eac 	sb	v0,16044(zero)
 80c:	00000008 	jr	zero
 810:	0000000c 	syscall
 814:	000007d0 	0x7d0
 818:	a0023eb4 	sb	v0,16052(zero)
 81c:	00000014 	0x14
 820:	0000000c 	syscall
 824:	000007d0 	0x7d0
 828:	a0023ec8 	sb	v0,16072(zero)
 82c:	00000030 	0x30
 830:	0000000c 	syscall
 834:	000007d0 	0x7d0
 838:	a0023ef8 	sb	v0,16120(zero)
 83c:	00000058 	0x58
 840:	0000000c 	syscall
 844:	000007d0 	0x7d0
 848:	a0023f50 	sb	v0,16208(zero)
 84c:	00000014 	0x14
 850:	0000000c 	syscall
 854:	000007d0 	0x7d0
 858:	a0023f64 	sb	v0,16228(zero)
 85c:	00000024 	and	zero,zero,zero
 860:	0000000c 	syscall
 864:	000007d0 	0x7d0
 868:	a0023f88 	sb	v0,16264(zero)
 86c:	00000040 	ssnop
 870:	0000000c 	syscall
 874:	ffffffff 	0xffffffff
 878:	7c010001 	cmveqz	zero,zero,at
 87c:	001d0c1f 	0x1d0c1f
 880:	0000000c 	syscall
 884:	00000870 	0x870
 888:	a0023fc8 	sb	v0,16328(zero)
 88c:	00000034 	0x34
 890:	0000000c 	syscall
 894:	00000870 	0x870
 898:	a0023ffc 	sb	v0,16380(zero)
 89c:	00000028 	0x28
 8a0:	0000000c 	syscall
 8a4:	00000870 	0x870
 8a8:	a0024024 	sb	v0,16420(zero)
 8ac:	0000005c 	0x5c
 8b0:	0000000c 	syscall
 8b4:	00000870 	0x870
 8b8:	a0024080 	sb	v0,16512(zero)
 8bc:	0000005c 	0x5c
 8c0:	0000000c 	syscall
 8c4:	ffffffff 	0xffffffff
 8c8:	7c010001 	cmveqz	zero,zero,at
 8cc:	001d0c1f 	0x1d0c1f
 8d0:	0000000c 	syscall
 8d4:	000008c0 	sll	at,zero,0x3
 8d8:	a00240dc 	sb	v0,16604(zero)
 8dc:	0000002c 	0x2c
 8e0:	0000000c 	syscall
 8e4:	000008c0 	sll	at,zero,0x3
 8e8:	a0024108 	sb	v0,16648(zero)
 8ec:	000000a8 	0xa8
 8f0:	0000000c 	syscall
 8f4:	ffffffff 	0xffffffff
 8f8:	7c010001 	cmveqz	zero,zero,at
 8fc:	001d0c1f 	0x1d0c1f
 900:	0000000c 	syscall
 904:	000008f0 	0x8f0
 908:	a00241b0 	sb	v0,16816(zero)
 90c:	00000038 	udi0	zero,zero,zero
 910:	0000000c 	syscall
 914:	000008f0 	0x8f0
 918:	a00241e8 	sb	v0,16872(zero)
 91c:	00000020 	add	zero,zero,zero
 920:	0000000c 	syscall
 924:	ffffffff 	0xffffffff
 928:	7c010001 	cmveqz	zero,zero,at
 92c:	001d0c1f 	0x1d0c1f
 930:	0000000c 	syscall
 934:	00000920 	0x920
 938:	a0024208 	sb	v0,16904(zero)
 93c:	00000048 	0x48
 940:	00000018 	mult	zero,zero
 944:	00000920 	0x920
 948:	a0024250 	sb	v0,16976(zero)
 94c:	00000104 	0x104
 950:	48080e44 	0x48080e44
 954:	11021011 	beq	t0,v0,499c <__Size_Of_SDRAM-0x5e64>
 958:	00000111 	0x111
 95c:	0000002c 	0x2c
 960:	00000920 	0x920
 964:	a0024354 	sb	v0,17236(zero)
 968:	0000028c 	syscall	0xa
 96c:	64300e44 	udi1i	s0,at,3652
 970:	11091011 	beq	t0,t1,49b8 <__Size_Of_SDRAM-0x5e48>
 974:	12110811 	beq	s0,s1,29bc <__Size_Of_SDRAM-0x7e44>
 978:	06131107 	0x6131107
 97c:	11051411 	beq	t0,a1,59c4 <__Size_Of_SDRAM-0x4e3c>
 980:	16110415 	bne	s0,s1,19d8 <__Size_Of_SDRAM-0x8e28>
 984:	02171103 	0x2171103
 988:	00011e11 	0x11e11
 98c:	00000014 	0x14
 990:	00000920 	0x920
 994:	a00245e0 	sb	v0,17888(zero)
 998:	000000a0 	0xa0
 99c:	44180e44 	0x44180e44
 9a0:	00011f11 	0x11f11
 9a4:	0000000c 	syscall
 9a8:	ffffffff 	0xffffffff
 9ac:	7c010001 	cmveqz	zero,zero,at
 9b0:	001d0c1f 	0x1d0c1f
 9b4:	0000000c 	syscall
 9b8:	000009a4 	0x9a4
 9bc:	a0024680 	sb	v0,18048(zero)
 9c0:	00000024 	and	zero,zero,zero
 9c4:	0000000c 	syscall
 9c8:	000009a4 	0x9a4
 9cc:	a00246a4 	sb	v0,18084(zero)
 9d0:	00000014 	0x14
 9d4:	0000000c 	syscall
 9d8:	000009a4 	0x9a4
 9dc:	a00246b8 	sb	v0,18104(zero)
 9e0:	00000014 	0x14
 9e4:	0000000c 	syscall
 9e8:	000009a4 	0x9a4
 9ec:	a00246cc 	sb	v0,18124(zero)
 9f0:	00000068 	0x68
 9f4:	0000000c 	syscall
 9f8:	ffffffff 	0xffffffff
 9fc:	7c010001 	cmveqz	zero,zero,at
 a00:	001d0c1f 	0x1d0c1f
 a04:	0000000c 	syscall
 a08:	000009f4 	0x9f4
 a0c:	a0024734 	sb	v0,18228(zero)
 a10:	0000002c 	0x2c
 a14:	0000000c 	syscall
 a18:	000009f4 	0x9f4
 a1c:	a0024760 	sb	v0,18272(zero)
 a20:	0000002c 	0x2c
 a24:	0000000c 	syscall
 a28:	000009f4 	0x9f4
 a2c:	a002478c 	sb	v0,18316(zero)
 a30:	00000038 	udi0	zero,zero,zero
 a34:	0000000c 	syscall
 a38:	000009f4 	0x9f4
 a3c:	a00247c4 	sb	v0,18372(zero)
 a40:	00000038 	udi0	zero,zero,zero
 a44:	0000000c 	syscall
 a48:	000009f4 	0x9f4
 a4c:	a00247fc 	sb	v0,18428(zero)
 a50:	00000038 	udi0	zero,zero,zero
 a54:	0000000c 	syscall
 a58:	000009f4 	0x9f4
 a5c:	a0024834 	sb	v0,18484(zero)
 a60:	00000038 	udi0	zero,zero,zero
 a64:	00000014 	0x14
 a68:	000009f4 	0x9f4
 a6c:	a002486c 	sb	v0,18540(zero)
 a70:	0000008c 	syscall	0x2
 a74:	44180e44 	0x44180e44
 a78:	00011f11 	0x11f11
 a7c:	0000000c 	syscall
 a80:	ffffffff 	0xffffffff
 a84:	7c010001 	cmveqz	zero,zero,at
 a88:	001d0c1f 	0x1d0c1f
 a8c:	0000000c 	syscall
 a90:	00000a7c 	0xa7c
 a94:	a00248f8 	sb	v0,18680(zero)
 a98:	00000024 	and	zero,zero,zero
 a9c:	0000000c 	syscall
 aa0:	ffffffff 	0xffffffff
 aa4:	7c010001 	cmveqz	zero,zero,at
 aa8:	001d0c1f 	0x1d0c1f
 aac:	0000000c 	syscall
 ab0:	00000a9c 	0xa9c
 ab4:	a002491c 	sb	v0,18716(zero)
 ab8:	00000038 	udi0	zero,zero,zero
 abc:	0000000c 	syscall
 ac0:	00000a9c 	0xa9c
 ac4:	a0024954 	sb	v0,18772(zero)
 ac8:	0000001c 	0x1c
 acc:	0000000c 	syscall
 ad0:	00000a9c 	0xa9c
 ad4:	a0024970 	sb	v0,18800(zero)
 ad8:	00000080 	sll	zero,zero,0x2
 adc:	0000000c 	syscall
 ae0:	00000a9c 	0xa9c
 ae4:	a00249f0 	sb	v0,18928(zero)
 ae8:	00000020 	add	zero,zero,zero
 aec:	00000030 	0x30
 af0:	00000a9c 	0xa9c
 af4:	a0024a10 	sb	v0,18960(zero)
 af8:	000005d4 	0x5d4
 afc:	68380e44 	udi2i	t8,at,3652
 b00:	110a1011 	beq	t0,t2,4b48 <__Size_Of_SDRAM-0x5cb8>
 b04:	12110911 	beq	s0,s1,2f4c <__Size_Of_SDRAM-0x78b4>
 b08:	07131108 	0x7131108
 b0c:	11061411 	beq	t0,a2,5b54 <__Size_Of_SDRAM-0x4cac>
 b10:	16110515 	bne	s0,s1,1f68 <__Size_Of_SDRAM-0x8898>
 b14:	03171104 	0x3171104
 b18:	11021e11 	beq	t0,v0,8360 <__Size_Of_SDRAM-0x24a0>
 b1c:	0000011f 	0x11f
 b20:	0000000c 	syscall
 b24:	00000a9c 	0xa9c
 b28:	a0024fe4 	sb	v0,20452(zero)
 b2c:	00000038 	udi0	zero,zero,zero
 b30:	0000000c 	syscall
 b34:	00000a9c 	0xa9c
 b38:	a002501c 	sb	v0,20508(zero)
 b3c:	00000024 	and	zero,zero,zero
 b40:	0000000c 	syscall
 b44:	00000a9c 	0xa9c
 b48:	a0025040 	sb	v0,20544(zero)
 b4c:	00000078 	0x78
 b50:	0000000c 	syscall
 b54:	00000a9c 	0xa9c
 b58:	a00250b8 	sb	v0,20664(zero)
 b5c:	0000001c 	0x1c
 b60:	00000014 	0x14
 b64:	00000a9c 	0xa9c
 b68:	a00250d4 	sb	v0,20692(zero)
 b6c:	000000e0 	0xe0
 b70:	44280e44 	0x44280e44
 b74:	00011f11 	0x11f11
 b78:	0000000c 	syscall
 b7c:	ffffffff 	0xffffffff
 b80:	7c010001 	cmveqz	zero,zero,at
 b84:	001d0c1f 	0x1d0c1f
 b88:	0000000c 	syscall
 b8c:	00000b78 	0xb78
 b90:	a00251b4 	sb	v0,20916(zero)
 b94:	00000038 	udi0	zero,zero,zero

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000000 	nop
       4:	00000004 	sllv	zero,zero,zero
       8:	046d0001 	0x46d0001
       c:	c4000000 	lwc1	$f0,0(zero)
      10:	02000000 	0x2000000
      14:	00208d00 	0x208d00
	...
      20:	18000000 	blez	zero,24 <__Size_Of_SDRAM-0xa7dc>
      24:	01000000 	0x1000000
      28:	00005400 	sll	t2,zero,0x10
	...
      34:	001c0000 	sll	zero,gp,0x0
      38:	00010000 	sll	zero,at,0x0
      3c:	00000055 	0x55
	...
      48:	00000800 	sll	at,zero,0x0
      4c:	54000100 	0x54000100
      50:	00000008 	jr	zero
      54:	00000028 	0x28
      58:	28520001 	slti	s2,v0,1
      5c:	30000000 	andi	zero,zero,0x0
      60:	01000000 	0x1000000
      64:	00005400 	sll	t2,zero,0x10
      68:	00000000 	nop
      6c:	00300000 	0x300000
      70:	00940000 	0x940000
      74:	00010000 	sll	zero,at,0x0
      78:	0000cc54 	0xcc54
      7c:	0000dc00 	sll	k1,zero,0x10
      80:	54000100 	0x54000100
	...
      8c:	00000030 	0x30
      90:	00000094 	0x94
      94:	cc550001 	lwc3	$21,1(v0)
      98:	dc000000 	0xdc000000
      9c:	01000000 	0x1000000
      a0:	00005500 	sll	t2,zero,0x14
      a4:	00000000 	nop
      a8:	00480000 	0x480000
      ac:	00500000 	0x500000
      b0:	00010000 	sll	zero,at,0x0
      b4:	00005853 	0x5853
      b8:	0000dc00 	sll	k1,zero,0x10
      bc:	53000100 	0x53000100
	...
      c8:	00000100 	sll	zero,zero,0x4
      cc:	00000118 	0x118
      d0:	18540001 	0x18540001
      d4:	d4000001 	ldc1	$f0,1(zero)
      d8:	01000001 	movf	zero,t0,$fcc0
      dc:	01d45200 	0x1d45200
      e0:	01dc0000 	0x1dc0000
      e4:	00010000 	sll	zero,at,0x0
      e8:	00000052 	0x52
      ec:	00000000 	nop
      f0:	00010000 	sll	zero,at,0x0
      f4:	00014400 	sll	t0,at,0x10
      f8:	55000100 	0x55000100
      fc:	000001a8 	0x1a8
     100:	000001ac 	0x1ac
     104:	b4550001 	0xb4550001
     108:	b8000001 	swr	zero,1(zero)
     10c:	01000001 	movf	zero,t0,$fcc0
     110:	01c85500 	0x1c85500
     114:	01cc0000 	0x1cc0000
     118:	00010000 	sll	zero,at,0x0
     11c:	00000055 	0x55
     120:	00000000 	nop
     124:	00015400 	sll	t2,at,0x10
     128:	0001a800 	sll	s5,at,0x0
     12c:	55000100 	0x55000100
     130:	000001d4 	0x1d4
     134:	000001dc 	0x1dc
     138:	00550001 	movt	zero,v0,$fcc5
     13c:	00000000 	nop
     140:	dc000000 	0xdc000000
     144:	f4000001 	sdc1	$f0,1(zero)
     148:	01000001 	movf	zero,t0,$fcc0
     14c:	01f45400 	0x1f45400
     150:	02140000 	0x2140000
     154:	00010000 	sll	zero,at,0x0
     158:	00000053 	0x53
     15c:	00000000 	nop
     160:	0001dc00 	sll	k1,at,0x10
     164:	00020000 	sll	zero,v0,0x0
     168:	55000100 	0x55000100
     16c:	00000208 	0x208
     170:	0000020c 	syscall	0x8
     174:	00550001 	movt	zero,v0,$fcc5
     178:	00000000 	nop
     17c:	14000000 	bnez	zero,180 <__Size_Of_SDRAM-0xa680>
     180:	24000002 	li	zero,2
     184:	01000002 	0x1000002
     188:	02245400 	0x2245400
     18c:	02980000 	0x2980000
     190:	00010000 	sll	zero,at,0x0
     194:	00029852 	0x29852
     198:	0002a000 	sll	s4,v0,0x0
     19c:	54000100 	0x54000100
     1a0:	000002a0 	0x2a0
     1a4:	000002ac 	0x2ac
     1a8:	00520001 	0x520001
     1ac:	00000000 	nop
     1b0:	2c000000 	sltiu	zero,zero,0
     1b4:	4c000002 	mfc3	zero,$0,2
     1b8:	01000002 	0x1000002
     1bc:	02645800 	0x2645800
     1c0:	02b40000 	0x2b40000
     1c4:	00010000 	sll	zero,at,0x0
     1c8:	00000058 	0x58
     1cc:	00000000 	nop
     1d0:	0002b400 	sll	s6,v0,0x10
     1d4:	0002b800 	sll	s7,v0,0x0
     1d8:	6d000100 	udi3i	zero,t0,256
     1dc:	000002b8 	0x2b8
     1e0:	00000494 	0x494
     1e4:	088d0002 	j	2340008 <__Size_Of_SDRAM+0x2335808>
     1e8:	00000000 	nop
     1ec:	00000000 	nop
     1f0:	000002b4 	0x2b4
     1f4:	000002c8 	0x2c8
     1f8:	c8540001 	lwc2	$20,1(v0)
     1fc:	58000002 	0x58000002
     200:	01000004 	sllv	zero,zero,t0
     204:	04605200 	bltz	v1,14a08 <__Size_Of_SDRAM+0xa208>
     208:	046c0000 	0x46c0000
     20c:	00010000 	sll	zero,at,0x0
     210:	00048852 	0x48852
     214:	00049400 	sll	s2,a0,0x10
     218:	52000100 	0x52000100
	...
     224:	000002b4 	0x2b4
     228:	00000484 	0x484
     22c:	00550001 	movt	zero,v0,$fcc5
     230:	00000000 	nop
     234:	d0000000 	0xd0000000
     238:	dc000002 	0xdc000002
     23c:	01000002 	0x1000002
     240:	04205400 	bltz	at,15244 <__Size_Of_SDRAM+0xaa44>
     244:	04480000 	0x4480000
     248:	00010000 	sll	zero,at,0x0
     24c:	00045454 	0x45454
     250:	00046800 	sll	t5,a0,0x0
     254:	54000100 	0x54000100
	...
     260:	000002e4 	0x2e4
     264:	0000039c 	0x39c
     268:	b05e0001 	0xb05e0001
     26c:	08000003 	j	c <__Size_Of_SDRAM-0xa7f4>
     270:	01000004 	sllv	zero,zero,t0
     274:	00005e00 	sll	t3,zero,0x18
     278:	00000000 	nop
     27c:	03440000 	0x3440000
     280:	039c0000 	0x39c0000
     284:	00010000 	sll	zero,at,0x0
     288:	0004085b 	0x4085b
     28c:	00041400 	sll	v0,a0,0x10
     290:	5d000100 	0x5d000100
	...
     29c:	000002ec 	0x2ec
     2a0:	00000348 	0x348
     2a4:	b0590001 	0xb0590001
     2a8:	0c000003 	jal	c <__Size_Of_SDRAM-0xa7f4>
     2ac:	01000004 	sllv	zero,zero,t0
     2b0:	00005900 	sll	t3,zero,0x4
     2b4:	00000000 	nop
     2b8:	03440000 	0x3440000
     2bc:	039c0000 	0x39c0000
     2c0:	00010000 	sll	zero,at,0x0
     2c4:	00039c68 	0x39c68
     2c8:	00041400 	sll	v0,a0,0x10
     2cc:	5e000100 	0x5e000100
	...
     2d8:	000002f8 	0x2f8
     2dc:	00000354 	0x354
     2e0:	545d0001 	0x545d0001
     2e4:	9c000003 	0x9c000003
     2e8:	01000003 	0x1000003
     2ec:	03c05b00 	0x3c05b00
     2f0:	04140000 	0x4140000
     2f4:	00010000 	sll	zero,at,0x0
     2f8:	0000005b 	0x5b
     2fc:	00000000 	nop
     300:	0002ec00 	sll	sp,v0,0x10
     304:	00040800 	sll	at,a0,0x0
     308:	60000100 	udi0i	zero,zero,256
     30c:	00000408 	0x408
     310:	00000414 	0x414
     314:	14680001 	bne	v1,t0,31c <__Size_Of_SDRAM-0xa4e4>
     318:	58000004 	0x58000004
     31c:	01000004 	sllv	zero,zero,t0
     320:	04606000 	bltz	v1,18324 <__Size_Of_SDRAM+0xdb24>
     324:	04680000 	0x4680000
     328:	00010000 	sll	zero,at,0x0
     32c:	00000060 	0x60
     330:	00000000 	nop
     334:	0002ec00 	sll	sp,v0,0x10
     338:	00040800 	sll	at,a0,0x0
     33c:	69000100 	udi2i	zero,t0,256
     340:	00000408 	0x408
     344:	00000414 	0x414
     348:	145f0001 	bne	v0,ra,350 <__Size_Of_SDRAM-0xa4b0>
     34c:	68000004 	udi2i	zero,zero,4
     350:	01000004 	sllv	zero,zero,t0
     354:	00006900 	sll	t5,zero,0x4
     358:	00000000 	nop
     35c:	03480000 	0x3480000
     360:	039c0000 	0x39c0000
     364:	00010000 	sll	zero,at,0x0
     368:	00040c59 	0x40c59
     36c:	00041400 	sll	v0,a0,0x10
     370:	59000100 	0x59000100
	...
     384:	0000039c 	0x39c
     388:	000003b0 	0x3b0
     38c:	14590001 	bne	v0,t9,394 <__Size_Of_SDRAM-0xa46c>
     390:	68000004 	udi2i	zero,zero,4
     394:	01000004 	sllv	zero,zero,t0
     398:	00005900 	sll	t3,zero,0x4
     39c:	00000000 	nop
     3a0:	039c0000 	0x39c0000
     3a4:	03ac0000 	0x3ac0000
     3a8:	00010000 	sll	zero,at,0x0
     3ac:	0004145e 	0x4145e
     3b0:	00046800 	sll	t5,a0,0x0
     3b4:	5e000100 	0x5e000100
	...
     3c0:	000002ec 	0x2ec
     3c4:	000002f8 	0x2f8
     3c8:	545d0001 	0x545d0001
     3cc:	08000003 	j	c <__Size_Of_SDRAM-0xa7f4>
     3d0:	01000004 	sllv	zero,zero,t0
     3d4:	04145d00 	0x4145d00
     3d8:	04680000 	0x4680000
     3dc:	00010000 	sll	zero,at,0x0
     3e0:	0000005d 	0x5d
     3e4:	00000000 	nop
     3e8:	0002ec00 	sll	sp,v0,0x10
     3ec:	00034400 	sll	t0,v1,0x10
     3f0:	68000100 	udi2i	zero,zero,256
     3f4:	0000039c 	0x39c
     3f8:	00000408 	0x408
     3fc:	14680001 	bne	v1,t0,404 <__Size_Of_SDRAM-0xa3fc>
     400:	68000004 	udi2i	zero,zero,4
     404:	01000004 	sllv	zero,zero,t0
     408:	00006800 	sll	t5,zero,0x0
     40c:	00000000 	nop
     410:	02ec0000 	0x2ec0000
     414:	02f40000 	0x2f40000
     418:	00010000 	sll	zero,at,0x0
     41c:	00039c5f 	0x39c5f
     420:	00040800 	sll	at,a0,0x0
     424:	5f000100 	0x5f000100
     428:	00000414 	0x414
     42c:	00000468 	0x468
     430:	005f0001 	0x5f0001
     434:	00000000 	nop
     438:	94000000 	lhu	zero,0(zero)
     43c:	bc000004 	cache	0x0,4(zero)
     440:	01000004 	sllv	zero,zero,t0
     444:	055c5400 	0x55c5400
     448:	05840000 	0x5840000
     44c:	00010000 	sll	zero,at,0x0
     450:	00000054 	0x54
     454:	00000000 	nop
     458:	0004a800 	sll	s5,a0,0x0
     45c:	0004b400 	sll	s6,a0,0x10
     460:	52000100 	0x52000100
     464:	0000057c 	0x57c
     468:	0000057c 	0x57c
     46c:	00520001 	0x520001
     470:	00000000 	nop
     474:	c0000000 	ll	zero,0(zero)
     478:	18000004 	blez	zero,48c <__Size_Of_SDRAM-0xa374>
     47c:	01000005 	0x1000005
     480:	052c5200 	0x52c5200
     484:	05540000 	0x5540000
     488:	00010000 	sll	zero,at,0x0
     48c:	00057452 	0x57452
     490:	00057c00 	sll	t7,a1,0x10
     494:	52000100 	0x52000100
     498:	0000057c 	0x57c
     49c:	00000584 	0x584
     4a0:	00520001 	0x520001
     4a4:	00000000 	nop
     4a8:	d0000000 	0xd0000000
     4ac:	18000004 	blez	zero,4c0 <__Size_Of_SDRAM-0xa340>
     4b0:	01000005 	0x1000005
     4b4:	054c5a00 	0x54c5a00
     4b8:	05540000 	0x5540000
     4bc:	00010000 	sll	zero,at,0x0
     4c0:	0000005a 	0x5a
     4c4:	00000000 	nop
     4c8:	00051800 	sll	v1,a1,0x0
     4cc:	00051c00 	sll	v1,a1,0x10
     4d0:	52000100 	0x52000100
	...
     4dc:	000004c8 	0x4c8
     4e0:	000004d0 	0x4d0
     4e4:	185a0001 	0x185a0001
     4e8:	4c000005 	mfc3	zero,$0,5
     4ec:	01000005 	0x1000005
     4f0:	05545a00 	0x5545a00
     4f4:	055c0000 	0x55c0000
     4f8:	00010000 	sll	zero,at,0x0
     4fc:	0000005a 	0x5a
     500:	00000000 	nop
     504:	0004c800 	sll	t9,a0,0x0
     508:	00055c00 	sll	t3,a1,0x10
     50c:	5c000100 	0x5c000100
	...
     518:	000004c8 	0x4c8
     51c:	00000548 	0x548
     520:	545b0001 	0x545b0001
     524:	5c000005 	0x5c000005
     528:	01000005 	0x1000005
     52c:	00005b00 	sll	t3,zero,0xc
     530:	00000000 	nop
     534:	04c80000 	0x4c80000
     538:	055c0000 	0x55c0000
     53c:	00010000 	sll	zero,at,0x0
     540:	0000005e 	0x5e
     544:	00000000 	nop
     548:	0004c800 	sll	t9,a0,0x0
     54c:	00055c00 	sll	t3,a1,0x10
     550:	5d000100 	0x5d000100
	...
     55c:	00000584 	0x584
     560:	000005f8 	0x5f8
     564:	40540001 	cfc0	s4,$0,1
     568:	48000006 	mfc2	zero,$0,6
     56c:	01000006 	srlv	zero,zero,t0
     570:	00005400 	sll	t2,zero,0x10
     574:	00000000 	nop
     578:	05840000 	0x5840000
     57c:	05b00000 	bltzal	t5,580 <__Size_Of_SDRAM-0xa280>
     580:	00010000 	sll	zero,at,0x0
     584:	0005d856 	0x5d856
     588:	0005e000 	sll	gp,a1,0x0
     58c:	56000100 	0x56000100
     590:	00000640 	sll	zero,zero,0x19
     594:	00000648 	0x648
     598:	00560001 	0x560001
     59c:	00000000 	nop
     5a0:	ac000000 	sw	zero,0(zero)
     5a4:	d8000005 	0xd8000005
     5a8:	01000005 	0x1000005
     5ac:	05e45200 	0x5e45200
     5b0:	05f00000 	bltzal	t7,5b4 <__Size_Of_SDRAM-0xa24c>
     5b4:	00010000 	sll	zero,at,0x0
     5b8:	00000052 	0x52
     5bc:	00000000 	nop
     5c0:	00064800 	sll	t1,a2,0x0
     5c4:	00066800 	sll	t5,a2,0x0
     5c8:	55000100 	0x55000100
     5cc:	00000674 	0x674
     5d0:	0000067c 	0x67c
     5d4:	00550001 	movt	zero,v0,$fcc5
     5d8:	00000000 	nop
     5dc:	7c000000 	0x7c000000
     5e0:	a4000006 	sh	zero,6(zero)
     5e4:	01000006 	srlv	zero,zero,t0
     5e8:	06f05400 	bltzal	s7,155ec <__Size_Of_SDRAM+0xadec>
     5ec:	07000000 	bltz	t8,5f0 <__Size_Of_SDRAM-0xa210>
     5f0:	00010000 	sll	zero,at,0x0
     5f4:	00000054 	0x54
     5f8:	00000000 	nop
     5fc:	0006a800 	sll	s5,a2,0x0
     600:	0006f800 	sll	ra,a2,0x0
     604:	53000100 	0x53000100
	...
     610:	00000690 	0x690
     614:	000006f8 	0x6f8
     618:	00580001 	movf	zero,v0,$fcc6
     61c:	00000000 	nop
     620:	a8000000 	swl	zero,0(zero)
     624:	dc000006 	0xdc000006
     628:	01000006 	srlv	zero,zero,t0
     62c:	06e45500 	0x6e45500
     630:	06f80000 	0x6f80000
     634:	00010000 	sll	zero,at,0x0
     638:	00000055 	0x55
     63c:	00000000 	nop
     640:	00070000 	sll	zero,a3,0x0
     644:	00071800 	sll	v1,a3,0x0
     648:	54000100 	0x54000100
     64c:	00000730 	0x730
     650:	00000738 	0x738
     654:	00540001 	movf	zero,v0,$fcc5
     658:	00000000 	nop
     65c:	38000000 	xori	zero,zero,0x0
     660:	3c000007 	lui	zero,0x7
     664:	01000007 	srav	zero,zero,t0
     668:	073c6d00 	0x73c6d00
     66c:	08dc0000 	j	3700000 <__Size_Of_SDRAM+0x36f5800>
     670:	00020000 	sll	zero,v0,0x0
     674:	0000208d 	break	0x0,0x82
     678:	00000000 	nop
     67c:	07380000 	0x7380000
     680:	07540000 	0x7540000
     684:	00010000 	sll	zero,at,0x0
     688:	00075454 	0x75454
     68c:	00075800 	sll	t3,a3,0x0
     690:	52000100 	0x52000100
     694:	00000758 	0x758
     698:	0000076c 	0x76c
     69c:	6c540001 	udi3i	s4,v0,1
     6a0:	0c000007 	jal	1c <__Size_Of_SDRAM-0xa7e4>
     6a4:	01000008 	jr	t0
     6a8:	08205200 	j	814800 <__Size_Of_SDRAM+0x80a000>
     6ac:	08b80000 	j	2e00000 <__Size_Of_SDRAM+0x2df5800>
     6b0:	00010000 	sll	zero,at,0x0
     6b4:	0008c452 	0x8c452
     6b8:	0008dc00 	sll	k1,t0,0x10
     6bc:	52000100 	0x52000100
	...
     6c8:	00000738 	0x738
     6cc:	00000754 	0x754
     6d0:	54550001 	0x54550001
     6d4:	6c000007 	udi3i	zero,zero,7
     6d8:	01000007 	srav	zero,zero,t0
     6dc:	076c5300 	0x76c5300
     6e0:	08140000 	j	500000 <__Size_Of_SDRAM+0x4f5800>
     6e4:	00010000 	sll	zero,at,0x0
     6e8:	00082053 	0x82053
     6ec:	00082400 	sll	a0,t0,0x10
     6f0:	53000100 	0x53000100
     6f4:	000008c4 	0x8c4
     6f8:	000008d4 	0x8d4
     6fc:	00530001 	0x530001
     700:	00000000 	nop
     704:	38000000 	xori	zero,zero,0x0
     708:	c4000008 	lwc1	$f0,8(zero)
     70c:	01000008 	jr	t0
     710:	00005700 	sll	t2,zero,0x1c
     714:	00000000 	nop
     718:	07700000 	bltzal	k1,71c <__Size_Of_SDRAM-0xa0e4>
     71c:	07780000 	0x7780000
     720:	00010000 	sll	zero,at,0x0
     724:	0007785c 	0x7785c
     728:	00079800 	sll	s3,a3,0x0
     72c:	54000100 	0x54000100
     730:	00000798 	0x798
     734:	00000814 	0x814
     738:	205c0001 	addi	gp,v0,1
     73c:	b4000008 	0xb4000008
     740:	01000008 	jr	t0
     744:	08b45400 	j	2d15000 <__Size_Of_SDRAM+0x2d0a800>
     748:	08c40000 	j	3100000 <__Size_Of_SDRAM+0x30f5800>
     74c:	00010000 	sll	zero,at,0x0
     750:	0008c456 	0x8c456
     754:	0008dc00 	sll	k1,t0,0x10
     758:	5c000100 	0x5c000100
	...
     764:	00000838 	udi0	at,zero,zero
     768:	00000840 	sll	at,zero,0x1
     76c:	48560001 	cfc2	s6,$0,1
     770:	64000008 	udi1i	zero,zero,8
     774:	01000008 	jr	t0
     778:	08805600 	j	2015800 <__Size_Of_SDRAM+0x200b000>
     77c:	08a40000 	j	2900000 <__Size_Of_SDRAM+0x28f5800>
     780:	00010000 	sll	zero,at,0x0
     784:	00000056 	0x56
     788:	00000000 	nop
     78c:	00082c00 	sll	a1,t0,0x10
     790:	00084000 	sll	t0,t0,0x0
     794:	59000100 	0x59000100
     798:	00000858 	0x858
     79c:	0000085c 	0x85c
     7a0:	90590001 	lbu	t9,1(v0)
     7a4:	c4000008 	lwc1	$f0,8(zero)
     7a8:	01000008 	jr	t0
     7ac:	08d05900 	j	3416400 <__Size_Of_SDRAM+0x340bc00>
     7b0:	08dc0000 	j	3700000 <__Size_Of_SDRAM+0x36f5800>
     7b4:	00010000 	sll	zero,at,0x0
     7b8:	00000059 	0x59
     7bc:	00000000 	nop
     7c0:	00082400 	sll	a0,t0,0x10
     7c4:	00084000 	sll	t0,t0,0x0
     7c8:	53000100 	0x53000100
     7cc:	00000858 	0x858
     7d0:	00000860 	0x860
     7d4:	90530001 	lbu	s3,1(v0)
     7d8:	94000008 	lhu	zero,8(zero)
     7dc:	01000008 	jr	t0
     7e0:	08d45300 	j	3514c00 <__Size_Of_SDRAM+0x350a400>
     7e4:	08dc0000 	j	3700000 <__Size_Of_SDRAM+0x36f5800>
     7e8:	00010000 	sll	zero,at,0x0
     7ec:	00000053 	0x53
     7f0:	00000000 	nop
     7f4:	00079000 	sll	s2,a3,0x0
     7f8:	00080800 	sll	at,t0,0x0
     7fc:	55000100 	0x55000100
     800:	00000820 	add	at,zero,zero
     804:	00000840 	sll	at,zero,0x1
     808:	58550001 	0x58550001
     80c:	60000008 	udi0i	zero,zero,8
     810:	01000008 	jr	t0
     814:	08905500 	j	2415400 <__Size_Of_SDRAM+0x240ac00>
     818:	08a00000 	j	2800000 <__Size_Of_SDRAM+0x27f5800>
     81c:	00010000 	sll	zero,at,0x0
     820:	0008c455 	0x8c455
     824:	0008c800 	sll	t9,t0,0x0
     828:	55000100 	0x55000100
	...
     834:	000008dc 	0x8dc
     838:	000008f0 	0x8f0
     83c:	f0540001 	0xf0540001
     840:	f4000008 	sdc1	$f0,8(zero)
     844:	01000008 	jr	t0
     848:	08f45200 	j	3d14800 <__Size_Of_SDRAM+0x3d0a000>
     84c:	09040000 	j	4100000 <__Size_Of_SDRAM+0x40f5800>
     850:	00010000 	sll	zero,at,0x0
     854:	00090454 	0x90454
     858:	00099c00 	sll	s3,t1,0x10
     85c:	52000100 	0x52000100
     860:	000009a4 	0x9a4
     864:	000009ac 	0x9ac
     868:	00520001 	0x520001
     86c:	00000000 	nop
     870:	dc000000 	0xdc000000
     874:	f0000008 	0xf0000008
     878:	01000008 	jr	t0
     87c:	08f05500 	j	3c15400 <__Size_Of_SDRAM+0x3c0ac00>
     880:	09040000 	j	4100000 <__Size_Of_SDRAM+0x40f5800>
     884:	00010000 	sll	zero,at,0x0
     888:	00090453 	0x90453
     88c:	00093c00 	sll	a3,t1,0x10
     890:	53000100 	0x53000100
     894:	00000978 	0x978
     898:	0000097c 	0x97c
     89c:	a4530001 	sh	s3,1(v0)
     8a0:	ac000009 	sw	zero,9(zero)
     8a4:	01000009 	jalr	zero,t0
     8a8:	00005300 	sll	t2,zero,0xc
     8ac:	00000000 	nop
     8b0:	09340000 	j	4d00000 <__Size_Of_SDRAM+0x4cf5800>
     8b4:	09a40000 	j	6900000 <__Size_Of_SDRAM+0x68f5800>
     8b8:	00010000 	sll	zero,at,0x0
     8bc:	00000056 	0x56
     8c0:	00000000 	nop
     8c4:	00093000 	sll	a2,t1,0x0
     8c8:	00094c00 	sll	t1,t1,0x10
     8cc:	57000100 	0x57000100
     8d0:	00000964 	0x964
     8d4:	00000994 	0x994
     8d8:	9c570001 	0x9c570001
     8dc:	a4000009 	sh	zero,9(zero)
     8e0:	01000009 	jalr	zero,t0
     8e4:	09ac5700 	j	6b15c00 <__Size_Of_SDRAM+0x6b0b400>
     8e8:	09ac0000 	j	6b00000 <__Size_Of_SDRAM+0x6af5800>
     8ec:	00010000 	sll	zero,at,0x0
     8f0:	00000057 	0x57
     8f4:	00000000 	nop
     8f8:	0009ac00 	sll	s5,t1,0x10
     8fc:	0009b000 	sll	s6,t1,0x0
     900:	6d000100 	udi3i	zero,t0,256
     904:	000009b0 	0x9b0
     908:	000009f4 	0x9f4
     90c:	208d0002 	addi	t5,a0,2
	...
     918:	000009c4 	0x9c4
     91c:	000009cc 	syscall	0x27
     920:	e0520001 	sc	s2,1(v0)
     924:	e8000009 	swc2	$0,9(zero)
     928:	01000009 	jalr	zero,t0
     92c:	00005200 	sll	t2,zero,0x8
     930:	00000000 	nop
     934:	09f40000 	j	7d00000 <__Size_Of_SDRAM+0x7cf5800>
     938:	09f80000 	j	7e00000 <__Size_Of_SDRAM+0x7df5800>
     93c:	00010000 	sll	zero,at,0x0
     940:	0009f86d 	0x9f86d
     944:	000abc00 	sll	s7,t2,0x10
     948:	8d000200 	lw	zero,512(t0)
     94c:	00000020 	add	zero,zero,zero
     950:	00000000 	nop
     954:	0009f400 	sll	s8,t1,0x10
     958:	000a0000 	sll	zero,t2,0x0
     95c:	54000100 	0x54000100
     960:	00000a50 	0xa50
     964:	00000a88 	0xa88
     968:	8c540001 	lw	s4,1(v0)
     96c:	ac00000a 	sw	zero,10(zero)
     970:	0100000a 	movz	zero,t0,zero
     974:	00005400 	sll	t2,zero,0x10
     978:	00000000 	nop
     97c:	09f40000 	j	7d00000 <__Size_Of_SDRAM+0x7cf5800>
     980:	0a000000 	j	8000000 <__Size_Of_SDRAM+0x7ff5800>
     984:	00010000 	sll	zero,at,0x0
     988:	000a2855 	0xa2855
     98c:	000a3000 	sll	a2,t2,0x0
     990:	55000100 	0x55000100
	...
     99c:	00000a50 	0xa50
     9a0:	00000a88 	0xa88
     9a4:	a4530001 	sh	s3,1(v0)
     9a8:	ac00000a 	sw	zero,10(zero)
     9ac:	0100000a 	movz	zero,t0,zero
     9b0:	00005300 	sll	t2,zero,0xc
     9b4:	00000000 	nop
     9b8:	0a180000 	j	8600000 <__Size_Of_SDRAM+0x85f5800>
     9bc:	0a280000 	j	8a00000 <__Size_Of_SDRAM+0x89f5800>
     9c0:	00010000 	sll	zero,at,0x0
     9c4:	000a3055 	0xa3055
     9c8:	000a5400 	sll	t2,t2,0x10
     9cc:	55000100 	0x55000100
     9d0:	00000a88 	0xa88
     9d4:	00000abc 	0xabc
     9d8:	00550001 	movt	zero,v0,$fcc5
     9dc:	00000000 	nop
     9e0:	18000000 	blez	zero,9e4 <__Size_Of_SDRAM-0x9e1c>
     9e4:	2800000a 	slti	zero,zero,10
     9e8:	0100000a 	movz	zero,t0,zero
     9ec:	0a285800 	j	8a16000 <__Size_Of_SDRAM+0x8a0b800>
     9f0:	0abc0000 	j	af00000 <__Size_Of_SDRAM+0xaef5800>
     9f4:	00010000 	sll	zero,at,0x0
     9f8:	00000058 	0x58
     9fc:	00000000 	nop
     a00:	000a1800 	sll	v1,t2,0x0
     a04:	000a1c00 	sll	v1,t2,0x10
     a08:	52000100 	0x52000100
     a0c:	00000a28 	0xa28
     a10:	00000a7c 	0xa7c
     a14:	88520001 	lwl	s2,1(v0)
     a18:	b400000a 	0xb400000a
     a1c:	0100000a 	movz	zero,t0,zero
     a20:	00005200 	sll	t2,zero,0x8
     a24:	00000000 	nop
     a28:	0abc0000 	j	af00000 <__Size_Of_SDRAM+0xaef5800>
     a2c:	0ac00000 	j	b000000 <__Size_Of_SDRAM+0xaff5800>
     a30:	00010000 	sll	zero,at,0x0
     a34:	000ac06d 	0xac06d
     a38:	000be000 	sll	gp,t3,0x0
     a3c:	8d000200 	lw	zero,512(t0)
     a40:	00000038 	udi0	zero,zero,zero
     a44:	00000000 	nop
     a48:	000abc00 	sll	s7,t2,0x10
     a4c:	000af000 	sll	s8,t2,0x0
     a50:	54000100 	0x54000100
     a54:	00000af0 	0xaf0
     a58:	00000b3c 	0xb3c
     a5c:	44620001 	0x44620001
     a60:	5c00000b 	0x5c00000b
     a64:	0100000b 	movn	zero,t0,zero
     a68:	0b7c6200 	j	df18800 <__Size_Of_SDRAM+0xdf0e000>
     a6c:	0b9c0000 	j	e700000 <__Size_Of_SDRAM+0xe6f5800>
     a70:	00010000 	sll	zero,at,0x0
     a74:	000bac62 	0xbac62
     a78:	000bb400 	sll	s6,t3,0x10
     a7c:	62000100 	udi0i	zero,s0,256
	...
     a88:	00000abc 	0xabc
     a8c:	00000af0 	0xaf0
     a90:	f0550001 	0xf0550001
     a94:	a000000a 	sb	zero,10(zero)
     a98:	0100000b 	movn	zero,t0,zero
     a9c:	0bac6100 	j	eb18400 <__Size_Of_SDRAM+0xeb0dc00>
     aa0:	0be00000 	j	f800000 <__Size_Of_SDRAM+0xf7f5800>
     aa4:	00010000 	sll	zero,at,0x0
     aa8:	00000061 	0x61
     aac:	00000000 	nop
     ab0:	000b1000 	sll	v0,t3,0x0
     ab4:	000ba400 	sll	s4,t3,0x10
     ab8:	60000100 	udi0i	zero,zero,256
     abc:	00000bac 	0xbac
     ac0:	00000be0 	0xbe0
     ac4:	00600001 	movf	zero,v1,$fcc0
     ac8:	00000000 	nop
     acc:	0c000000 	jal	0 <__Size_Of_SDRAM-0xa800>
     ad0:	5c00000b 	0x5c00000b
     ad4:	0100000b 	movn	zero,t0,zero
     ad8:	0b646300 	j	d918c00 <__Size_Of_SDRAM+0xd90e400>
     adc:	0b980000 	j	e600000 <__Size_Of_SDRAM+0xe5f5800>
     ae0:	00010000 	sll	zero,at,0x0
     ae4:	000bac63 	0xbac63
     ae8:	000bb400 	sll	s6,t3,0x10
     aec:	63000100 	udi0i	zero,t8,256
     af0:	00000bc0 	sll	at,zero,0xf
     af4:	00000bc8 	0xbc8
     af8:	d0630001 	0xd0630001
     afc:	d800000b 	0xd800000b
     b00:	0100000b 	movn	zero,t0,zero
     b04:	0bd86300 	j	f618c00 <__Size_Of_SDRAM+0xf60e400>
     b08:	0be00000 	j	f800000 <__Size_Of_SDRAM+0xf7f5800>
     b0c:	00010000 	sll	zero,at,0x0
     b10:	00000063 	0x63
     b14:	00000000 	nop
     b18:	000b0000 	sll	zero,t3,0x0
     b1c:	000b0800 	sll	at,t3,0x0
     b20:	64000100 	udi1i	zero,zero,256
     b24:	00000b08 	0xb08
     b28:	00000b1c 	0xb1c
     b2c:	1c520001 	0x1c520001
     b30:	9400000b 	lhu	zero,11(zero)
     b34:	0100000b 	movn	zero,t0,zero
     b38:	0bac6400 	j	eb19000 <__Size_Of_SDRAM+0xeb0e800>
     b3c:	0be00000 	j	f800000 <__Size_Of_SDRAM+0xf7f5800>
     b40:	00010000 	sll	zero,at,0x0
     b44:	00000064 	0x64
     b48:	00000000 	nop
     b4c:	000af000 	sll	s8,t2,0x0
     b50:	000af800 	sll	ra,t2,0x0
     b54:	67000100 	udi1i	zero,t8,256
     b58:	00000af8 	0xaf8
     b5c:	00000b00 	sll	at,zero,0xc
     b60:	00520001 	0x520001
     b64:	8800000b 	lwl	zero,11(zero)
     b68:	0100000b 	movn	zero,t0,zero
     b6c:	0bac6700 	j	eb19c00 <__Size_Of_SDRAM+0xeb0f400>
     b70:	0be00000 	j	f800000 <__Size_Of_SDRAM+0xf7f5800>
     b74:	00010000 	sll	zero,at,0x0
     b78:	00000067 	0x67
     b7c:	00000000 	nop
     b80:	000be000 	sll	gp,t3,0x0
     b84:	000be400 	sll	gp,t3,0x10
     b88:	6d000100 	udi3i	zero,t0,256
     b8c:	00000be4 	0xbe4
     b90:	00000dcc 	syscall	0x37
     b94:	388d0002 	xori	t5,a0,0x2
	...
     ba0:	00000be0 	0xbe0
     ba4:	00000c0c 	syscall	0x30
     ba8:	0c540001 	jal	1500004 <__Size_Of_SDRAM+0x14f5804>
     bac:	b400000c 	0xb400000c
     bb0:	0100000d 	break	0x100
     bb4:	0dc06100 	jal	7018400 <__Size_Of_SDRAM+0x700dc00>
     bb8:	0dcc0000 	jal	7300000 <__Size_Of_SDRAM+0x72f5800>
     bbc:	00010000 	sll	zero,at,0x0
     bc0:	00000061 	0x61
     bc4:	00000000 	nop
     bc8:	000be000 	sll	gp,t3,0x0
     bcc:	000c0c00 	sll	at,t4,0x10
     bd0:	55000100 	0x55000100
     bd4:	00000c0c 	syscall	0x30
     bd8:	00000da8 	0xda8
     bdc:	c0640001 	ll	a0,1(v1)
     be0:	cc00000d 	lwc3	$0,13(zero)
     be4:	0100000d 	break	0x100
     be8:	00006400 	sll	t4,zero,0x10
     bec:	00000000 	nop
     bf0:	0c300000 	jal	c00000 <__Size_Of_SDRAM+0xbf5800>
     bf4:	0db80000 	jal	6e00000 <__Size_Of_SDRAM+0x6df5800>
     bf8:	00010000 	sll	zero,at,0x0
     bfc:	000dc060 	0xdc060
     c00:	000dcc00 	sll	t9,t5,0x10
     c04:	60000100 	udi0i	zero,zero,256
	...
     c10:	00000c5c 	0xc5c
     c14:	00000ca0 	0xca0
     c18:	bc530001 	cache	0x13,1(v0)
     c1c:	d400000c 	ldc1	$f0,12(zero)
     c20:	0100000c 	syscall	0x40000
     c24:	0d305300 	jal	4c14c00 <__Size_Of_SDRAM+0x4c0a400>
     c28:	0d380000 	jal	4e00000 <__Size_Of_SDRAM+0x4df5800>
     c2c:	00010000 	sll	zero,at,0x0
     c30:	000dc053 	0xdc053
     c34:	000dcc00 	sll	t9,t5,0x10
     c38:	53000100 	0x53000100
	...
     c44:	00000cd0 	0xcd0
     c48:	00000d38 	0xd38
     c4c:	00520001 	0x520001
     c50:	00000000 	nop
     c54:	34000000 	li	zero,0x0
     c58:	3800000c 	xori	zero,zero,0xc
     c5c:	0100000d 	break	0x100
     c60:	0d3c5400 	jal	4f15000 <__Size_Of_SDRAM+0x4f0a800>
     c64:	0d880000 	jal	6200000 <__Size_Of_SDRAM+0x61f5800>
     c68:	00010000 	sll	zero,at,0x0
     c6c:	000dc054 	0xdc054
     c70:	000dcc00 	sll	t9,t5,0x10
     c74:	54000100 	0x54000100
	...
     c80:	00000c18 	0xc18
     c84:	00000dac 	0xdac
     c88:	c0630001 	ll	v1,1(v1)
     c8c:	cc00000d 	lwc3	$0,13(zero)
     c90:	0100000d 	break	0x100
     c94:	00006300 	sll	t4,zero,0xc
     c98:	00000000 	nop
     c9c:	0c580000 	jal	1600000 <__Size_Of_SDRAM+0x15f5800>
     ca0:	0c880000 	jal	2200000 <__Size_Of_SDRAM+0x21f5800>
     ca4:	00010000 	sll	zero,at,0x0
     ca8:	000c8c52 	0xc8c52
     cac:	000cc000 	sll	t8,t4,0x0
     cb0:	52000100 	0x52000100
     cb4:	00000dc0 	sll	at,zero,0x17
     cb8:	00000dcc 	syscall	0x37
     cbc:	00520001 	0x520001
     cc0:	00000000 	nop
     cc4:	5c000000 	0x5c000000
     cc8:	9000000d 	lbu	zero,13(zero)
     ccc:	0100000d 	break	0x100
     cd0:	00005200 	sll	t2,zero,0x8
     cd4:	00000000 	nop
     cd8:	0dcc0000 	jal	7300000 <__Size_Of_SDRAM+0x72f5800>
     cdc:	0dd00000 	jal	7400000 <__Size_Of_SDRAM+0x73f5800>
     ce0:	00010000 	sll	zero,at,0x0
     ce4:	000dd06d 	0xdd06d
     ce8:	000e3000 	sll	a2,t6,0x0
     cec:	8d000200 	lw	zero,512(t0)
     cf0:	00000020 	add	zero,zero,zero
     cf4:	00000000 	nop
     cf8:	000dcc00 	sll	t9,t5,0x10
     cfc:	000dd800 	sll	k1,t5,0x0
     d00:	54000600 	0x54000600
     d04:	93550493 	lbu	s5,1171(k0)
     d08:	000e0004 	sllv	zero,t6,zero
     d0c:	000e1000 	sll	v0,t6,0x0
     d10:	54000600 	0x54000600
     d14:	93550493 	lbu	s5,1171(k0)
     d18:	000e2004 	sllv	a0,t6,zero
     d1c:	000e3000 	sll	a2,t6,0x0
     d20:	54000600 	0x54000600
     d24:	93550493 	lbu	s5,1171(k0)
     d28:	00000004 	sllv	zero,zero,zero
     d2c:	00000000 	nop
     d30:	000df000 	sll	s8,t5,0x0
     d34:	000e0400 	sll	zero,t6,0x10
     d38:	52000100 	0x52000100
     d3c:	00000e10 	0xe10
     d40:	00000e14 	0xe14
     d44:	18520001 	0x18520001
     d48:	3000000e 	andi	zero,zero,0xe
     d4c:	0100000e 	0x100000e
     d50:	00005200 	sll	t2,zero,0x8
     d54:	00000000 	nop
     d58:	0e300000 	jal	8c00000 <__Size_Of_SDRAM+0x8bf5800>
     d5c:	0e340000 	jal	8d00000 <__Size_Of_SDRAM+0x8cf5800>
     d60:	00010000 	sll	zero,at,0x0
     d64:	000e346d 	0xe346d
     d68:	00113c00 	sll	a3,s1,0x10
     d6c:	8d000200 	lw	zero,512(t0)
     d70:	00000030 	0x30
     d74:	00000000 	nop
     d78:	000e3000 	sll	a2,t6,0x0
     d7c:	000eb400 	sll	s6,t6,0x10
     d80:	54000100 	0x54000100
     d84:	00001014 	0x1014
     d88:	0000102c 	0x102c
     d8c:	c8540001 	lwc2	$20,1(v0)
     d90:	e8000010 	swc2	$0,16(zero)
     d94:	01000010 	0x1000010
     d98:	11245400 	beq	t1,a0,15d9c <__Size_Of_SDRAM+0xb59c>
     d9c:	11280000 	beq	t1,t0,da0 <__Size_Of_SDRAM-0x9a60>
     da0:	00010000 	sll	zero,at,0x0
     da4:	00000054 	0x54
     da8:	00000000 	nop
     dac:	000e3000 	sll	a2,t6,0x0
     db0:	000e5c00 	sll	t3,t6,0x10
     db4:	55000100 	0x55000100
     db8:	00000e5c 	0xe5c
     dbc:	00000e98 	0xe98
     dc0:	98620001 	lwr	v0,1(v1)
     dc4:	a800000e 	swl	zero,14(zero)
     dc8:	0100000e 	0x100000e
     dcc:	0ea85500 	jal	aa15400 <__Size_Of_SDRAM+0xaa0ac00>
     dd0:	10fc0000 	beq	a3,gp,dd4 <__Size_Of_SDRAM-0x9a2c>
     dd4:	00010000 	sll	zero,at,0x0
     dd8:	00112462 	0x112462
     ddc:	00113c00 	sll	a3,s1,0x10
     de0:	62000100 	udi0i	zero,s0,256
	...
     dec:	00000f18 	0xf18
     df0:	00000f84 	0xf84
     df4:	00530001 	0x530001
     df8:	00000000 	nop
     dfc:	5c000000 	0x5c000000
     e00:	6400000e 	udi1i	zero,zero,14
     e04:	0100000e 	0x100000e
     e08:	0ef06100 	jal	bc18400 <__Size_Of_SDRAM+0xbc0dc00>
     e0c:	0f980000 	jal	e600000 <__Size_Of_SDRAM+0xe5f5800>
     e10:	00010000 	sll	zero,at,0x0
     e14:	000fa461 	0xfa461
     e18:	00101400 	sll	v0,s0,0x10
     e1c:	61000100 	udi0i	zero,t0,256
     e20:	00001090 	0x1090
     e24:	000010b0 	0x10b0
     e28:	00610001 	movt	zero,v1,$fcc0
     e2c:	00000000 	nop
     e30:	5c000000 	0x5c000000
     e34:	a000000e 	sb	zero,14(zero)
     e38:	0100000e 	0x100000e
     e3c:	0ea86000 	jal	aa18000 <__Size_Of_SDRAM+0xaa0d800>
     e40:	113c0000 	beq	t1,gp,e44 <__Size_Of_SDRAM-0x99bc>
     e44:	00010000 	sll	zero,at,0x0
     e48:	00000060 	0x60
     e4c:	00000000 	nop
     e50:	000f0c00 	sll	at,t7,0x10
     e54:	000f8400 	sll	s0,t7,0x10
     e58:	52000100 	0x52000100
	...
     e64:	00000ef4 	0xef4
     e68:	00000efc 	0xefc
     e6c:	93540006 	lbu	s4,6(k0)
     e70:	04935504 	0x4935504
     e74:	0000100c 	syscall	0x40
     e78:	00001014 	0x1014
     e7c:	93540006 	lbu	s4,6(k0)
     e80:	04935504 	0x4935504
	...
     e8c:	00000e80 	sll	at,zero,0x1a
     e90:	00000ea8 	0xea8
     e94:	b85b0001 	swr	k1,1(v0)
     e98:	fc00000e 	0xfc00000e
     e9c:	0100000e 	0x100000e
     ea0:	0f985b00 	jal	e616c00 <__Size_Of_SDRAM+0xe60c400>
     ea4:	10140000 	beq	zero,s4,ea8 <__Size_Of_SDRAM-0x9958>
     ea8:	00010000 	sll	zero,at,0x0
     eac:	0010145b 	0x10145b
     eb0:	00105800 	sll	t3,s0,0x0
     eb4:	5b000100 	0x5b000100
     eb8:	00001058 	0x1058
     ebc:	00001090 	0x1090
     ec0:	90520001 	lbu	s2,1(v0)
     ec4:	bc000010 	cache	0x0,16(zero)
     ec8:	01000010 	0x1000010
     ecc:	10c85b00 	beq	a2,t0,17ad0 <__Size_Of_SDRAM+0xd2d0>
     ed0:	10d00000 	beq	a2,s0,ed4 <__Size_Of_SDRAM-0x992c>
     ed4:	00010000 	sll	zero,at,0x0
     ed8:	0010d052 	0x10d052
     edc:	00113400 	sll	a2,s1,0x10
     ee0:	5b000100 	0x5b000100
	...
     eec:	00000fc4 	0xfc4
     ef0:	00001008 	0x1008
     ef4:	a0520001 	sb	s2,1(v0)
     ef8:	a8000010 	swl	zero,16(zero)
     efc:	01000010 	0x1000010
     f00:	00005200 	sll	t2,zero,0x8
     f04:	00000000 	nop
     f08:	0fb00000 	jal	ec00000 <__Size_Of_SDRAM+0xebf5800>
     f0c:	100c0000 	beq	zero,t4,f10 <__Size_Of_SDRAM-0x98f0>
     f10:	00010000 	sll	zero,at,0x0
     f14:	00109055 	0x109055
     f18:	0010a800 	sll	s5,s0,0x0
     f1c:	55000100 	0x55000100
	...
     f28:	00000fc4 	0xfc4
     f2c:	00001008 	0x1008
     f30:	41900007 	0x41900007
     f34:	93570493 	lbu	s7,1171(k0)
     f38:	0010a004 	sllv	s4,s0,zero
     f3c:	0010a800 	sll	s5,s0,0x0
     f40:	90000700 	lbu	zero,1792(zero)
     f44:	57049341 	0x57049341
     f48:	00000493 	0x493
     f4c:	00000000 	nop
     f50:	10080000 	beq	zero,t0,f54 <__Size_Of_SDRAM-0x98ac>
     f54:	100c0000 	beq	zero,t4,f58 <__Size_Of_SDRAM-0x98a8>
     f58:	00010000 	sll	zero,at,0x0
     f5c:	00000054 	0x54
     f60:	00000000 	nop
     f64:	000ef400 	sll	s8,t6,0x10
     f68:	000efc00 	sll	ra,t6,0x10
     f6c:	52000100 	0x52000100
     f70:	00001008 	0x1008
     f74:	00001014 	0x1014
     f78:	00520001 	0x520001
     f7c:	00000000 	nop
     f80:	f4000000 	sdc1	$f0,0(zero)
     f84:	fc00000e 	0xfc00000e
     f88:	0100000e 	0x100000e
     f8c:	10085600 	beq	zero,t0,16790 <__Size_Of_SDRAM+0xbf90>
     f90:	10140000 	beq	zero,s4,f94 <__Size_Of_SDRAM-0x986c>
     f94:	00010000 	sll	zero,at,0x0
     f98:	00000056 	0x56
     f9c:	00000000 	nop
     fa0:	000ef400 	sll	s8,t6,0x10
     fa4:	000efc00 	sll	ra,t6,0x10
     fa8:	53000100 	0x53000100
     fac:	00001008 	0x1008
     fb0:	00001014 	0x1014
     fb4:	00530001 	0x530001
     fb8:	00000000 	nop
     fbc:	f4000000 	sdc1	$f0,0(zero)
     fc0:	fc00000e 	0xfc00000e
     fc4:	0100000e 	0x100000e
     fc8:	10085800 	beq	zero,t0,16fcc <__Size_Of_SDRAM+0xc7cc>
     fcc:	10140000 	beq	zero,s4,fd0 <__Size_Of_SDRAM-0x9830>
     fd0:	00010000 	sll	zero,at,0x0
     fd4:	00000058 	0x58
     fd8:	00000000 	nop
     fdc:	000ef400 	sll	s8,t6,0x10
     fe0:	000efc00 	sll	ra,t6,0x10
     fe4:	57000100 	0x57000100
     fe8:	00001008 	0x1008
     fec:	00001014 	0x1014
     ff0:	00570001 	0x570001
     ff4:	00000000 	nop
     ff8:	80000000 	lb	zero,0(zero)
     ffc:	8400000e 	lh	zero,14(zero)
    1000:	0100000e 	0x100000e
    1004:	10d05200 	beq	a2,s0,15808 <__Size_Of_SDRAM+0xb008>
    1008:	11340000 	beq	t1,s4,100c <__Size_Of_SDRAM-0x97f4>
    100c:	00010000 	sll	zero,at,0x0
    1010:	00000052 	0x52
    1014:	00000000 	nop
    1018:	00113c00 	sll	a3,s1,0x10
    101c:	00114000 	sll	t0,s1,0x0
    1020:	6d000100 	udi3i	zero,t0,256
    1024:	00001140 	sll	v0,zero,0x5
    1028:	00001488 	0x1488
    102c:	388d0002 	xori	t5,a0,0x2
	...
    1038:	0000113c 	0x113c
    103c:	00001178 	0x1178
    1040:	78540001 	0x78540001
    1044:	cc000011 	lwc3	$0,17(zero)
    1048:	01000011 	mthi	t0
    104c:	11f46e00 	beq	t7,s4,1c850 <__Size_Of_SDRAM+0x12050>
    1050:	14880000 	bne	a0,t0,1054 <__Size_Of_SDRAM-0x97ac>
    1054:	00010000 	sll	zero,at,0x0
    1058:	0000006e 	0x6e
    105c:	00000000 	nop
    1060:	00113c00 	sll	a3,s1,0x10
    1064:	00117800 	sll	t7,s1,0x0
    1068:	55000100 	0x55000100
    106c:	00001178 	0x1178
    1070:	000011e0 	0x11e0
    1074:	f4630001 	sdc1	$f3,1(v1)
    1078:	88000011 	lwl	zero,17(zero)
    107c:	01000014 	0x1000014
    1080:	00006300 	sll	t4,zero,0xc
    1084:	00000000 	nop
    1088:	12580000 	beq	s2,t8,108c <__Size_Of_SDRAM-0x9774>
    108c:	12c40000 	beq	s6,a0,1090 <__Size_Of_SDRAM-0x9770>
    1090:	00010000 	sll	zero,at,0x0
    1094:	00000052 	0x52
    1098:	00000000 	nop
    109c:	00118400 	sll	s0,s1,0x10
    10a0:	00118c00 	sll	s1,s1,0x10
    10a4:	60000100 	udi0i	zero,zero,256
    10a8:	0000123c 	0x123c
    10ac:	000012e8 	0x12e8
    10b0:	f4600001 	sdc1	$f0,1(v1)
    10b4:	64000012 	udi1i	zero,zero,18
    10b8:	01000013 	mtlo	t0
    10bc:	13e06000 	beqz	ra,190c0 <__Size_Of_SDRAM+0xe8c0>
    10c0:	14000000 	bnez	zero,10c4 <__Size_Of_SDRAM-0x973c>
    10c4:	00010000 	sll	zero,at,0x0
    10c8:	00000060 	0x60
    10cc:	00000000 	nop
    10d0:	00117c00 	sll	t7,s1,0x10
    10d4:	0011dc00 	sll	k1,s1,0x10
    10d8:	64000100 	udi1i	zero,zero,256
    10dc:	000011f4 	0x11f4
    10e0:	00001488 	0x1488
    10e4:	00640001 	movf	zero,v1,$fcc1
    10e8:	00000000 	nop
    10ec:	70000000 	mad	zero,zero
    10f0:	e4000011 	swc1	$f0,17(zero)
    10f4:	01000011 	mthi	t0
    10f8:	11f46200 	beq	t7,s4,198fc <__Size_Of_SDRAM+0xf0fc>
    10fc:	144c0000 	bne	v0,t4,1100 <__Size_Of_SDRAM-0x9700>
    1100:	00010000 	sll	zero,at,0x0
    1104:	00147462 	0x147462
    1108:	00148800 	sll	s1,s4,0x0
    110c:	62000100 	udi0i	zero,s0,256
	...
    1118:	00001184 	0x1184
    111c:	000011e8 	0x11e8
    1120:	f4610001 	sdc1	$f1,1(v1)
    1124:	88000011 	lwl	zero,17(zero)
    1128:	01000014 	0x1000014
    112c:	00006100 	sll	t4,zero,0x4
    1130:	00000000 	nop
    1134:	12400000 	beqz	s2,1138 <__Size_Of_SDRAM-0x96c8>
    1138:	12480000 	beq	s2,t0,113c <__Size_Of_SDRAM-0x96c4>
    113c:	00060000 	sll	zero,a2,0x0
    1140:	55049354 	0x55049354
    1144:	135c0493 	beq	k0,gp,2394 <__Size_Of_SDRAM-0x846c>
    1148:	13640000 	beq	k1,a0,114c <__Size_Of_SDRAM-0x96b4>
    114c:	00060000 	sll	zero,a2,0x0
    1150:	55049354 	0x55049354
    1154:	00000493 	0x493
    1158:	00000000 	nop
    115c:	11a80000 	beq	t5,t0,1160 <__Size_Of_SDRAM-0x96a0>
    1160:	11f40000 	beq	t7,s4,1164 <__Size_Of_SDRAM-0x969c>
    1164:	00010000 	sll	zero,at,0x0
    1168:	0012045b 	0x12045b
    116c:	00124800 	sll	t1,s2,0x0
    1170:	5b000100 	0x5b000100
    1174:	000012e8 	0x12e8
    1178:	00001364 	0x1364
    117c:	645b0001 	udi1i	k1,v0,1
    1180:	a8000013 	swl	zero,19(zero)
    1184:	01000013 	mtlo	t0
    1188:	13a85b00 	beq	sp,t0,17d8c <__Size_Of_SDRAM+0xd58c>
    118c:	13e00000 	beqz	ra,1190 <__Size_Of_SDRAM-0x9670>
    1190:	00010000 	sll	zero,at,0x0
    1194:	0013e052 	0x13e052
    1198:	00140c00 	sll	at,s4,0x10
    119c:	5b000100 	0x5b000100
    11a0:	00001418 	0x1418
    11a4:	00001420 	0x1420
    11a8:	20520001 	addi	s2,v0,1
    11ac:	80000014 	lb	zero,20(zero)
    11b0:	01000014 	0x1000014
    11b4:	00005b00 	sll	t3,zero,0xc
    11b8:	00000000 	nop
    11bc:	13140000 	beq	t8,s4,11c0 <__Size_Of_SDRAM-0x9640>
    11c0:	13580000 	beq	k0,t8,11c4 <__Size_Of_SDRAM-0x963c>
    11c4:	00010000 	sll	zero,at,0x0
    11c8:	0013f052 	0x13f052
    11cc:	0013f800 	sll	ra,s3,0x0
    11d0:	52000100 	0x52000100
	...
    11dc:	00001300 	sll	v0,zero,0xc
    11e0:	0000135c 	0x135c
    11e4:	e0550001 	sc	s5,1(v0)
    11e8:	f8000013 	0xf8000013
    11ec:	01000013 	mtlo	t0
    11f0:	00005500 	sll	t2,zero,0x14
    11f4:	00000000 	nop
    11f8:	13140000 	beq	t8,s4,11fc <__Size_Of_SDRAM-0x9604>
    11fc:	13580000 	beq	k0,t8,1200 <__Size_Of_SDRAM-0x9600>
    1200:	00070000 	sll	zero,a3,0x0
    1204:	04934190 	0x4934190
    1208:	f0049357 	0xf0049357
    120c:	f8000013 	0xf8000013
    1210:	07000013 	bltz	t8,1260 <__Size_Of_SDRAM-0x95a0>
    1214:	93419000 	lbu	at,-28672(k0)
    1218:	04935704 	0x4935704
	...
    1224:	00001358 	0x1358
    1228:	0000135c 	0x135c
    122c:	00540001 	movf	zero,v0,$fcc5
    1230:	00000000 	nop
    1234:	40000000 	mfc0	zero,$0
    1238:	48000012 	mfc2	zero,$0,18
    123c:	01000012 	0x1000012
    1240:	13585200 	beq	k0,t8,15a44 <__Size_Of_SDRAM+0xb244>
    1244:	13640000 	beq	k1,a0,1248 <__Size_Of_SDRAM-0x95b8>
    1248:	00010000 	sll	zero,at,0x0
    124c:	00000052 	0x52
    1250:	00000000 	nop
    1254:	00124000 	sll	t0,s2,0x0
    1258:	00124800 	sll	t1,s2,0x0
    125c:	56000100 	0x56000100
    1260:	00001358 	0x1358
    1264:	00001364 	0x1364
    1268:	00560001 	0x560001
    126c:	00000000 	nop
    1270:	40000000 	mfc0	zero,$0
    1274:	48000012 	mfc2	zero,$0,18
    1278:	01000012 	0x1000012
    127c:	13585300 	beq	k0,t8,15e80 <__Size_Of_SDRAM+0xb680>
    1280:	13640000 	beq	k1,a0,1284 <__Size_Of_SDRAM-0x957c>
    1284:	00010000 	sll	zero,at,0x0
    1288:	00000053 	0x53
    128c:	00000000 	nop
    1290:	00124000 	sll	t0,s2,0x0
    1294:	00124800 	sll	t1,s2,0x0
    1298:	58000100 	0x58000100
    129c:	00001358 	0x1358
    12a0:	00001364 	0x1364
    12a4:	00580001 	movf	zero,v0,$fcc6
    12a8:	00000000 	nop
    12ac:	40000000 	mfc0	zero,$0
    12b0:	48000012 	mfc2	zero,$0,18
    12b4:	01000012 	0x1000012
    12b8:	13585700 	beq	k0,t8,16ebc <__Size_Of_SDRAM+0xc6bc>
    12bc:	13640000 	beq	k1,a0,12c0 <__Size_Of_SDRAM-0x9540>
    12c0:	00010000 	sll	zero,at,0x0
    12c4:	00000057 	0x57
    12c8:	00000000 	nop
    12cc:	0011a800 	sll	s5,s1,0x0
    12d0:	0011b400 	sll	s6,s1,0x10
    12d4:	52000100 	0x52000100
    12d8:	00001420 	0x1420
    12dc:	00001480 	sll	v0,zero,0x12
    12e0:	00520001 	0x520001
    12e4:	00000000 	nop
    12e8:	88000000 	lwl	zero,0(zero)
    12ec:	8c000014 	lw	zero,20(zero)
    12f0:	01000014 	0x1000014
    12f4:	148c6d00 	bne	a0,t4,1c6f8 <__Size_Of_SDRAM+0x11ef8>
    12f8:	14d40000 	bne	a2,s4,12fc <__Size_Of_SDRAM-0x9504>
    12fc:	00020000 	sll	zero,v0,0x0
    1300:	0000208d 	break	0x0,0x82
    1304:	00000000 	nop
    1308:	14880000 	bne	a0,t0,130c <__Size_Of_SDRAM-0x94f4>
    130c:	14900000 	bne	a0,s0,1310 <__Size_Of_SDRAM-0x94f0>
    1310:	00010000 	sll	zero,at,0x0
    1314:	0014b054 	0x14b054
    1318:	0014d400 	sll	k0,s4,0x10
    131c:	54000100 	0x54000100
	...
    1328:	000014a4 	0x14a4
    132c:	000014c8 	0x14c8
    1330:	00520001 	0x520001
    1334:	00000000 	nop
    1338:	d4000000 	ldc1	$f0,0(zero)
    133c:	d8000014 	0xd8000014
    1340:	01000014 	0x1000014
    1344:	14d86d00 	bne	a2,t8,1c748 <__Size_Of_SDRAM+0x11f48>
    1348:	15e80000 	bne	t7,t0,134c <__Size_Of_SDRAM-0x94b4>
    134c:	00020000 	sll	zero,v0,0x0
    1350:	0000288d 	break	0x0,0xa2
    1354:	00000000 	nop
    1358:	14d40000 	bne	a2,s4,135c <__Size_Of_SDRAM-0x94a4>
    135c:	14fc0000 	bne	a3,gp,1360 <__Size_Of_SDRAM-0x94a0>
    1360:	00010000 	sll	zero,at,0x0
    1364:	0014fc54 	0x14fc54
    1368:	00151800 	sll	v1,s5,0x0
    136c:	61000100 	udi0i	zero,t0,256
	...
    1378:	000014d4 	0x14d4
    137c:	00001500 	sll	v0,zero,0x14
    1380:	00550001 	movt	zero,v0,$fcc5
    1384:	24000015 	li	zero,21
    1388:	01000015 	0x1000015
    138c:	00006000 	sll	t4,zero,0x0
    1390:	00000000 	nop
    1394:	14d40000 	bne	a2,s4,1398 <__Size_Of_SDRAM-0x9468>
    1398:	15080000 	bne	t0,t0,139c <__Size_Of_SDRAM-0x9464>
    139c:	00010000 	sll	zero,at,0x0
    13a0:	00150856 	0x150856
    13a4:	0015a000 	sll	s4,s5,0x0
    13a8:	64000100 	udi1i	zero,zero,256
    13ac:	000015b8 	0x15b8
    13b0:	000015e8 	0x15e8
    13b4:	00640001 	movf	zero,v1,$fcc1
    13b8:	00000000 	nop
    13bc:	0c000000 	jal	0 <__Size_Of_SDRAM-0xa800>
    13c0:	a4000015 	sh	zero,21(zero)
    13c4:	01000015 	0x1000015
    13c8:	15b86300 	bne	t5,t8,19fcc <__Size_Of_SDRAM+0xf7cc>
    13cc:	15e80000 	bne	t7,t0,13d0 <__Size_Of_SDRAM-0x9430>
    13d0:	00010000 	sll	zero,at,0x0
    13d4:	00000063 	0x63
    13d8:	00000000 	nop
    13dc:	00151800 	sll	v1,s5,0x0
    13e0:	0015ac00 	sll	s5,s5,0x10
    13e4:	61000100 	udi0i	zero,t0,256
    13e8:	000015b8 	0x15b8
    13ec:	000015cc 	syscall	0x57
    13f0:	e0610001 	sc	at,1(v1)
    13f4:	e8000015 	swc2	$0,21(zero)
    13f8:	01000015 	0x1000015
    13fc:	00006100 	sll	t4,zero,0x4
    1400:	00000000 	nop
    1404:	15240000 	bne	t1,a0,1408 <__Size_Of_SDRAM-0x93f8>
    1408:	15b00000 	bne	t5,s0,140c <__Size_Of_SDRAM-0x93f4>
    140c:	00010000 	sll	zero,at,0x0
    1410:	0015b860 	0x15b860
    1414:	0015e800 	sll	sp,s5,0x0
    1418:	60000100 	udi0i	zero,zero,256
	...
    1424:	0000008c 	syscall	0x2
    1428:	000000d4 	0xd4
    142c:	d8540001 	0xd8540001
    1430:	e0000000 	sc	zero,0(zero)
    1434:	01000000 	0x1000000
    1438:	00e85400 	0xe85400
    143c:	01000000 	0x1000000
    1440:	00010000 	sll	zero,at,0x0
    1444:	00000054 	0x54
    1448:	00000000 	nop
    144c:	0000c000 	sll	t8,zero,0x0
    1450:	0000e800 	sll	sp,zero,0x0
    1454:	52000100 	0x52000100
	...
    1460:	00000100 	sll	zero,zero,0x4
    1464:	00000110 	0x110
    1468:	14540001 	bne	v0,s4,1470 <__Size_Of_SDRAM-0x9390>
    146c:	2c000001 	sltiu	zero,zero,1
    1470:	01000001 	movf	zero,t0,$fcc0
    1474:	00005400 	sll	t2,zero,0x10
    1478:	00000000 	nop
    147c:	01640000 	0x1640000
    1480:	01800000 	0x1800000
    1484:	00010000 	sll	zero,at,0x0
    1488:	00000052 	0x52
    148c:	00000000 	nop
    1490:	00018800 	sll	s1,at,0x0
    1494:	0001d000 	sll	k0,at,0x0
    1498:	55000100 	0x55000100
    149c:	00000200 	sll	zero,zero,0x8
    14a0:	00000200 	sll	zero,zero,0x8
    14a4:	00550001 	movt	zero,v0,$fcc5
    14a8:	00000000 	nop
    14ac:	9c000000 	0x9c000000
    14b0:	bc000001 	cache	0x0,1(zero)
    14b4:	01000001 	movf	zero,t0,$fcc0
    14b8:	01e05200 	0x1e05200
    14bc:	02000000 	0x2000000
    14c0:	00010000 	sll	zero,at,0x0
    14c4:	00000052 	0x52
    14c8:	00000000 	nop
    14cc:	0001b400 	sll	s6,at,0x10
    14d0:	0001bc00 	sll	s7,at,0x10
    14d4:	55000100 	0x55000100
    14d8:	000001d0 	0x1d0
    14dc:	00000200 	sll	zero,zero,0x8
    14e0:	00550001 	movt	zero,v0,$fcc5
	...
    14ec:	04000002 	bltz	zero,14f8 <__Size_Of_SDRAM-0x9308>
    14f0:	01000002 	0x1000002
    14f4:	02046d00 	0x2046d00
    14f8:	02e80000 	0x2e80000
    14fc:	00030000 	sll	zero,v1,0x0
    1500:	0002908d 	break	0x2,0x242
	...
    150c:	40000002 	mfc0	zero,$0,2
    1510:	01000002 	0x1000002
    1514:	02405400 	0x2405400
    1518:	02c80000 	0x2c80000
    151c:	00010000 	sll	zero,at,0x0
    1520:	0002d460 	0x2d460
    1524:	0002dc00 	sll	k1,v0,0x10
    1528:	60000100 	udi0i	zero,zero,256
	...
    1534:	000002cc 	syscall	0xb
    1538:	000002cc 	syscall	0xb
    153c:	e0520001 	sc	s2,1(v0)
    1540:	e0000002 	sc	zero,2(zero)
    1544:	01000002 	0x1000002
    1548:	00005200 	sll	t2,zero,0x8
    154c:	00000000 	nop
    1550:	02900000 	0x2900000
    1554:	02cc0000 	0x2cc0000
    1558:	00010000 	sll	zero,at,0x0
    155c:	0002d452 	0x2d452
    1560:	0002e000 	sll	gp,v0,0x0
    1564:	52000100 	0x52000100
	...
    1570:	000002f0 	0x2f0
    1574:	000002f4 	0x2f4
    1578:	f46d0001 	sdc1	$f13,1(v1)
    157c:	3c000002 	lui	zero,0x2
    1580:	02000003 	0x2000003
    1584:	00208d00 	0x208d00
    1588:	00000000 	nop
    158c:	f0000000 	madh	zero,zero
    1590:	f8000002 	0xf8000002
    1594:	01000002 	0x1000002
    1598:	030c5400 	0x30c5400
    159c:	031c0000 	0x31c0000
    15a0:	00010000 	sll	zero,at,0x0
    15a4:	00000054 	0x54
    15a8:	00000000 	nop
    15ac:	00030c00 	sll	at,v1,0x10
    15b0:	00032400 	sll	a0,v1,0x10
    15b4:	53000100 	0x53000100
	...
    15c0:	0000030c 	syscall	0xc
    15c4:	00000330 	0x330
    15c8:	00520001 	0x520001
    15cc:	00000000 	nop
    15d0:	3c000000 	lui	zero,0x0
    15d4:	28000003 	slti	zero,zero,3
    15d8:	01000005 	0x1000005
    15dc:	05485400 	0x5485400
    15e0:	05640000 	0x5640000
    15e4:	00010000 	sll	zero,at,0x0
    15e8:	00000054 	0x54
    15ec:	00000000 	nop
    15f0:	00033c00 	sll	a3,v1,0x10
    15f4:	0003ac00 	sll	s5,v1,0x10
    15f8:	55000100 	0x55000100
    15fc:	000003c8 	0x3c8
    1600:	000003d8 	0x3d8
    1604:	14550001 	bne	v0,s5,160c <__Size_Of_SDRAM-0x91f4>
    1608:	1c000004 	bgtz	zero,161c <__Size_Of_SDRAM-0x91e4>
    160c:	01000004 	sllv	zero,zero,t0
    1610:	05545500 	0x5545500
    1614:	055c0000 	0x55c0000
    1618:	00010000 	sll	zero,at,0x0
    161c:	00000055 	0x55
    1620:	00000000 	nop
    1624:	00033c00 	sll	a3,v1,0x10
    1628:	00045800 	sll	t3,a0,0x0
    162c:	56000100 	0x56000100
    1630:	00000484 	0x484
    1634:	0000051c 	0x51c
    1638:	48560001 	cfc2	s6,$0,1
    163c:	64000005 	udi1i	zero,zero,5
    1640:	01000005 	0x1000005
    1644:	00005600 	sll	t2,zero,0x18
    1648:	00000000 	nop
    164c:	03740000 	0x3740000
    1650:	03d00000 	0x3d00000
    1654:	00010000 	sll	zero,at,0x0
    1658:	00000052 	0x52
    165c:	00000000 	nop
    1660:	0003e400 	sll	gp,v1,0x10
    1664:	00044000 	sll	t0,a0,0x0
    1668:	52000100 	0x52000100
    166c:	00000554 	0x554
    1670:	0000055c 	0x55c
    1674:	00520001 	0x520001
    1678:	00000000 	nop
    167c:	54000000 	0x54000000
    1680:	ac000004 	sw	zero,4(zero)
    1684:	01000004 	sllv	zero,zero,t0
    1688:	055c5200 	0x55c5200
    168c:	05640000 	0x5640000
    1690:	00010000 	sll	zero,at,0x0
    1694:	00000052 	0x52
    1698:	00000000 	nop
    169c:	0004dc00 	sll	k1,a0,0x10
    16a0:	00055400 	sll	t2,a1,0x10
    16a4:	52000100 	0x52000100
	...
    16b0:	00000564 	0x564
    16b4:	00000568 	0x568
    16b8:	686d0001 	udi2i	t5,v1,1
    16bc:	b8000005 	swr	zero,5(zero)
    16c0:	03000009 	jalr	zero,t8
    16c4:	00c08d00 	0xc08d00
	...
    16d0:	00000564 	0x564
    16d4:	00000594 	0x594
    16d8:	94540001 	lhu	s4,1(v0)
    16dc:	98000005 	lwr	zero,5(zero)
    16e0:	01000005 	0x1000005
    16e4:	05986100 	0x5986100
    16e8:	05bc0000 	0x5bc0000
    16ec:	00010000 	sll	zero,at,0x0
    16f0:	0005bc52 	0x5bc52
    16f4:	00075400 	sll	t2,a3,0x10
    16f8:	61000100 	udi0i	zero,t0,256
    16fc:	000007a4 	0x7a4
    1700:	000007e4 	0x7e4
    1704:	04610001 	bgez	v1,170c <__Size_Of_SDRAM-0x90f4>
    1708:	28000008 	slti	zero,zero,8
    170c:	01000008 	jr	t0
    1710:	08606100 	j	1818400 <__Size_Of_SDRAM+0x180dc00>
    1714:	09a80000 	j	6a00000 <__Size_Of_SDRAM+0x69f5800>
    1718:	00010000 	sll	zero,at,0x0
    171c:	0009a861 	0x9a861
    1720:	0009ac00 	sll	s5,t1,0x10
    1724:	52000100 	0x52000100
    1728:	000009b0 	0x9b0
    172c:	000009b8 	0x9b8
    1730:	00610001 	movt	zero,v1,$fcc0
    1734:	00000000 	nop
    1738:	64000000 	udi1i	zero,zero,0
    173c:	b4000005 	0xb4000005
    1740:	01000005 	0x1000005
    1744:	05b45500 	0x5b45500
    1748:	07600000 	bltz	k1,174c <__Size_Of_SDRAM-0x90b4>
    174c:	00010000 	sll	zero,at,0x0
    1750:	0007a465 	0x7a465
    1754:	0007d400 	sll	k0,a3,0x10
    1758:	65000100 	udi1i	zero,t0,256
    175c:	00000804 	sllv	at,zero,zero
    1760:	00000828 	0x828
    1764:	60650001 	udi0i	a1,v1,1
    1768:	b8000008 	swr	zero,8(zero)
    176c:	01000009 	jalr	zero,t0
    1770:	00006500 	sll	t4,zero,0x14
    1774:	00000000 	nop
    1778:	05640000 	0x5640000
    177c:	05b40000 	0x5b40000
    1780:	00010000 	sll	zero,at,0x0
    1784:	0005b456 	0x5b456
    1788:	00070000 	sll	zero,a3,0x0
    178c:	62000100 	udi0i	zero,s0,256
    1790:	00000860 	0x860
    1794:	00000880 	sll	at,zero,0x2
    1798:	94620001 	lhu	v0,1(v1)
    179c:	b8000008 	swr	zero,8(zero)
    17a0:	01000009 	jalr	zero,t0
    17a4:	00006200 	sll	t4,zero,0x8
    17a8:	00000000 	nop
    17ac:	05640000 	0x5640000
    17b0:	05b40000 	0x5b40000
    17b4:	00010000 	sll	zero,at,0x0
    17b8:	0005b457 	0x5b457
    17bc:	0007d000 	sll	k0,a3,0x0
    17c0:	66000100 	udi1i	zero,s0,256
    17c4:	00000804 	sllv	at,zero,zero
    17c8:	000009b8 	0x9b8
    17cc:	00660001 	0x660001
    17d0:	00000000 	nop
    17d4:	e4000000 	swc1	$f0,0(zero)
    17d8:	cc000006 	lwc3	$0,6(zero)
    17dc:	01000007 	srav	zero,zero,t0
    17e0:	08046700 	j	119c00 <__Size_Of_SDRAM+0x10f400>
    17e4:	08940000 	j	2500000 <__Size_Of_SDRAM+0x24f5800>
    17e8:	00010000 	sll	zero,at,0x0
    17ec:	00000067 	0x67
    17f0:	00000000 	nop
    17f4:	0006d400 	sll	k0,a2,0x10
    17f8:	0007dc00 	sll	k1,a3,0x10
    17fc:	63000100 	udi0i	zero,t8,256
    1800:	00000804 	sllv	at,zero,zero
    1804:	00000894 	0x894
    1808:	90630001 	lbu	v1,1(v1)
    180c:	98000009 	lwr	zero,9(zero)
    1810:	01000009 	jalr	zero,t0
    1814:	00006300 	sll	t4,zero,0xc
    1818:	00000000 	nop
    181c:	07000000 	bltz	t8,1820 <__Size_Of_SDRAM-0x8fe0>
    1820:	07e00000 	bltz	ra,1824 <__Size_Of_SDRAM-0x8fdc>
    1824:	00010000 	sll	zero,at,0x0
    1828:	00080462 	0x80462
    182c:	00086000 	sll	t4,t0,0x0
    1830:	62000100 	udi0i	zero,s0,256
    1834:	00000880 	sll	at,zero,0x2
    1838:	00000894 	0x894
    183c:	00620001 	0x620001
    1840:	00000000 	nop
    1844:	0c000000 	jal	0 <__Size_Of_SDRAM-0xa800>
    1848:	d8000007 	0xd8000007
    184c:	01000007 	srav	zero,zero,t0
    1850:	08046400 	j	119000 <__Size_Of_SDRAM+0x10e800>
    1854:	08600000 	j	1800000 <__Size_Of_SDRAM+0x17f5800>
    1858:	00010000 	sll	zero,at,0x0
    185c:	00087464 	0x87464
    1860:	00089400 	sll	s2,t0,0x10
    1864:	64000100 	udi1i	zero,zero,256
	...
    1870:	0000074c 	syscall	0x1d
    1874:	000007e8 	0x7e8
    1878:	20600001 	addi	zero,v1,1
    187c:	60000008 	udi0i	zero,zero,8
    1880:	01000008 	jr	t0
    1884:	00006000 	sll	t4,zero,0x0
    1888:	00000000 	nop
    188c:	05cc0000 	0x5cc0000
    1890:	074c0000 	0x74c0000
    1894:	00010000 	sll	zero,at,0x0
    1898:	00080460 	0x80460
    189c:	00082000 	sll	a0,t0,0x0
    18a0:	60000100 	udi0i	zero,zero,256
    18a4:	00000860 	0x860
    18a8:	00000998 	0x998
    18ac:	a0600001 	sb	zero,1(v1)
    18b0:	a8000009 	swl	zero,9(zero)
    18b4:	01000009 	jalr	zero,t0
    18b8:	00006000 	sll	t4,zero,0x0
    18bc:	00000000 	nop
    18c0:	05e00000 	bltz	t7,18c4 <__Size_Of_SDRAM-0x8f3c>
    18c4:	06d40000 	0x6d40000
    18c8:	00010000 	sll	zero,at,0x0
    18cc:	00075463 	0x75463
    18d0:	00075c00 	sll	t3,a3,0x10
    18d4:	61000100 	udi0i	zero,t0,256
    18d8:	0000075c 	0x75c
    18dc:	00000760 	0x760
    18e0:	60520001 	udi0i	s2,v0,1
    18e4:	e4000007 	swc1	$f0,7(zero)
    18e8:	01000007 	srav	zero,zero,t0
    18ec:	08286100 	j	a18400 <__Size_Of_SDRAM+0xa0dc00>
    18f0:	08600000 	j	1800000 <__Size_Of_SDRAM+0x17f5800>
    18f4:	00010000 	sll	zero,at,0x0
    18f8:	00089461 	0x89461
    18fc:	00099000 	sll	s2,t1,0x0
    1900:	63000100 	udi0i	zero,t8,256
	...
    1910:	00000004 	sllv	zero,zero,zero
    1914:	046d0001 	0x46d0001
    1918:	98000000 	lwr	zero,0(zero)
    191c:	03000008 	jr	t8
    1920:	01908d00 	0x1908d00
	...
    1930:	00000058 	0x58
    1934:	00540001 	movf	zero,v0,$fcc5
	...
    1940:	50000000 	0x50000000
    1944:	01000000 	0x1000000
    1948:	00505500 	0x505500
    194c:	00640000 	0x640000
    1950:	00010000 	sll	zero,at,0x0
    1954:	00006452 	0x6452
    1958:	00009400 	sll	s2,zero,0x10
    195c:	55000100 	0x55000100
    1960:	00000094 	0x94
    1964:	000000a8 	0xa8
    1968:	c0520001 	ll	s2,1(v0)
    196c:	f0000000 	madh	zero,zero
    1970:	01000000 	0x1000000
    1974:	010c5200 	0x10c5200
    1978:	01440000 	0x1440000
    197c:	00010000 	sll	zero,at,0x0
    1980:	0002e852 	0x2e852
    1984:	00031000 	sll	v0,v1,0x0
    1988:	52000100 	0x52000100
    198c:	00000320 	0x320
    1990:	00000338 	0x338
    1994:	48520001 	cfc2	s2,$0,1
    1998:	60000003 	udi0i	zero,zero,3
    199c:	01000003 	0x1000003
    19a0:	037c5200 	0x37c5200
    19a4:	03cc0000 	0x3cc0000
    19a8:	00010000 	sll	zero,at,0x0
    19ac:	00041052 	0x41052
    19b0:	00041800 	sll	v1,a0,0x0
    19b4:	52000100 	0x52000100
    19b8:	00000428 	0x428
    19bc:	00000434 	0x434
    19c0:	34520001 	ori	s2,v0,0x1
    19c4:	38000004 	xori	zero,zero,0x4
    19c8:	01000004 	sllv	zero,zero,t0
    19cc:	04385300 	0x4385300
    19d0:	054c0000 	0x54c0000
    19d4:	00010000 	sll	zero,at,0x0
    19d8:	00057052 	0x57052
    19dc:	0005d800 	sll	k1,a1,0x0
    19e0:	52000100 	0x52000100
    19e4:	00000758 	0x758
    19e8:	0000075c 	0x75c
    19ec:	88520001 	lwl	s2,1(v0)
    19f0:	90000007 	lbu	zero,7(zero)
    19f4:	01000007 	srav	zero,zero,t0
    19f8:	07a05200 	bltz	sp,161fc <__Size_Of_SDRAM+0xb9fc>
    19fc:	07a80000 	0x7a80000
    1a00:	00010000 	sll	zero,at,0x0
    1a04:	0007b852 	0x7b852
    1a08:	0007c000 	sll	t8,a3,0x0
    1a0c:	52000100 	0x52000100
    1a10:	000007c8 	0x7c8
    1a14:	000007d0 	0x7d0
    1a18:	20520001 	addi	s2,v0,1
    1a1c:	30000008 	andi	zero,zero,0x8
    1a20:	01000008 	jr	t0
    1a24:	08305300 	j	c14c00 <__Size_Of_SDRAM+0xc0a400>
    1a28:	08500000 	j	1400000 <__Size_Of_SDRAM+0x13f5800>
    1a2c:	00010000 	sll	zero,at,0x0
    1a30:	00086052 	0x86052
    1a34:	00087800 	sll	t7,t0,0x0
    1a38:	52000100 	0x52000100
    1a3c:	00000890 	0x890
    1a40:	00000898 	0x898
    1a44:	00520001 	0x520001
	...
    1a50:	50000000 	0x50000000
    1a54:	01000000 	0x1000000
    1a58:	00505600 	0x505600
    1a5c:	008c0000 	0x8c0000
    1a60:	00010000 	sll	zero,at,0x0
    1a64:	00008c60 	0x8c60
    1a68:	00009400 	sll	s2,zero,0x10
    1a6c:	56000100 	0x56000100
    1a70:	00000094 	0x94
    1a74:	0000024c 	syscall	0x9
    1a78:	4c600001 	0x4c600001
    1a7c:	74000002 	jalx	8 <__Size_Of_SDRAM-0xa7f8>
    1a80:	01000002 	0x1000002
    1a84:	02746200 	0x2746200
    1a88:	06b80000 	0x6b80000
    1a8c:	00010000 	sll	zero,at,0x0
    1a90:	0006b860 	0x6b860
    1a94:	0006e000 	sll	gp,a2,0x0
    1a98:	61000100 	udi0i	zero,t0,256
    1a9c:	000006e0 	0x6e0
    1aa0:	00000728 	0x728
    1aa4:	28600001 	slti	zero,v1,1
    1aa8:	50000007 	0x50000007
    1aac:	01000007 	srav	zero,zero,t0
    1ab0:	07506100 	bltzal	k0,19eb4 <__Size_Of_SDRAM+0xf6b4>
    1ab4:	08980000 	j	2600000 <__Size_Of_SDRAM+0x25f5800>
    1ab8:	00010000 	sll	zero,at,0x0
    1abc:	00000060 	0x60
	...
    1ac8:	00005000 	sll	t2,zero,0x0
    1acc:	57000100 	0x57000100
    1ad0:	00000050 	0x50
    1ad4:	00000084 	0x84
    1ad8:	84620001 	lh	v0,1(v1)
    1adc:	94000000 	lhu	zero,0(zero)
    1ae0:	01000000 	0x1000000
    1ae4:	00945700 	0x945700
    1ae8:	02480000 	0x2480000
    1aec:	00010000 	sll	zero,at,0x0
    1af0:	00024862 	0x24862
    1af4:	00027800 	sll	t7,v0,0x0
    1af8:	63000100 	udi0i	zero,t8,256
    1afc:	00000278 	0x278
    1b00:	00000898 	0x898
    1b04:	00620001 	0x620001
    1b08:	00000000 	nop
    1b0c:	44000000 	mfc1	zero,$f0
    1b10:	88000000 	lwl	zero,0(zero)
    1b14:	01000000 	0x1000000
    1b18:	00946100 	0x946100
    1b1c:	00c80000 	0xc80000
    1b20:	00010000 	sll	zero,at,0x0
    1b24:	0000c861 	0xc861
    1b28:	00010400 	sll	zero,at,0x10
    1b2c:	65000100 	udi1i	zero,t0,256
    1b30:	00000104 	0x104
    1b34:	0000010c 	syscall	0x4
    1b38:	0c610001 	jal	1840004 <__Size_Of_SDRAM+0x1835804>
    1b3c:	ec000001 	swc3	$0,1(zero)
    1b40:	01000002 	0x1000002
    1b44:	02ec6500 	0x2ec6500
    1b48:	02f80000 	0x2f80000
    1b4c:	00010000 	sll	zero,at,0x0
    1b50:	0002f861 	0x2f861
    1b54:	00044000 	sll	t0,a0,0x0
    1b58:	65000100 	udi1i	zero,t0,256
    1b5c:	00000440 	sll	zero,zero,0x11
    1b60:	00000448 	0x448
    1b64:	48610001 	0x48610001
    1b68:	74000004 	jalx	10 <__Size_Of_SDRAM-0xa7f0>
    1b6c:	01000004 	sllv	zero,zero,t0
    1b70:	04746500 	0x4746500
    1b74:	050c0000 	0x50c0000
    1b78:	00010000 	sll	zero,at,0x0
    1b7c:	00050c53 	0x50c53
    1b80:	00075800 	sll	t3,a3,0x0
    1b84:	65000100 	udi1i	zero,t0,256
    1b88:	00000758 	0x758
    1b8c:	00000788 	0x788
    1b90:	88610001 	lwl	at,1(v1)
    1b94:	34000007 	li	zero,0x7
    1b98:	01000008 	jr	t0
    1b9c:	08346500 	j	d19400 <__Size_Of_SDRAM+0xd0ec00>
    1ba0:	08400000 	j	1000000 <__Size_Of_SDRAM+0xff5800>
    1ba4:	00010000 	sll	zero,at,0x0
    1ba8:	00084061 	0x84061
    1bac:	00086000 	sll	t4,t0,0x0
    1bb0:	65000100 	udi1i	zero,t0,256
    1bb4:	00000860 	0x860
    1bb8:	00000878 	0x878
    1bbc:	78530001 	0x78530001
    1bc0:	90000008 	lbu	zero,8(zero)
    1bc4:	01000008 	jr	t0
    1bc8:	08906500 	j	2419400 <__Size_Of_SDRAM+0x240ec00>
    1bcc:	08980000 	j	2600000 <__Size_Of_SDRAM+0x25f5800>
    1bd0:	00010000 	sll	zero,at,0x0
    1bd4:	00000053 	0x53
    1bd8:	00000000 	nop
    1bdc:	00005800 	sll	t3,zero,0x0
    1be0:	0000b000 	sll	s6,zero,0x0
    1be4:	54000100 	0x54000100
    1be8:	000000c0 	sll	zero,zero,0x3
    1bec:	000000c4 	0xc4
    1bf0:	58540001 	0x58540001
    1bf4:	60000007 	udi0i	zero,zero,7
    1bf8:	01000007 	srav	zero,zero,t0
    1bfc:	00005400 	sll	t2,zero,0x10
    1c00:	00000000 	nop
    1c04:	004c0000 	0x4c0000
    1c08:	00700000 	0x700000
    1c0c:	00010000 	sll	zero,at,0x0
    1c10:	00009467 	0x9467
    1c14:	00089800 	sll	s3,t0,0x0
    1c18:	67000100 	udi1i	zero,t8,256
	...
    1c24:	00000050 	0x50
    1c28:	00000080 	sll	zero,zero,0x2
    1c2c:	94630001 	lhu	v1,1(v1)
    1c30:	d0000000 	0xd0000000
    1c34:	01000000 	0x1000000
    1c38:	00d06300 	0xd06300
    1c3c:	00d40000 	0xd40000
    1c40:	00010000 	sll	zero,at,0x0
    1c44:	0000dc6e 	0xdc6e
    1c48:	0001a400 	sll	s4,at,0x10
    1c4c:	63000100 	udi0i	zero,t8,256
    1c50:	000001a4 	0x1a4
    1c54:	00000234 	0x234
    1c58:	346e0001 	ori	t6,v1,0x1
    1c5c:	4c000002 	mfc3	zero,$0,2
    1c60:	01000002 	0x1000002
    1c64:	024c5200 	0x24c5200
    1c68:	026c0000 	0x26c0000
    1c6c:	00010000 	sll	zero,at,0x0
    1c70:	00027860 	0x27860
    1c74:	0002bc00 	sll	s7,v0,0x10
    1c78:	6e000100 	udi3i	zero,s0,256
    1c7c:	000002bc 	0x2bc
    1c80:	000002dc 	0x2dc
    1c84:	dc610001 	0xdc610001
    1c88:	f8000002 	0xf8000002
    1c8c:	01000002 	0x1000002
    1c90:	02f86e00 	0x2f86e00
    1c94:	03840000 	0x3840000
    1c98:	00010000 	sll	zero,at,0x0
    1c9c:	00039063 	0x39063
    1ca0:	00040800 	sll	at,a0,0x0
    1ca4:	63000100 	udi0i	zero,t8,256
    1ca8:	00000408 	0x408
    1cac:	00000410 	0x410
    1cb0:	106e0001 	beq	v1,t6,1cb8 <__Size_Of_SDRAM-0x8b48>
    1cb4:	a8000004 	swl	zero,4(zero)
    1cb8:	01000004 	sllv	zero,zero,t0
    1cbc:	04a86300 	0x4a86300
    1cc0:	04e40000 	0x4e40000
    1cc4:	00010000 	sll	zero,at,0x0
    1cc8:	0004f454 	0x4f454
    1ccc:	00050c00 	sll	at,a1,0x10
    1cd0:	54000100 	0x54000100
    1cd4:	0000050c 	syscall	0x14
    1cd8:	00000554 	0x554
    1cdc:	54630001 	0x54630001
    1ce0:	70000005 	msubu	zero,zero
    1ce4:	01000005 	0x1000005
    1ce8:	05706e00 	bltzal	t3,1d4ec <__Size_Of_SDRAM+0x12cec>
    1cec:	058c0000 	0x58c0000
    1cf0:	00010000 	sll	zero,at,0x0
    1cf4:	0005a063 	0x5a063
    1cf8:	00063400 	sll	a2,a2,0x10
    1cfc:	63000100 	udi0i	zero,t8,256
    1d00:	00000634 	0x634
    1d04:	000006ac 	0x6ac
    1d08:	ac6e0001 	sw	t6,1(v1)
    1d0c:	b8000006 	swr	zero,6(zero)
    1d10:	01000006 	srlv	zero,zero,t0
    1d14:	06b85200 	0x6b85200
    1d18:	06dc0000 	0x6dc0000
    1d1c:	00010000 	sll	zero,at,0x0
    1d20:	0006e860 	0x6e860
    1d24:	00070400 	sll	zero,a3,0x10
    1d28:	63000100 	udi0i	zero,t8,256
    1d2c:	00000704 	0x704
    1d30:	0000071c 	0x71c
    1d34:	1c6e0001 	0x1c6e0001
    1d38:	28000007 	slti	zero,zero,7
    1d3c:	01000007 	srav	zero,zero,t0
    1d40:	07285200 	0x7285200
    1d44:	074c0000 	0x74c0000
    1d48:	00010000 	sll	zero,at,0x0
    1d4c:	00075860 	0x75860
    1d50:	00085800 	sll	t3,t0,0x0
    1d54:	63000100 	udi0i	zero,t8,256
    1d58:	00000858 	0x858
    1d5c:	00000860 	0x860
    1d60:	606e0001 	udi0i	t6,v1,1
    1d64:	98000008 	lwr	zero,8(zero)
    1d68:	01000008 	jr	t0
    1d6c:	00006300 	sll	t4,zero,0xc
    1d70:	00000000 	nop
    1d74:	01840000 	0x1840000
    1d78:	023c0000 	0x23c0000
    1d7c:	00010000 	sll	zero,at,0x0
    1d80:	00027061 	0x27061
    1d84:	0002bc00 	sll	s7,v0,0x10
    1d88:	61000100 	udi0i	zero,t0,256
    1d8c:	000002dc 	0x2dc
    1d90:	000002ec 	0x2ec
    1d94:	c4610001 	lwc1	$f1,1(v1)
    1d98:	10000003 	b	1da8 <__Size_Of_SDRAM-0x8a58>
    1d9c:	01000004 	sllv	zero,zero,t0
    1da0:	05606100 	bltz	t3,1a1a4 <__Size_Of_SDRAM+0xf9a4>
    1da4:	05700000 	bltzal	t3,1da8 <__Size_Of_SDRAM-0x8a58>
    1da8:	00010000 	sll	zero,at,0x0
    1dac:	0005d861 	0x5d861
    1db0:	0006b400 	sll	s6,a2,0x10
    1db4:	61000100 	udi0i	zero,t0,256
    1db8:	000006e0 	0x6e0
    1dbc:	00000724 	0x724
    1dc0:	50610001 	0x50610001
    1dc4:	58000007 	0x58000007
    1dc8:	01000007 	srav	zero,zero,t0
    1dcc:	07e06100 	bltz	ra,1a1d0 <__Size_Of_SDRAM+0xf9d0>
    1dd0:	080c0000 	j	300000 <__Size_Of_SDRAM+0x2f5800>
    1dd4:	00010000 	sll	zero,at,0x0
    1dd8:	00085061 	0x85061
    1ddc:	00086000 	sll	t4,t0,0x0
    1de0:	61000100 	udi0i	zero,t0,256
    1de4:	00000878 	0x878
    1de8:	00000890 	0x890
    1dec:	00610001 	movt	zero,v1,$fcc0
    1df0:	00000000 	nop
    1df4:	40000000 	mfc0	zero,$0
    1df8:	b8000001 	swr	zero,1(zero)
    1dfc:	01000001 	movf	zero,t0,$fcc0
    1e00:	030c5300 	0x30c5300
    1e04:	03200000 	0x3200000
    1e08:	00010000 	sll	zero,at,0x0
    1e0c:	00033453 	0x33453
    1e10:	00034800 	sll	t1,v1,0x0
    1e14:	53000100 	0x53000100
    1e18:	0000035c 	0x35c
    1e1c:	0000037c 	0x37c
    1e20:	14530001 	bne	v0,s3,1e28 <__Size_Of_SDRAM-0x89d8>
    1e24:	28000004 	slti	zero,zero,4
    1e28:	01000004 	sllv	zero,zero,t0
    1e2c:	05d85300 	0x5d85300
    1e30:	05fc0000 	0x5fc0000
    1e34:	00010000 	sll	zero,at,0x0
    1e38:	00060453 	0x60453
    1e3c:	00060800 	sll	at,a2,0x0
    1e40:	53000100 	0x53000100
    1e44:	0000062c 	0x62c
    1e48:	0000063c 	0x63c
    1e4c:	8c530001 	lw	s3,1(v0)
    1e50:	a0000007 	sb	zero,7(zero)
    1e54:	01000007 	srav	zero,zero,t0
    1e58:	07a45300 	0x7a45300
    1e5c:	07b80000 	0x7b80000
    1e60:	00010000 	sll	zero,at,0x0
    1e64:	0007bc53 	0x7bc53
    1e68:	0007c800 	sll	t9,a3,0x0
    1e6c:	53000100 	0x53000100
    1e70:	000007cc 	syscall	0x1f
    1e74:	000007e0 	0x7e0
    1e78:	0c530001 	jal	14c0004 <__Size_Of_SDRAM+0x14b5804>
    1e7c:	20000008 	addi	zero,zero,8
    1e80:	01000008 	jr	t0
    1e84:	00005300 	sll	t2,zero,0xc
    1e88:	00000000 	nop
    1e8c:	01680000 	0x1680000
    1e90:	019c0000 	0x19c0000
    1e94:	00010000 	sll	zero,at,0x0
    1e98:	0001ac52 	0x1ac52
    1e9c:	0001bc00 	sll	s7,at,0x10
    1ea0:	52000100 	0x52000100
    1ea4:	00000318 	0x318
    1ea8:	00000320 	0x320
    1eac:	40520001 	cfc0	s2,$0,1
    1eb0:	48000003 	mfc2	zero,$0,3
    1eb4:	01000003 	0x1000003
    1eb8:	03685200 	0x3685200
    1ebc:	03700000 	0x3700000
    1ec0:	00010000 	sll	zero,at,0x0
    1ec4:	00037452 	0x37452
    1ec8:	00037c00 	sll	t7,v1,0x10
    1ecc:	52000100 	0x52000100
    1ed0:	00000420 	0x420
    1ed4:	00000428 	0x428
    1ed8:	d8520001 	0xd8520001
    1edc:	14000005 	bnez	zero,1ef4 <__Size_Of_SDRAM-0x890c>
    1ee0:	01000006 	srlv	zero,zero,t0
    1ee4:	062c5200 	0x62c5200
    1ee8:	063c0000 	0x63c0000
    1eec:	00010000 	sll	zero,at,0x0
    1ef0:	0006e852 	0x6e852
    1ef4:	00070400 	sll	zero,a3,0x10
    1ef8:	52000100 	0x52000100
    1efc:	000007b0 	0x7b0
    1f00:	000007b8 	0x7b8
    1f04:	d8520001 	0xd8520001
    1f08:	e4000007 	swc1	$f0,7(zero)
    1f0c:	01000007 	srav	zero,zero,t0
    1f10:	08185200 	j	614800 <__Size_Of_SDRAM+0x60a000>
    1f14:	08200000 	j	800000 <__Size_Of_SDRAM+0x7f5800>
    1f18:	00010000 	sll	zero,at,0x0
    1f1c:	00000052 	0x52
    1f20:	00000000 	nop
    1f24:	00023c00 	sll	a3,v0,0x10
    1f28:	00027000 	sll	t6,v0,0x0
    1f2c:	61000100 	udi0i	zero,t0,256
	...
    1f38:	00000050 	0x50
    1f3c:	0000007c 	0x7c
    1f40:	94640001 	lhu	a0,1(v1)
    1f44:	9c000000 	0x9c000000
    1f48:	01000002 	0x1000002
    1f4c:	02f86400 	0x2f86400
    1f50:	08240000 	j	900000 <__Size_Of_SDRAM+0x8f5800>
    1f54:	00010000 	sll	zero,at,0x0
    1f58:	00084064 	0x84064
    1f5c:	00089800 	sll	s3,t0,0x0
    1f60:	64000100 	udi1i	zero,zero,256
	...
    1f6c:	00000050 	0x50
    1f70:	0000006c 	0x6c
    1f74:	946e0001 	lhu	t6,1(v1)
    1f78:	a4000000 	sh	zero,0(zero)
    1f7c:	01000001 	movf	zero,t0,$fcc0
    1f80:	02f86e00 	0x2f86e00
    1f84:	04080000 	0x4080000
    1f88:	00010000 	sll	zero,at,0x0
    1f8c:	0004106e 	0x4106e
    1f90:	00050000 	sll	zero,a1,0x0
    1f94:	6e000100 	udi3i	zero,s0,256
    1f98:	00000508 	0x508
    1f9c:	00000554 	0x554
    1fa0:	706e0001 	madu	v1,t6
    1fa4:	34000005 	li	zero,0x5
    1fa8:	01000006 	srlv	zero,zero,t0
    1fac:	06e86e00 	0x6e86e00
    1fb0:	07040000 	0x7040000
    1fb4:	00010000 	sll	zero,at,0x0
    1fb8:	0007586e 	0x7586e
    1fbc:	00085800 	sll	t3,t0,0x0
    1fc0:	6e000100 	udi3i	zero,s0,256
    1fc4:	00000860 	0x860
    1fc8:	0000086c 	0x86c
    1fcc:	706e0001 	madu	v1,t6
    1fd0:	98000008 	lwr	zero,8(zero)
    1fd4:	01000008 	jr	t0
    1fd8:	00006e00 	sll	t5,zero,0x18
    1fdc:	00000000 	nop
    1fe0:	01ac0000 	0x1ac0000
    1fe4:	01bc0000 	0x1bc0000
    1fe8:	00010000 	sll	zero,at,0x0
    1fec:	0003f852 	0x3f852
    1ff0:	00041000 	sll	v0,a0,0x0
    1ff4:	52000100 	0x52000100
    1ff8:	0000055c 	0x55c
    1ffc:	00000570 	0x570
    2000:	58520001 	0x58520001
    2004:	60000008 	udi0i	zero,zero,8
    2008:	01000008 	jr	t0
    200c:	00005200 	sll	t2,zero,0x8
    2010:	00000000 	nop
    2014:	00500000 	0x500000
    2018:	00800000 	0x800000
    201c:	00010000 	sll	zero,at,0x0
    2020:	00009463 	0x9463
    2024:	00024400 	sll	t0,v0,0x10
    2028:	63000100 	udi0i	zero,t8,256
    202c:	00000278 	0x278
    2030:	000002f0 	0x2f0
    2034:	f8630001 	0xf8630001
    2038:	84000002 	lh	zero,2(zero)
    203c:	01000005 	0x1000005
    2040:	05d86300 	0x5d86300
    2044:	08980000 	j	2600000 <__Size_Of_SDRAM+0x25f5800>
    2048:	00010000 	sll	zero,at,0x0
    204c:	00000063 	0x63
    2050:	00000000 	nop
    2054:	00003000 	sll	a2,zero,0x0
    2058:	00007400 	sll	t6,zero,0x10
    205c:	66000100 	udi1i	zero,s0,256
    2060:	00000094 	0x94
    2064:	00000898 	0x898
    2068:	00660001 	0x660001
	...
    2074:	0c000000 	jal	0 <__Size_Of_SDRAM-0xa800>
    2078:	01000000 	0x1000000
    207c:	000c5400 	sll	t2,t4,0x10
    2080:	00340000 	0x340000
    2084:	00010000 	sll	zero,at,0x0
    2088:	00000054 	0x54
    208c:	00000000 	nop
    2090:	00000800 	sll	at,zero,0x0
    2094:	00004000 	sll	t0,zero,0x0
    2098:	55000100 	0x55000100
	...
    20a4:	00000008 	jr	zero
    20a8:	00000050 	0x50
    20ac:	00560001 	0x560001
    20b0:	00000000 	nop
    20b4:	60000000 	udi0i	zero,zero,0
    20b8:	64000000 	udi1i	zero,zero,0
    20bc:	01000000 	0x1000000
    20c0:	00646d00 	0x646d00
    20c4:	00b40000 	0xb40000
    20c8:	00020000 	sll	zero,v0,0x0
    20cc:	0000188d 	break	0x0,0x62
    20d0:	00000000 	nop
    20d4:	00600000 	0x600000
    20d8:	00740000 	0x740000
    20dc:	00010000 	sll	zero,at,0x0
    20e0:	00007454 	0x7454
    20e4:	00008000 	sll	s0,zero,0x0
    20e8:	52000100 	0x52000100
    20ec:	00000080 	sll	zero,zero,0x2
    20f0:	0000009c 	0x9c
    20f4:	9c540001 	0x9c540001
    20f8:	ac000000 	sw	zero,0(zero)
    20fc:	01000000 	0x1000000
    2100:	00005200 	sll	t2,zero,0x8
    2104:	00000000 	nop
    2108:	00600000 	0x600000
    210c:	00a40000 	0xa40000
    2110:	00010000 	sll	zero,at,0x0
    2114:	00000055 	0x55
    2118:	00000000 	nop
    211c:	0000b400 	sll	s6,zero,0x10
    2120:	0000b800 	sll	s7,zero,0x0
    2124:	6d000100 	udi3i	zero,t0,256
    2128:	000000b8 	0xb8
    212c:	00000140 	sll	zero,zero,0x5
    2130:	288d0002 	slti	t5,a0,2
	...
    213c:	000000b4 	0xb4
    2140:	000000d8 	0xd8
    2144:	00540001 	movf	zero,v0,$fcc5
    2148:	00000000 	nop
    214c:	b4000000 	0xb4000000
    2150:	c8000000 	lwc2	$0,0(zero)
    2154:	01000000 	0x1000000
    2158:	00c85500 	0xc85500
    215c:	00f40000 	0xf40000
    2160:	00010000 	sll	zero,at,0x0
    2164:	0000fc60 	0xfc60
    2168:	00012400 	sll	a0,at,0x10
    216c:	60000100 	udi0i	zero,zero,256
	...
    2178:	000000b4 	0xb4
    217c:	000000d0 	0xd0
    2180:	d0560001 	0xd0560001
    2184:	f0000000 	madh	zero,zero
    2188:	01000000 	0x1000000
    218c:	00fc6100 	0xfc6100
    2190:	01400000 	0x1400000
    2194:	00010000 	sll	zero,at,0x0
    2198:	00000061 	0x61
    219c:	00000000 	nop
    21a0:	0000b400 	sll	s6,zero,0x10
    21a4:	0000d000 	sll	k0,zero,0x0
    21a8:	57000100 	0x57000100
    21ac:	000000e4 	0xe4
    21b0:	000000fc 	0xfc
    21b4:	00570001 	0x570001
    21b8:	40000001 	mfc0	zero,$0,1
    21bc:	01000001 	movf	zero,t0,$fcc0
    21c0:	00005700 	sll	t2,zero,0x1c
    21c4:	00000000 	nop
    21c8:	00e40000 	0xe40000
    21cc:	00ec0000 	0xec0000
    21d0:	00010000 	sll	zero,at,0x0
    21d4:	0000fc52 	0xfc52
    21d8:	00014000 	sll	t0,at,0x0
    21dc:	52000100 	0x52000100
	...
    21e8:	00000140 	sll	zero,zero,0x5
    21ec:	00000144 	0x144
    21f0:	446d0001 	0x446d0001
    21f4:	9c000001 	0x9c000001
    21f8:	02000002 	0x2000002
    21fc:	00288d00 	0x288d00
    2200:	00000000 	nop
    2204:	40000000 	mfc0	zero,$0
    2208:	60000001 	udi0i	zero,zero,1
    220c:	01000001 	movf	zero,t0,$fcc0
    2210:	01605400 	0x1605400
    2214:	016c0000 	0x16c0000
    2218:	00010000 	sll	zero,at,0x0
    221c:	00016c61 	0x16c61
    2220:	00017400 	sll	t6,at,0x10
    2224:	54000100 	0x54000100
    2228:	00000174 	0x174
    222c:	000001b0 	0x1b0
    2230:	44610001 	0x44610001
    2234:	4c000002 	mfc3	zero,$0,2
    2238:	01000002 	0x1000002
    223c:	02586100 	0x2586100
    2240:	026c0000 	0x26c0000
    2244:	00010000 	sll	zero,at,0x0
    2248:	00026c61 	0x26c61
    224c:	00027000 	sll	t6,v0,0x0
    2250:	54000100 	0x54000100
    2254:	00000270 	0x270
    2258:	0000029c 	0x29c
    225c:	00610001 	movt	zero,v1,$fcc0
    2260:	00000000 	nop
    2264:	40000000 	mfc0	zero,$0
    2268:	60000001 	udi0i	zero,zero,1
    226c:	01000001 	movf	zero,t0,$fcc0
    2270:	01605500 	0x1605500
    2274:	02500000 	0x2500000
    2278:	00010000 	sll	zero,at,0x0
    227c:	00025860 	0x25860
    2280:	00029c00 	sll	s3,v0,0x10
    2284:	60000100 	udi0i	zero,zero,256
	...
    2290:	00000178 	0x178
    2294:	00000258 	0x258
    2298:	68910002 	udi2i	s1,a0,2
    229c:	00000258 	0x258
    22a0:	00000264 	0x264
    22a4:	64530001 	udi1i	s3,v0,1
    22a8:	6c000002 	udi3i	zero,zero,2
    22ac:	02000002 	0x2000002
    22b0:	00689100 	0x689100
    22b4:	00000000 	nop
    22b8:	f8000000 	0xf8000000
    22bc:	14000001 	bnez	zero,22c4 <__Size_Of_SDRAM-0x853c>
    22c0:	01000002 	0x1000002
    22c4:	022c5200 	0x22c5200
    22c8:	02300000 	0x2300000
    22cc:	00010000 	sll	zero,at,0x0
    22d0:	00000052 	0x52
    22d4:	00000000 	nop
    22d8:	0001c000 	sll	t8,at,0x0
    22dc:	00023400 	sll	a2,v0,0x10
    22e0:	53000100 	0x53000100
	...
    22ec:	00000224 	0x224
    22f0:	0000022c 	0x22c
    22f4:	30520001 	andi	s2,v0,0x1
    22f8:	48000002 	mfc2	zero,$0,2
    22fc:	01000002 	0x1000002
    2300:	027c5200 	0x27c5200
    2304:	02840000 	0x2840000
    2308:	00010000 	sll	zero,at,0x0
    230c:	00029452 	0x29452
    2310:	00029c00 	sll	s3,v0,0x10
    2314:	52000100 	0x52000100
	...
    2320:	0000029c 	0x29c
    2324:	000002f0 	0x2f0
    2328:	00540001 	movf	zero,v0,$fcc5
    232c:	00000000 	nop
    2330:	9c000000 	0x9c000000
    2334:	d4000002 	ldc1	$f0,2(zero)
    2338:	01000002 	0x1000002
    233c:	00005500 	sll	t2,zero,0x14
    2340:	00000000 	nop
    2344:	029c0000 	0x29c0000
    2348:	02f00000 	0x2f00000
    234c:	00010000 	sll	zero,at,0x0
    2350:	00000056 	0x56
    2354:	00000000 	nop
    2358:	00029c00 	sll	s3,v0,0x10
    235c:	0002e400 	sll	gp,v0,0x10
    2360:	57000100 	0x57000100
    2364:	000002e4 	0x2e4
    2368:	000002e8 	0x2e8
    236c:	00550001 	movt	zero,v0,$fcc5
	...
    2378:	04000000 	bltz	zero,237c <__Size_Of_SDRAM-0x8484>
    237c:	01000000 	0x1000000
    2380:	00046d00 	sll	t5,a0,0x14
    2384:	00400000 	0x400000
    2388:	00020000 	sll	zero,v0,0x0
    238c:	0000208d 	break	0x0,0x82
	...
    2398:	00300000 	0x300000
    239c:	00010000 	sll	zero,at,0x0
    23a0:	00000054 	0x54
    23a4:	00000000 	nop
    23a8:	00004000 	sll	t0,zero,0x0
    23ac:	00004400 	sll	t0,zero,0x10
    23b0:	6d000100 	udi3i	zero,t0,256
    23b4:	00000044 	0x44
    23b8:	00000080 	sll	zero,zero,0x2
    23bc:	208d0002 	addi	t5,a0,2
	...
    23c8:	00000040 	ssnop
    23cc:	00000070 	0x70
    23d0:	00540001 	movf	zero,v0,$fcc5
    23d4:	00000000 	nop
    23d8:	80000000 	lb	zero,0(zero)
    23dc:	84000000 	lh	zero,0(zero)
    23e0:	01000000 	0x1000000
    23e4:	00846d00 	0x846d00
    23e8:	00a40000 	0xa40000
    23ec:	00020000 	sll	zero,v0,0x0
    23f0:	0000188d 	break	0x0,0x62
    23f4:	00000000 	nop
    23f8:	00800000 	0x800000
    23fc:	008c0000 	0x8c0000
    2400:	00010000 	sll	zero,at,0x0
    2404:	00008c54 	0x8c54
    2408:	0000a400 	sll	s4,zero,0x10
    240c:	8d000200 	lw	zero,512(t0)
    2410:	00000018 	mult	zero,zero
    2414:	00000000 	nop
    2418:	00008000 	sll	s0,zero,0x0
    241c:	00009400 	sll	s2,zero,0x10
    2420:	55000100 	0x55000100
	...
    242c:	000000a4 	0xa4
    2430:	000000a8 	0xa8
    2434:	a86d0001 	swl	t5,1(v1)
    2438:	c8000000 	lwc2	$0,0(zero)
    243c:	02000000 	0x2000000
    2440:	00188d00 	sll	s1,t8,0x14
    2444:	00000000 	nop
    2448:	a4000000 	sh	zero,0(zero)
    244c:	b0000000 	0xb0000000
    2450:	01000000 	0x1000000
    2454:	00b05400 	0xb05400
    2458:	00c80000 	0xc80000
    245c:	00020000 	sll	zero,v0,0x0
    2460:	0000188d 	break	0x0,0x62
    2464:	00000000 	nop
    2468:	00a40000 	0xa40000
    246c:	00b80000 	0xb80000
    2470:	00010000 	sll	zero,at,0x0
    2474:	00000055 	0x55
	...
    2480:	00000400 	sll	zero,zero,0x10
    2484:	6d000100 	udi3i	zero,t0,256
    2488:	00000004 	sllv	zero,zero,zero
    248c:	000000a0 	0xa0
    2490:	208d0002 	addi	t5,a0,2
	...
    24a0:	00000020 	add	zero,zero,zero
    24a4:	20540001 	addi	s4,v0,1
    24a8:	90000000 	lbu	zero,0(zero)
    24ac:	01000000 	0x1000000
    24b0:	00006100 	sll	t4,zero,0x4
	...
    24bc:	00140000 	sll	zero,s4,0x0
    24c0:	00010000 	sll	zero,at,0x0
    24c4:	00001455 	0x1455
    24c8:	00009400 	sll	s2,zero,0x10
    24cc:	60000100 	udi0i	zero,zero,256
	...
    24d8:	000000a0 	0xa0
    24dc:	000000a4 	0xa4
    24e0:	a46d0001 	sh	t5,1(v1)
    24e4:	3c000000 	lui	zero,0x0
    24e8:	02000001 	movf	zero,s0,$fcc0
    24ec:	00208d00 	0x208d00
    24f0:	00000000 	nop
    24f4:	a0000000 	sb	zero,0(zero)
    24f8:	c0000000 	ll	zero,0(zero)
    24fc:	01000000 	0x1000000
    2500:	00c05400 	0xc05400
    2504:	012c0000 	0x12c0000
    2508:	00010000 	sll	zero,at,0x0
    250c:	00000061 	0x61
    2510:	00000000 	nop
    2514:	0000a000 	sll	s4,zero,0x0
    2518:	0000b400 	sll	s6,zero,0x10
    251c:	55000100 	0x55000100
    2520:	000000b4 	0xb4
    2524:	00000130 	0x130
    2528:	00600001 	movf	zero,v1,$fcc0
    252c:	00000000 	nop
    2530:	3c000000 	lui	zero,0x0
    2534:	40000001 	mfc0	zero,$0,1
    2538:	01000001 	movf	zero,t0,$fcc0
    253c:	01406d00 	0x1406d00
    2540:	01680000 	0x1680000
    2544:	00020000 	sll	zero,v0,0x0
    2548:	0000188d 	break	0x0,0x62
    254c:	00000000 	nop
    2550:	013c0000 	0x13c0000
    2554:	01480000 	0x1480000
    2558:	00010000 	sll	zero,at,0x0
    255c:	00000054 	0x54
    2560:	00000000 	nop
    2564:	00013c00 	sll	a3,at,0x10
    2568:	00014c00 	sll	t1,at,0x10
    256c:	55000100 	0x55000100
	...
    2578:	00000168 	0x168
    257c:	0000016c 	0x16c
    2580:	6c6d0001 	udi3i	t5,v1,1
    2584:	94000001 	lhu	zero,1(zero)
    2588:	02000001 	movf	zero,s0,$fcc0
    258c:	00188d00 	sll	s1,t8,0x14
    2590:	00000000 	nop
    2594:	68000000 	udi2i	zero,zero,0
    2598:	74000001 	jalx	4 <__Size_Of_SDRAM-0xa7fc>
    259c:	01000001 	movf	zero,t0,$fcc0
    25a0:	00005400 	sll	t2,zero,0x10
    25a4:	00000000 	nop
    25a8:	01680000 	0x1680000
    25ac:	01780000 	0x1780000
    25b0:	00010000 	sll	zero,at,0x0
    25b4:	00000055 	0x55
    25b8:	00000000 	nop
    25bc:	00019400 	sll	s2,at,0x10
    25c0:	00019800 	sll	s3,at,0x0
    25c4:	6d000100 	udi3i	zero,t0,256
    25c8:	00000198 	0x198
    25cc:	000001c0 	sll	zero,zero,0x7
    25d0:	188d0002 	0x188d0002
	...
    25dc:	00000194 	0x194
    25e0:	000001a0 	0x1a0
    25e4:	00540001 	movf	zero,v0,$fcc5
    25e8:	00000000 	nop
    25ec:	94000000 	lhu	zero,0(zero)
    25f0:	a4000001 	sh	zero,1(zero)
    25f4:	01000001 	movf	zero,t0,$fcc0
    25f8:	00005500 	sll	t2,zero,0x14
    25fc:	00000000 	nop
    2600:	01c00000 	0x1c00000
    2604:	01c40000 	0x1c40000
    2608:	00010000 	sll	zero,at,0x0
    260c:	0001c46d 	0x1c46d
    2610:	0001ec00 	sll	sp,at,0x10
    2614:	8d000200 	lw	zero,512(t0)
    2618:	00000018 	mult	zero,zero
    261c:	00000000 	nop
    2620:	0001c000 	sll	t8,at,0x0
    2624:	0001cc00 	sll	t9,at,0x10
    2628:	54000100 	0x54000100
	...
    2634:	000001c0 	sll	zero,zero,0x7
    2638:	000001d0 	0x1d0
    263c:	00550001 	movt	zero,v0,$fcc5
    2640:	00000000 	nop
    2644:	ec000000 	swc3	$0,0(zero)
    2648:	f0000001 	0xf0000001
    264c:	01000001 	movf	zero,t0,$fcc0
    2650:	01f06d00 	0x1f06d00
    2654:	02180000 	0x2180000
    2658:	00020000 	sll	zero,v0,0x0
    265c:	0000188d 	break	0x0,0x62
    2660:	00000000 	nop
    2664:	01ec0000 	0x1ec0000
    2668:	01f80000 	0x1f80000
    266c:	00010000 	sll	zero,at,0x0
    2670:	00000054 	0x54
    2674:	00000000 	nop
    2678:	0001ec00 	sll	sp,at,0x10
    267c:	0001fc00 	sll	ra,at,0x10
    2680:	55000100 	0x55000100
	...
    268c:	00000218 	0x218
    2690:	0000021c 	0x21c
    2694:	1c6d0001 	0x1c6d0001
    2698:	44000002 	mfc1	zero,$0,2
    269c:	02000002 	0x2000002
    26a0:	00188d00 	sll	s1,t8,0x14
    26a4:	00000000 	nop
    26a8:	18000000 	blez	zero,26ac <__Size_Of_SDRAM-0x8154>
    26ac:	24000002 	li	zero,2
    26b0:	01000002 	0x1000002
    26b4:	00005400 	sll	t2,zero,0x10
    26b8:	00000000 	nop
    26bc:	02180000 	0x2180000
    26c0:	02280000 	0x2280000
    26c4:	00010000 	sll	zero,at,0x0
    26c8:	00000055 	0x55
    26cc:	00000000 	nop
    26d0:	00024400 	sll	t0,v0,0x10
    26d4:	00024800 	sll	t1,v0,0x0
    26d8:	6d000100 	udi3i	zero,t0,256
    26dc:	00000248 	0x248
    26e0:	00000270 	0x270
    26e4:	188d0002 	0x188d0002
	...
    26f0:	00000244 	0x244
    26f4:	00000250 	0x250
    26f8:	00540001 	movf	zero,v0,$fcc5
    26fc:	00000000 	nop
    2700:	44000000 	mfc1	zero,$f0
    2704:	54000002 	0x54000002
    2708:	01000002 	0x1000002
    270c:	00005500 	sll	t2,zero,0x14
    2710:	00000000 	nop
    2714:	02700000 	0x2700000
    2718:	02740000 	0x2740000
    271c:	00010000 	sll	zero,at,0x0
    2720:	0002746d 	0x2746d
    2724:	00029c00 	sll	s3,v0,0x10
    2728:	8d000200 	lw	zero,512(t0)
    272c:	00000018 	mult	zero,zero
    2730:	00000000 	nop
    2734:	00027000 	sll	t6,v0,0x0
    2738:	00027c00 	sll	t7,v0,0x10
    273c:	54000100 	0x54000100
	...
    2748:	00000270 	0x270
    274c:	00000280 	sll	zero,zero,0xa
    2750:	00550001 	movt	zero,v0,$fcc5
    2754:	00000000 	nop
    2758:	9c000000 	0x9c000000
    275c:	a0000002 	sb	zero,2(zero)
    2760:	01000002 	0x1000002
    2764:	02a06d00 	0x2a06d00
    2768:	02c80000 	0x2c80000
    276c:	00020000 	sll	zero,v0,0x0
    2770:	0000188d 	break	0x0,0x62
    2774:	00000000 	nop
    2778:	029c0000 	0x29c0000
    277c:	02a80000 	0x2a80000
    2780:	00010000 	sll	zero,at,0x0
    2784:	00000054 	0x54
    2788:	00000000 	nop
    278c:	00029c00 	sll	s3,v0,0x10
    2790:	0002ac00 	sll	s5,v0,0x10
    2794:	55000100 	0x55000100
	...
    27a0:	000002c8 	0x2c8
    27a4:	000002cc 	syscall	0xb
    27a8:	cc6d0001 	lwc3	$13,1(v1)
    27ac:	f4000002 	sdc1	$f0,2(zero)
    27b0:	02000002 	0x2000002
    27b4:	00188d00 	sll	s1,t8,0x14
    27b8:	00000000 	nop
    27bc:	c8000000 	lwc2	$0,0(zero)
    27c0:	d4000002 	ldc1	$f0,2(zero)
    27c4:	01000002 	0x1000002
    27c8:	00005400 	sll	t2,zero,0x10
    27cc:	00000000 	nop
    27d0:	02c80000 	0x2c80000
    27d4:	02d80000 	0x2d80000
    27d8:	00010000 	sll	zero,at,0x0
    27dc:	00000055 	0x55
    27e0:	00000000 	nop
    27e4:	0002f400 	sll	s8,v0,0x10
    27e8:	0002f800 	sll	ra,v0,0x0
    27ec:	6d000100 	udi3i	zero,t0,256
    27f0:	000002f8 	0x2f8
    27f4:	00000320 	0x320
    27f8:	188d0002 	0x188d0002
	...
    2804:	000002f4 	0x2f4
    2808:	00000300 	sll	zero,zero,0xc
    280c:	00540001 	movf	zero,v0,$fcc5
    2810:	00000000 	nop
    2814:	f4000000 	sdc1	$f0,0(zero)
    2818:	04000002 	bltz	zero,2824 <__Size_Of_SDRAM-0x7fdc>
    281c:	01000003 	0x1000003
    2820:	00005500 	sll	t2,zero,0x14
    2824:	00000000 	nop
    2828:	03200000 	0x3200000
    282c:	03240000 	0x3240000
    2830:	00010000 	sll	zero,at,0x0
    2834:	0003246d 	0x3246d
    2838:	00034c00 	sll	t1,v1,0x10
    283c:	8d000200 	lw	zero,512(t0)
    2840:	00000018 	mult	zero,zero
    2844:	00000000 	nop
    2848:	00032000 	sll	a0,v1,0x0
    284c:	00032c00 	sll	a1,v1,0x10
    2850:	54000100 	0x54000100
	...
    285c:	00000320 	0x320
    2860:	00000330 	0x330
    2864:	00550001 	movt	zero,v0,$fcc5
    2868:	00000000 	nop
    286c:	4c000000 	mfc3	zero,$0
    2870:	50000003 	0x50000003
    2874:	01000003 	0x1000003
    2878:	03506d00 	0x3506d00
    287c:	03780000 	0x3780000
    2880:	00020000 	sll	zero,v0,0x0
    2884:	0000188d 	break	0x0,0x62
    2888:	00000000 	nop
    288c:	034c0000 	0x34c0000
    2890:	03580000 	0x3580000
    2894:	00010000 	sll	zero,at,0x0
    2898:	00000054 	0x54
    289c:	00000000 	nop
    28a0:	00034c00 	sll	t1,v1,0x10
    28a4:	00035c00 	sll	t3,v1,0x10
    28a8:	55000100 	0x55000100
	...
    28b4:	0000034c 	syscall	0xd
    28b8:	00000368 	0x368
    28bc:	00560001 	0x560001
    28c0:	00000000 	nop
    28c4:	4c000000 	mfc3	zero,$0
    28c8:	68000003 	udi2i	zero,zero,3
    28cc:	01000003 	0x1000003
    28d0:	00005700 	sll	t2,zero,0x1c
    28d4:	00000000 	nop
    28d8:	03780000 	0x3780000
    28dc:	037c0000 	0x37c0000
    28e0:	00010000 	sll	zero,at,0x0
    28e4:	00037c6d 	0x37c6d
    28e8:	0003a400 	sll	s4,v1,0x10
    28ec:	8d000200 	lw	zero,512(t0)
    28f0:	00000018 	mult	zero,zero
    28f4:	00000000 	nop
    28f8:	00037800 	sll	t7,v1,0x0
    28fc:	00038400 	sll	s0,v1,0x10
    2900:	54000100 	0x54000100
	...
    290c:	00000378 	0x378
    2910:	00000388 	0x388
    2914:	00550001 	movt	zero,v0,$fcc5
    2918:	00000000 	nop
    291c:	78000000 	0x78000000
    2920:	94000003 	lhu	zero,3(zero)
    2924:	01000003 	0x1000003
    2928:	00005600 	sll	t2,zero,0x18
    292c:	00000000 	nop
    2930:	03780000 	0x3780000
    2934:	03940000 	0x3940000
    2938:	00010000 	sll	zero,at,0x0
    293c:	00000057 	0x57
    2940:	00000000 	nop
    2944:	0003a400 	sll	s4,v1,0x10
    2948:	0003a800 	sll	s5,v1,0x0
    294c:	6d000100 	udi3i	zero,t0,256
    2950:	000003a8 	0x3a8
    2954:	00000418 	0x418
    2958:	188d0002 	0x188d0002
	...
    2964:	00000434 	0x434
    2968:	00000438 	0x438
    296c:	386d0001 	xori	t5,v1,0x1
    2970:	88000004 	lwl	zero,4(zero)
    2974:	02000006 	srlv	zero,zero,s0
    2978:	00308d00 	0x308d00
    297c:	00000000 	nop
    2980:	34000000 	li	zero,0x0
    2984:	68000004 	udi2i	zero,zero,4
    2988:	01000004 	sllv	zero,zero,t0
    298c:	04685400 	0x4685400
    2990:	061c0000 	0x61c0000
    2994:	00010000 	sll	zero,at,0x0
    2998:	00063062 	0x63062
    299c:	00068800 	sll	s1,a2,0x0
    29a0:	62000100 	udi0i	zero,s0,256
	...
    29ac:	00000434 	0x434
    29b0:	0000046c 	0x46c
    29b4:	6c550001 	udi3i	s5,v0,1
    29b8:	20000004 	addi	zero,zero,4
    29bc:	01000006 	srlv	zero,zero,t0
    29c0:	06306100 	bltzal	s1,1adc4 <__Size_Of_SDRAM+0x105c4>
    29c4:	06880000 	0x6880000
    29c8:	00010000 	sll	zero,at,0x0
    29cc:	00000061 	0x61
    29d0:	00000000 	nop
    29d4:	00043400 	sll	a2,a0,0x10
    29d8:	00047c00 	sll	t7,a0,0x10
    29dc:	56000100 	0x56000100
    29e0:	0000047c 	0x47c
    29e4:	00000624 	0x624
    29e8:	30600001 	andi	zero,v1,0x1
    29ec:	88000006 	lwl	zero,6(zero)
    29f0:	01000006 	srlv	zero,zero,t0
    29f4:	00006000 	sll	t4,zero,0x0
    29f8:	00000000 	nop
    29fc:	04fc0000 	0x4fc0000
    2a00:	050c0000 	0x50c0000
    2a04:	00010000 	sll	zero,at,0x0
    2a08:	00051c64 	0x51c64
    2a0c:	00054800 	sll	t1,a1,0x0
    2a10:	64000100 	udi1i	zero,zero,256
    2a14:	00000558 	0x558
    2a18:	000005a8 	0x5a8
    2a1c:	b8640001 	swr	a0,1(v1)
    2a20:	14000005 	bnez	zero,2a38 <__Size_Of_SDRAM-0x7dc8>
    2a24:	01000006 	srlv	zero,zero,t0
    2a28:	06786400 	0x6786400
    2a2c:	06880000 	0x6880000
    2a30:	00010000 	sll	zero,at,0x0
    2a34:	00000064 	0x64
    2a38:	00000000 	nop
    2a3c:	00068800 	sll	s1,a2,0x0
    2a40:	00069400 	sll	s2,a2,0x10
    2a44:	54000100 	0x54000100
	...
    2a50:	00000688 	0x688
    2a54:	00000690 	0x690
    2a58:	00550001 	movt	zero,v0,$fcc5
    2a5c:	00000000 	nop
    2a60:	9c000000 	0x9c000000
    2a64:	a8000006 	swl	zero,6(zero)
    2a68:	01000006 	srlv	zero,zero,t0
    2a6c:	00005400 	sll	t2,zero,0x10
    2a70:	00000000 	nop
    2a74:	069c0000 	0x69c0000
    2a78:	06a40000 	0x6a40000
    2a7c:	00010000 	sll	zero,at,0x0
    2a80:	00000055 	0x55
    2a84:	00000000 	nop
    2a88:	0006b000 	sll	s6,a2,0x0
    2a8c:	0006b400 	sll	s6,a2,0x10
    2a90:	6d000100 	udi3i	zero,t0,256
    2a94:	000006b4 	0x6b4
    2a98:	000006dc 	0x6dc
    2a9c:	188d0002 	0x188d0002
	...
    2aa8:	000006dc 	0x6dc
    2aac:	000006e0 	0x6e0
    2ab0:	e06d0001 	sc	t5,1(v1)
    2ab4:	08000006 	j	18 <__Size_Of_SDRAM-0xa7e8>
    2ab8:	02000007 	srav	zero,zero,s0
    2abc:	00188d00 	sll	s1,t8,0x14
    2ac0:	00000000 	nop
    2ac4:	08000000 	j	0 <__Size_Of_SDRAM-0xa800>
    2ac8:	0c000007 	jal	1c <__Size_Of_SDRAM-0xa7e4>
    2acc:	01000007 	srav	zero,zero,t0
    2ad0:	070c6d00 	0x70c6d00
    2ad4:	072c0000 	0x72c0000
    2ad8:	00020000 	sll	zero,v0,0x0
    2adc:	0000188d 	break	0x0,0x62
    2ae0:	00000000 	nop
    2ae4:	07080000 	0x7080000
    2ae8:	071c0000 	0x71c0000
    2aec:	00010000 	sll	zero,at,0x0
    2af0:	00000054 	0x54
    2af4:	00000000 	nop
    2af8:	00072c00 	sll	a1,a3,0x10
    2afc:	00073000 	sll	a2,a3,0x0
    2b00:	6d000100 	udi3i	zero,t0,256
    2b04:	00000730 	0x730
    2b08:	00000758 	0x758
    2b0c:	188d0002 	0x188d0002
	...
    2b18:	0000072c 	0x72c
    2b1c:	0000073c 	0x73c
    2b20:	00540001 	movf	zero,v0,$fcc5
	...
    2b2c:	04000000 	bltz	zero,2b30 <__Size_Of_SDRAM-0x7cd0>
    2b30:	01000000 	0x1000000
    2b34:	00046d00 	sll	t5,a0,0x14
    2b38:	01800000 	0x1800000
    2b3c:	00030000 	sll	zero,v1,0x0
    2b40:	0000c08d 	break	0x0,0x302
	...
    2b4c:	38000000 	xori	zero,zero,0x0
    2b50:	01000000 	0x1000000
    2b54:	00385400 	0x385400
    2b58:	00540000 	0x540000
    2b5c:	00010000 	sll	zero,at,0x0
    2b60:	00005461 	0x5461
    2b64:	00009c00 	sll	s3,zero,0x10
    2b68:	62000100 	udi0i	zero,s0,256
    2b6c:	0000009c 	0x9c
    2b70:	00000164 	0x164
    2b74:	70610001 	madu	v1,at
    2b78:	78000001 	0x78000001
    2b7c:	01000001 	movf	zero,t0,$fcc0
    2b80:	01786200 	0x1786200
    2b84:	01800000 	0x1800000
    2b88:	00010000 	sll	zero,at,0x0
    2b8c:	00000061 	0x61
    2b90:	00000000 	nop
    2b94:	0000b800 	sll	s7,zero,0x0
    2b98:	00016800 	sll	t5,at,0x0
    2b9c:	60000100 	udi0i	zero,zero,256
	...
    2ba8:	00000068 	0x68
    2bac:	00000070 	0x70
    2bb0:	70520001 	madu	v0,s2
    2bb4:	94000000 	lhu	zero,0(zero)
    2bb8:	02000000 	0x2000000
    2bbc:	94509100 	lhu	s0,-28416(v0)
    2bc0:	c4000000 	lwc1	$f0,0(zero)
    2bc4:	01000000 	0x1000000
    2bc8:	00c45200 	0xc45200
    2bcc:	01700000 	0x1700000
    2bd0:	00020000 	sll	zero,v0,0x0
    2bd4:	01705091 	0x1705091
    2bd8:	01800000 	0x1800000
    2bdc:	00010000 	sll	zero,at,0x0
    2be0:	00000052 	0x52
    2be4:	00000000 	nop
    2be8:	00005800 	sll	t3,zero,0x0
    2bec:	0000b800 	sll	s7,zero,0x0
    2bf0:	60000100 	udi0i	zero,zero,256
    2bf4:	00000124 	0x124
    2bf8:	00000168 	0x168
    2bfc:	70600001 	madu	v1,zero
    2c00:	80000001 	lb	zero,1(zero)
    2c04:	01000001 	movf	zero,t0,$fcc0
    2c08:	00006000 	sll	t4,zero,0x0
    2c0c:	00000000 	nop
    2c10:	009c0000 	0x9c0000
    2c14:	01500000 	0x1500000
    2c18:	00010000 	sll	zero,at,0x0
    2c1c:	00017066 	0x17066
    2c20:	00018000 	sll	s0,at,0x0
    2c24:	66000100 	udi1i	zero,s0,256
	...
    2c30:	00000180 	sll	zero,zero,0x6
    2c34:	00000184 	0x184
    2c38:	846d0001 	lh	t5,1(v1)
    2c3c:	04000001 	bltz	zero,2c44 <__Size_Of_SDRAM-0x7bbc>
    2c40:	03000009 	jalr	zero,t8
    2c44:	00e08d00 	0xe08d00
	...
    2c50:	00000214 	0x214
    2c54:	00000280 	sll	zero,zero,0xa
    2c58:	b8910003 	swr	s1,3(a0)
    2c5c:	0002807f 	0x2807f
    2c60:	00029800 	sll	s3,v0,0x0
    2c64:	57000100 	0x57000100
    2c68:	000002a0 	0x2a0
    2c6c:	00000904 	0x904
    2c70:	b8910003 	swr	s1,3(a0)
    2c74:	0000007f 	0x7f
    2c78:	00000000 	nop
    2c7c:	00021400 	sll	v0,v0,0x10
    2c80:	00022800 	sll	a1,v0,0x0
    2c84:	63000100 	udi0i	zero,t8,256
    2c88:	00000268 	0x268
    2c8c:	00000274 	0x274
    2c90:	74630001 	jalx	18c0004 <__Size_Of_SDRAM+0x18b5804>
    2c94:	f4000002 	sdc1	$f0,2(zero)
    2c98:	01000002 	0x1000002
    2c9c:	03146300 	0x3146300
    2ca0:	06300000 	bltzal	s1,2ca4 <__Size_Of_SDRAM-0x7b5c>
    2ca4:	00010000 	sll	zero,at,0x0
    2ca8:	00063463 	0x63463
    2cac:	00090400 	sll	zero,t1,0x10
    2cb0:	63000100 	udi0i	zero,t8,256
	...
    2cbc:	00000214 	0x214
    2cc0:	000002c0 	sll	zero,zero,0xb
    2cc4:	ba910003 	swr	s1,3(s4)
    2cc8:	0002c07f 	0x2c07f
    2ccc:	0002ec00 	sll	sp,v0,0x10
    2cd0:	8d000200 	lw	zero,512(t0)
    2cd4:	0002ec1a 	0x2ec1a
    2cd8:	00033c00 	sll	a3,v1,0x10
    2cdc:	91000300 	lbu	zero,768(t0)
    2ce0:	033c7fba 	0x33c7fba
    2ce4:	03840000 	0x3840000
    2ce8:	00020000 	sll	zero,v0,0x0
    2cec:	03841a8d 	break	0x384,0x6a
    2cf0:	08800000 	j	2000000 <__Size_Of_SDRAM+0x1ff5800>
    2cf4:	00030000 	sll	zero,v1,0x0
    2cf8:	807fba91 	lb	ra,-17775(v1)
    2cfc:	fc000008 	0xfc000008
    2d00:	02000008 	jr	s0
    2d04:	fc1a8d00 	0xfc1a8d00
    2d08:	04000008 	bltz	zero,2d2c <__Size_Of_SDRAM-0x7ad4>
    2d0c:	03000009 	jalr	zero,t8
    2d10:	7fba9100 	0x7fba9100
	...
    2d1c:	00000214 	0x214
    2d20:	0000021c 	0x21c
    2d24:	30520001 	andi	s2,v0,0x1
    2d28:	54000002 	0x54000002
    2d2c:	01000002 	0x1000002
    2d30:	025c5200 	0x25c5200
    2d34:	02700000 	0x2700000
    2d38:	00010000 	sll	zero,at,0x0
    2d3c:	00027c52 	0x27c52
    2d40:	00029800 	sll	s3,v0,0x0
    2d44:	52000100 	0x52000100
    2d48:	00000630 	0x630
    2d4c:	00000644 	0x644
    2d50:	00520001 	0x520001
    2d54:	00000000 	nop
    2d58:	14000000 	bnez	zero,2d5c <__Size_Of_SDRAM-0x7aa4>
    2d5c:	28000002 	slti	zero,zero,2
    2d60:	01000002 	0x1000002
    2d64:	02f06e00 	0x2f06e00
    2d68:	031c0000 	0x31c0000
    2d6c:	00010000 	sll	zero,at,0x0
    2d70:	0000006e 	0x6e
    2d74:	00000000 	nop
    2d78:	00021400 	sll	v0,v0,0x10
    2d7c:	00027000 	sll	t6,v0,0x0
    2d80:	91000300 	lbu	zero,768(t0)
    2d84:	02707fbc 	0x2707fbc
    2d88:	027c0000 	0x27c0000
    2d8c:	00010000 	sll	zero,at,0x0
    2d90:	00027c52 	0x27c52
    2d94:	00090400 	sll	zero,t1,0x10
    2d98:	91000300 	lbu	zero,768(t0)
    2d9c:	00007fbc 	0x7fbc
    2da0:	00000000 	nop
    2da4:	02280000 	0x2280000
    2da8:	02300000 	0x2300000
    2dac:	00010000 	sll	zero,at,0x0
    2db0:	00023052 	0x23052
    2db4:	00026800 	sll	t5,v0,0x0
    2db8:	63000100 	udi0i	zero,t8,256
    2dbc:	00000630 	0x630
    2dc0:	00000634 	0x634
    2dc4:	00630001 	0x630001
    2dc8:	00000000 	nop
    2dcc:	14000000 	bnez	zero,2dd0 <__Size_Of_SDRAM-0x7a30>
    2dd0:	c0000002 	ll	zero,2(zero)
    2dd4:	01000002 	0x1000002
    2dd8:	031c6e00 	0x31c6e00
    2ddc:	037c0000 	0x37c0000
    2de0:	00010000 	sll	zero,at,0x0
    2de4:	0003846e 	0x3846e
    2de8:	0003cc00 	sll	t9,v1,0x10
    2dec:	6e000100 	udi3i	zero,s0,256
    2df0:	000003e8 	0x3e8
    2df4:	0000042c 	0x42c
    2df8:	346e0001 	ori	t6,v1,0x1
    2dfc:	60000004 	udi0i	zero,zero,4
    2e00:	01000004 	sllv	zero,zero,t0
    2e04:	04686e00 	0x4686e00
    2e08:	04740000 	0x4740000
    2e0c:	00010000 	sll	zero,at,0x0
    2e10:	00047c6e 	0x47c6e
    2e14:	00048800 	sll	s1,a0,0x0
    2e18:	6e000100 	udi3i	zero,s0,256
    2e1c:	00000490 	0x490
    2e20:	000004a0 	0x4a0
    2e24:	a86e0001 	swl	t6,1(v1)
    2e28:	c4000004 	lwc1	$f0,4(zero)
    2e2c:	01000004 	sllv	zero,zero,t0
    2e30:	04cc6e00 	0x4cc6e00
    2e34:	04d80000 	0x4d80000
    2e38:	00010000 	sll	zero,at,0x0
    2e3c:	0004e06e 	0x4e06e
    2e40:	0004ec00 	sll	sp,a0,0x10
    2e44:	6e000100 	udi3i	zero,s0,256
    2e48:	000004f4 	0x4f4
    2e4c:	00000510 	0x510
    2e50:	186e0001 	0x186e0001
    2e54:	34000005 	li	zero,0x5
    2e58:	01000005 	0x1000005
    2e5c:	053c6e00 	0x53c6e00
    2e60:	05480000 	0x5480000
    2e64:	00010000 	sll	zero,at,0x0
    2e68:	0005506e 	0x5506e
    2e6c:	00055c00 	sll	t3,a1,0x10
    2e70:	6e000100 	udi3i	zero,s0,256
    2e74:	00000564 	0x564
    2e78:	00000580 	sll	zero,zero,0x16
    2e7c:	886e0001 	lwl	t6,1(v1)
    2e80:	a4000005 	sh	zero,5(zero)
    2e84:	01000005 	0x1000005
    2e88:	05ac6e00 	0x5ac6e00
    2e8c:	05b80000 	0x5b80000
    2e90:	00010000 	sll	zero,at,0x0
    2e94:	0005c06e 	0x5c06e
    2e98:	0005cc00 	sll	t9,a1,0x10
    2e9c:	6e000100 	udi3i	zero,s0,256
    2ea0:	000005d4 	0x5d4
    2ea4:	000005f0 	0x5f0
    2ea8:	f86e0001 	0xf86e0001
    2eac:	14000005 	bnez	zero,2ec4 <__Size_Of_SDRAM-0x793c>
    2eb0:	01000006 	srlv	zero,zero,t0
    2eb4:	061c6e00 	0x61c6e00
    2eb8:	06280000 	0x6280000
    2ebc:	00010000 	sll	zero,at,0x0
    2ec0:	0006306e 	0x6306e
    2ec4:	00066800 	sll	t5,a2,0x0
    2ec8:	6e000100 	udi3i	zero,s0,256
    2ecc:	00000718 	0x718
    2ed0:	0000072c 	0x72c
    2ed4:	346e0001 	ori	t6,v1,0x1
    2ed8:	58000007 	0x58000007
    2edc:	01000007 	srav	zero,zero,t0
    2ee0:	07bc6e00 	0x7bc6e00
    2ee4:	07d00000 	bltzal	s8,2ee8 <__Size_Of_SDRAM-0x7918>
    2ee8:	00010000 	sll	zero,at,0x0
    2eec:	0007d86e 	0x7d86e
    2ef0:	0008f400 	sll	s8,t0,0x10
    2ef4:	6e000100 	udi3i	zero,s0,256
    2ef8:	000008fc 	0x8fc
    2efc:	00000904 	0x904
    2f00:	006e0001 	0x6e0001
    2f04:	00000000 	nop
    2f08:	d8000000 	0xd8000000
    2f0c:	f4000006 	sdc1	$f0,6(zero)
    2f10:	01000006 	srlv	zero,zero,t0
    2f14:	07185300 	0x7185300
    2f18:	072c0000 	0x72c0000
    2f1c:	00010000 	sll	zero,at,0x0
    2f20:	0008fc53 	0x8fc53
    2f24:	00090400 	sll	zero,t1,0x10
    2f28:	53000100 	0x53000100
	...
    2f34:	00000414 	0x414
    2f38:	00000424 	0x424
    2f3c:	34580001 	ori	t8,v0,0x1
    2f40:	3c000007 	lui	zero,0x7
    2f44:	01000007 	srav	zero,zero,t0
    2f48:	07545800 	0x7545800
    2f4c:	079c0000 	0x79c0000
    2f50:	00010000 	sll	zero,at,0x0
    2f54:	0007b458 	0x7b458
    2f58:	0007d000 	sll	k0,a3,0x0
    2f5c:	58000100 	0x58000100
	...
    2f68:	00000214 	0x214
    2f6c:	0000084c 	syscall	0x21
    2f70:	bc910003 	cache	0x11,3(a0)
    2f74:	00084c7f 	0x84c7f
    2f78:	00086400 	sll	t4,t0,0x10
    2f7c:	8d000200 	lw	zero,512(t0)
    2f80:	0008641c 	0x8641c
    2f84:	00090400 	sll	zero,t1,0x10
    2f88:	91000300 	lbu	zero,768(t0)
    2f8c:	00007fbc 	0x7fbc
    2f90:	00000000 	nop
    2f94:	02140000 	0x2140000
    2f98:	081c0000 	j	700000 <__Size_Of_SDRAM+0x6f5800>
    2f9c:	00020000 	sll	zero,v0,0x0
    2fa0:	081c4091 	j	710244 <__Size_Of_SDRAM+0x705a44>
    2fa4:	083c0000 	j	f00000 <__Size_Of_SDRAM+0xef5800>
    2fa8:	00020000 	sll	zero,v0,0x0
    2fac:	083c208d 	j	f08234 <__Size_Of_SDRAM+0xefda34>
    2fb0:	09040000 	j	4100000 <__Size_Of_SDRAM+0x40f5800>
    2fb4:	00020000 	sll	zero,v0,0x0
    2fb8:	00004091 	0x4091
    2fbc:	00000000 	nop
    2fc0:	00340000 	0x340000
    2fc4:	00380000 	0x380000
    2fc8:	00010000 	sll	zero,at,0x0
    2fcc:	00000054 	0x54
    2fd0:	00000000 	nop
    2fd4:	00003400 	sll	a2,zero,0x10
    2fd8:	00004400 	sll	t0,zero,0x10
    2fdc:	55000100 	0x55000100
	...
    2fe8:	00000064 	0x64
    2fec:	00000068 	0x68
    2ff0:	00540001 	movf	zero,v0,$fcc5
    2ff4:	00000000 	nop
    2ff8:	64000000 	udi1i	zero,zero,0
    2ffc:	84000000 	lh	zero,0(zero)
    3000:	01000000 	0x1000000
    3004:	00005500 	sll	t2,zero,0x14
    3008:	00000000 	nop
    300c:	00d00000 	0xd00000
    3010:	00d40000 	0xd40000
    3014:	00010000 	sll	zero,at,0x0
    3018:	00000054 	0x54
    301c:	00000000 	nop
    3020:	0000d000 	sll	k0,zero,0x0
    3024:	0000dc00 	sll	k1,zero,0x10
    3028:	55000100 	0x55000100
	...
    3034:	000000f4 	0xf4
    3038:	000000f8 	0xf8
    303c:	00540001 	movf	zero,v0,$fcc5
    3040:	00000000 	nop
    3044:	f4000000 	sdc1	$f0,0(zero)
    3048:	08000000 	j	0 <__Size_Of_SDRAM-0xa800>
    304c:	01000001 	movf	zero,t0,$fcc0
    3050:	00005500 	sll	t2,zero,0x14
    3054:	00000000 	nop
    3058:	00e00000 	0xe00000
    305c:	00f00000 	0xf00000
    3060:	00010000 	sll	zero,at,0x0
    3064:	00010454 	0x10454
    3068:	00011400 	sll	v0,at,0x10
    306c:	54000100 	0x54000100
	...
    307c:	00000020 	add	zero,zero,zero
    3080:	00540001 	movf	zero,v0,$fcc5
    3084:	00000000 	nop
    3088:	24000000 	li	zero,0
    308c:	40000000 	mfc0	zero,$0
    3090:	01000000 	0x1000000
    3094:	00005200 	sll	t2,zero,0x8
    3098:	00000000 	nop
    309c:	00480000 	0x480000
    30a0:	004c0000 	0x4c0000
    30a4:	00010000 	sll	zero,at,0x0
    30a8:	00004c6d 	0x4c6d
    30ac:	00014c00 	sll	t1,at,0x10
    30b0:	8d000200 	lw	zero,512(t0)
    30b4:	00000008 	jr	zero
    30b8:	00000000 	nop
    30bc:	00004800 	sll	t1,zero,0x0
    30c0:	00008c00 	sll	s1,zero,0x10
    30c4:	54000100 	0x54000100
	...
    30d0:	0000005c 	0x5c
    30d4:	00000070 	0x70
    30d8:	8c540001 	lw	s4,1(v0)
    30dc:	4c000000 	mfc3	zero,$0
    30e0:	01000001 	movf	zero,t0,$fcc0
    30e4:	00005400 	sll	t2,zero,0x10
    30e8:	00000000 	nop
    30ec:	014c0000 	0x14c0000
    30f0:	01500000 	0x1500000
    30f4:	00010000 	sll	zero,at,0x0
    30f8:	0001506d 	0x1506d
    30fc:	0003d800 	sll	k1,v1,0x0
    3100:	8d000200 	lw	zero,512(t0)
    3104:	00000030 	0x30
    3108:	00000000 	nop
    310c:	00014c00 	sll	t1,at,0x10
    3110:	0001b800 	sll	s7,at,0x0
    3114:	54000100 	0x54000100
    3118:	00000388 	0x388
    311c:	000003b8 	0x3b8
    3120:	00540001 	movf	zero,v0,$fcc5
    3124:	00000000 	nop
    3128:	d0000000 	0xd0000000
    312c:	7c000001 	cmveqz	zero,zero,zero
    3130:	01000002 	0x1000002
    3134:	027c5900 	0x27c5900
    3138:	029c0000 	0x29c0000
    313c:	00010000 	sll	zero,at,0x0
    3140:	00029c6e 	0x29c6e
    3144:	0002e800 	sll	sp,v0,0x0
    3148:	59000100 	0x59000100
    314c:	000002f4 	0x2f4
    3150:	000002f8 	0x2f8
    3154:	fc590001 	0xfc590001
    3158:	30000002 	andi	zero,zero,0x2
    315c:	01000003 	0x1000003
    3160:	03345900 	0x3345900
    3164:	03640000 	0x3640000
    3168:	00010000 	sll	zero,at,0x0
    316c:	00036859 	0x36859
    3170:	00037c00 	sll	t7,v1,0x10
    3174:	59000100 	0x59000100
    3178:	00000380 	sll	zero,zero,0xe
    317c:	00000388 	0x388
    3180:	88590001 	lwl	t9,1(v0)
    3184:	8c000003 	lw	zero,3(zero)
    3188:	01000003 	0x1000003
    318c:	038c6e00 	0x38c6e00
    3190:	03cc0000 	0x3cc0000
    3194:	00010000 	sll	zero,at,0x0
    3198:	0003d059 	0x3d059
    319c:	0003d800 	sll	k1,v1,0x0
    31a0:	59000100 	0x59000100
	...
    31ac:	000003d8 	0x3d8
    31b0:	000003dc 	0x3dc
    31b4:	dc6d0001 	0xdc6d0001
    31b8:	78000003 	0x78000003
    31bc:	02000004 	sllv	zero,zero,s0
    31c0:	00188d00 	sll	s1,t8,0x14
    31c4:	00000000 	nop
    31c8:	70000000 	mad	zero,zero
    31cc:	b4000000 	0xb4000000
    31d0:	01000000 	0x1000000
    31d4:	00005300 	sll	t2,zero,0xc
    31d8:	00000000 	nop
    31dc:	00740000 	0x740000
    31e0:	00800000 	0x800000
    31e4:	00010000 	sll	zero,at,0x0
    31e8:	00009452 	0x9452
    31ec:	00009800 	sll	s3,zero,0x0
    31f0:	52000100 	0x52000100
	...
    31fc:	00000058 	0x58
    3200:	0000005c 	0x5c
    3204:	00540001 	movf	zero,v0,$fcc5
    3208:	00000000 	nop
    320c:	c8000000 	lwc2	$0,0(zero)
    3210:	cc000000 	lwc3	$0,0(zero)
    3214:	01000000 	0x1000000
    3218:	00005400 	sll	t2,zero,0x10
    321c:	00000000 	nop
    3220:	01380000 	0x1380000
    3224:	013c0000 	0x13c0000
    3228:	00010000 	sll	zero,at,0x0
    322c:	00013c6d 	0x13c6d
    3230:	0001c400 	sll	t8,at,0x10
    3234:	8d000200 	lw	zero,512(t0)
    3238:	00000018 	mult	zero,zero
    323c:	00000000 	nop
    3240:	00005400 	sll	t2,zero,0x10
    3244:	00008c00 	sll	s1,zero,0x10
    3248:	54000100 	0x54000100
	...
    3254:	000000d4 	0xd4
    3258:	000000e0 	0xe0
    325c:	e0540001 	sc	s4,1(v0)
    3260:	f4000000 	sdc1	$f0,0(zero)
    3264:	01000000 	0x1000000
    3268:	00005200 	sll	t2,zero,0x8
    326c:	00000000 	nop
    3270:	00d40000 	0xd40000
    3274:	00f40000 	0xf40000
    3278:	00010000 	sll	zero,at,0x0
    327c:	00000055 	0x55
    3280:	00000000 	nop
    3284:	0000d400 	sll	k0,zero,0x10
    3288:	0000f400 	sll	s8,zero,0x10
    328c:	56000100 	0x56000100
	...
    3298:	000000f4 	0xf4
    329c:	000000f8 	0xf8
    32a0:	f86d0001 	0xf86d0001
    32a4:	c8000000 	lwc2	$0,0(zero)
    32a8:	02000006 	srlv	zero,zero,s0
    32ac:	00388d00 	0x388d00
	...
    32b8:	04000007 	bltz	zero,32d8 <__Size_Of_SDRAM-0x7528>
    32bc:	01000007 	srav	zero,zero,t0
    32c0:	07045400 	0x7045400
    32c4:	07100000 	bltzal	t8,32c8 <__Size_Of_SDRAM-0x7538>
    32c8:	00020000 	sll	zero,v0,0x0
    32cc:	0710008d 	bltzal	t8,3504 <__Size_Of_SDRAM-0x72fc>
    32d0:	071c0000 	0x71c0000
    32d4:	00010000 	sll	zero,at,0x0
    32d8:	00071c53 	0x71c53
    32dc:	00072400 	sll	a0,a3,0x10
    32e0:	8d000200 	lw	zero,512(t0)
	...
    32ec:	00072400 	sll	a0,a3,0x10
    32f0:	00078000 	sll	s0,a3,0x0
    32f4:	55000100 	0x55000100
	...
    3300:	00000724 	0x724
    3304:	00000790 	0x790
    3308:	00570001 	0x570001
    330c:	00000000 	nop
    3310:	50000000 	0x50000000
    3314:	6c000007 	udi3i	zero,zero,7
    3318:	01000007 	srav	zero,zero,t0
    331c:	00005200 	sll	t2,zero,0x8
    3320:	00000000 	nop
    3324:	07b80000 	0x7b80000
    3328:	07bc0000 	0x7bc0000
    332c:	00010000 	sll	zero,at,0x0
    3330:	0007bc6d 	0x7bc6d
    3334:	00089800 	sll	s3,t0,0x0
    3338:	8d000200 	lw	zero,512(t0)
    333c:	00000028 	0x28
    3340:	00000000 	nop
    3344:	00001400 	sll	v0,zero,0x10
    3348:	00003000 	sll	a2,zero,0x0
    334c:	52000100 	0x52000100
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
   0:	00000037 	0x37
   4:	00000002 	srl	zero,zero,0x0
   8:	00f10000 	0xf10000
   c:	004c0000 	0x4c0000
  10:	70610000 	mad	v1,at
  14:	616d5f70 	udi0i	t5,t3,24432
  18:	de006e69 	0xde006e69
  1c:	76000000 	jalx	8000000 <__Size_Of_SDRAM+0x7ff5800>
  20:	61757369 	udi0i	s5,t3,29545
  24:	657a696c 	udi1i	k0,t3,26988
  28:	6972705f 	udi2i	s2,t3,28767
  2c:	645f746e 	udi1i	ra,v0,29806
  30:	62617369 	udi0i	at,s3,29545
  34:	0000656c 	0x656c
  38:	18000000 	blez	zero,3c <__Size_Of_SDRAM-0xa7c4>
  3c:	02000001 	movf	zero,s0,$fcc0
  40:	0000f100 	sll	s8,zero,0x4
  44:	000fb600 	sll	s6,t7,0x18
  48:	00015900 	sll	t3,at,0x4
  4c:	61737200 	udi0i	s3,t3,29184
  50:	6d656d5f 	udi3i	a1,t3,27999
  54:	00797063 	0x797063
  58:	00000195 	0x195
  5c:	00706d43 	0x706d43
  60:	000001c4 	0x1c4
  64:	655a7369 	udi1i	k0,t2,29545
  68:	eb006f72 	swc2	$0,28530(t8)
  6c:	53000001 	0x53000001
  70:	705f6275 	0x705f6275
  74:	00024800 	sll	t1,v0,0x0
  78:	64644100 	udi1i	a0,v1,16640
  7c:	a100705f 	sb	zero,28767(t0)
  80:	4d000002 	bc3f	8c <__Size_Of_SDRAM-0xa774>
  84:	705f6c75 	0x705f6c75
  88:	00030a00 	sll	at,v1,0x8
  8c:	76694400 	jalx	9a51000 <__Size_Of_SDRAM+0x9a46800>
  90:	3000705f 	andi	zero,zero,0x705f
  94:	4d000005 	bc3f	ac <__Size_Of_SDRAM-0xa754>
  98:	705f646f 	0x705f646f
  9c:	00067800 	sll	t7,a2,0x0
  a0:	74754f00 	jalx	1d53c00 <__Size_Of_SDRAM+0x1d49400>
  a4:	54747550 	0x54747550
  a8:	6464416f 	udi1i	a0,v1,16751
  ac:	06d20072 	0x6d20072
  b0:	49420000 	0x49420000
  b4:	7465735f 	jalx	195cd7c <__Size_Of_SDRAM+0x195257c>
  b8:	00746962 	0x746962
  bc:	00000706 	0x706
  c0:	635f4942 	udi0i	ra,k0,18754
  c4:	736d6b68 	0x736d6b68
  c8:	74696262 	jalx	1a58988 <__Size_Of_SDRAM+0x1a4e188>
  cc:	00075e00 	sll	t3,a3,0x18
  d0:	5f494200 	0x5f494200
  d4:	625f7369 	udi0i	ra,s2,29545
  d8:	735f7469 	0x735f7469
  dc:	96007465 	lhu	zero,29797(s0)
  e0:	53000007 	0x53000007
  e4:	71006275 	0x71006275
  e8:	41000008 	bc0f	10c <__Size_Of_SDRAM-0xa6f4>
  ec:	d7006464 	ldc1	$f0,25700(t8)
  f0:	69000008 	udi2i	zero,t0,8
  f4:	0074696e 	0x74696e
  f8:	00000901 	0x901
  fc:	75506e49 	jalx	541b924 <__Size_Of_SDRAM+0x5411124>
 100:	6f724674 	udi3i	s2,k1,18036
 104:	6464416d 	udi1i	a0,v1,16749
 108:	097c0072 	j	5f001c8 <__Size_Of_SDRAM+0x5ef59c8>
 10c:	6e490000 	udi3i	t1,s2,0
 110:	46747550 	c1	0x747550
 114:	536d6f72 	0x536d6f72
 118:	00007274 	0x7274
 11c:	4d00000a 	bc3f	148 <__Size_Of_SDRAM-0xa6b8>
 120:	d6006c75 	ldc1	$f0,27765(s0)
 124:	6d00000a 	udi3i	zero,t0,10
 128:	5f65766f 	0x5f65766f
 12c:	0b0e0070 	j	c3801c0 <__Size_Of_SDRAM+0xc3759c0>
 130:	6f4d0000 	udi3i	t5,k0,0
 134:	0ce70064 	jal	39c0190 <__Size_Of_SDRAM+0x39b5990>
 138:	69440000 	udi2i	a0,t2,0
 13c:	0ece0076 	jal	b3801d8 <__Size_Of_SDRAM+0xb3759d8>
 140:	6f6d0000 	udi3i	t5,k1,0
 144:	40006576 	0x40006576
 148:	4500000f 	bc1f	188 <__Size_Of_SDRAM-0xa678>
 14c:	4d5f7078 	0x4d5f7078
 150:	0000646f 	0x646f
 154:	d4000000 	ldc1	$f0,0(zero)
 158:	02000000 	0x2000000
 15c:	0010a700 	sll	s4,s0,0x1c
 160:	00092200 	sll	a0,t1,0x8
 164:	0002d900 	sll	k1,v0,0x4
 168:	706f6300 	0x706f6300
 16c:	656d5f79 	udi1i	t5,t3,24441
 170:	79726f6d 	0x79726f6d
 174:	00030900 	sll	at,v1,0x4
 178:	6d6f6300 	udi3i	t7,t3,25344
 17c:	65726170 	udi1i	s2,t3,24944
 180:	6d656d5f 	udi3i	a1,t3,27999
 184:	0079726f 	0x79726f
 188:	00000343 	sra	zero,zero,0xd
 18c:	6d5f796d 	udi3i	ra,t2,31085
 190:	6f6c6c61 	udi3i	t4,k1,27745
 194:	037b0063 	0x37b0063
 198:	796d0000 	0x796d0000
 19c:	6572665f 	udi1i	s2,t3,26207
 1a0:	03a20065 	0x3a20065
 1a4:	796d0000 	0x796d0000
 1a8:	6572665f 	udi1i	s2,t3,26207
 1ac:	6c6c4165 	udi3i	t4,v1,16741
 1b0:	0003b100 	sll	s6,v1,0x4
 1b4:	61737200 	udi0i	s3,t3,29184
 1b8:	7274735f 	0x7274735f
 1bc:	006e656c 	0x6e656c
 1c0:	000003f4 	0x3f4
 1c4:	5f746573 	0x5f746573
 1c8:	6f6d656d 	udi3i	t5,k1,25965
 1cc:	57007972 	0x57007972
 1d0:	73000004 	msub	t8,zero
 1d4:	5f70696b 	0x5f70696b
 1d8:	73636b70 	0x73636b70
 1dc:	5f31765f 	0x5f31765f
 1e0:	61705f35 	udi0i	s0,t3,24373
 1e4:	6e696464 	udi3i	t1,s3,25700
 1e8:	05510067 	bgezal	t2,388 <__Size_Of_SDRAM-0xa478>
 1ec:	65670000 	udi1i	a3,t3,0
 1f0:	53525f74 	0x53525f74
 1f4:	656d5f41 	udi1i	t5,t3,24385
 1f8:	79726f6d 	0x79726f6d
 1fc:	6f6f705f 	udi3i	t7,k1,28767
 200:	0569006c 	0x569006c
 204:	65730000 	udi1i	s3,t3,0
 208:	69625f74 	udi2i	v0,t3,24436
 20c:	00705f74 	0x705f74
 210:	00000740 	sll	zero,zero,0x1d
 214:	525f6f64 	0x525f6f64
 218:	0f004153 	jal	c01054c <__Size_Of_SDRAM+0xc005d4c>
 21c:	6d000009 	udi3i	zero,t0,9
 220:	726f6d65 	0x726f6d65
 224:	6f705f79 	udi3i	s0,k1,24441
 228:	00006c6f 	0x6c6f
 22c:	19000000 	blez	t0,230 <__Size_Of_SDRAM-0xa5d0>
 230:	02000000 	0x2000000
 234:	0019c900 	sll	t9,t9,0x4
 238:	00005200 	sll	t2,zero,0x8
 23c:	00003f00 	sll	a3,zero,0x1c
 240:	74635f00 	jalx	18d7c00 <__Size_Of_SDRAM+0x18cd400>
 244:	00657079 	0x657079
 248:	00000000 	nop
 24c:	0000001b 	divu	zero,zero,zero
 250:	1a1b0002 	0x1a1b0002
 254:	027e0000 	0x27e0000
 258:	00960000 	0x960000
 25c:	645f0000 	udi1i	ra,v0,0
 260:	6e72706f 	udi3i	s2,s3,28783
 264:	00007874 	0x7874
 268:	19000000 	blez	t0,26c <__Size_Of_SDRAM-0xa594>
 26c:	02000000 	0x2000000
 270:	001cfe00 	sll	ra,gp,0x18
 274:	0000d200 	sll	k0,zero,0x8
 278:	00006f00 	sll	t5,zero,0x1c
 27c:	6d656d00 	udi3i	a1,t3,27904
 280:	00726863 	0x726863
 284:	00000000 	nop
 288:	0000006f 	0x6f
 28c:	1dd00002 	0x1dd00002
 290:	029d0000 	0x29d0000
 294:	009e0000 	0x9e0000
 298:	746f0000 	jalx	1bc0000 <__Size_Of_SDRAM+0x1bb5800>
 29c:	64755f70 	udi1i	s5,v1,24432
 2a0:	79616c65 	0x79616c65
 2a4:	0000cb00 	sll	t9,zero,0xc
 2a8:	746f5f00 	jalx	1bd7c00 <__Size_Of_SDRAM+0x1bcd400>
 2ac:	65675f70 	udi1i	a3,t3,24432
 2b0:	69625f74 	udi2i	v0,t3,24436
 2b4:	f8007374 	0xf8007374
 2b8:	6f000000 	udi3i	zero,t8,0
 2bc:	725f7074 	0x725f7074
 2c0:	00646165 	0x646165
 2c4:	00000134 	0x134
 2c8:	5f70746f 	0x5f70746f
 2cc:	64616572 	udi1i	at,v1,25970
 2d0:	7469625f 	jalx	1a5897c <__Size_Of_SDRAM+0x1a4e17c>
 2d4:	01bc0073 	0x1bc0073
 2d8:	746f0000 	jalx	1bc0000 <__Size_Of_SDRAM+0x1bb5800>
 2dc:	72775f70 	0x72775f70
 2e0:	00657469 	0x657469
 2e4:	00000248 	0x248
 2e8:	5f70746f 	0x5f70746f
 2ec:	74697277 	jalx	1a5c9dc <__Size_Of_SDRAM+0x1a521dc>
 2f0:	69625f65 	udi2i	v0,t3,24421
 2f4:	00007374 	0x7374
 2f8:	25000000 	addiu	zero,t0,0
 2fc:	02000000 	0x2000000
 300:	00206d00 	0x206d00
 304:	00019500 	sll	s2,at,0x14
 308:	00009300 	sll	s2,zero,0xc
 30c:	69727000 	udi2i	s2,t3,28672
 310:	3166746e 	andi	a2,t3,0x746e
 314:	0000e500 	sll	gp,zero,0x14
 318:	69727000 	udi2i	s2,t3,28672
 31c:	0066746e 	0x66746e
 320:	00000000 	nop
 324:	00000188 	0x188
 328:	22020002 	addi	v0,s0,2
 32c:	0a1b0000 	j	86c0000 <__Size_Of_SDRAM+0x86b5800>
 330:	00620000 	0x620000
 334:	73720000 	mad	k1,s2
 338:	74655361 	jalx	1954d84 <__Size_Of_SDRAM+0x194a584>
 33c:	0079654b 	0x79654b
 340:	000000f8 	0xf8
 344:	53617372 	0x53617372
 348:	61447465 	udi0i	a0,t2,29797
 34c:	7e006174 	lbpu.c1	zero,(s0)97
 350:	61000001 	udi0i	zero,t0,1
 354:	65447365 	udi1i	a0,t2,29541
 358:	70797263 	0x70797263
 35c:	01e40074 	0x1e40074
 360:	65610000 	udi1i	at,t3,0
 364:	636e4573 	udi0i	t6,k1,17779
 368:	74707972 	jalx	1c1e5c8 <__Size_Of_SDRAM+0x1c13dc8>
 36c:	00024400 	sll	t0,v0,0x10
 370:	73656100 	0x73656100
 374:	4b746553 	c2	0x1746553
 378:	a4007965 	sh	zero,31077(zero)
 37c:	61000002 	udi0i	zero,t0,2
 380:	65537365 	udi1i	s3,t2,29541
 384:	74614474 	jalx	18511d0 <__Size_Of_SDRAM+0x18469d0>
 388:	03040061 	0x3040061
 38c:	64740000 	udi1i	s4,v1,0
 390:	65447365 	udi1i	a0,t2,29541
 394:	70797263 	0x70797263
 398:	03740074 	0x3740074
 39c:	64740000 	udi1i	s4,v1,0
 3a0:	6e457365 	udi3i	a1,s2,29541
 3a4:	70797263 	0x70797263
 3a8:	03d40074 	0x3d40074
 3ac:	64740000 	udi1i	s4,v1,0
 3b0:	65537365 	udi1i	s3,t2,29541
 3b4:	79654b74 	0x79654b74
 3b8:	00043400 	sll	a2,a0,0x10
 3bc:	65647400 	udi1i	a0,t3,29696
 3c0:	74655373 	jalx	1954dcc <__Size_Of_SDRAM+0x194a5cc>
 3c4:	61746144 	udi0i	s4,t3,24900
 3c8:	00049400 	sll	s2,a0,0x10
 3cc:	73656400 	0x73656400
 3d0:	72636544 	0x72636544
 3d4:	00747079 	0x747079
 3d8:	000004f4 	0x4f4
 3dc:	45736564 	0x45736564
 3e0:	7972636e 	0x7972636e
 3e4:	54007470 	0x54007470
 3e8:	64000005 	udi1i	zero,zero,5
 3ec:	65537365 	udi1i	s3,t2,29541
 3f0:	79654b74 	0x79654b74
 3f4:	0005b400 	sll	s6,a1,0x10
 3f8:	73656400 	0x73656400
 3fc:	44746553 	0x44746553
 400:	00617461 	0x617461
 404:	00000614 	0x614
 408:	74697277 	jalx	1a5c9dc <__Size_Of_SDRAM+0x1a521dc>
 40c:	50544f65 	0x50544f65
 410:	0006a400 	sll	s4,a2,0x10
 414:	61657200 	udi0i	a1,t3,29184
 418:	50544f64 	0x50544f64
 41c:	00073400 	sll	a2,a3,0x10
 420:	696e6900 	udi2i	t6,t3,26880
 424:	616f4274 	udi0i	t7,t3,17012
 428:	63006472 	udi0i	zero,t8,25714
 42c:	69000007 	udi2i	zero,t0,7
 430:	5374696e 	0x5374696e
 434:	61697265 	udi0i	t1,t3,29285
 438:	0790006c 	bltzal	gp,5ec <__Size_Of_SDRAM-0xa214>
 43c:	74720000 	jalx	1c80000 <__Size_Of_SDRAM+0x1c75800>
 440:	73725f6b 	0x73725f6b
 444:	706f5f61 	0x706f5f61
 448:	00081900 	sll	v1,t0,0x4
 44c:	61737200 	udi0i	s3,t3,29184
 450:	72636544 	0x72636544
 454:	00747079 	0x747079
 458:	00000856 	0x856
 45c:	45617372 	0x45617372
 460:	7972636e 	0x7972636e
 464:	93007470 	lbu	zero,29808(t8)
 468:	64000008 	udi1i	zero,zero,8
 46c:	62617369 	udi0i	at,s3,29545
 470:	7254656c 	0x7254656c
 474:	65676769 	udi1i	a3,t3,26473
 478:	08d20072 	j	34801c8 <__Size_Of_SDRAM+0x34759c8>
 47c:	6e650000 	udi3i	a1,s3,0
 480:	656c6261 	udi1i	t4,t3,25185
 484:	67697254 	udi1i	t1,k1,29268
 488:	00726567 	0x726567
 48c:	00000911 	0x911
 490:	69726573 	udi2i	s2,t3,25971
 494:	725f6c61 	0x725f6c61
 498:	00766365 	0x766365
 49c:	00000949 	0x949
 4a0:	69726573 	udi2i	s2,t3,25971
 4a4:	735f6c61 	0x735f6c61
 4a8:	00646e65 	0x646e65
 4ac:	00000000 	nop
 4b0:	0000001a 	div	zero,zero,zero
 4b4:	2c1d0002 	sltiu	sp,zero,2
 4b8:	04f10000 	bgezal	a3,4bc <__Size_Of_SDRAM-0xa344>
 4bc:	029d0000 	0x29d0000
 4c0:	65740000 	udi1i	s4,t3,0
 4c4:	70617473 	0x70617473
 4c8:	00000070 	0x70
 4cc:	00d80000 	0xd80000
 4d0:	00020000 	sll	zero,v0,0x0
 4d4:	00003192 	0x3192
 4d8:	000002a4 	0x2a4
 4dc:	0000006d 	0x6d
 4e0:	5f646573 	0x5f646573
 4e4:	6d6d6f63 	udi3i	t5,t3,28515
 4e8:	5f646e61 	0x5f646e61
 4ec:	72746e65 	0x72746e65
 4f0:	00a50079 	0xa50079
 4f4:	65730000 	udi1i	s3,t3,0
 4f8:	6f635f64 	udi3i	v1,k1,24420
 4fc:	6e616d6d 	udi3i	at,s3,28013
 500:	78655f64 	0x78655f64
 504:	1b007469 	blez	t8,1d6ac <__Size_Of_SDRAM+0x12eac>
 508:	73000001 	madu	t8,zero
 50c:	665f6465 	udi1i	ra,s2,25701
 510:	616d726f 	udi0i	t5,t3,29295
 514:	72705f74 	0x72705f74
 518:	00746e69 	0x746e69
 51c:	0000014d 	break	0x0,0x5
 520:	5f746567 	0x5f746567
 524:	5f646d63 	0x5f646d63
 528:	61746164 	udi0i	s4,t3,24932
 52c:	6e656c5f 	udi3i	a1,s3,27743
 530:	00017600 	sll	t6,at,0x18
 534:	74656700 	jalx	1959c00 <__Size_Of_SDRAM+0x194f400>
 538:	646d635f 	udi1i	t5,v1,25439
 53c:	7461645f 	jalx	185917c <__Size_Of_SDRAM+0x184e97c>
 540:	69755f61 	udi2i	s5,t3,24417
 544:	3233746e 	andi	s3,s1,0x746e
 548:	0001b000 	sll	s6,at,0x0
 54c:	74656700 	jalx	1959c00 <__Size_Of_SDRAM+0x194f400>
 550:	646d635f 	udi1i	t5,v1,25439
 554:	7461645f 	jalx	185917c <__Size_Of_SDRAM+0x184e97c>
 558:	64615f61 	udi1i	at,v1,24417
 55c:	34367264 	ori	s6,at,0x7264
 560:	0001ea00 	sll	sp,at,0x8
 564:	74657300 	jalx	195cc00 <__Size_Of_SDRAM+0x1952400>
 568:	7073725f 	0x7073725f
 56c:	7461645f 	jalx	185917c <__Size_Of_SDRAM+0x184e97c>
 570:	656c5f61 	udi1i	t4,t3,24417
 574:	021c006e 	0x21c006e
 578:	65730000 	udi1i	s3,t3,0
 57c:	73725f74 	0x73725f74
 580:	61645f70 	udi0i	a0,t3,24432
 584:	755f6174 	jalx	57d85d0 <__Size_Of_SDRAM+0x57cddd0>
 588:	33746e69 	andi	s4,k1,0x6e69
 58c:	025f0032 	0x25f0032
 590:	65730000 	udi1i	s3,t3,0
 594:	73725f74 	0x73725f74
 598:	61645f70 	udi0i	a0,t3,24432
 59c:	615f6174 	udi0i	ra,t2,24948
 5a0:	36726464 	ori	s2,s3,0x6464
 5a4:	00000034 	0x34
 5a8:	00570000 	0x570000
 5ac:	00020000 	sll	zero,v0,0x0
 5b0:	00003436 	0x3436
 5b4:	000000d7 	0xd7
 5b8:	00000057 	0x57
 5bc:	5f646573 	0x5f646573
 5c0:	6f697067 	udi3i	t1,k1,28775
 5c4:	696e695f 	udi2i	t6,t3,26975
 5c8:	006a0074 	0x6a0074
 5cc:	50470000 	0x50470000
 5d0:	725f4f49 	0x725f4f49
 5d4:	74657365 	jalx	195cd94 <__Size_Of_SDRAM+0x1952594>
 5d8:	00007d00 	sll	t7,zero,0x14
 5dc:	49504700 	0x49504700
 5e0:	6f745f4f 	udi3i	s4,k1,24399
 5e4:	656c6767 	udi1i	t4,t3,26471
 5e8:	00009000 	sll	s2,zero,0x0
 5ec:	49504700 	0x49504700
 5f0:	75705f4f 	jalx	5c17d3c <__Size_Of_SDRAM+0x5c0d53c>
 5f4:	0065736c 	0x65736c
 5f8:	000000c4 	0xc4
 5fc:	4f495047 	c3	0x1495047
 600:	00000000 	nop
 604:	00003500 	sll	a2,zero,0x14
 608:	0d000200 	jal	4000800 <__Size_Of_SDRAM+0x3ff6000>
 60c:	7f000035 	lhpu.c0	zero,(t8)0
 610:	4c000000 	mfc3	zero,$0
 614:	73000000 	mad	t8,zero
 618:	705f6465 	0x705f6465
 61c:	756d6e69 	jalx	5b5b9a4 <__Size_Of_SDRAM+0x5b511a4>
 620:	70735f78 	0x70735f78
 624:	005f0069 	0x5f0069
 628:	65730000 	udi1i	s3,t3,0
 62c:	69705f64 	udi2i	s0,t3,24420
 630:	78756d6e 	0x78756d6e
 634:	7261755f 	0x7261755f
 638:	00000074 	0x74
 63c:	002f0000 	0x2f0000
 640:	00020000 	sll	zero,v0,0x0
 644:	0000358c 	syscall	0xd6
 648:	0000008b 	0x8b
 64c:	0000004c 	syscall	0x1
 650:	5f646573 	0x5f646573
 654:	5f676e72 	0x5f676e72
 658:	74696e69 	jalx	1a5b9a4 <__Size_Of_SDRAM+0x1a511a4>
 65c:	00005f00 	sll	t3,zero,0x1c
 660:	64657300 	udi1i	a1,v1,29440
 664:	676e725f 	udi1i	t6,k1,29279
 668:	7465675f 	jalx	1959d7c <__Size_Of_SDRAM+0x194f57c>
 66c:	00000000 	nop
 670:	00005400 	sll	t2,zero,0x10
 674:	17000200 	bnez	t8,e78 <__Size_Of_SDRAM-0x9988>
 678:	9b000036 	lwr	zero,54(t8)
 67c:	fa000002 	0xfa000002
 680:	73000000 	mad	t8,zero
 684:	735f6465 	0x735f6465
 688:	725f6366 	0x725f6366
 68c:	00646165 	0x646165
 690:	00000159 	0x159
 694:	5f646573 	0x5f646573
 698:	5f636673 	0x5f636673
 69c:	74697277 	jalx	1a5c9dc <__Size_Of_SDRAM+0x1a521dc>
 6a0:	01c50065 	0x1c50065
 6a4:	65730000 	udi1i	s3,t3,0
 6a8:	66735f64 	udi1i	s3,s3,24420
 6ac:	72655f63 	0x72655f63
 6b0:	00657361 	0x657361
 6b4:	0000022c 	0x22c
 6b8:	5f646573 	0x5f646573
 6bc:	5f636673 	0x5f636673
 6c0:	74696e69 	jalx	1a5b9a4 <__Size_Of_SDRAM+0x1a511a4>
 6c4:	00000000 	nop
 6c8:	00006b00 	sll	t5,zero,0xc
 6cc:	b2000200 	0xb2000200
 6d0:	00000038 	udi0	zero,zero,zero
 6d4:	62000001 	udi0i	zero,s0,1
 6d8:	73000000 	mad	t8,zero
 6dc:	745f6465 	jalx	17d9194 <__Size_Of_SDRAM+0x17ce994>
 6e0:	72656d69 	0x72656d69
 6e4:	6174735f 	udi0i	s4,t3,29535
 6e8:	71007472 	0x71007472
 6ec:	73000000 	mad	t8,zero
 6f0:	745f6465 	jalx	17d9194 <__Size_Of_SDRAM+0x17ce994>
 6f4:	72656d69 	0x72656d69
 6f8:	7465675f 	jalx	1959d7c <__Size_Of_SDRAM+0x194f57c>
 6fc:	6d617473 	udi3i	at,t3,29811
 700:	00800070 	0x800070
 704:	65730000 	udi1i	s3,t3,0
 708:	69745f64 	udi2i	s4,t3,24420
 70c:	5f72656d 	0x5f72656d
 710:	706f7473 	0x706f7473
 714:	00009200 	sll	s2,zero,0x8
 718:	64657300 	udi1i	a1,v1,29440
 71c:	6d69745f 	udi3i	t1,t3,29791
 720:	315f7265 	andi	ra,t2,0x7265
 724:	65645f73 	udi1i	a0,t3,24435
 728:	5f79616c 	0x5f79616c
 72c:	6d617865 	udi3i	at,t3,30821
 730:	00656c70 	0x656c70
 734:	00000000 	nop
 738:	0000009f 	0x9f
 73c:	39b20002 	xori	s2,t5,0x2
 740:	088f0000 	j	23c0000 <__Size_Of_SDRAM+0x23b5800>
 744:	06f50000 	0x6f50000
 748:	74720000 	jalx	1c80000 <__Size_Of_SDRAM+0x1c75800>
 74c:	65675f6b 	udi1i	a3,t3,24427
 750:	17006374 	bnez	t8,19524 <__Size_Of_SDRAM+0xed24>
 754:	72000007 	0x72000007
 758:	705f6b74 	0x705f6b74
 75c:	00637475 	0x637475
 760:	00000739 	0x739
 764:	5f646573 	0x5f646573
 768:	74726175 	jalx	1c985d4 <__Size_Of_SDRAM+0x1c8ddd4>
 76c:	6972775f 	udi2i	s2,t3,30559
 770:	7f006574 	lbpu.c1	zero,(t8)101
 774:	73000007 	0x73000007
 778:	755f6465 	jalx	57d9194 <__Size_Of_SDRAM+0x57ce994>
 77c:	5f747261 	0x5f747261
 780:	64616572 	udi1i	at,v1,25970
 784:	0007c800 	sll	t9,a3,0x0
 788:	64657300 	udi1i	a1,v1,29440
 78c:	7261755f 	0x7261755f
 790:	775f3174 	jalx	d7cc5d0 <__Size_Of_SDRAM+0xd7c1dd0>
 794:	65746972 	udi1i	s4,t3,26994
 798:	00080800 	sll	at,t0,0x0
 79c:	64657300 	udi1i	a1,v1,29440
 7a0:	7261755f 	0x7261755f
 7a4:	725f3174 	0x725f3174
 7a8:	00646165 	0x646165
 7ac:	0000084a 	0x84a
 7b0:	5f646573 	0x5f646573
 7b4:	74726175 	jalx	1c985d4 <__Size_Of_SDRAM+0x1c8ddd4>
 7b8:	696e695f 	udi2i	t6,t3,26975
 7bc:	085f0074 	j	17c01d0 <__Size_Of_SDRAM+0x17b59d0>
 7c0:	61550000 	udi0i	s5,t2,0
 7c4:	65527472 	udi1i	s2,t2,29810
 7c8:	087c0067 	j	1f0019c <__Size_Of_SDRAM+0x1ef599c>
 7cc:	61550000 	udi0i	s5,t2,0
 7d0:	52317472 	0x52317472
 7d4:	00006765 	0x6765
 7d8:	21000000 	addi	zero,t0,0
 7dc:	02000000 	0x2000000
 7e0:	00424100 	0x424100
 7e4:	00005500 	sll	t2,zero,0x14
 7e8:	00004100 	sll	t0,zero,0x4
 7ec:	64657300 	udi1i	a1,v1,29440
 7f0:	6f64775f 	udi3i	a0,k1,30559
 7f4:	65725f67 	udi1i	s2,t3,24423
 7f8:	00746573 	0x746573
 7fc:	00000000 	nop
 800:	000000db 	0xdb
 804:	435c0002 	c0	0x15c0002
 808:	03440000 	0x3440000
 80c:	00fe0000 	0xfe0000
 810:	6e490000 	udi3i	t1,s2,0
 814:	69547469 	udi2i	s4,t2,29801
 818:	0072656d 	0x72656d
 81c:	00000119 	0x119
 820:	74737953 	jalx	1cde54c <__Size_Of_SDRAM+0x1cd3d4c>
 824:	69546d65 	udi2i	s4,t2,28005
 828:	756f656d 	jalx	5bd95b4 <__Size_Of_SDRAM+0x5bcedb4>
 82c:	01370074 	0x1370074
 830:	72610000 	mad	s3,at
 834:	6d5f6d6f 	udi3i	ra,t2,28015
 838:	616c6564 	udi0i	t4,t3,25956
 83c:	01970079 	0x1970079
 840:	72610000 	mad	s3,at
 844:	6d5f6d6f 	udi3i	ra,t2,28015
 848:	5f6b7361 	0x5f6b7361
 84c:	69676572 	udi2i	a3,t3,25970
 850:	72657473 	0x72657473
 854:	0001e100 	sll	gp,at,0x4
 858:	64657300 	udi1i	a1,v1,29440
 85c:	7264645f 	0x7264645f
 860:	696e695f 	udi2i	t6,t3,26975
 864:	01f50074 	0x1f50074
 868:	65730000 	udi1i	s3,t3,0
 86c:	6d635f64 	udi3i	v1,t3,24420
 870:	68635f64 	udi2i	v1,v1,24420
 874:	725f7069 	0x725f7069
 878:	705f7473 	0x705f7473
 87c:	0074736f 	0x74736f
 880:	00000222 	0x222
 884:	74696177 	jalx	1a585dc <__Size_Of_SDRAM+0x1a4dddc>
 888:	6f6f6c5f 	udi3i	t7,k1,27743
 88c:	023f0070 	0x23f0070
 890:	6e650000 	udi3i	a1,s3,0
 894:	656c6261 	udi1i	t4,t3,25185
 898:	6f6c635f 	udi3i	t4,k1,25439
 89c:	ae006b63 	sw	zero,27491(s0)
 8a0:	73000002 	0x73000002
 8a4:	635f6465 	udi0i	ra,k0,25701
 8a8:	5f747265 	0x5f747265
 8ac:	65736572 	udi1i	s3,t3,25970
 8b0:	02c10074 	0x2c10074
 8b4:	65730000 	udi1i	s3,t3,0
 8b8:	6e695f64 	udi3i	t1,s3,24420
 8bc:	635f7469 	udi0i	ra,k0,29801
 8c0:	69666e6f 	udi2i	a2,t3,28271
 8c4:	030a0067 	0x30a0067
 8c8:	636b0000 	udi0i	t3,k1,0
 8cc:	6d5f7570 	udi3i	ra,t2,30064
 8d0:	00031c00 	sll	v1,v1,0x10
 8d4:	73756200 	0x73756200
 8d8:	00006d5f 	0x6d5f
 8dc:	19000000 	blez	t0,8e0 <__Size_Of_SDRAM-0x9f20>
 8e0:	02000000 	0x2000000
 8e4:	0046a000 	0x46a000
 8e8:	00007300 	sll	t6,zero,0xc
 8ec:	00002500 	sll	a0,zero,0x14
 8f0:	72747300 	0x72747300
 8f4:	006e656c 	0x6e656c
 8f8:	00000000 	nop

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	0x1c
   4:	00000002 	srl	zero,zero,0x0
   8:	00040000 	sll	zero,a0,0x0
   c:	00000000 	nop
  10:	a0020150 	sb	v0,336(zero)
  14:	000000c4 	0xc4
	...
  20:	0000001c 	0x1c
  24:	00f10002 	0xf10002
  28:	00040000 	sll	zero,a0,0x0
  2c:	00000000 	nop
  30:	a0020214 	sb	v0,532(zero)
  34:	000015e8 	0x15e8
	...
  40:	0000001c 	0x1c
  44:	10a70002 	beq	a1,a3,50 <__Size_Of_SDRAM-0xa7b0>
  48:	00040000 	sll	zero,a0,0x0
  4c:	00000000 	nop
  50:	a00217fc 	sb	v0,6140(zero)
  54:	000009b8 	0x9b8
	...
  60:	0000001c 	0x1c
  64:	1a1b0002 	0x1a1b0002
  68:	00040000 	sll	zero,a0,0x0
  6c:	00000000 	nop
  70:	a00221b4 	sb	v0,8628(zero)
  74:	00000898 	0x898
	...
  80:	0000001c 	0x1c
  84:	1c990002 	0x1c990002
  88:	00040000 	sll	zero,a0,0x0
  8c:	00000000 	nop
  90:	a0020000 	sb	v0,0(zero)
  94:	00000148 	0x148
	...
  a0:	0000001c 	0x1c
  a4:	1cfe0002 	0x1cfe0002
  a8:	00040000 	sll	zero,a0,0x0
  ac:	00000000 	nop
  b0:	a0022a4c 	sb	v0,10828(zero)
  b4:	00000034 	0x34
	...
  c0:	0000001c 	0x1c
  c4:	1dd00002 	0x1dd00002
  c8:	00040000 	sll	zero,a0,0x0
  cc:	00000000 	nop
  d0:	a0022a80 	sb	v0,10880(zero)
  d4:	000002f0 	0x2f0
	...
  e0:	0000001c 	0x1c
  e4:	206d0002 	addi	t5,v1,2
  e8:	00040000 	sll	zero,a0,0x0
  ec:	00000000 	nop
  f0:	a0022d70 	sb	v0,11632(zero)
  f4:	000000c8 	0xc8
	...
 100:	0000001c 	0x1c
 104:	22020002 	addi	v0,s0,2
 108:	00040000 	sll	zero,a0,0x0
 10c:	00000000 	nop
 110:	a0022e38 	sb	v0,11832(zero)
 114:	00000758 	0x758
	...
 120:	0000001c 	0x1c
 124:	2c1d0002 	sltiu	sp,zero,2
 128:	00040000 	sll	zero,a0,0x0
 12c:	00000000 	nop
 130:	a0023590 	sb	v0,13712(zero)
 134:	00000904 	0x904
	...
 140:	0000001c 	0x1c
 144:	31920002 	andi	s2,t4,0x2
 148:	00040000 	sll	zero,a0,0x0
 14c:	00000000 	nop
 150:	a0023e94 	sb	v0,16020(zero)
 154:	00000134 	0x134
	...
 160:	0000001c 	0x1c
 164:	34360002 	ori	s6,at,0x2
 168:	00040000 	sll	zero,a0,0x0
 16c:	00000000 	nop
 170:	a0023fc8 	sb	v0,16328(zero)
 174:	00000114 	0x114
	...
 180:	0000001c 	0x1c
 184:	350d0002 	ori	t5,t0,0x2
 188:	00040000 	sll	zero,a0,0x0
 18c:	00000000 	nop
 190:	a00240dc 	sb	v0,16604(zero)
 194:	000000d4 	0xd4
	...
 1a0:	0000001c 	0x1c
 1a4:	358c0002 	ori	t4,t4,0x2
 1a8:	00040000 	sll	zero,a0,0x0
 1ac:	00000000 	nop
 1b0:	a00241b0 	sb	v0,16816(zero)
 1b4:	00000058 	0x58
	...
 1c0:	0000001c 	0x1c
 1c4:	36170002 	ori	s7,s0,0x2
 1c8:	00040000 	sll	zero,a0,0x0
 1cc:	00000000 	nop
 1d0:	a0024208 	sb	v0,16904(zero)
 1d4:	00000478 	0x478
	...
 1e0:	0000001c 	0x1c
 1e4:	38b20002 	xori	s2,a1,0x2
 1e8:	00040000 	sll	zero,a0,0x0
 1ec:	00000000 	nop
 1f0:	a0024680 	sb	v0,18048(zero)
 1f4:	000000b4 	0xb4
	...
 200:	0000001c 	0x1c
 204:	39b20002 	xori	s2,t5,0x2
 208:	00040000 	sll	zero,a0,0x0
 20c:	00000000 	nop
 210:	a0024734 	sb	v0,18228(zero)
 214:	000001c4 	0x1c4
	...
 220:	0000001c 	0x1c
 224:	42410002 	c0	0x410002
 228:	00040000 	sll	zero,a0,0x0
 22c:	00000000 	nop
 230:	a00248f8 	sb	v0,18680(zero)
 234:	00000024 	and	zero,zero,zero
	...
 240:	0000001c 	0x1c
 244:	435c0002 	c0	0x15c0002
 248:	00040000 	sll	zero,a0,0x0
 24c:	00000000 	nop
 250:	a002491c 	sb	v0,18716(zero)
 254:	00000898 	0x898
	...
 260:	0000001c 	0x1c
 264:	46a00002 	c1	0xa00002
 268:	00040000 	sll	zero,a0,0x0
 26c:	00000000 	nop
 270:	a00251b4 	sb	v0,20916(zero)
 274:	00000038 	udi0	zero,zero,zero
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f707061 	0x5f707061
   4:	6e69616d 	udi3i	t1,s3,24941
   8:	6f687300 	udi3i	t0,k1,29440
   c:	75207472 	jalx	481d1c8 <__Size_Of_SDRAM+0x48129c8>
  10:	6769736e 	udi1i	t1,k1,29550
  14:	2064656e 	addi	a0,v1,25966
  18:	00746e69 	0x746e69
  1c:	6d6f682f 	udi3i	t7,t3,26671
  20:	6c612f65 	udi3i	at,v1,12133
  24:	686b7865 	udi2i	t3,v1,30821
  28:	73666e2f 	0x73666e2f
  2c:	72656b2f 	0x72656b2f
  30:	2f6c656e 	sltiu	t4,k1,25966
  34:	69726973 	udi2i	s2,t3,26995
  38:	622f7375 	udi0i	t7,s1,29557
  3c:	63746f6f 	udi0i	s4,k1,28527
  40:	2f65646f 	sltiu	a1,k1,25711
  44:	41736952 	0x41736952
  48:	732f7070 	0x732f7070
  4c:	75006372 	jalx	4018dc8 <__Size_Of_SDRAM+0x400e5c8>
  50:	38746e69 	xori	s4,v1,0x6e69
  54:	6e6f6c00 	udi3i	t7,s3,27648
  58:	6f6c2067 	udi3i	t4,k1,8295
  5c:	7520676e 	jalx	4819db8 <__Size_Of_SDRAM+0x480f5b8>
  60:	6769736e 	udi1i	t1,k1,29550
  64:	2064656e 	addi	a0,v1,25966
  68:	00746e69 	0x746e69
  6c:	5f707061 	0x5f707061
  70:	6e69616d 	udi3i	t1,s3,24941
  74:	7500632e 	jalx	4018cb8 <__Size_Of_SDRAM+0x400e4b8>
  78:	6769736e 	udi1i	t1,k1,29550
  7c:	2064656e 	addi	a0,v1,25966
  80:	72616863 	0x72616863
  84:	554e4700 	0x554e4700
  88:	34204320 	ori	zero,at,0x4320
  8c:	372e342e 	ori	t6,t9,0x342e
  90:	67726100 	udi1i	s2,k1,24832
  94:	5f5f0063 	0x5f5f0063
  98:	636e7566 	udi0i	t6,k1,30054
  9c:	76005f5f 	jalx	8017d7c <__Size_Of_SDRAM+0x800d57c>
  a0:	61757369 	udi0i	s5,t3,29545
  a4:	657a696c 	udi1i	k0,t3,26988
  a8:	6972705f 	udi2i	s2,t3,28767
  ac:	645f746e 	udi1i	ra,v0,29806
  b0:	62617369 	udi0i	at,s3,29545
  b4:	6100656c 	udi0i	zero,t0,25964
  b8:	00766772 	0x766772
  bc:	5f766944 	0x5f766944
  c0:	5f5f0070 	0x5f5f0070
  c4:	00776f6c 	0x776f6c
  c8:	69645f5f 	udi2i	a0,t3,24415
  cc:	5f5f0076 	0x5f5f0076
  d0:	746f7571 	jalx	1bdd5c4 <__Size_Of_SDRAM+0x1bd2dc4>
  d4:	5f494200 	0x5f494200
  d8:	62746573 	udi0i	s4,s3,25971
  dc:	5f007469 	0x5f007469
  e0:	0066635f 	0x66635f
  e4:	65766f6d 	udi1i	s6,t3,28525
  e8:	6e6f6c00 	udi3i	t7,s3,27648
  ec:	6f6c2067 	udi3i	t4,k1,8295
  f0:	6920676e 	udi2i	zero,t1,26478
  f4:	7200746e 	0x7200746e
  f8:	6d5f6173 	udi3i	ra,t2,24947
  fc:	70636d65 	0x70636d65
 100:	5f5f0079 	0x5f5f0079
 104:	33646f6d 	andi	a0,k1,0x6f6d
 108:	73690032 	0x73690032
 10c:	6f72655a 	udi3i	s2,k1,25946
 110:	6e5f6d00 	udi3i	ra,s2,27904
 114:	676e654c 	udi1i	t6,k1,25932
 118:	42006874 	c0	0x6874
 11c:	68635f49 	udi2i	v1,v1,24393
 120:	62736d6b 	udi0i	s3,s3,28011
 124:	00746962 	0x746962
 128:	5f646f4d 	0x5f646f4d
 12c:	5f6d0070 	0x5f6d0070
 130:	61566c75 	udi0i	s6,t2,27765
 134:	0065756c 	0x65756c
 138:	6d745f5f 	udi3i	s4,t3,24415
 13c:	6e490070 	udi3i	t1,s2,112
 140:	46747550 	c1	0x747550
 144:	416d6f72 	0x416d6f72
 148:	00726464 	0x726464
 14c:	75506e49 	jalx	541b924 <__Size_Of_SDRAM+0x5411124>
 150:	6f724674 	udi3i	s2,k1,18036
 154:	7274536d 	0x7274536d
 158:	6d657400 	udi3i	a1,t3,29696
 15c:	69620070 	udi2i	v0,t3,112
 160:	6e695f67 	udi3i	t1,s3,24423
 164:	00632e74 	0x632e74
 168:	65766572 	udi1i	s6,t3,25970
 16c:	00657372 	0x657372
 170:	63617073 	udi0i	at,k1,28787
 174:	78450065 	0x78450065
 178:	6f4d5f70 	udi3i	t5,k0,24432
 17c:	754d0064 	jalx	5340190 <__Size_Of_SDRAM+0x5335990>
 180:	00705f6c 	0x705f6c
 184:	61625f5f 	udi0i	v0,t3,24415
 188:	6d006573 	udi3i	zero,t0,25971
 18c:	69536e5f 	udi2i	s3,t2,28255
 190:	63006e67 	udi0i	zero,t8,28263
 194:	6b636568 	udi2i	v1,k1,25960
 198:	7469625f 	jalx	1a5897c <__Size_Of_SDRAM+0x1a4e17c>
 19c:	4e495500 	c3	0x495500
 1a0:	00323354 	0x323354
 1a4:	695f4942 	udi2i	ra,t2,18754
 1a8:	69625f73 	udi2i	v0,t3,24435
 1ac:	65735f74 	udi1i	s3,t3,24436
 1b0:	754f0074 	jalx	53c01d0 <__Size_Of_SDRAM+0x53b59d0>
 1b4:	74755074 	jalx	1d541d0 <__Size_Of_SDRAM+0x1d499d0>
 1b8:	64416f54 	udi1i	at,v0,28500
 1bc:	63007264 	udi0i	zero,t8,29284
 1c0:	79727261 	0x79727261
 1c4:	755f5f00 	jalx	57d7c00 <__Size_Of_SDRAM+0x57cd400>
 1c8:	72657070 	0x72657070
 1cc:	6f687300 	udi3i	t0,k1,29440
 1d0:	69207472 	udi2i	zero,t1,29810
 1d4:	5300746e 	0x5300746e
 1d8:	705f6275 	0x705f6275
 1dc:	685f5f00 	udi2i	ra,v0,24320
 1e0:	00686769 	0x686769
 1e4:	6f6d5f5f 	udi3i	t5,k1,24415
 1e8:	5f5f0064 	0x5f5f0064
 1ec:	32706d74 	andi	s0,s3,0x6d74
 1f0:	67696200 	udi1i	t1,k1,25088
 1f4:	746e695f 	jalx	1b9a57c <__Size_Of_SDRAM+0x1b8fd7c>
 1f8:	715f5f00 	0x715f5f00
 1fc:	33746f75 	andi	s4,k1,0x6f75
 200:	6f6d0032 	udi3i	t5,k1,50
 204:	705f6576 	0x705f6576
 208:	73797300 	0x73797300
 20c:	006d6574 	0x6d6574
 210:	5f646441 	0x5f646441
 214:	6b700070 	udi2i	s0,k1,112
 218:	705f7363 	0x705f7363
 21c:	69646461 	udi2i	a0,t3,25697
 220:	7300676e 	0x7300676e
 224:	6d5f7465 	udi3i	ra,t2,29797
 228:	726f6d65 	0x726f6d65
 22c:	77680079 	jalx	da001e4 <__Size_Of_SDRAM+0xd9f59e4>
 230:	6d5f7573 	udi3i	ra,t2,30067
 234:	00746e6f 	0x746e6f
 238:	5f727470 	0x5f727470
 23c:	00747874 	0x747874
 240:	706d6f63 	0x706d6f63
 244:	5f657261 	0x5f657261
 248:	6f6d656d 	udi3i	t5,k1,25965
 24c:	64007972 	udi1i	zero,zero,31090
 250:	53525f6f 	0x53525f6f
 254:	77680041 	jalx	da00104 <__Size_Of_SDRAM+0xd9f5904>
 258:	735f7573 	0x735f7573
 25c:	625f7465 	udi0i	ra,s2,29797
 260:	756e7469 	jalx	5b9d1a4 <__Size_Of_SDRAM+0x5b929a4>
 264:	6567006d 	udi1i	a3,t3,109
 268:	53525f74 	0x53525f74
 26c:	656d5f41 	udi1i	t5,t3,24385
 270:	79726f6d 	0x79726f6d
 274:	6f6f705f 	udi3i	t7,k1,28767
 278:	616d006c 	udi0i	t5,t3,108
 27c:	64695f78 	udi1i	t1,v1,24440
 280:	73720078 	0x73720078
 284:	74735f61 	jalx	1cd7d84 <__Size_Of_SDRAM+0x1ccd584>
 288:	6e656c72 	udi3i	a1,s3,27762
 28c:	73657200 	0x73657200
 290:	7768006c 	jalx	da001b0 <__Size_Of_SDRAM+0xd9f59b0>
 294:	6d5f7573 	udi3i	ra,t2,30067
 298:	5f746e6f 	0x5f746e6f
 29c:	69676e65 	udi2i	a3,t3,28261
 2a0:	675f656e 	udi1i	ra,k0,25966
 2a4:	6b73006f 	udi2i	s3,k1,111
 2a8:	65707069 	udi1i	s0,t3,28777
 2ac:	6c610064 	udi3i	at,v1,100
 2b0:	695f6f67 	udi2i	ra,t2,28519
 2b4:	756f0064 	jalx	5bc0190 <__Size_Of_SDRAM+0x5bb5990>
 2b8:	74757074 	jalx	1d5c1d0 <__Size_Of_SDRAM+0x1d519d0>
 2bc:	6464615f 	udi1i	a0,v1,24927
 2c0:	32720072 	andi	s2,s3,0x72
 2c4:	616e655f 	udi0i	t6,t3,25951
 2c8:	00656c62 	0x656c62
 2cc:	6f6c6c61 	udi3i	t4,k1,27745
 2d0:	75635f63 	jalx	58d7d8c <__Size_Of_SDRAM+0x58cd58c>
 2d4:	6e657272 	udi3i	a1,s3,29298
 2d8:	74700074 	jalx	1c001d0 <__Size_Of_SDRAM+0x1bf59d0>
 2dc:	75705f72 	jalx	5c17dc8 <__Size_Of_SDRAM+0x5c0d5c8>
 2e0:	6b730062 	udi2i	s3,k1,98
 2e4:	705f7069 	0x705f7069
 2e8:	5f73636b 	0x5f73636b
 2ec:	355f3176 	ori	ra,t2,0x3176
 2f0:	6461705f 	udi1i	at,v1,28767
 2f4:	676e6964 	udi1i	t6,k1,26980
 2f8:	73776800 	0x73776800
 2fc:	756d5f75 	jalx	5b57dd4 <__Size_Of_SDRAM+0x5b4d5d4>
 300:	6f6d5f6c 	udi3i	t5,k1,24428
 304:	424e0064 	c0	0x4e0064
 308:	53455459 	0x53455459
 30c:	73776800 	0x73776800
 310:	68635f75 	udi2i	v1,v1,24437
 314:	6f6d5f6b 	udi3i	t5,k1,24427
 318:	655f746e 	udi1i	ra,t2,29806
 31c:	6e69676e 	udi3i	t1,s3,26478
 320:	65725f65 	udi1i	s2,t3,24421
 324:	00796461 	0x796461
 328:	5f727470 	0x5f727470
 32c:	6d003272 	udi3i	zero,t0,12914
 330:	72665f79 	0x72665f79
 334:	62006565 	udi0i	zero,s0,25957
 338:	657a6973 	udi1i	k0,t3,26995
 33c:	74657300 	jalx	195cc00 <__Size_Of_SDRAM+0x1952400>
 340:	7469625f 	jalx	1a5897c <__Size_Of_SDRAM+0x1a4e17c>
 344:	6d00705f 	udi3i	zero,t0,28767
 348:	616d5f79 	udi0i	t5,t3,24441
 34c:	636f6c6c 	udi0i	t7,k1,27756
 350:	72747000 	0x72747000
 354:	6972705f 	udi2i	s2,t3,28767
 358:	726f7700 	0x726f7700
 35c:	73720064 	0x73720064
 360:	656b5f61 	udi1i	t3,t3,24417
 364:	64615f79 	udi1i	at,v1,24441
 368:	62007264 	udi0i	zero,s0,29284
 36c:	755f6769 	jalx	57d9da4 <__Size_Of_SDRAM+0x57cf5a4>
 370:	2e6c6974 	sltiu	t4,s3,26996
 374:	65740063 	udi1i	s4,t3,99
 378:	615f7478 	udi0i	ra,t2,29816
 37c:	00726464 	0x726464
 380:	544e4955 	0x544e4955
 384:	77680038 	jalx	da000e0 <__Size_Of_SDRAM+0xd9f58e0>
 388:	735f7573 	0x735f7573
 38c:	645f7465 	udi1i	ra,v0,29797
 390:	00617461 	0x617461
 394:	6f6c6c61 	udi3i	t4,k1,27745
 398:	6f635f63 	udi3i	v1,k1,24419
 39c:	00746e75 	0x746e75
 3a0:	75737768 	jalx	5cddda0 <__Size_Of_SDRAM+0x5cd35a0>
 3a4:	7465675f 	jalx	1959d7c <__Size_Of_SDRAM+0x194f57c>
 3a8:	7461645f 	jalx	185917c <__Size_Of_SDRAM+0x184e97c>
 3ac:	796d0061 	0x796d0061
 3b0:	6572665f 	udi1i	s2,t3,26207
 3b4:	6c6c4165 	udi3i	t4,v1,16741
 3b8:	706f6300 	0x706f6300
 3bc:	656d5f79 	udi1i	t5,t3,24441
 3c0:	79726f6d 	0x79726f6d
 3c4:	79746300 	0x79746300
 3c8:	632e6570 	udi0i	t6,t9,25968
 3cc:	74635f00 	jalx	18d7c00 <__Size_Of_SDRAM+0x18cd400>
 3d0:	00657079 	0x657079
 3d4:	72707066 	0x72707066
 3d8:	5f006365 	0x5f006365
 3dc:	6975625f 	udi2i	s5,t3,25183
 3e0:	6e69746c 	udi3i	t1,s3,29804
 3e4:	5f61765f 	0x5f61765f
 3e8:	7473696c 	jalx	1cda5b0 <__Size_Of_SDRAM+0x1ccfdb0>
 3ec:	6f645f00 	udi3i	a0,k1,24320
 3f0:	746e7270 	jalx	1b9c9c0 <__Size_Of_SDRAM+0x1b921c0>
 3f4:	69660078 	udi2i	a2,t3,120
 3f8:	73646c65 	0x73646c65
 3fc:	6964007a 	udi2i	a0,t3,122
 400:	72007367 	0x72007367
 404:	736c6165 	0x736c6165
 408:	6977007a 	udi2i	s7,t3,122
 40c:	00687464 	0x687464
 410:	726f6670 	0x726f6670
 414:	6f640077 	udi3i	a0,k1,119
 418:	746e7270 	jalx	1b9c9c0 <__Size_Of_SDRAM+0x1b921c0>
 41c:	00632e78 	0x632e78
 420:	30746d66 	andi	s4,v1,0x6d66
 424:	616c6600 	udi0i	t4,t3,26112
 428:	64007367 	udi1i	zero,zero,29543
 42c:	63657270 	udi0i	a1,k1,29296
 430:	6c667200 	udi3i	a2,v1,29184
 434:	5f006761 	0x5f006761
 438:	5f61765f 	0x5f61765f
 43c:	7473696c 	jalx	1cda5b0 <__Size_Of_SDRAM+0x1ccfdb0>
 440:	67726100 	udi1i	s2,k1,24832
 444:	756e0070 	jalx	5b801c0 <__Size_Of_SDRAM+0x5b759c0>
 448:	7265626d 	0x7265626d
 44c:	736f6e00 	0x736f6e00
 450:	006e6769 	0x6e6769
 454:	6f6c755f 	udi3i	t4,k1,30047
 458:	7300676e 	0x7300676e
 45c:	5f657a69 	0x5f657a69
 460:	656d0074 	udi1i	t5,t3,116
 464:	7268636d 	0x7268636d
 468:	6d00632e 	udi3i	zero,t0,25390
 46c:	68636d65 	udi2i	v1,v1,28005
 470:	76700072 	jalx	9c001c8 <__Size_Of_SDRAM+0x9bf59c8>
 474:	6f006c61 	udi3i	zero,t8,27745
 478:	755f7074 	jalx	57dc1d0 <__Size_Of_SDRAM+0x57d19d0>
 47c:	2e6c6974 	sltiu	t4,s3,26996
 480:	69660063 	udi2i	a2,t3,99
 484:	006c616e 	0x6c616e
 488:	5f70746f 	0x5f70746f
 48c:	64616572 	udi1i	at,v1,25970
 490:	7469625f 	jalx	1a5897c <__Size_Of_SDRAM+0x1a4e17c>
 494:	6f5f0073 	udi3i	ra,k0,115
 498:	675f7074 	udi1i	ra,k0,28788
 49c:	625f7465 	udi0i	ra,s2,29797
 4a0:	00737469 	0x737469
 4a4:	5f70746f 	0x5f70746f
 4a8:	74697277 	jalx	1a5c9dc <__Size_Of_SDRAM+0x1a521dc>
 4ac:	746f0065 	jalx	1bc0194 <__Size_Of_SDRAM+0x1bb5994>
 4b0:	64755f70 	udi1i	s5,v1,24432
 4b4:	79616c65 	0x79616c65
 4b8:	70746f00 	0x70746f00
 4bc:	6165725f 	udi0i	a1,t3,29279
 4c0:	746f0064 	jalx	1bc0190 <__Size_Of_SDRAM+0x1bb5990>
 4c4:	72775f70 	0x72775f70
 4c8:	5f657469 	0x5f657469
 4cc:	73746962 	0x73746962
 4d0:	73666f00 	0x73666f00
 4d4:	75700074 	jalx	5c001d0 <__Size_Of_SDRAM+0x5bf59d0>
 4d8:	00686374 	0x686374
 4dc:	6e697270 	udi3i	t1,s3,29296
 4e0:	632e6674 	udi0i	t6,t9,26228
 4e4:	74757000 	jalx	1d5c000 <__Size_Of_SDRAM+0x1d51800>
 4e8:	00316863 	0x316863
 4ec:	6e697270 	udi3i	t1,s3,29296
 4f0:	00316674 	0x316674
 4f4:	6e697270 	udi3i	t1,s3,29296
 4f8:	61006674 	udi0i	zero,t0,26228
 4fc:	00736772 	0x736772
 500:	656b5f70 	udi1i	t3,t3,24432
 504:	73720079 	0x73720079
 508:	74655361 	jalx	1954d84 <__Size_Of_SDRAM+0x194a584>
 50c:	0079654b 	0x79654b
 510:	73656474 	0x73656474
 514:	72636544 	0x72636544
 518:	00747079 	0x747079
 51c:	73656474 	0x73656474
 520:	7461645f 	jalx	185917c <__Size_Of_SDRAM+0x184e97c>
 524:	656c5f61 	udi1i	t4,t3,24417
 528:	646d006e 	udi1i	t5,v1,110
 52c:	7079745f 	0x7079745f
 530:	65610065 	udi1i	at,t3,101
 534:	636e4573 	udi0i	t6,k1,17779
 538:	74707972 	jalx	1c1e5c8 <__Size_Of_SDRAM+0x1c13dc8>
 53c:	74737200 	jalx	1cdc800 <__Size_Of_SDRAM+0x1cd2000>
 540:	73757461 	0x73757461
 544:	73656100 	0x73656100
 548:	72636544 	0x72636544
 54c:	00747079 	0x747079
 550:	5f617372 	0x5f617372
 554:	61746164 	udi0i	s4,t3,24932
 558:	6e656c5f 	udi3i	a1,s3,27743
 55c:	6e697500 	udi3i	t1,s3,29952
 560:	745f3874 	jalx	17ce1d0 <__Size_Of_SDRAM+0x17c39d0>
 564:	74616400 	jalx	1859000 <__Size_Of_SDRAM+0x184e800>
 568:	6e654c61 	udi3i	a1,s3,19553
 56c:	00687467 	0x687467
 570:	755f646d 	jalx	57d91b4 <__Size_Of_SDRAM+0x57ce9b4>
 574:	65676173 	udi1i	a3,t3,24947
 578:	6b747200 	udi2i	s4,k1,29184
 57c:	6173725f 	udi0i	s3,t3,29279
 580:	00706f5f 	0x706f5f
 584:	5f525245 	0x5f525245
 588:	0054554f 	0x54554f
 58c:	685f746b 	udi2i	ra,v0,29803
 590:	79656b74 	0x79656b74
 594:	6173755f 	udi0i	s3,t3,30047
 598:	72006567 	0x72006567
 59c:	65446173 	udi1i	a0,t2,24947
 5a0:	70797263 	0x70797263
 5a4:	69640074 	udi2i	a0,t3,116
 5a8:	6c626173 	udi3i	v0,v1,24947
 5ac:	69725465 	udi2i	s2,t3,21605
 5b0:	72656767 	0x72656767
 5b4:	64646100 	udi1i	a0,v1,24832
 5b8:	73736572 	0x73736572
 5bc:	696e6900 	udi2i	t6,t3,26880
 5c0:	72655374 	0x72655374
 5c4:	006c6169 	0x6c6169
 5c8:	72646461 	0x72646461
 5cc:	4c737365 	0x4c737365
 5d0:	74676e65 	jalx	19db994 <__Size_Of_SDRAM+0x19d1194>
 5d4:	61660068 	udi0i	a2,t3,104
 5d8:	735f7463 	0x735f7463
 5dc:	75746174 	jalx	5d185d0 <__Size_Of_SDRAM+0x5d0ddd0>
 5e0:	64740073 	udi1i	s4,v1,115
 5e4:	65537365 	udi1i	s3,t2,29541
 5e8:	74614474 	jalx	18511d0 <__Size_Of_SDRAM+0x18469d0>
 5ec:	69750061 	udi2i	s5,t3,97
 5f0:	3233746e 	andi	s3,s1,0x746e
 5f4:	7400745f 	jalx	1d17c <__Size_Of_SDRAM+0x1297c>
 5f8:	45736564 	0x45736564
 5fc:	7972636e 	0x7972636e
 600:	61007470 	udi0i	zero,t0,29808
 604:	65537365 	udi1i	s3,t2,29541
 608:	74614474 	jalx	18511d0 <__Size_Of_SDRAM+0x18469d0>
 60c:	72770061 	0x72770061
 610:	4f657469 	c3	0x1657469
 614:	74005054 	jalx	14150 <__Size_Of_SDRAM+0x9950>
 618:	53736564 	0x53736564
 61c:	654b7465 	udi1i	t3,t2,29797
 620:	65610079 	udi1i	at,t3,121
 624:	61645f73 	udi0i	a0,t3,24435
 628:	6c5f6174 	udi3i	ra,v0,24948
 62c:	69006e65 	udi2i	zero,t0,28261
 630:	4274696e 	c0	0x74696e
 634:	6472616f 	udi1i	s2,v1,24943
 638:	61657200 	udi0i	a1,t3,29184
 63c:	50544f64 	0x50544f64
 640:	616e6500 	udi0i	t6,t3,25856
 644:	54656c62 	0x54656c62
 648:	67676972 	udi1i	a3,k1,26994
 64c:	73007265 	0x73007265
 650:	61697265 	udi0i	t1,t3,29285
 654:	65725f6c 	udi1i	s2,t3,24428
 658:	72007663 	0x72007663
 65c:	65536173 	udi1i	s3,t2,24947
 660:	74614474 	jalx	18511d0 <__Size_Of_SDRAM+0x18469d0>
 664:	73720061 	0x73720061
 668:	656b5f61 	udi1i	t3,t3,24417
 66c:	656c5f79 	udi1i	t4,t3,24441
 670:	6572006e 	udi1i	s2,t3,110
 674:	6e6f7073 	udi3i	t7,s3,28787
 678:	72006573 	0x72006573
 67c:	6e456173 	udi3i	a1,s2,24947
 680:	70797263 	0x70797263
 684:	65730074 	udi1i	s3,t3,116
 688:	6c616972 	udi3i	at,v1,26994
 68c:	6e65735f 	udi3i	a1,s3,29535
 690:	65610064 	udi1i	at,t3,100
 694:	74655373 	jalx	1954dcc <__Size_Of_SDRAM+0x194a5cc>
 698:	0079654b 	0x79654b
 69c:	725f746b 	0x725f746b
 6a0:	79656b64 	0x79656b64
 6a4:	6173755f 	udi0i	s3,t3,30047
 6a8:	70006567 	0x70006567
 6ac:	6164695f 	udi0i	a0,t3,26975
 6b0:	72006174 	0x72006174
 6b4:	73656174 	0x73656174
 6b8:	6b74725f 	udi2i	s4,k1,29279
 6bc:	7300632e 	0x7300632e
 6c0:	61697265 	udi0i	t1,t3,29285
 6c4:	65725f6c 	udi1i	s2,t3,24428
 6c8:	625f7663 	udi0i	ra,s2,30307
 6cc:	65666675 	udi1i	a2,t3,26229
 6d0:	65730072 	udi1i	s3,t3,114
 6d4:	6c616972 	udi3i	at,v1,26994
 6d8:	6e65735f 	udi3i	a1,s3,29535
 6dc:	69755f64 	udi2i	s5,t3,24420
 6e0:	3631746e 	ori	s1,s1,0x746e
 6e4:	7300745f 	0x7300745f
 6e8:	61697265 	udi0i	t1,t3,29285
 6ec:	65725f6c 	udi1i	s2,t3,24428
 6f0:	755f7663 	jalx	57dd98c <__Size_Of_SDRAM+0x57d318c>
 6f4:	31746e69 	andi	s4,t3,0x6e69
 6f8:	00745f36 	0x745f36
 6fc:	69726573 	udi2i	s2,t3,25971
 700:	735f6c61 	0x735f6c61
 704:	5f646e65 	0x5f646e65
 708:	66667562 	udi1i	a2,s3,30050
 70c:	42007265 	c0	0x7265
 710:	454c4655 	0x454c4655
 714:	6572004e 	udi1i	s2,t3,78
 718:	74537663 	jalx	14dd98c <__Size_Of_SDRAM+0x14d318c>
 71c:	73757461 	0x73757461
 720:	656c6400 	udi1i	t4,t3,25600
 724:	6f6c006e 	udi3i	t4,k1,110
 728:	6554706f 	udi1i	s4,t2,28783
 72c:	63007473 	udi0i	zero,t8,29811
 730:	7542646d 	jalx	50991b4 <__Size_Of_SDRAM+0x508e9b4>
 734:	6e690066 	udi3i	t1,s3,102
 738:	6e656c5f 	udi3i	a1,s3,27743
 73c:	00687467 	0x687467
 740:	42707372 	c0	0x707372
 744:	61006675 	udi0i	zero,t0,26229
 748:	79617272 	0x79617272
 74c:	5f6f745f 	0x5f6f745f
 750:	746e6975 	jalx	1b9a5d4 <__Size_Of_SDRAM+0x1b8fdd4>
 754:	63003233 	udi0i	zero,t8,12851
 758:	746e756f 	jalx	1b9d5bc <__Size_Of_SDRAM+0x1b92dbc>
 75c:	6f007265 	udi3i	zero,t8,29285
 760:	615f7074 	udi0i	ra,t2,28788
 764:	6f007972 	udi3i	zero,t8,31090
 768:	625f7475 	udi0i	ra,s2,29813
 76c:	6f006675 	udi3i	zero,t8,26229
 770:	6c5f7475 	udi3i	ra,v0,29813
 774:	74676e65 	jalx	19db994 <__Size_Of_SDRAM+0x19d1194>
 778:	74720068 	jalx	1c801a0 <__Size_Of_SDRAM+0x1c759a0>
 77c:	5f736561 	0x5f736561
 780:	74736574 	jalx	1cd95d0 <__Size_Of_SDRAM+0x1ccedd0>
 784:	2e707061 	sltiu	s0,s3,28769
 788:	6e690063 	udi3i	t1,s3,99
 78c:	6675625f 	udi1i	s5,s3,25183
 790:	72756300 	0x72756300
 794:	74617453 	jalx	185d14c <__Size_Of_SDRAM+0x185294c>
 798:	74007375 	jalx	1cdd4 <__Size_Of_SDRAM+0x125d4>
 79c:	61747365 	udi0i	s4,t3,29541
 7a0:	63007070 	udi0i	zero,t8,28784
 7a4:	654c646d 	udi1i	t4,t2,25709
 7a8:	6975006e 	udi2i	s5,t3,110
 7ac:	3233746e 	andi	s3,s1,0x746e
 7b0:	5f6f745f 	0x5f6f745f
 7b4:	61727261 	udi0i	s2,t3,29281
 7b8:	65630079 	udi1i	v1,t3,121
 7bc:	6e696c69 	udi3i	t1,s3,27753
 7c0:	73720067 	0x73720067
 7c4:	6e654c70 	udi3i	a1,s3,19568
 7c8:	64657300 	udi1i	a1,v1,29440
 7cc:	7265635f 	0x7265635f
 7d0:	00632e74 	0x632e74
 7d4:	5f646573 	0x5f646573
 7d8:	72616863 	0x72616863
 7dc:	6700632e 	udi1i	zero,t8,25390
 7e0:	635f7465 	udi0i	ra,k0,29797
 7e4:	645f646d 	udi1i	ra,v0,25709
 7e8:	5f617461 	0x5f617461
 7ec:	746e6975 	jalx	1b9a5d4 <__Size_Of_SDRAM+0x1b8fdd4>
 7f0:	73003233 	0x73003233
 7f4:	665f6465 	udi1i	ra,s2,25701
 7f8:	616d726f 	udi0i	t5,t3,29295
 7fc:	72705f74 	0x72705f74
 800:	00746e69 	0x746e69
 804:	6675626f 	udi1i	s5,s3,25199
 808:	74657300 	jalx	195cc00 <__Size_Of_SDRAM+0x1952400>
 80c:	7073725f 	0x7073725f
 810:	7461645f 	jalx	185917c <__Size_Of_SDRAM+0x184e97c>
 814:	64615f61 	udi1i	at,v1,24417
 818:	34367264 	ori	s6,at,0x7264
 81c:	74657300 	jalx	195cc00 <__Size_Of_SDRAM+0x1952400>
 820:	7073725f 	0x7073725f
 824:	7461645f 	jalx	185917c <__Size_Of_SDRAM+0x184e97c>
 828:	656c5f61 	udi1i	t4,t3,24417
 82c:	6269006e 	udi0i	t1,s3,110
 830:	73006675 	0x73006675
 834:	635f6465 	udi0i	ra,k0,25701
 838:	616d6d6f 	udi0i	t5,t3,28015
 83c:	655f646e 	udi1i	ra,t2,25710
 840:	7972746e 	0x7972746e
 844:	64657300 	udi1i	a1,v1,29440
 848:	6d6f635f 	udi3i	t7,t3,25439
 84c:	2e6e6f6d 	sltiu	t6,s3,28525
 850:	65670063 	udi1i	a3,t3,99
 854:	6d635f74 	udi3i	v1,t3,24436
 858:	61645f64 	udi0i	a0,t3,24420
 85c:	615f6174 	udi0i	ra,t2,24948
 860:	36726464 	ori	s2,s3,0x6464
 864:	65730034 	udi1i	s3,t3,52
 868:	6f635f64 	udi3i	v1,k1,24420
 86c:	6e616d6d 	udi3i	at,s3,28013
 870:	78655f64 	0x78655f64
 874:	73007469 	0x73007469
 878:	725f7465 	0x725f7465
 87c:	645f7073 	udi1i	ra,v0,28787
 880:	5f617461 	0x5f617461
 884:	746e6975 	jalx	1b9a5d4 <__Size_Of_SDRAM+0x1b8fdd4>
 888:	75003233 	jalx	400c8cc <__Size_Of_SDRAM+0x40020cc>
 88c:	31746e69 	andi	s4,t3,0x6e69
 890:	65670036 	udi1i	a3,t3,54
 894:	6d635f74 	udi3i	v1,t3,24436
 898:	61645f64 	udi0i	a0,t3,24420
 89c:	6c5f6174 	udi3i	ra,v0,24948
 8a0:	47006e65 	c1	0x1006e65
 8a4:	5f4f4950 	0x5f4f4950
 8a8:	65736572 	udi1i	s3,t3,25970
 8ac:	50470074 	0x50470074
 8b0:	745f4f49 	jalx	17d3d24 <__Size_Of_SDRAM+0x17c9524>
 8b4:	6c67676f 	udi3i	a3,v1,26479
 8b8:	656e0065 	udi1i	t6,t3,101
 8bc:	61765f77 	udi0i	s6,t3,24439
 8c0:	0065756c 	0x65756c
 8c4:	5f646573 	0x5f646573
 8c8:	6f697067 	udi3i	t1,k1,28775
 8cc:	696e695f 	udi2i	t6,t3,26975
 8d0:	50470074 	0x50470074
 8d4:	73004f49 	0x73004f49
 8d8:	645f6465 	udi1i	ra,v0,25701
 8dc:	675f7672 	udi1i	ra,k0,30322
 8e0:	2e6f6970 	sltiu	t7,s3,26992
 8e4:	6c6f0063 	udi3i	t7,v1,99
 8e8:	61765f64 	udi0i	s6,t3,24420
 8ec:	0065756c 	0x65756c
 8f0:	4f495047 	c3	0x1495047
 8f4:	6c75705f 	udi3i	s5,v1,28767
 8f8:	73006573 	0x73006573
 8fc:	705f6465 	0x705f6465
 900:	756d6e69 	jalx	5b5b9a4 <__Size_Of_SDRAM+0x5b511a4>
 904:	70735f78 	0x70735f78
 908:	6e690069 	udi3i	t1,s3,105
 90c:	73726576 	0x73726576
 910:	65730065 	udi1i	s3,t3,101
 914:	72645f64 	0x72645f64
 918:	69705f76 	udi2i	s0,t3,24438
 91c:	78756d6e 	0x78756d6e
 920:	7300632e 	0x7300632e
 924:	705f6465 	0x705f6465
 928:	756d6e69 	jalx	5b5b9a4 <__Size_Of_SDRAM+0x5b511a4>
 92c:	61755f78 	udi0i	s5,t3,24440
 930:	73007472 	0x73007472
 934:	725f6465 	0x725f6465
 938:	695f676e 	udi2i	ra,t2,26478
 93c:	0074696e 	0x74696e
 940:	646e6172 	udi1i	t6,v1,24946
 944:	64657300 	udi1i	a1,v1,29440
 948:	7672645f 	jalx	9c9917c <__Size_Of_SDRAM+0x9c8e97c>
 94c:	676e725f 	udi1i	t6,k1,29279
 950:	7300632e 	0x7300632e
 954:	725f6465 	0x725f6465
 958:	675f676e 	udi1i	ra,k0,26478
 95c:	73007465 	0x73007465
 960:	6e697274 	udi3i	t1,s3,29300
 964:	61700067 	udi0i	s0,t3,103
 968:	705f6567 	0x705f6567
 96c:	72676f72 	0x72676f72
 970:	73006d61 	0x73006d61
 974:	645f6465 	udi1i	ra,v0,25701
 978:	735f7672 	0x735f7672
 97c:	632e6366 	udi0i	t6,t9,25446
 980:	63657300 	udi0i	a1,k1,29440
 984:	6b34365f 	udi2i	s4,t9,13919
 988:	006e655f 	0x6e655f
 98c:	5f636573 	0x5f636573
 990:	5f6b3233 	0x5f6b3233
 994:	61006e65 	udi0i	zero,t0,28261
 998:	00727474 	0x727474
 99c:	7366666f 	0x7366666f
 9a0:	73007465 	0x73007465
 9a4:	735f6465 	0x735f6465
 9a8:	695f6366 	udi2i	ra,t2,25446
 9ac:	0074696e 	0x74696e
 9b0:	5f646573 	0x5f646573
 9b4:	5f636673 	0x5f636673
 9b8:	64616572 	udi1i	at,v1,25970
 9bc:	63657300 	udi0i	a1,k1,29440
 9c0:	3635325f 	ori	s5,s1,0x325f
 9c4:	6e655f6b 	udi3i	a1,s3,24427
 9c8:	63657300 	udi0i	a1,k1,29440
 9cc:	5f6b345f 	0x5f6b345f
 9d0:	73006e65 	0x73006e65
 9d4:	735f6465 	0x735f6465
 9d8:	775f6366 	jalx	d7d8d98 <__Size_Of_SDRAM+0xd7ce598>
 9dc:	65746972 	udi1i	s4,t3,26994
 9e0:	64657300 	udi1i	a1,v1,29440
 9e4:	6366735f 	udi0i	a2,k1,29535
 9e8:	6172655f 	udi0i	s2,t3,25951
 9ec:	64006573 	udi1i	zero,zero,25971
 9f0:	63697665 	udi0i	t1,k1,30309
 9f4:	65640065 	udi1i	a0,t3,101
 9f8:	65636976 	udi1i	v1,t3,26998
 9fc:	65707974 	udi1i	s0,t3,31092
 a00:	645f7400 	udi1i	ra,v0,29696
 a04:	63697665 	udi0i	t1,k1,30309
 a08:	79745f65 	0x79745f65
 a0c:	73006570 	0x73006570
 a10:	745f6465 	jalx	17d9194 <__Size_Of_SDRAM+0x17ce994>
 a14:	72656d69 	0x72656d69
 a18:	6174735f 	udi0i	s4,t3,29535
 a1c:	73007472 	0x73007472
 a20:	745f6465 	jalx	17d9194 <__Size_Of_SDRAM+0x17ce994>
 a24:	72656d69 	0x72656d69
 a28:	5f73315f 	0x5f73315f
 a2c:	616c6564 	udi0i	t4,t3,25956
 a30:	78655f79 	0x78655f79
 a34:	6c706d61 	udi3i	s0,v1,28001
 a38:	65730065 	udi1i	s3,t3,101
 a3c:	69745f64 	udi2i	s4,t3,24420
 a40:	5f72656d 	0x5f72656d
 a44:	73746567 	0x73746567
 a48:	706d6174 	0x706d6174
 a4c:	64657300 	udi1i	a1,v1,29440
 a50:	7672645f 	jalx	9c9917c <__Size_Of_SDRAM+0x9c8e97c>
 a54:	6d69745f 	udi3i	t1,t3,29791
 a58:	632e7265 	udi0i	t6,t9,29285
 a5c:	63697400 	udi0i	t1,k1,29696
 a60:	7400316b 	jalx	c5ac <__Size_Of_SDRAM+0x1dac>
 a64:	326b6369 	andi	t3,s3,0x6369
 a68:	64657300 	udi1i	a1,v1,29440
 a6c:	6d69745f 	udi3i	t1,t3,29791
 a70:	735f7265 	0x735f7265
 a74:	00706f74 	0x706f74
 a78:	6c656946 	udi3i	a1,v1,26950
 a7c:	00317364 	0x317364
 a80:	6c656946 	udi3i	a1,v1,26950
 a84:	00327364 	0x327364
 a88:	65736552 	udi1i	s3,t3,25938
 a8c:	64657672 	udi1i	a1,v1,30322
 a90:	414d4400 	0x414d4400
 a94:	6155004d 	udi0i	s5,t2,77
 a98:	65497472 	udi1i	t1,t2,29810
 a9c:	6d6c4472 	udi3i	t4,t3,17522
 aa0:	42544500 	c0	0x544500
 aa4:	55004945 	0x55004945
 aa8:	4c747261 	0x4c747261
 aac:	44007263 	0x44007263
 ab0:	0042414c 	syscall	0x10905
 ab4:	74726155 	jalx	1c98554 <__Size_Of_SDRAM+0x1c8dd54>
 ab8:	46726949 	c1	0x726949
 abc:	5f007263 	0x5f007263
 ac0:	54524155 	0x54524155
 ac4:	5f474552 	0x5f474552
 ac8:	0052534c 	syscall	0x1494d
 acc:	5f646573 	0x5f646573
 ad0:	74726175 	jalx	1c985d4 <__Size_Of_SDRAM+0x1c8ddd4>
 ad4:	696e695f 	udi2i	t6,t3,26975
 ad8:	555f0074 	0x555f0074
 adc:	52545241 	0x52545241
 ae0:	4c5f4745 	0x4c5f4745
 ae4:	45005243 	bc1f	153f4 <__Size_Of_SDRAM+0xabf4>
 ae8:	0049534c 	syscall	0x1254d
 aec:	65736552 	udi1i	s3,t3,25938
 af0:	64657672 	udi1i	a1,v1,30322
 af4:	65520030 	udi1i	s2,t2,48
 af8:	76726573 	jalx	9c995cc <__Size_Of_SDRAM+0x9c8edcc>
 afc:	00316465 	0x316465
 b00:	4f464946 	c3	0x1464946
 b04:	55003631 	0x55003631
 b08:	4d747261 	0x4d747261
 b0c:	73007273 	0x73007273
 b10:	755f6465 	jalx	57d9194 <__Size_Of_SDRAM+0x57ce994>
 b14:	31747261 	andi	s4,t3,0x7261
 b18:	6165725f 	udi0i	a1,t3,29279
 b1c:	48540064 	0x48540064
 b20:	55004552 	0x55004552
 b24:	53747261 	0x53747261
 b28:	44007263 	0x44007263
 b2c:	00535443 	0x535443
 b30:	5f646573 	0x5f646573
 b34:	74726175 	jalx	1c985d4 <__Size_Of_SDRAM+0x1c8ddd4>
 b38:	6165725f 	udi0i	a1,t3,29279
 b3c:	45540064 	0x45540064
 b40:	5500544d 	0x5500544d
 b44:	4c747261 	0x4c747261
 b48:	52007273 	0x52007273
 b4c:	00475254 	0x475254
 b50:	5f646573 	0x5f646573
 b54:	74726175 	jalx	1c985d4 <__Size_Of_SDRAM+0x1c8ddd4>
 b58:	72775f31 	0x72775f31
 b5c:	00657469 	0x657469
 b60:	5241555f 	0x5241555f
 b64:	47455254 	c1	0x1455254
 b68:	5243535f 	0x5243535f
 b6c:	4e504900 	c3	0x504900
 b70:	65640044 	udi1i	a0,t3,68
 b74:	6f6e5f76 	udi3i	t6,k1,24438
 b78:	41555f00 	0x41555f00
 b7c:	45525452 	0x45525452
 b80:	61550047 	udi0i	s5,t2,71
 b84:	62527472 	udi0i	s2,s2,29810
 b88:	65685472 	udi1i	t0,t3,21618
 b8c:	006c6c44 	0x6c6c44
 b90:	504f4f4c 	0x504f4f4c
 b94:	52465400 	0x52465400
 b98:	5f005453 	0x5f005453
 b9c:	54524155 	0x54524155
 ba0:	5f474552 	0x5f474552
 ba4:	5f524949 	0x5f524949
 ba8:	00524346 	0x524346
 bac:	53534445 	0x53534445
 bb0:	74720049 	jalx	1c80124 <__Size_Of_SDRAM+0x1c75924>
 bb4:	75705f6b 	jalx	5c17dac <__Size_Of_SDRAM+0x5c0d5ac>
 bb8:	72006374 	0x72006374
 bbc:	675f6b74 	udi1i	ra,k0,27508
 bc0:	00637465 	0x637465
 bc4:	74726155 	jalx	1c98554 <__Size_Of_SDRAM+0x1c8dd54>
 bc8:	67655231 	udi1i	a1,k1,21041
 bcc:	41555f00 	0x41555f00
 bd0:	45525452 	0x45525452
 bd4:	534d5f47 	0x534d5f47
 bd8:	61550052 	udi0i	s5,t2,82
 bdc:	634d7472 	udi0i	t5,k0,29810
 be0:	555f0072 	0x555f0072
 be4:	52545241 	0x52545241
 be8:	495f4745 	0x495f4745
 bec:	445f5245 	0x445f5245
 bf0:	5f004d4c 	0x5f004d4c
 bf4:	54524155 	0x54524155
 bf8:	5f474552 	0x5f474552
 bfc:	0052434d 	break	0x52,0x10d
 c00:	74726155 	jalx	1c98554 <__Size_Of_SDRAM+0x1c8dd54>
 c04:	00676552 	0x676552
 c08:	5241555f 	0x5241555f
 c0c:	47455254 	c1	0x1455254
 c10:	5242525f 	0x5242525f
 c14:	5248545f 	0x5248545f
 c18:	4c4c445f 	0x4c4c445f
 c1c:	64657300 	udi1i	a1,v1,29440
 c20:	7672645f 	jalx	9c9917c <__Size_Of_SDRAM+0x9c8e97c>
 c24:	7261755f 	0x7261755f
 c28:	00632e74 	0x632e74
 c2c:	46494645 	c1	0x494645
 c30:	4652004f 	c1	0x52004f
 c34:	00545352 	0x545352
 c38:	5f646573 	0x5f646573
 c3c:	74726175 	jalx	1c985d4 <__Size_Of_SDRAM+0x1c8ddd4>
 c40:	6972775f 	udi2i	s2,t3,30559
 c44:	45006574 	bc1f	1a218 <__Size_Of_SDRAM+0xfa18>
 c48:	00494252 	0x494252
 c4c:	6c656946 	udi3i	a1,v1,26950
 c50:	46007364 	cvt.w.s	$f13,$f14
 c54:	646c6569 	udi1i	t4,v1,25961
 c58:	73003073 	0x73003073
 c5c:	775f6465 	jalx	d7d9194 <__Size_Of_SDRAM+0xd7ce994>
 c60:	5f676f64 	0x5f676f64
 c64:	65736572 	udi1i	s3,t3,25970
 c68:	65730074 	udi1i	s3,t3,116
 c6c:	72645f64 	0x72645f64
 c70:	64775f76 	udi1i	s7,v1,24438
 c74:	632e676f 	udi0i	t6,t9,26479
 c78:	64657300 	udi1i	a1,v1,29440
 c7c:	70746f5f 	0x70746f5f
 c80:	7300632e 	0x7300632e
 c84:	725f6465 	0x725f6465
 c88:	632e7232 	udi0i	t6,t9,29234
 c8c:	64657300 	udi1i	a1,v1,29440
 c90:	6b74725f 	udi2i	s4,k1,29279
 c94:	6200632e 	udi0i	zero,s0,25390
 c98:	006c6f6f 	0x6c6f6f
 c9c:	6d6f7261 	udi3i	t7,t3,29281
 ca0:	73616d5f 	0x73616d5f
 ca4:	65725f6b 	udi1i	s2,t3,24427
 ca8:	74736967 	jalx	1cda59c <__Size_Of_SDRAM+0x1ccfd9c>
 cac:	53007265 	0x53007265
 cb0:	65747379 	udi1i	s4,t3,29561
 cb4:	6d69546d 	udi3i	t1,t3,21613
 cb8:	74756f65 	jalx	1d5bd94 <__Size_Of_SDRAM+0x1d51594>
 cbc:	67657200 	udi1i	a1,k1,29184
 cc0:	6464615f 	udi1i	a0,v1,24927
 cc4:	65720072 	udi1i	s2,t3,114
 cc8:	65725f67 	udi1i	s2,t3,24423
 ccc:	00746573 	0x746573
 cd0:	6b73616d 	udi2i	s3,k1,24941
 cd4:	6f6c635f 	udi3i	t4,k1,25439
 cd8:	6b006b63 	udi2i	zero,t8,27491
 cdc:	5f757063 	0x5f757063
 ce0:	6573006d 	udi1i	s3,t3,109
 ce4:	6d635f64 	udi3i	v1,t3,24420
 ce8:	68635f64 	udi2i	v1,v1,24420
 cec:	725f7069 	0x725f7069
 cf0:	705f7473 	0x705f7473
 cf4:	0074736f 	0x74736f
 cf8:	5f444e41 	0x5f444e41
 cfc:	746c6966 	jalx	1b1a598 <__Size_Of_SDRAM+0x1b0fd98>
 d00:	5f007265 	0x5f007265
 d04:	6165685f 	udi0i	a1,t3,26719
 d08:	74735f70 	jalx	1cd7dc0 <__Size_Of_SDRAM+0x1ccd5c0>
 d0c:	5f747261 	0x5f747261
 d10:	72646461 	0x72646461
 d14:	69617700 	udi2i	at,t3,30464
 d18:	6f6c5f74 	udi3i	t4,k1,24436
 d1c:	6200706f 	udi0i	zero,s0,28783
 d20:	74536f49 	jalx	14dbd24 <__Size_Of_SDRAM+0x14d1524>
 d24:	73757461 	0x73757461
 d28:	73756200 	0x73756200
 d2c:	4f006d5f 	c3	0x1006d5f
 d30:	69665f52 	udi2i	a2,t3,24402
 d34:	7265746c 	0x7265746c
 d38:	4d776400 	0x4d776400
 d3c:	53696e69 	0x53696e69
 d40:	6e6f6365 	udi3i	t7,s3,25445
 d44:	72610064 	0x72610064
 d48:	6d5f6d6f 	udi3i	ra,t2,28015
 d4c:	616c6564 	udi0i	t4,t3,25956
 d50:	65730079 	udi1i	s3,t3,121
 d54:	65635f64 	udi1i	v1,t3,24420
 d58:	725f7472 	0x725f7472
 d5c:	74657365 	jalx	195cd94 <__Size_Of_SDRAM+0x1952594>
 d60:	67657200 	udi1i	a1,k1,29184
 d64:	6f6c635f 	udi3i	t4,k1,25439
 d68:	73006b63 	0x73006b63
 d6c:	735f6465 	0x735f6465
 d70:	70757465 	0x70757465
 d74:	6400632e 	udi1i	zero,zero,25390
 d78:	696e4977 	udi2i	t6,t3,18807
 d7c:	6e650074 	udi3i	a1,s3,116
 d80:	656c6261 	udi1i	t4,t3,25185
 d84:	6f6c635f 	udi3i	t4,k1,25439
 d88:	62006b63 	udi0i	zero,s0,27491
 d8c:	616d7469 	udi0i	t5,t3,29801
 d90:	73006b73 	0x73006b73
 d94:	645f6465 	udi1i	ra,v0,25701
 d98:	695f7264 	udi2i	ra,t2,29284
 d9c:	0074696e 	0x74696e
 da0:	5f646573 	0x5f646573
 da4:	74696e69 	jalx	1a5b9a4 <__Size_Of_SDRAM+0x1a511a4>
 da8:	6e6f635f 	udi3i	t7,s3,25439
 dac:	00676966 	0x676966
 db0:	74696e49 	jalx	1a5b924 <__Size_Of_SDRAM+0x1a51124>
 db4:	656d6954 	udi1i	t5,t3,26964
 db8:	616d0072 	udi0i	t5,t3,114
 dbc:	725f6b73 	0x725f6b73
 dc0:	74657365 	jalx	195cd94 <__Size_Of_SDRAM+0x1952594>
 dc4:	72747300 	0x72747300
 dc8:	2e6e656c 	sltiu	t6,s3,25964
 dcc:	Address 0x0000000000000dcc is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	000002ec 	0x2ec
   4:	000002fc 	0x2fc
   8:	000003c4 	0x3c4
   c:	00000408 	0x408
  10:	000003b4 	0x3b4
  14:	000003c0 	sll	zero,zero,0xf
  18:	00000300 	sll	zero,zero,0xc
  1c:	00000344 	0x344
	...
  28:	000002f4 	0x2f4
  2c:	000002fc 	0x2fc
  30:	000003c4 	0x3c4
  34:	00000408 	0x408
  38:	000003bc 	0x3bc
  3c:	000003c0 	sll	zero,zero,0xf
  40:	00000300 	sll	zero,zero,0xc
  44:	00000344 	0x344
	...
  50:	000002fc 	0x2fc
  54:	00000300 	sll	zero,zero,0xc
  58:	0000034c 	syscall	0xd
  5c:	0000039c 	0x39c
  60:	00000344 	0x344
  64:	00000348 	0x348
	...
  70:	000004c8 	0x4c8
  74:	00000518 	0x518
  78:	00000538 	0x538
  7c:	00000554 	0x554
	...
  88:	00000d5c 	0xd5c
  8c:	00000d60 	0xd60
  90:	00000d70 	0xd70
  94:	00000d88 	0xd88
	...
  a0:	00000d5c 	0xd5c
  a4:	00000d60 	0xd60
  a8:	00000d70 	0xd70
  ac:	00000d88 	0xd88
	...
  b8:	00000e5c 	0xe5c
  bc:	00000e80 	sll	at,zero,0x1a
  c0:	00001014 	0x1014
  c4:	00001090 	0x1090
  c8:	00000ea8 	0xea8
  cc:	00000eb8 	0xeb8
	...
  d8:	00000e5c 	0xe5c
  dc:	00000e80 	sll	at,zero,0x1a
  e0:	00001014 	0x1014
  e4:	00001090 	0x1090
  e8:	00000ea8 	0xea8
  ec:	00000eb8 	0xeb8
	...
  f8:	00000fb0 	0xfb0
  fc:	00001014 	0x1014
 100:	00001090 	0x1090
 104:	000010b0 	0x10b0
	...
 110:	00001184 	0x1184
 114:	000011a8 	0x11a8
 118:	00001364 	0x1364
 11c:	000013e0 	0x13e0
 120:	000011f4 	0x11f4
 124:	00001204 	0x1204
	...
 130:	00001184 	0x1184
 134:	000011a8 	0x11a8
 138:	00001364 	0x1364
 13c:	000013e0 	0x13e0
 140:	000011f4 	0x11f4
 144:	00001204 	0x1204
	...
 150:	00001300 	sll	v0,zero,0xc
 154:	00001364 	0x1364
 158:	000013e0 	0x13e0
 15c:	00001400 	sll	v0,zero,0x10
	...
 168:	0000019c 	0x19c
 16c:	000001a0 	0x1a0
 170:	000001c8 	0x1c8
 174:	00000200 	sll	zero,zero,0x8
	...
 180:	0000029c 	0x29c
 184:	000002c0 	sll	zero,zero,0xb
 188:	000002dc 	0x2dc
 18c:	000002e0 	0x2e0
 190:	000002c8 	0x2c8
 194:	000002cc 	syscall	0xb
	...
 1a0:	0000029c 	0x29c
 1a4:	000002c0 	sll	zero,zero,0xb
 1a8:	000002dc 	0x2dc
 1ac:	000002e0 	0x2e0
 1b0:	000002c8 	0x2c8
 1b4:	000002cc 	syscall	0xb
	...
 1c0:	000004a8 	0x4a8
 1c4:	000004ac 	0x4ac
 1c8:	000004b0 	0x4b0
 1cc:	000004bc 	0x4bc
	...
 1d8:	000004ac 	0x4ac
 1dc:	000004b0 	0x4b0
 1e0:	000004bc 	0x4bc
 1e4:	000004c4 	0x4c4
	...
 1f0:	000000e4 	0xe4
 1f4:	000000e8 	0xe8
 1f8:	0000010c 	syscall	0x4
 1fc:	00000140 	sll	zero,zero,0x5
	...
 208:	000001fc 	0x1fc
 20c:	00000210 	0x210
 210:	000002e4 	0x2e4
 214:	0000031c 	0x31c
	...
 220:	000001fc 	0x1fc
 224:	00000210 	0x210
 228:	000002e4 	0x2e4
 22c:	0000031c 	0x31c
	...
 238:	00000210 	0x210
 23c:	00000214 	0x214
 240:	00000230 	0x230
 244:	0000027c 	0x27c
	...
 250:	00000210 	0x210
 254:	00000214 	0x214
 258:	00000230 	0x230
 25c:	0000027c 	0x27c
	...
 268:	00000394 	0x394
 26c:	000003cc 	syscall	0xf
 270:	00000644 	0x644
 274:	00000734 	0x734
	...
 280:	000003f8 	0x3f8
 284:	00000434 	0x434
 288:	00000734 	0x734
 28c:	000007d8 	0x7d8
	...
 298:	00000444 	0x444
 29c:	00000468 	0x468
 2a0:	000007d8 	0x7d8
 2a4:	00000904 	0x904
	...
 2b0:	00000444 	0x444
 2b4:	00000468 	0x468
 2b8:	000007d8 	0x7d8
 2bc:	00000904 	0x904
	...
 2c8:	00000874 	0x874
 2cc:	0000087c 	0x87c
 2d0:	00000880 	sll	at,zero,0x2
 2d4:	000008ac 	0x8ac
	...
 2e0:	00000068 	0x68
 2e4:	00000084 	0x84
 2e8:	000000a4 	0xa4
 2ec:	000000b8 	0xb8
	...
 2f8:	00000084 	0x84
 2fc:	00000088 	0x88
 300:	000000b8 	0xb8
 304:	000000cc 	syscall	0x3
	...
 310:	00000084 	0x84
 314:	00000088 	0x88
 318:	000000b8 	0xb8
 31c:	000000cc 	syscall	0x3
	...
