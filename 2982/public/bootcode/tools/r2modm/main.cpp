/***************************************************************************************************
  File   : NeptuneTP.cpp   
  Author : Kevin Wang 
****************************************************************************************************
    Update List :
----------------------------------------------------------------------------------------------------     
    1.3     |   20080612    | Add Feature
            |               |   1) Support set section filter feature            
----------------------------------------------------------------------------------------------------     
    1.3a    |   20080721    | Add Feature : Support Section Filter With Callback Function    
----------------------------------------------------------------------------------------------------     
    1.4     |   20080804    | Add Feature : Support new Section Filter Callback Function                
            |               | Add TOT / TDT / PAT Read Test
***************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <unistd.h>
#include <openssl/ssl.h>
#include <openssl/evp.h>
#include <openssl/hmac.h>
#include <openssl/bn.h>
#include <openssl/rsa.h>

#define RSA_BITS        (2048)
#define RSA_KEY_SIZE    (RSA_BITS >> 3)

#if 0
    unsigned char modulus_[RSA_KEY_SIZE] =
    {
    0xf3, 0x79, 0x3b, 0xca, 0xa5, 0x16, 0x12, 0xa5, 0xc3, 0xb7, 0xc7, 0xa9, 0x52, 0x6d, 0x90, 0x37,
    0xa5, 0xc9, 0xff, 0xb6, 0x1b, 0x19, 0x68, 0xf4, 0x8e, 0x09, 0x89, 0x43, 0xcf, 0x7e, 0x8c, 0xbc,
    0xd2, 0x2a, 0x77, 0xe4, 0xf3, 0x00, 0x21, 0xe9, 0x19, 0x18, 0x94, 0x4d, 0x40, 0xa7, 0x55, 0x29,
    0x84, 0x6e, 0x0d, 0x12, 0xd7, 0xb4, 0xa4, 0xe6, 0x15, 0xb4, 0x3f, 0xad, 0xfa, 0xfb, 0xfd, 0x3a,
    0x53, 0xa3, 0x42, 0x15, 0xd8, 0x91, 0xdb, 0x6f, 0xdc, 0xd9, 0x42, 0x66, 0x8a, 0xea, 0xba, 0x16,
    0xa5, 0x10, 0xc5, 0x2d, 0xd7, 0x00, 0x12, 0x39, 0xef, 0x00, 0x90, 0xef, 0x42, 0xe6, 0x89, 0x92,
    0x71, 0xf1, 0xbe, 0x11, 0x90, 0xe3, 0x43, 0xba, 0x13, 0xd2, 0xad, 0x6f, 0x3a, 0x6b, 0xbc, 0x68,
    0xaa, 0x7a, 0x81, 0x24, 0x96, 0xad, 0x00, 0xef, 0x06, 0xa4, 0x6c, 0x26, 0x5d, 0xf2, 0x11, 0xae,
    0xa3, 0xb0, 0xd9, 0x23, 0x92, 0xe9, 0xd1, 0xbd, 0x89, 0xa3, 0x07, 0xcd, 0x3f, 0xa0, 0xe5, 0x90,
    0xec, 0xdd, 0xbd, 0xdc, 0x3d, 0x22, 0xc3, 0x2d, 0x37, 0x09, 0x6e, 0x3e, 0x1c, 0x23, 0xb0, 0x17,
    0x1e, 0x4a, 0x29, 0x87, 0xae, 0x45, 0x68, 0xfb, 0x8c, 0x19, 0x0b, 0x07, 0xa1, 0xbc, 0xfc, 0x0c,
    0x18, 0x38, 0xcd, 0xb4, 0x41, 0x74, 0xb8, 0x47, 0xd3, 0xb5, 0x20, 0x82, 0x83, 0xca, 0x3f, 0xf2,
    0x8f, 0x88, 0xb3, 0xa9, 0x6e, 0x9e, 0xed, 0xcf, 0xa7, 0xe5, 0x92, 0x1c, 0x95, 0xd4, 0xc0, 0x00,
    0x0e, 0x1d, 0x5b, 0x1d, 0xbc, 0xd4, 0x13, 0xa0, 0xc1, 0x2c, 0x0e, 0xbc, 0xc0, 0x45, 0xf7, 0x0a,
    0x74, 0xef, 0x8a, 0x01, 0xde, 0xe1, 0x0a, 0x49, 0xf0, 0xa4, 0x16, 0x85, 0x83, 0x54, 0xc7, 0x7f,
    0x4e, 0xeb, 0x3c, 0x75, 0xbf, 0x5e, 0x99, 0xd2, 0x89, 0x16, 0xd3, 0x75, 0xfb, 0xb3, 0xfc, 0xf9,
    };  //n   
 #endif
 #if 0 // rsa_ext_key ( from Alex )
    unsigned char modulus_[RSA_KEY_SIZE] =
    {
    0xbf, 0x4f, 0xbe, 0xe8, 0x10, 0xb0, 0x77, 0xa4, 0x4a, 0xd9, 0x12, 0x57, 0xcf, 0x86, 0xc0, 0x52,
    0x91, 0xcf, 0xbf, 0x70, 0x10, 0x02, 0x39, 0xb6, 0x10, 0x80, 0xfd, 0xf0, 0x0c, 0x0f, 0xd6, 0xbf,
    0x28, 0x0e, 0xf5, 0x03, 0xa8, 0x66, 0x29, 0xa2, 0xc1, 0xc5, 0xb1, 0x5e, 0xcb, 0x3a, 0x78, 0xc5,
    0x81, 0xea, 0x05, 0xf7, 0x87, 0x1c, 0x11, 0xab, 0xd1, 0xbd, 0x51, 0x92, 0x2e, 0x95, 0x9a, 0xeb,
    0x3c, 0x93, 0xaf, 0x26, 0x69, 0xdf, 0x3e, 0xdb, 0x79, 0x54, 0xd5, 0x22, 0xef, 0x7d, 0x81, 0xbd,
    0x45, 0x18, 0x9d, 0x4e, 0x43, 0x0f, 0x28, 0xd7, 0x5a, 0xd7, 0xeb, 0xe4, 0x4d, 0x4b, 0xc9, 0xf2,
    0x8c, 0x66, 0xf4, 0x56, 0x5c, 0xab, 0x2e, 0xb1, 0x9d, 0x1b, 0x5d, 0x94, 0x93, 0xc5, 0xb8, 0x47,
    0xf9, 0x70, 0xe2, 0xc9, 0xff, 0x3b, 0xd2, 0x11, 0x8a, 0x7f, 0xa7, 0xae, 0x94, 0x63, 0x83, 0x66,
    0x02, 0xc7, 0xf5, 0x60, 0xe4, 0xd8, 0x6c, 0x3e, 0xd5, 0x15, 0x9f, 0x22, 0x74, 0x19, 0xe2, 0x69,
    0x65, 0x6f, 0x9f, 0x8c, 0x30, 0xea, 0x0f, 0x37, 0xc7, 0xb3, 0x00, 0xfc, 0x75, 0xcc, 0xab, 0x46,
    0x58, 0x31, 0x9f, 0xcb, 0x4a, 0xa5, 0x21, 0x8a, 0x11, 0xfb, 0xbe, 0xa8, 0xbc, 0x64, 0xc3, 0x34,
    0x69, 0x07, 0xb7, 0xd4, 0xae, 0x12, 0x74, 0xe4, 0x65, 0x62, 0xaf, 0xa7, 0xa3, 0xf6, 0xbd, 0x1e,
    0x70, 0x03, 0xb7, 0xa7, 0x79, 0x40, 0x50, 0xa4, 0x14, 0xb8, 0x80, 0xab, 0x5c, 0x00, 0x58, 0x90,
    0x2c, 0x0a, 0x50, 0xd7, 0x75, 0xed, 0xd9, 0x2a, 0x48, 0xe4, 0x37, 0xa8, 0xe7, 0x5a, 0x7f, 0x99,
    0x1e, 0xce, 0xe5, 0xc3, 0xde, 0x27, 0xbc, 0xf2, 0xd6, 0x28, 0x1b, 0x56, 0x8b, 0x10, 0xf3, 0x5e,
    0xe7, 0xeb, 0xe9, 0xb2, 0x7d, 0xbc, 0xfd, 0xa1, 0x87, 0xbb, 0x2d, 0xed, 0xba, 0x01, 0x53, 0x9b,
    };  //n   
 #endif
 #if 0 // rsa_key_2048_pem
 	unsigned char modulus_[RSA_KEY_SIZE] =
    {
    0xb9, 0x97, 0x54, 0x38, 0xaf, 0x3f, 0x83, 0xeb, 0x3f, 0x74, 0xdb, 0xa1, 0x0d, 0xb8, 0xb8, 0xc3,
	0xda, 0xd3, 0x5f, 0x89, 0xab, 0x81, 0xb7, 0xec, 0x7a, 0x64, 0xa9, 0xa8, 0x41, 0x05, 0x43, 0x02,
	0xf1, 0x48, 0xb0, 0xb7, 0x2a, 0x5e, 0x71, 0x65, 0x11, 0xfd, 0x65, 0xc8, 0x93, 0x74, 0xb0, 0x9c,
	0xa8, 0xc5, 0x93, 0xd3, 0x2e, 0xc5, 0x3a, 0x81, 0x83, 0x94, 0x4d, 0xbf, 0xde, 0xf7, 0x22, 0x63,
	0xfa, 0x80, 0xcb, 0x0f, 0xa8, 0x6d, 0x03, 0xd4, 0xdb, 0x14, 0x38, 0x39, 0x25, 0xd2, 0xf0, 0x66,
	0x6e, 0xee, 0xe2, 0x64, 0x9d, 0x30, 0x5a, 0x0e, 0xa8, 0xaf, 0x95, 0xbe, 0x62, 0x9d, 0xd4, 0x25,
	0x48, 0xd8, 0x8a, 0x99, 0x64, 0x2f, 0x50, 0x9c, 0x8a, 0x24, 0xe3, 0x11, 0x26, 0x18, 0xc9, 0x1b,
	0x56, 0xcf, 0x0e, 0xe8, 0x0c, 0xde, 0x44, 0xd9, 0x48, 0x6b, 0xe9, 0xa4, 0x67, 0x5e, 0x00, 0x48,
	0x15, 0x79, 0xec, 0x0a, 0x62, 0xc0, 0xff, 0x88, 0x38, 0xc2, 0xcc, 0xfa, 0xad, 0x90, 0x60, 0xf3,
	0x76, 0xed, 0x84, 0x76, 0x89, 0x43, 0x05, 0xd8, 0xff, 0xef, 0x1d, 0x46, 0x9e, 0xf6, 0x2b, 0x74,
	0x3d, 0xba, 0x11, 0xfa, 0x54, 0x81, 0xc3, 0x82, 0x8e, 0xc0, 0x88, 0x3f, 0x12, 0xff, 0x94, 0x40,
	0xfc, 0xbf, 0xc6, 0xa4, 0x18, 0xf4, 0x63, 0x03, 0x0c, 0x3d, 0x19, 0x71, 0x17, 0x19, 0xb6, 0x6e,
	0x9f, 0x9b, 0x92, 0x5a, 0xac, 0xf8, 0x7a, 0x98, 0x27, 0x10, 0xe6, 0x62, 0x1f, 0x94, 0x73, 0xd8,
	0x01, 0xe5, 0x95, 0x8f, 0x7c, 0x2c, 0x34, 0xc7, 0x30, 0x4c, 0x7f, 0x48, 0x1d, 0x77, 0x45, 0x2b,
	0xec, 0x2a, 0x71, 0xc3, 0xd2, 0xfe, 0x52, 0xac, 0x00, 0xdb, 0x5c, 0x17, 0xe3, 0x2e, 0xe3, 0xdf,
	0xbd, 0x4f, 0xa5, 0xdd, 0x84, 0x65, 0xbb, 0x72, 0x00, 0x16, 0xe5, 0xdd, 0xec, 0x39, 0xe4, 0xaf,
	};
 #endif

	unsigned char modulus_[RSA_KEY_SIZE];

 
#if 0
    unsigned char r_[RSA_KEY_SIZE << 1];
#endif

#if 0
    unsigned char r2_[RSA_KEY_SIZE] =
    {
    0x4f, 0x99, 0xc3, 0x04, 0xc0, 0x57, 0x29, 0x09, 0xb3, 0x51, 0xf8, 0xb3, 0x27, 0xd1, 0x5f, 0x16,
    0x32, 0xac, 0x24, 0x17, 0xc9, 0x31, 0xae, 0x30, 0xe4, 0x6f, 0x37, 0x30, 0x60, 0xdb, 0x1a, 0x19,
    0xb0, 0x9f, 0x70, 0x49, 0xa2, 0x6c, 0xf6, 0x5d, 0xf0, 0x26, 0x24, 0x5d, 0x9f, 0x71, 0xbb, 0xf8,
    0xed, 0x19, 0x36, 0xa3, 0x2f, 0x9a, 0x96, 0x39, 0xd6, 0x1d, 0x7b, 0x19, 0x2c, 0xb9, 0x46, 0x24,
    0x6c, 0x98, 0xef, 0x31, 0x30, 0xe8, 0x40, 0xde, 0x5b, 0xd1, 0xfa, 0xae, 0x3c, 0xca, 0x04, 0xf5,
    0xda, 0xe3, 0xdd, 0xc7, 0x89, 0x2d, 0xf1, 0x1c, 0x03, 0xa6, 0x75, 0x89, 0xe2, 0x5e, 0xf0, 0xbb,
    0xfa, 0xa1, 0x0e, 0xd5, 0xc1, 0xc4, 0x95, 0x7c, 0xfd, 0x62, 0xdf, 0x2d, 0x04, 0x3a, 0xea, 0x15,
    0x9e, 0x1f, 0xf5, 0x30, 0xda, 0x19, 0x2f, 0xc3, 0x09, 0x30, 0x36, 0xa4, 0xe3, 0x6a, 0xbb, 0x87,
    0x56, 0xfa, 0x74, 0xc9, 0x8a, 0xd7, 0x11, 0x00, 0xe1, 0xda, 0x64, 0x6b, 0x94, 0x6d, 0x78, 0xe4,
    0xb6, 0x4b, 0x74, 0x2f, 0x4b, 0x75, 0x46, 0x73, 0xd5, 0xf3, 0x72, 0xbe, 0xef, 0xba, 0x55, 0xf1,
    0x48, 0x78, 0x50, 0xf1, 0xc0, 0x7a, 0xfc, 0xa5, 0xe3, 0x8d, 0x92, 0x12, 0x2f, 0xd3, 0xea, 0xa0,
    0x5c, 0x82, 0x32, 0xce, 0x38, 0x4b, 0xad, 0xde, 0x73, 0xe5, 0x13, 0x04, 0x51, 0x31, 0x6f, 0xfb,
    0x75, 0xde, 0xbd, 0x0f, 0x88, 0x27, 0xe0, 0x48, 0x8a, 0x32, 0xef, 0x74, 0xb2, 0x7d, 0xb7, 0x52,
    0x4a, 0x6b, 0x53, 0x1a, 0xa4, 0xd2, 0x3d, 0x98, 0x5d, 0xc4, 0xdd, 0x25, 0xbb, 0x94, 0xd1, 0x6f,
    0xfc, 0xd4, 0xec, 0xc2, 0xe2, 0x27, 0x94, 0x47, 0xdc, 0x63, 0x95, 0x75, 0x43, 0x11, 0x98, 0x68,
    0x1b, 0xb3, 0x49, 0x63, 0x98, 0x7f, 0x63, 0xa0, 0x82, 0x39, 0x27, 0x36, 0xff, 0xec, 0x8e, 0x71,
    };
#endif

void reverse_signature( volatile unsigned char * pcdata )
{
	volatile unsigned char temp;
	unsigned int i;
	for( i = 0; i < 128; i ++ )  {
		temp = pcdata[i];
		pcdata[i] = pcdata[255-i];
		pcdata[255-i] = temp;
	}
}

void reverse_256( volatile unsigned char * pcdata )
{
	volatile unsigned char temp;
	unsigned int i;
	for( i = 0; i < 128; i ++ )  {
		temp = pcdata[i];
		pcdata[i] = pcdata[255-i];
		pcdata[255-i] = temp;
	}
}

unsigned int swap_endian( unsigned int in_data )
{
	unsigned int out_data;
	
	out_data  = ( in_data & 0x000000FF ) << 24;
	out_data |= ( in_data & 0x0000FF00 ) << 8;
	out_data |= ( in_data & 0x00FF0000 ) >> 8;
	out_data |= ( in_data & 0xFF000000 ) >> 24;
	
	return out_data;
}

void swap_endian_256( volatile unsigned int * pcdata )
{
	volatile unsigned int temp;
	unsigned i;
	printf("pcdata addr = 0x%08x\n", pcdata); 
	for( i =0 ; i < (256>>2); i++ ) {
		temp = swap_endian( pcdata[i] );
		pcdata[i] = temp;		
	}
}

int load_binfile( const char * path , char * data)
{
	FILE * fp0;
	
	if (access(path, F_OK)) {
		printf("error! file %s not exist!\n", path);
		return -1;
	}

	fp0 = fopen(path, "rb");
	fread(data , sizeof(char), 256, fp0);

	return 0;
}

int save_binfile_R1( const char * path , char * data)
{
	FILE * fp1;
	int i, j;
	
	fp1 = fopen(path, "wb");
	reverse_256((volatile unsigned char *)data);
	printf("modulus_ data:\n");
	for( int i = 0; i < 16; i++ ) {
		printf("   ");
		for( int j = 0; j < 16; j++ ) {
			printf(" 0x%02x,", data[(i<<4)+j]);
		}
		printf("\n");
	}
	printf("\n");
	swap_endian_256((unsigned int *)data);
	printf("modulus_ data:\n");
	for( int i = 0; i < 16; i++ ) {
		printf("   ");
		for( int j = 0; j < 16; j++ ) {
			printf(" 0x%02x,", data[(i<<4)+j]);
		}
		printf("\n");
	}
	printf("\n");
   	fwrite(data , sizeof(char), 256, fp1);
   	//BN_print_fp(fp,pxRem_bin); 	
	fclose (fp1);

	return 0;
}

int save_binfile_R2( const char * path , char * data)
{

	FILE * fp2;
	fp2 = fopen(path, "wb");
	reverse_signature((volatile unsigned char *)data);
   	fwrite(data , sizeof(char), 256, fp2);
   	//BN_print_fp(fp,pxRem_bin);    	
	fclose (fp2);

	return 0;
}


int test_r2modm(const char * input_file, const char * output_file)
{
	int ret = 0;

	//printf("%s() %d",__FUNCTION__, __LINE__);
		
	if (load_binfile(input_file, (char *)modulus_)) {
		return -1;
	}

    //memset(r_, 0, sizeof(r_));
    
    BN_CTX*  pxCtx = BN_CTX_new();    
    BIGNUM* pxM = BN_new();                
    BIGNUM* pxR = BN_new();                    
    BIGNUM* pxRem = BN_new();  
            
    BN_set_bit(pxR, RSA_BITS<<1);
    BN_bin2bn(modulus_, RSA_KEY_SIZE, pxM);
    
    printf("\n========================pxM=======================\n");
    BN_print_fp(stdout, pxM);
    printf("\n");    
    printf("\n========================pxR2=======================\n");
    BN_print_fp(stdout, pxR);
    printf("\n");    
    
    BN_CTX_start(pxCtx);            
        
    BN_mod(pxRem, pxR, pxM, pxCtx);
    printf("\n========================pxRem=======================\n");
    BN_print_fp(stdout, pxRem);
    printf("\n");    
	
	unsigned char pxRem_bin[512];
	int pxRem_bin_ret;
	pxRem_bin_ret = BN_bn2bin(pxRem, pxRem_bin);
	printf("pxRem_bin_ret=%d\n", pxRem_bin_ret);
	printf("pxRem data:\n");
	for( int i = 0; i < 16; i++ ) {
		printf("   ");
		for( int j = 0; j < 16; j++ ) {
			printf(" 0x%02x,", pxRem_bin[(i<<4)+j]);
		}
		printf("\n");
	}
	printf("\n");
	printf("pxRem data:(reserves)\n");
	for( int i = 0; i < 16; i++ ) {
		printf("   ");
		for( int j = 0; j < 16; j++ ) {
			printf(" 0x%02x,", pxRem_bin[255-((i<<4)+j)]);
		}
		printf("\n");
	}
	printf("\n");
	printf("modulus_ data:\n");
	for( int i = 0; i < 16; i++ ) {
		printf("   ");
		for( int j = 0; j < 16; j++ ) {
			printf(" 0x%02x,", modulus_[(i<<4)+j]);
		}
		printf("\n");
	}
	printf("\n");

#if 1
	save_binfile_R2(output_file, (char *)pxRem_bin);
#endif

#if 0
	save_binfile_R1(output_file ,modulus_);	
#endif
    
    BN_CTX_free(pxCtx);     
    BN_free(pxM);    
    BN_free(pxR); 
    BN_free(pxRem);
}



/*******************************************************************************
 * FUNC : main
 * DESC : main program entry
 * PARM : 
 * RET  : FUNCTION_SUCCESS / FUNCTION_ERROR
 *******************************************************************************/
int main(int argc, char *argv[])
{              
	int ret = 0;
	char filename[128] = {0};
	
	if (argc != 3)
	{
	   printf("Usage: ./r2modm [input filename] [output filename]\r\n");
	   return -1;
	}

    ret = test_r2modm(argv[1], argv[2]);

	snprintf(filename, sizeof(filename),"%s", argv[1]);

	return 0;
}
