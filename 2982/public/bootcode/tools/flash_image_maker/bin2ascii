#! /usr/bin/perl -w
if( defined(@ARGV) )
{
	foreach $arg (@ARGV) {
		($type, $file) = split(/=/, $arg);
		if ($type eq "resetrom") {
			$resetrom = $file;
		} elsif ($type eq "hw_setting") {
			$hw_setting = $file;
		} elsif ($type eq "hash_array") {
			$hash_array = $file;
		} elsif ($type eq "array_signature") {
			$array_signature = $file;
		} elsif ($type eq "ecb_array") {
			$ecb_array = $file;
		} elsif ($type eq "rescue") {
			$rescue = $file;
		} elsif ($type eq "rescue_signature") {
			$rescue_signature = $file;
		} elsif ($type eq "cbc_rescue") {
			$cbc_rescue = $file;
		} elsif ($type eq "hwsetting_sig_image") {
			$hwsetting_sig_image = $file;
		} elsif ($type eq "dcas_key_sig_image") {
			$dcas_key_sig_image = $file;
		} elsif ($type eq "logo") {
			$logo = $file;
		} elsif ($type eq "logo2") {
			$logo2 = $file;
		} elsif ($type eq "logo3") {
			$logo3 = $file;
		} elsif ($type eq "logo4") {
			$logo4 = $file;
		} elsif ($type eq "logo5") {
			$logo5 = $file;
		} elsif ($type eq "logo6") {
			$logo6 = $file;
		} elsif ($type eq "logo7") {
			$logo7 = $file;
		} elsif ($type eq "logo8") {
			$logo8 = $file;
		}
	}

	
	if(defined $resetrom)
    {
		open BINARY, $resetrom or die $!;

		# in the for();
		# (map ord, split //, $bytes) will generate a list
		# $byte is stream data read from file
		# (split //, $byte) will separate $byte into char list (maybe)
		# map will apply ord (to number) to each one in char list
		# then each result after map will put in "$_"


		my $bytes;
		$current = 0;
		$size = -s BINARY;
		($size>>=2); # word number -1
		print ".data\n.globl resetrom\n.globl resetrom_end\nresetrom:\n.word \\\n";
		while ($current < $size)
		{
			read(BINARY, $bytes, 4);
			@a = map ord, split //, $bytes;
			printf "0x%02x%02x%02x%02x", @a;

			$current++;
			if($current < $size)
				{ print ","}
			else
				{ last }

			if($current%4==0)
			{ print "\\\n";}
		}
		print "\nresetrom_end:\n.word 0\n";
    }
	else
	{
		print ".data\n.globl resetrom\n.globl resetrom_end\nresetrom:\n.word \\\n";
        print "\nresetrom_end:\n.word 0\n";
	}
    
    
    open BINARY, $hw_setting or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"


    $current = 0;
    $size = -s BINARY;
    ($size>>=2); # word number -1
    print ".data\n.globl hwsetting\n.globl hwsetting_end\nhwsetting:\n.word \\\n";
    while ($current < $size)
    {
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
 
#       swap endian 
#       printf "0x%02x", @a;
#       printf "%02x", @b;
#       printf "%02x", @c;
#       printf "%02x", @d;

#       remain 
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;
       
        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\nhwsetting_end:\n.word 0\n";
    
    
    

    open BINARY, $hash_array or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"



    $current = 0;
    $size = -s BINARY;
    print ".data\n.globl hasharray\n.globl hasharray_end\nhasharray:\n.word \\\n";
    @len = split(//, sprintf("%08x", $size));
#   Deal with different endian
#   print "0x". $len[6] . $len[7]. $len[4]. $len[5]. $len[2]. $len[3]. $len[0]. $len[1]. ",\\\n";
#   print "0x". $len[0] . $len[1]. $len[2]. $len[3]. $len[4]. $len[5]. $len[6]. $len[7]. ",\\\n";
    ($size>>=2); # word number -1
    while ($current < $size)
    {
        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        printf "0x%02x", @a;
        printf "%02x", @b;
        printf "%02x", @c;
        printf "%02x", @d;
       
#        read(BINARY, $bytes, 4);
#        @a = map ord, split //, $bytes;
#        printf "0x%02x%02x%02x%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\nhasharray_end:\n.word 0\n";
    
    
    
    if(defined $array_signature)
    {
    open BINARY, $array_signature or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"



    $current = 0;
    $size = -s BINARY;
    print ".data\n.globl signature\n.globl signature_end\nsignature:\n.word \\\n";
    @len = split(//, sprintf("%08x", $size));
    #    print "0x". $len[6] . $len[7]. $len[4]. $len[5]. $len[2]. $len[3]. $len[0]. $len[1]. ",\\\n";
    #print "0x". $len[0] . $len[1]. $len[2]. $len[3]. $len[4]. $len[5]. $len[6]. $len[7]. ",\\\n";
    ($size>>=2); # word number -1
    while ($current < $size)
    {
        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        #need inverse
        printf "0x%02x", @d;
        printf "%02x", @c;
        printf "%02x", @b;
        printf "%02x", @a;


    #        read(BINARY, $bytes, 4);
    #        @a = map ord, split //, $bytes;
    #        printf "0x%02x%02x%02x%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\nsignature_end:\n.word 0\n";
    }
    else
    {
    	print ".data\n.globl signature\n.globl signature_end\nsignature:\n.word \\\n";
        print "\nsignature_end:\n.word 0\n";
    }



    if(defined $ecb_array)
    {
    open BINARY, $ecb_array or die $!;

    # in the for();
    # (map ord, split //, $bytes) will generate a list
    # $byte is stream data read from file
    # (split //, $byte) will separate $byte into char list (maybe)
    # map will apply ord (to number) to each one in char list
    # then each result after map will put in "$_"



    $current = 0;
    $size = -s BINARY;
    print ".data\n.globl ecbarray\n.globl ecbarray_end\necbarray:\n.word \\\n";
    @len = split(//, sprintf("%08x", $size));
    #    print "0x". $len[6] . $len[7]. $len[4]. $len[5]. $len[2]. $len[3]. $len[0]. $len[1]. ",\\\n";
    print "0x". $len[0] . $len[1]. $len[2]. $len[3]. $len[4]. $len[5]. $len[6]. $len[7]. ",\\\n";
    ($size>>=2); # word number -1
    while ($current < $size)
    {
        read(BINARY, $bytes, 1);
        @a = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @b = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @c = map ord, split //, $bytes;
        read(BINARY, $bytes, 1);
        @d = map ord, split //, $bytes;
        
        printf "0x%02x", @a;
        printf "%02x", @b;
        printf "%02x", @c;
        printf "%02x", @d;


    #        read(BINARY, $bytes, 4);
    #        @a = map ord, split //, $bytes;
    #        printf "0x%02x%02x%02x%02x", @a;

        $current++;
        if($current < $size)
        { print ","}
        else
        { last }

        if($current%4==0)
        { print "\\\n";}
    }
    print "\necbarray_end:\n.word 0\n";
    }
    else
    {
    	print ".data\n.globl ecbarray\n.globl ecbarray_end\necbarray:\n.word \\\n";
        print "\necbarray_end:\n.word 0\n";
    }

    
    
    if(defined $rescue)
    {
        open BINARY, $rescue or die $!;
        $current = 0;
        $size = -s BINARY;
        #$size--;
        #($size>>=2); # word number 
        #$size++;
        print ".align 0\n";
        print ".globl rescuelinux\n.globl rescuelinux_end\nrescuelinux:\n.byte \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);                                 
            @a = map ord, split //, $bytes;                                 
            #read(BINARY, $bytes, 1);                                 
            #@b = map ord, split //, $bytes;                                 
            #read(BINARY, $bytes, 1);                                 
            #@c = map ord, split //, $bytes;                                 
            #read(BINARY, $bytes, 1);                                 
            #@d = map ord, split //, $bytes;                                 
            
            #printf "0x%02x", @d;
            #printf "%02x", @c;
            #printf "%02x", @b;
            printf "0x%02x", @a;
        
            
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }
        
            if($current%16==0)
            { print "\\\n";}
        }
        print "\nrescuelinux_end:\n.word 0\n";
        print ".align 2\n";
    }
    else
    {
        print ".data\n.globl rescuelinux\n.globl rescuelinux_end\nrescuelinux:\n.word \\\n";
        print "\nrescuelinux_end:\n.word 0\n";
    }
    
    if(defined $rescue_signature)
    {
        open BINARY, $rescue_signature or die $!;
        $current = 0;
        $size = -s BINARY;
        #$size--;
        #($size>>=2); # word number 
        #$size++;
        print ".align 0\n";
        print ".globl linux_signature\n.globl linux_signature_end\nlinux_signature:\n.byte \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);                                 
            @a = map ord, split //, $bytes;                                 
            #read(BINARY, $bytes, 1);                                 
            #@b = map ord, split //, $bytes;                                 
            #read(BINARY, $bytes, 1);                                 
            #@c = map ord, split //, $bytes;                                 
            #read(BINARY, $bytes, 1);                                 
            #@d = map ord, split //, $bytes;                                 
            
            #printf "0x%02x", @d;
            #printf "%02x", @c;
            #printf "%02x", @b;
            printf "0x%02x", @a;
        
            
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }
        
            if($current%16==0)
            { print "\\\n";}
        }
        print "\nlinux_signature_end:\n.word 0\n";
        print ".align 2\n";
    }
    else
    {
        print ".data\n.globl linux_signature\n.globl linux_signature_end\nlinux_signature:\n.word \\\n";
        print "\nlinux_signature_end:\n.word 0\n";
    }
    
    if(defined $cbc_rescue)
    {
        open BINARY, $cbc_rescue or die $!;
        $current = 0;
        $size = -s BINARY;
        print ".align 0\n";
        print ".globl cbc_linux\n.globl cbc_linux_end\ncbc_linux:\n.byte \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);                                 
            @a = map ord, split //, $bytes;                                 
            
            printf "0x%02x", @a;
        
            
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }
        
            if($current%16==0)
            { print "\\\n";}
        }
        print "\ncbc_linux_end:\n.word 0\n";
        print ".align 2\n";
    }
    else
    {
        print ".data\n.globl cbc_linux\n.globl cbc_linux_end\ncbc_linux:\n.word \\\n";
        print "\ncbc_linux_end:\n.word 0\n";
    }
    

    if(defined $hwsetting_sig_image)
    {
        open BINARY, $hwsetting_sig_image or die $!;
    
        # in the for();
        # (map ord, split //, $bytes) will generate a list
        # $byte is stream data read from file
        # (split //, $byte) will separate $byte into char list (maybe)
        # map will apply ord (to number) to each one in char list
        # then each result after map will put in "$_"
    
    
        $current = 0;
        $size = -s BINARY;
        ($size>>=2); # word number -1
        print ".data\n.globl hwsetting_sig_image\n.globl hwsetting_sig_image_end\nhwsetting_sig_image:\n.word \\\n";
        while ($current < $size)
        {
           #read(BINARY, $bytes, 4);
           #@a = map ord, split //, $bytes;
           #printf "0x%02x%02x%02x%02x", @a;
    
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;

	#need inverse
	    #printf "0x%02x", @d;
	    #printf "%02x", @c;
	    #printf "%02x", @b;
	    #printf "%02x", @a;
	    printf "0x%02x", @a;
	    printf "%02x", @b;
	    printf "%02x", @c;
	    printf "%02x", @d;
	    
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }
    
            if($current%4==0)
            { print "\\\n";}
        }
        print "\nhwsetting_sig_image_end:\n.word 0\n";
        print ".align 2\n";
    }
    else
    {
        print ".data\n.globl hwsetting_sig_image\n.globl hwsetting_sig_image_end\nhwsetting_sig_image:\n.word \\\n";
        print "\nhwsetting_sig_image_end:\n.word 0\n";
    }

    if(defined $dcas_key_sig_image)
    {
        open BINARY, $dcas_key_sig_image or die $!;
        $current = 0;
        $size = -s BINARY;

        #$size--;
        ($size>>=2); # word number 
        #$size++;
        print ".align 0\n";
        print ".globl dcas_key_sig_image\n.globl dcas_key_sig_image_end\ndcas_key_sig_image:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;


	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;

            $current++;
            if($current < $size)
            { print ","}
            else
            { last }
        
            if($current%4==0)
            { print "\\\n";}
        }

        print "\ndcas_key_sig_image_end:\n.word 0\n";
        print ".align 2\n";
    }
    else
    {
        print ".data\n.globl dcas_key_sig_image\n.globl dcas_key_sig_image_end\ndcas_key_sig_image:\n.word \\\n";
        print "\ndcas_key_sig_image_end:\n.word 0\n";
    }

    if(defined $logo)
    {
        open BINARY, $logo or die $!;
        $current = 0;
        $size = -s BINARY;
        $size--;
        ($size>>=2); # word number 
        $size++;
        print ".globl logo\n.globl logo_end\nlogo:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;
        
	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;
   
        
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }

            if($current%4==0)
            { print "\\\n";}
        }
        
        print "\nlogo_end:\n.word 0\n";
    }
    else
    {
        print ".data\n.globl logo\n.globl logo_end\nlogo:\n.word \\\n";
        print "\nlogo_end:\n.word 0\n";
    }

    if(defined $logo2)
    {
        open BINARY, $logo2 or die $!;
        $current = 0;
        $size = -s BINARY;
        $size--;
        ($size>>=2); # word number 
        $size++;
        print ".globl logo2\n.globl logo2_end\nlogo2:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;
        
	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;
    
        
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }

            if($current%4==0)
            { print "\\\n";}
        }
        
        print "\nlogo2_end:\n.word 0\n";
    }
    else
    {
        print ".data\n.globl logo2\n.globl logo2_end\nlogo2:\n.word \\\n";
        print "\nlogo2_end:\n.word 0\n";
    }
    
    if(defined $logo3)
    {
        open BINARY, $logo3 or die $!;
        $current = 0;
        $size = -s BINARY;
        $size--;
        ($size>>=2); # word number 
        $size++;
        print ".globl logo3\n.globl logo3_end\nlogo3:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;
        
	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;
    
        
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }

            if($current%4==0)
            { print "\\\n";}
        }
        
        print "\nlogo3_end:\n.word 0\n";
    }
    else
    {
        print ".data\n.globl logo3\n.globl logo3_end\nlogo3:\n.word \\\n";
        print "\nlogo3_end:\n.word 0\n";
    }
    
    if(defined $logo4)
    {
        open BINARY, $logo4 or die $!;
        $current = 0;
        $size = -s BINARY;
        $size--;
        ($size>>=2); # word number 
        $size++;
        print ".globl logo4\n.globl logo4_end\nlogo4:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;
        
	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;
    
        
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }

            if($current%4==0)
            { print "\\\n";}
        }
        
        print "\nlogo4_end:\n.word 0\n";
    }
    else
    {
        print ".data\n.globl logo4\n.globl logo4_end\nlogo4:\n.word \\\n";
        print "\nlogo4_end:\n.word 0\n";
    }
    if(defined $logo5)
    {
        open BINARY, $logo5 or die $!;
        $current = 0;
        $size = -s BINARY;
        $size--;
        ($size>>=2); # word number 
        $size++;
        print ".globl logo5\n.globl logo5_end\nlogo5:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;
        
	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;
    
        
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }

            if($current%4==0)
            { print "\\\n";}
        }
        
        print "\nlogo5_end:\n.word 0\n";
    }
    else
    {
        print ".data\n.globl logo5\n.globl logo5_end\nlogo5:\n.word \\\n";
        print "\nlogo5_end:\n.word 0\n";
    }
    if(defined $logo6)
    {
        open BINARY, $logo6 or die $!;
        $current = 0;
        $size = -s BINARY;
        $size--;
        ($size>>=2); # word number 
        $size++;
        print ".globl logo6\n.globl logo6_end\nlogo6:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;
        
	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;
    
        
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }

            if($current%4==0)
            { print "\\\n";}
        }
        
        print "\nlogo6_end:\n.word 0\n";
    }
    else
    {
        print ".data\n.globl logo6\n.globl logo6_end\nlogo6:\n.word \\\n";
        print "\nlogo6_end:\n.word 0\n";
    }
    if(defined $logo7)
    {
        open BINARY, $logo7 or die $!;
        $current = 0;
        $size = -s BINARY;
        $size--;
        ($size>>=2); # word number 
        $size++;
        print ".globl logo7\n.globl logo7_end\nlogo7:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;
        
	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;
    
        
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }

            if($current%4==0)
            { print "\\\n";}
        }
        
        print "\nlogo7_end:\n.word 0\n";
    }
    else
    {
        print ".data\n.globl logo7\n.globl logo7_end\nlogo7:\n.word \\\n";
        print "\nlogo7_end:\n.word 0\n";
    }
    
    if(defined $logo8)
    {
        open BINARY, $logo8 or die $!;
        $current = 0;
        $size = -s BINARY;
        $size--;
        ($size>>=2); # word number 
        $size++;
        print ".globl logo8\n.globl logo8_end\nlogo8:\n.word \\\n";
        while ($current < $size)
        {
            read(BINARY, $bytes, 1);
            @a = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @b = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @c = map ord, split //, $bytes;
            read(BINARY, $bytes, 1);
            @d = map ord, split //, $bytes;
        
	        printf "0x%02x", @a;
	        printf "%02x", @b;
	        printf "%02x", @c;
	        printf "%02x", @d;
    
        
            $current++;
            if($current < $size)
            { print ","}
            else
            { last }

            if($current%4==0)
            { print "\\\n";}
        }
        
        print "\nlogo8_end:\n.word 0\n";
    }
    else
    {
        print ".data\n.globl logo8\n.globl logo8_end\nlogo8:\n.word \\\n";
        print "\nlogo8_end:\n.word 0\n";
    }  
}
else
{
    print "binary image file need!! \n";
}
